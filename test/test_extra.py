# coding: utf-8

"""
    Aspose.Slides for Cloud API Reference

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import unittest

from test.base_test import BaseTest

import asposeslidescloud
from asposeslidescloud.configuration import Configuration
from asposeslidescloud.rest import ApiException
from asposeslidescloud.models.input import Input
from asposeslidescloud.models.export_format import ExportFormat
from asposeslidescloud.models.output_file import OutputFile
from asposeslidescloud.models.pipeline import Pipeline
from asposeslidescloud.models.chart import Chart
from asposeslidescloud.models.requests.slides_api_requests import PostSlidesPipelineRequest
from asposeslidescloud.models.requests.slides_api_requests import PostSlideSaveAsRequest
from asposeslidescloud.models.requests.slides_api_requests import GetSlideShapeRequest
from asposeslidescloud.models.request_input_file import RequestInputFile
from asposeslidescloud.models.save import Save

class TestExtra(BaseTest):
    """DocumentApi unit test stubs"""

    def setUp(self):
        self.api = asposeslidescloud.apis.slides_api.SlidesApi(self.configuration)  # noqa: E501

    def tearDown(self):
        pass

    def test_pipeline(self):
        """Test case for get_slides_api_info
        """
        file1 = RequestInputFile()
        file1.type = "Request"
        file1.index = 0

        file2 = RequestInputFile()
        file2.type = "Request"
        file2.index = 1

        input = Input()
        input.templateData = file1
        input.template = file2

        output = OutputFile("Response")
        output.type = "Response"

        task = Save()
        task.format = ExportFormat.PPTX
        task.output = output
        task.type = "Save"

        pipeline = Pipeline()
        pipeline.input = input
        pipeline.tasks = [ task ]

        files = {}
        with open("TestData/TemplatingCVDataWithBase64.xml", 'rb') as f:
            files["file1"] = ("TemplatingCVDataWithBase64.xml", f.read())
 
        with open("TestData/TemplateCV.pptx", 'rb') as f:
            files["file2"] = ("TemplateCV.pptx", f.read())

        request = PostSlidesPipelineRequest(pipeline, files)
        result = self.api.post_slides_pipeline(request)
        self.assertTrue(isinstance(result, str))
        self.assertTrue(len(result) > 0)

    def test_timeout(self):
        return # unstable test
        self.initialize('post_slide_save_as', None, None)
        config = Configuration()
        config.app_sid = self.configuration.app_sid
        config.app_key = self.configuration.app_key
        config.base_url = self.configuration.base_url
        config.auth_base_url = self.configuration.auth_base_url
        config.debug = self.configuration.debug
        config.timeout = 1
        api = asposeslidescloud.apis.slides_api.SlidesApi(config)  # noqa: E501
        request = PostSlideSaveAsRequest("test.ppt", 1, "svg", None, None, None, "password", "TempSlidesSDK", None, None)
        result = api.post_slide_save_as(request)

    def test_base_shape(self):
        self.initialize('get_slide_shape', None, None)
        request = GetSlideShapeRequest("test.ppt", 1, 1, "", "password", "TempSlidesSDK", None)
        result = self.api.get_slide_shape(request)
        self.assertEqual("1", result.text)

    def test_chart(self):
        chart = Chart()
        self.assertEqual("Chart", chart.type)
        self.assertEqual("Chart", chart.shape_type)

if __name__ == '__main__':
    unittest.main()
