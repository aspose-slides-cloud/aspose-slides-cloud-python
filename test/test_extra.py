# coding: utf-8

"""
    Aspose.Slides for Cloud API Reference

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import unittest

from test.base_test import BaseTest

import asposeslidescloud
from asposeslidescloud.configuration import Configuration
from asposeslidescloud.rest import ApiException
from asposeslidescloud.models.input import Input
from asposeslidescloud.models.export_format import ExportFormat
from asposeslidescloud.models.output_file import OutputFile
from asposeslidescloud.models.pipeline import Pipeline
from asposeslidescloud.models.chart import Chart
from asposeslidescloud.models.chart_title import ChartTitle
from asposeslidescloud.models.one_value_series import OneValueSeries
from asposeslidescloud.models.one_value_chart_data_point import OneValueChartDataPoint
from asposeslidescloud.models.axes import Axes
from asposeslidescloud.models.axis import Axis
from asposeslidescloud.models.requests.slides_api_requests import PostSlidesPipelineRequest
from asposeslidescloud.models.requests.slides_api_requests import PostSlideSaveAsRequest
from asposeslidescloud.models.requests.slides_api_requests import GetSlideShapeRequest
from asposeslidescloud.models.request_input_file import RequestInputFile
from asposeslidescloud.models.save import Save

class TestExtra(BaseTest):
    """DocumentApi unit test stubs"""

    def setUp(self):
        self.api = asposeslidescloud.apis.slides_api.SlidesApi(self.configuration)  # noqa: E501

    def tearDown(self):
        pass

    def test_pipeline(self):
        """Test case for get_slides_api_info
        """
        file1 = RequestInputFile()
        file1.type = "Request"
        file1.index = 0

        file2 = RequestInputFile()
        file2.type = "Request"
        file2.index = 1

        input = Input()
        input.templateData = file1
        input.template = file2

        output = OutputFile("Response")
        output.type = "Response"

        task = Save()
        task.format = ExportFormat.PPTX
        task.output = output
        task.type = "Save"

        pipeline = Pipeline()
        pipeline.input = input
        pipeline.tasks = [ task ]

        files = {}
        with open("TestData/TemplatingCVDataWithBase64.xml", 'rb') as f:
            files["file1"] = ("TemplatingCVDataWithBase64.xml", f.read())
 
        with open("TestData/TemplateCV.pptx", 'rb') as f:
            files["file2"] = ("TemplateCV.pptx", f.read())

        request = PostSlidesPipelineRequest(pipeline, files)
        result = self.api.post_slides_pipeline(request)
        self.assertTrue(isinstance(result, str))
        self.assertTrue(len(result) > 0)

    def test_timeout(self):
        return # unstable test
        self.initialize('post_slide_save_as', None, None)
        config = Configuration()
        config.app_sid = self.configuration.app_sid
        config.app_key = self.configuration.app_key
        config.base_url = self.configuration.base_url
        config.auth_base_url = self.configuration.auth_base_url
        config.debug = self.configuration.debug
        config.timeout = 1
        api = asposeslidescloud.apis.slides_api.SlidesApi(config)  # noqa: E501
        request = PostSlideSaveAsRequest("test.ppt", 1, "svg", None, None, None, "password", "TempSlidesSDK", None, None)
        result = api.post_slide_save_as(request)

    def test_base_shape(self):
        self.initialize('get_slide_shape', None, None)
        request = GetSlideShapeRequest("test.ppt", 1, 1, "password", "TempSlidesSDK", None)
        result = self.api.get_slide_shape(request)
        self.assertEqual("1", result.text)

    def test_chart(self):
        chart = Chart()
        self.assertEqual("Chart", chart.type)
        self.assertEqual("Chart", chart.shape_type)

    def test_nullable_properties(self):
        folder_name = "TempSlidesSDK";
        file_name = "placeholders.pptx";
        password = "password";
        min1  = 44.3;
        min2 = 12;
        max1 = 104.3;
        max2 = 87;
        self.initialize('no_method', 'no_property', None)
        copy_request = asposeslidescloud.models.requests.slides_api_requests.CopyFileRequest("TempTests/" + file_name, folder_name + "/" + file_name, None)
        BaseTest.slides_api.copy_file(copy_request)

        test_dto = Chart()
        test_dto.chart_type = "Line"
        test_dto.width = 400
        test_dto.height = 300
        test_title = ChartTitle()
        test_title.has_title = True
        test_title.text = "MyTitle"
        test_dto.title = test_title
        test_series = OneValueSeries()
        test_series.type = "ClusteredColumn"
        test_series.data_point_type = "OneValue"
        test_series.name = "Series1"
        test_point1 = OneValueChartDataPoint
        test_point1.value = 40
        test_point2 = OneValueChartDataPoint()
        test_point2.value = 50
        test_series.data_points = [ test_point1, test_point2 ]
        test_dto.series = ([test_series])
        test_axes = Axes()
        test_axis = Axis()
        test_axis.is_automatic_min_value = False
        test_axis.min_value = min1
        test_axis.is_automatic_max_value = False
        test_axis.max_value = max1
        test_axes.horizontal_axis = test_axis
        test_dto.axes = test_axes
        post_request = asposeslidescloud.models.requests.slides_api_requests.PostAddNewShapeRequest(file_name, 1, test_dto, password, folder_name, None, None, None)
        result = BaseTest.slides_api.post_add_new_shape(post_request)

        get_request = asposeslidescloud.models.requests.slides_api_requests.GetSlideShapeRequest(file_name, 1, 4, password, folder_name, None)
        result = BaseTest.slides_api.get_slide_shape(get_request)
        self.assertEqual(min1, result.axes.horizontal_axis.min_value)
        self.assertEqual(max1, result.axes.horizontal_axis.max_value)

        test_dto = Chart()
        test_axes = Axes()
        test_axis = Axis()
        test_axis.min_value = min2
        test_axes.horizontal_axis = test_axis
        test_dto.axes = test_axes
        put_request = asposeslidescloud.models.requests.slides_api_requests.PutSlideShapeInfoRequest(file_name, 1, 4, test_dto, password, folder_name)
        result = BaseTest.slides_api.put_slide_shape_info(put_request)

        result = BaseTest.slides_api.get_slide_shape(get_request)
        self.assertEqual(min2, result.axes.horizontal_axis.min_value)
        self.assertEqual(max1, result.axes.horizontal_axis.max_value)

        test_axis = Axis()
        test_axis.max_value = max2
        test_axes.horizontal_axis = test_axis
        test_dto.axes = test_axes
        result = BaseTest.slides_api.put_slide_shape_info(put_request)

        result = BaseTest.slides_api.get_slide_shape(get_request)
        self.assertEqual(min2, result.axes.horizontal_axis.min_value)
        self.assertEqual(max2, result.axes.horizontal_axis.max_value)

    def test_good_auth(self):
        config = Configuration()
        config.app_sid = self.configuration.app_sid
        config.app_key = self.configuration.app_key
        config.base_url = self.configuration.base_url
        config.auth_base_url = self.configuration.auth_base_url
        config.debug = self.configuration.debug
        api = asposeslidescloud.apis.slides_api.SlidesApi(config)
        api.get_slides_api_info()

    def test_bad_auth(self):
        config = Configuration()
        config.app_sid = "invalid"
        config.app_key = self.configuration.app_key
        config.base_url = self.configuration.base_url
        config.auth_base_url = self.configuration.auth_base_url
        config.debug = self.configuration.debug
        try:
            api = asposeslidescloud.apis.slides_api.SlidesApi(config)
            api.get_slides_api_info()
            self.fail("Must have failed")
        except ApiException as ex:
            self.assertEqual(401, ex.status)

    def test_good_token(self):
        config = Configuration()
        config.app_sid = self.configuration.app_sid
        config.app_key = self.configuration.app_key
        config.base_url = self.configuration.base_url
        config.auth_base_url = self.configuration.auth_base_url
        config.debug = self.configuration.debug
        api = asposeslidescloud.apis.slides_api.SlidesApi(config)
        api.get_slides_api_info()
        config.app_sid = "invalid"
        api = asposeslidescloud.apis.slides_api.SlidesApi(config)
        api.get_slides_api_info()

    def test_bad_token(self):
        config = Configuration()
        config.app_sid = self.configuration.app_sid
        config.app_key = self.configuration.app_key
        config.base_url = self.configuration.base_url
        config.auth_base_url = self.configuration.auth_base_url
        config.debug = self.configuration.debug
        config.access_token = "invalid"
        api = asposeslidescloud.apis.slides_api.SlidesApi(config)
        api.get_slides_api_info()

if __name__ == '__main__':
    unittest.main()
