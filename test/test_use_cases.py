# coding: utf-8

"""
    Aspose.Slides for Cloud API Reference

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import os
import base64
from zipfile import ZipFile

import unittest

from test.base_test import BaseTest

import asposeslidescloud
from asposeslidescloud.configuration import Configuration
from asposeslidescloud.rest import ApiException
from asposeslidescloud.models.resource_uri import ResourceUri
from asposeslidescloud.models.input import Input
from asposeslidescloud.models.export_format import ExportFormat
from asposeslidescloud.models.pdf_export_options import PdfExportOptions
from asposeslidescloud.models.image_export_options import ImageExportOptions
from asposeslidescloud.models.presentations_merge_request import PresentationsMergeRequest
from asposeslidescloud.models.ordered_merge_request import OrderedMergeRequest
from asposeslidescloud.models.presentation_to_merge import PresentationToMerge
from asposeslidescloud.models.output_file import OutputFile
from asposeslidescloud.models.pipeline import Pipeline
from asposeslidescloud.models.sections import Sections
from asposeslidescloud.models.section import Section
from asposeslidescloud.models.header_footer import HeaderFooter
from asposeslidescloud.models.notes_slide_header_footer import NotesSlideHeaderFooter
from asposeslidescloud.models.slide_properties import SlideProperties
from asposeslidescloud.models.protection_properties import ProtectionProperties
from asposeslidescloud.models.document_properties import DocumentProperties
from asposeslidescloud.models.document_property import DocumentProperty
from asposeslidescloud.models.shape import Shape
from asposeslidescloud.models.paragraph import Paragraph
from asposeslidescloud.models.portion import Portion
from asposeslidescloud.models.slide_animation import SlideAnimation
from asposeslidescloud.models.interactive_sequence import InteractiveSequence
from asposeslidescloud.models.effect import Effect
from asposeslidescloud.models.picture_frame import PictureFrame
from asposeslidescloud.models.line_format import LineFormat
from asposeslidescloud.models.solid_fill import SolidFill
from asposeslidescloud.models.picture_fill import PictureFill
from asposeslidescloud.models.effect_format import EffectFormat
from asposeslidescloud.models.three_d_format import ThreeDFormat
from asposeslidescloud.models.inner_shadow_effect import InnerShadowEffect
from asposeslidescloud.models.camera import Camera
from asposeslidescloud.models.shape_bevel import ShapeBevel
from asposeslidescloud.models.light_rig import LightRig
from asposeslidescloud.models.audio_frame import AudioFrame
from asposeslidescloud.models.video_frame import VideoFrame
from asposeslidescloud.models.ole_object_frame import OleObjectFrame
from asposeslidescloud.models.graphical_object import GraphicalObject
from asposeslidescloud.models.group_shape import GroupShape
from asposeslidescloud.models.smart_art import SmartArt
from asposeslidescloud.models.smart_art_node import SmartArtNode
from asposeslidescloud.models.table import Table
from asposeslidescloud.models.table_row import TableRow
from asposeslidescloud.models.table_cell import TableCell
from asposeslidescloud.models.table_column import TableColumn
from asposeslidescloud.models.chart import Chart
from asposeslidescloud.models.chart_title import ChartTitle
from asposeslidescloud.models.one_value_series import OneValueSeries
from asposeslidescloud.models.one_value_chart_data_point import OneValueChartDataPoint
from asposeslidescloud.models.chart_category import ChartCategory
from asposeslidescloud.models.axes import Axes
from asposeslidescloud.models.axis import Axis
from asposeslidescloud.models.connector import Connector
from asposeslidescloud.models.request_input_file import RequestInputFile
from asposeslidescloud.models.save import Save

class TestUseCases(BaseTest):
    """DocumentApi unit test stubs"""

    def setUp(self):
        self.api = asposeslidescloud.apis.slides_api.SlidesApi(self.configuration)  # noqa: E501

    def tearDown(self):
        pass

    def test_create_empty(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.delete_file(folder_name + "/" + file_name)
        BaseTest.slides_api.create_presentation(file_name, None, None, None, folder_name)

    def test_create_from_request(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.delete_file(folder_name + "/" + file_name)
        with open("TestData/" + file_name, 'rb') as f:
            source = f.read()
        BaseTest.slides_api.create_presentation(file_name, source, "password", None, folder_name)

    def test_create_from_storage(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        new_file_name = "test2.pptx"
        BaseTest.slides_api.delete_file(folder_name + "/" + new_file_name)
        source_path = folder_name + "/" + file_name
        BaseTest.slides_api.copy_file("TempTests/" + file_name, source_path)
        BaseTest.slides_api.create_presentation_from_source(new_file_name, source_path, "password", None, None, folder_name)

    def test_create_from_template(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        template_file_name = "TemplateCV.pptx"
        BaseTest.slides_api.delete_file(folder_name + "/" + file_name)
        template_path = folder_name + "/" + template_file_name
        BaseTest.slides_api.copy_file("TempTests/" + template_file_name, template_path)
        data = "<staff><person><name>John Doe</name><address><line1>10 Downing Street</line1><line2>London</line2></address><phone>+457 123456</phone><bio>Hi, I'm John and this is my CV</bio><skills><skill><title>C#</title><level>Excellent</level></skill><skill><title>C++</title><level>Good</level></skill><skill><title>Java</title><level>Average</level></skill></skills></person></staff>"
        BaseTest.slides_api.create_presentation_from_template(file_name, template_path, data, None, None, None, None, folder_name)

    def test_create_from_html(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.delete_file(folder_name + "/" + file_name)
        BaseTest.slides_api.import_from_html(file_name, "<html><body>New Content</body></html>", None, folder_name)

    def test_append_from_html(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        password = "password"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        slideCount = len(BaseTest.slides_api.get_slides(file_name, password, folder_name).slide_list)
        BaseTest.slides_api.import_from_html(file_name, "<html><body>New Content</body></html>", password, folder_name)
        newSlideCount = len(BaseTest.slides_api.get_slides(file_name, password, folder_name).slide_list)
        self.assertEqual(slideCount + 1, newSlideCount)

    def test_create_from_pdf(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.delete_file(folder_name + "/" + file_name)
        with open("TestData/test.pdf", 'rb') as f:
            source = f.read()
        BaseTest.slides_api.import_from_pdf(file_name, source, None, folder_name)

    def test_append_from_pdf(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        password = "password"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        slideCount = len(BaseTest.slides_api.get_slides(file_name, password, folder_name).slide_list)
        with open("TestData/test.pdf", 'rb') as f:
            source = f.read()
        BaseTest.slides_api.import_from_pdf(file_name, source, password, folder_name)
        newSlideCount = len(BaseTest.slides_api.get_slides(file_name, password, folder_name).slide_list)
        self.assertEqual(slideCount + 4, newSlideCount)

    def test_convert_post_from_request(self):
        with open("TestData/test.pptx", 'rb') as f:
            source = f.read()
        result = BaseTest.slides_api.convert(source, 'pdf', "password")
        result_slides = BaseTest.slides_api.convert(source, 'pdf', "password", None, None, [ 2, 4 ])
        self.assertGreater(os.path.getsize(result), os.path.getsize(result_slides))

    def test_convert_put_from_request(self):
        out_path = "TestData/test.pdf"
        with open("TestData/test.pptx", 'rb') as f:
            source = f.read()
        BaseTest.slides_api.convert_and_save(source, 'pdf', out_path, "password")
        self.assertTrue(BaseTest.slides_api.object_exists(out_path).exists)

    def test_convert_post_from_storage(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pdf"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        BaseTest.slides_api.download_presentation(file_name, 'html5', None, "password", folder_name)

    def test_convert_put_from_storage(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        out_path = "TestData/test.pdf"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        BaseTest.slides_api.save_presentation(file_name, 'pdf', out_path, None, "password", folder_name)
        self.assertTrue(BaseTest.slides_api.object_exists(out_path).exists)

    def test_convert_with_options_from_request(self):
        with open("TestData/test.pptx", 'rb') as f:
            source = f.read()
        result = BaseTest.slides_api.convert(source, 'pdf', "password")
        options = PdfExportOptions()
        options.draw_slides_frame = True
        result_with_options = BaseTest.slides_api.convert(source, 'pdf', "password", None, None, None, options)
        self.assertNotEqual(os.path.getsize(result), os.path.getsize(result_with_options))

    def test_convert_with_options_from_storage(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        result = BaseTest.slides_api.download_presentation(file_name, 'png', None, "password", folder_name)
        options = ImageExportOptions()
        options.width = 480
        options.height = 360
        result_with_options = BaseTest.slides_api.download_presentation(file_name, 'png', options, "password", folder_name)
        self.assertGreater(os.path.getsize(result), os.path.getsize(result_with_options))

    def test_convert_slide_post_from_request(self):
        with open("TestData/test.pptx", 'rb') as f:
            source = f.read()
        BaseTest.slides_api.download_slide_online(source, 1, 'pdf', None, None, "password")

    def test_convert_slide_put_from_request(self):
        out_path = "TestData/test.pdf"
        with open("TestData/test.pptx", 'rb') as f:
            source = f.read()
        BaseTest.slides_api.save_slide_online(source, 1, 'pdf', out_path, None, None, "password")
        self.assertTrue(BaseTest.slides_api.object_exists(out_path).exists)

    def test_convert_slide_post_from_storage(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        BaseTest.slides_api.download_slide(file_name, 1, 'pdf', None, None, None, "password", folder_name)

    def test_convert_slide_put_from_storage(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        out_path = "TestData/test.pdf"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        BaseTest.slides_api.save_slide(file_name, 1, 'pdf', out_path, None, None, None, "password", folder_name)
        self.assertTrue(BaseTest.slides_api.object_exists(out_path).exists)

    def test_convert_slide_with_options_from_request(self):
        with open("TestData/test.pptx", 'rb') as f:
            source = f.read()
        result = BaseTest.slides_api.download_slide_online(source, 1, 'pdf', None, None, "password")
        options = PdfExportOptions()
        options.draw_slides_frame = True
        result_with_options = BaseTest.slides_api.download_slide_online(source, 1, 'pdf', None, None, "password", None, None, options)
        self.assertNotEqual(os.path.getsize(result), os.path.getsize(result_with_options))

    def test_convert_slide_with_options_from_storage(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        result = BaseTest.slides_api.download_slide(file_name, 1, 'pdf', None, None, None, "password", folder_name)
        options = PdfExportOptions()
        options.draw_slides_frame = True
        result_with_options = BaseTest.slides_api.download_slide(file_name, 1, 'pdf', options, None, None, "password", folder_name)
        self.assertNotEqual(os.path.getsize(result), os.path.getsize(result_with_options))

    def test_convert_shape_post_from_request(self):
        with open("TestData/test.pptx", 'rb') as f:
            source = f.read()
        BaseTest.slides_api.download_shape_online(source, 1, 3, 'png', None, None, None, "password")

    def test_convert_shape_put_from_request(self):
        out_path = "TestData/test.pdf"
        with open("TestData/test.pptx", 'rb') as f:
            source = f.read()
        BaseTest.slides_api.save_shape_online(source, 1, 1, 'png', out_path, None, None, None, "password")
        self.assertTrue(BaseTest.slides_api.object_exists(out_path).exists)

    def test_convert_shape_post_from_storage(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        BaseTest.slides_api.download_shape(file_name, 1, 1, 'png', None, None, None, None, "password", folder_name)

    def test_convert_shape_put_from_storage(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        out_path = "TestData/test.png"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        BaseTest.slides_api.save_shape(file_name, 1, 1, 'png', out_path, None, None, None, None, "password", folder_name)
        self.assertTrue(BaseTest.slides_api.object_exists(out_path).exists)

    def test_notes_slide_get_from_storage(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        result = BaseTest.slides_api.get_notes_slide(file_name, 1, "password", folder_name)
        self.assertTrue(result.text)

    def test_notes_slide_exists_from_storage(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        result = BaseTest.slides_api.notes_slide_exists(file_name, 1, "password", folder_name)
        self.assertTrue(result.exists)

    def test_notes_slide_download_from_storage(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        BaseTest.slides_api.download_notes_slide(file_name, 1, 'png', None, None, "password", folder_name)

    def test_notes_slide_get_from_request(self):
        with open("TestData/test.pptx", 'rb') as f:
            source = f.read()
        result = BaseTest.slides_api.get_notes_slide_online(source, 1, "password")
        self.assertTrue(result.text)

    def test_notes_slide_exists_from_request(self):
        with open("TestData/test.pptx", 'rb') as f:
            source = f.read()
        result = BaseTest.slides_api.notes_slide_exists_online(source, 1, "password")
        self.assertTrue(result.exists)

    def test_notes_slide_download_from_request(self):
        with open("TestData/test.pptx", 'rb') as f:
            source = f.read()
        BaseTest.slides_api.download_notes_slide_online(source, 1, 'png', None, None, "password")

    def test_notes_slide_shapes(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        password = "password"
        slide_index = 1
        shape_count = 3
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)

        shapes = BaseTest.slides_api.get_special_slide_shapes(file_name, slide_index, 'notesSlide', password, folder_name)
        self.assertEqual(shape_count, len(shapes.shapes_links))

        dto = Shape()
        dto.x = 100
        dto.y = 100
        dto.width = 500
        dto.height = 200
        dto.shape_type = "Rectangle"
        dto.text = "New shape"
        shape = BaseTest.slides_api.create_special_slide_shape(file_name, slide_index, 'notesSlide', dto, None, None, password, folder_name)
        self.assertEqual(dto.text, shape.text)
        shapes = BaseTest.slides_api.get_special_slide_shapes(file_name, slide_index, 'notesSlide', password, folder_name)
        self.assertEqual(shape_count + 1, len(shapes.shapes_links))

        dto.Text = "updated shape"
        shape = BaseTest.slides_api.update_special_slide_shape(file_name, slide_index, 'notesSlide', shape_count + 1, dto, password, folder_name)
        self.assertEqual(dto.text, shape.text)
        shapes = BaseTest.slides_api.get_special_slide_shapes(file_name, slide_index, 'notesSlide', password, folder_name)
        self.assertEqual(shape_count + 1, len(shapes.shapes_links))

        BaseTest.slides_api.delete_special_slide_shape(file_name, slide_index, 'notesSlide', shape_count + 1, password, folder_name)
        shapes = BaseTest.slides_api.get_special_slide_shapes(file_name, slide_index, 'notesSlide', password, folder_name)
        self.assertEqual(shape_count, len(shapes.shapes_links))

    def test_notes_slide_paragraphs(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        password = "password"
        slide_index = 1
        shape_index = 2
        paragraph_count = 1
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)

        paragraphs = BaseTest.slides_api.get_special_slide_paragraphs(file_name, slide_index, 'notesSlide', shape_index, password, folder_name)
        self.assertEqual(paragraph_count, len(paragraphs.paragraph_links))

        portion = Portion()
        portion.text = "New Paragraph"
        dto = Paragraph()
        dto.alignment = "Right"
        dto.portion_list = [ portion ]
        paragraph = BaseTest.slides_api.create_special_slide_paragraph(file_name, slide_index, 'notesSlide', shape_index, dto, None, password, folder_name)
        self.assertEqual(dto.alignment, paragraph.alignment)
        paragraphs = BaseTest.slides_api.get_special_slide_paragraphs(file_name, slide_index, 'notesSlide', shape_index, password, folder_name)
        self.assertEqual(paragraph_count + 1, len(paragraphs.paragraph_links))

        dto = Paragraph()
        dto.alignment = "Center"
        paragraph = BaseTest.slides_api.update_special_slide_paragraph(file_name, slide_index, 'notesSlide', shape_index, paragraph_count + 1, dto, password, folder_name)
        self.assertEqual(dto.alignment, paragraph.alignment)
        paragraphs = BaseTest.slides_api.get_special_slide_paragraphs(file_name, slide_index, 'notesSlide', shape_index, password, folder_name)
        self.assertEqual(paragraph_count + 1, len(paragraphs.paragraph_links))

        BaseTest.slides_api.delete_special_slide_paragraph(file_name, slide_index, 'notesSlide', shape_index, paragraph_count + 1, password, folder_name)
        paragraphs = BaseTest.slides_api.get_special_slide_paragraphs(file_name, slide_index, 'notesSlide', shape_index, password, folder_name)
        self.assertEqual(paragraph_count, len(paragraphs.paragraph_links))

    def test_notes_slide_portions(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        password = "password"
        slide_index = 1
        shape_index = 2
        paragraph_index = 1
        portion_count = 1
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)

        portions = BaseTest.slides_api.get_special_slide_portions(file_name, slide_index, 'notesSlide', shape_index, paragraph_index, password, folder_name)
        self.assertEqual(portion_count, len(portions.items))

        dto = Portion()
        dto.text = "New portion"
        dto.font_bold = "True"
        portion = BaseTest.slides_api.create_special_slide_portion(file_name, slide_index, 'notesSlide', shape_index, paragraph_index, dto, None, password, folder_name)
        self.assertEqual(dto.font_bold, portion.font_bold)
        self.assertEqual(dto.text, portion.text)
        portions = BaseTest.slides_api.get_special_slide_portions(file_name, slide_index, 'notesSlide', shape_index, paragraph_index, password, folder_name)
        self.assertEqual(portion_count + 1, len(portions.items))

        dto2 = Portion()
        dto2.text = "Updated portion"
        dto2.font_height = 22
        portion = BaseTest.slides_api.update_special_slide_portion(file_name, slide_index, 'notesSlide', shape_index, paragraph_index, portion_count + 1, dto2, password, folder_name)
        self.assertEqual(dto.font_bold, portion.font_bold)
        self.assertEqual(dto2.font_height, portion.font_height)
        self.assertEqual(dto2.text, portion.text)
        portions = BaseTest.slides_api.get_special_slide_portions(file_name, slide_index, 'notesSlide', shape_index, paragraph_index, password, folder_name)
        self.assertEqual(portion_count + 1, len(portions.items))

        BaseTest.slides_api.delete_special_slide_portion(file_name, slide_index, 'notesSlide', shape_index, paragraph_index, portion_count + 1, password, folder_name)
        portions = BaseTest.slides_api.get_special_slide_portions(file_name, slide_index, 'notesSlide', shape_index, paragraph_index, password, folder_name)
        self.assertEqual(portion_count, len(portions.items))

    def test_master_slides(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        source_file = "TemplateCV.pptx"
        source_path = folder_name + "/" + source_file
        password = "password"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        BaseTest.slides_api.copy_file("TempTests/" + source_file, source_path)

        master_slides = BaseTest.slides_api.get_master_slides(file_name, password, folder_name)
        self.assertEqual(1, len(master_slides.slide_list))

        master_slide = BaseTest.slides_api.get_master_slide(file_name, 1, password, folder_name)
        self.assertEqual("Office Theme", master_slide.name)

        master_slide = BaseTest.slides_api.copy_master_slide(file_name, source_path, 1, None, None, None, password, folder_name)
        self.assertEqual("Digital portfolio", master_slide.name)

        master_slides = BaseTest.slides_api.get_master_slides(file_name, password, folder_name)
        self.assertEqual(2, len(master_slides.slide_list))

    def test_master_slide_shapes(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        password = "password"
        slide_index = 1
        shape_count = 6
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)

        shapes = BaseTest.slides_api.get_special_slide_shapes(file_name, slide_index, 'masterSlide', password, folder_name)
        self.assertEqual(shape_count, len(shapes.shapes_links))

        dto = Shape()
        dto.x = 100
        dto.y = 100
        dto.width = 500
        dto.height = 200
        dto.shape_type = "Rectangle"
        dto.text = "New shape"
        shape = BaseTest.slides_api.create_special_slide_shape(file_name, slide_index, 'masterSlide', dto, None, None, password, folder_name)
        self.assertEqual(dto.text, shape.text)
        shapes = BaseTest.slides_api.get_special_slide_shapes(file_name, slide_index, 'masterSlide', password, folder_name)
        self.assertEqual(shape_count + 1, len(shapes.shapes_links))

        dto.Text = "updated shape"
        shape = BaseTest.slides_api.update_special_slide_shape(file_name, slide_index, 'masterSlide', shape_count + 1, dto, password, folder_name)
        self.assertEqual(dto.text, shape.text)
        shapes = BaseTest.slides_api.get_special_slide_shapes(file_name, slide_index, 'masterSlide', password, folder_name)
        self.assertEqual(shape_count + 1, len(shapes.shapes_links))

        BaseTest.slides_api.delete_special_slide_shape(file_name, slide_index, 'masterSlide', shape_count + 1, password, folder_name)
        shapes = BaseTest.slides_api.get_special_slide_shapes(file_name, slide_index, 'masterSlide', password, folder_name)
        self.assertEqual(shape_count, len(shapes.shapes_links))

    def test_master_slide_paragraphs(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        password = "password"
        slide_index = 1
        shape_index = 2
        paragraph_count = 5
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)

        paragraphs = BaseTest.slides_api.get_special_slide_paragraphs(file_name, slide_index, 'masterSlide', shape_index, password, folder_name)
        self.assertEqual(paragraph_count, len(paragraphs.paragraph_links))

        portion = Portion()
        portion.text = "New Paragraph"
        dto = Paragraph()
        dto.alignment = "Right"
        dto.portion_list = [ portion ]
        paragraph = BaseTest.slides_api.create_special_slide_paragraph(file_name, slide_index, 'masterSlide', shape_index, dto, None, password, folder_name)
        self.assertEqual(dto.alignment, paragraph.alignment)
        paragraphs = BaseTest.slides_api.get_special_slide_paragraphs(file_name, slide_index, 'masterSlide', shape_index, password, folder_name)
        self.assertEqual(paragraph_count + 1, len(paragraphs.paragraph_links))

        dto = Paragraph()
        dto.alignment = "Center"
        paragraph = BaseTest.slides_api.update_special_slide_paragraph(file_name, slide_index, 'masterSlide', shape_index, paragraph_count + 1, dto, password, folder_name)
        self.assertEqual(dto.alignment, paragraph.alignment)
        paragraphs = BaseTest.slides_api.get_special_slide_paragraphs(file_name, slide_index, 'masterSlide', shape_index, password, folder_name)
        self.assertEqual(paragraph_count + 1, len(paragraphs.paragraph_links))

        BaseTest.slides_api.delete_special_slide_paragraph(file_name, slide_index, 'masterSlide', shape_index, paragraph_count + 1, password, folder_name)
        paragraphs = BaseTest.slides_api.get_special_slide_paragraphs(file_name, slide_index, 'masterSlide', shape_index, password, folder_name)
        self.assertEqual(paragraph_count, len(paragraphs.paragraph_links))

    def test_master_slide_portions(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        password = "password"
        slide_index = 1
        shape_index = 2
        paragraph_index = 3
        portion_count = 1
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)

        portions = BaseTest.slides_api.get_special_slide_portions(file_name, slide_index, 'masterSlide', shape_index, paragraph_index, password, folder_name)
        self.assertEqual(portion_count, len(portions.items))

        dto = Portion()
        dto.text = "New portion"
        dto.font_bold = "True"
        portion = BaseTest.slides_api.create_special_slide_portion(file_name, slide_index, 'masterSlide', shape_index, paragraph_index, dto, None, password, folder_name)
        self.assertEqual(dto.font_bold, portion.font_bold)
        self.assertEqual(dto.text, portion.text)
        portions = BaseTest.slides_api.get_special_slide_portions(file_name, slide_index, 'masterSlide', shape_index, paragraph_index, password, folder_name)
        self.assertEqual(portion_count + 1, len(portions.items))

        dto2 = Portion()
        dto2.text = "Updated portion"
        dto2.font_height = 22
        portion = BaseTest.slides_api.update_special_slide_portion(file_name, slide_index, 'masterSlide', shape_index, paragraph_index, portion_count + 1, dto2, password, folder_name)
        self.assertEqual(dto.font_bold, portion.font_bold)
        self.assertEqual(dto2.font_height, portion.font_height)
        self.assertEqual(dto2.text, portion.text)
        portions = BaseTest.slides_api.get_special_slide_portions(file_name, slide_index, 'masterSlide', shape_index, paragraph_index, password, folder_name)
        self.assertEqual(portion_count + 1, len(portions.items))

        BaseTest.slides_api.delete_special_slide_portion(file_name, slide_index, 'masterSlide', shape_index, paragraph_index, portion_count + 1, password, folder_name)
        portions = BaseTest.slides_api.get_special_slide_portions(file_name, slide_index, 'masterSlide', shape_index, paragraph_index, password, folder_name)
        self.assertEqual(portion_count, len(portions.items))

    def test_master_slide_animation(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        password = "password"
        slide_index = 1
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)

        animation = BaseTest.slides_api.get_special_slide_animation(file_name, slide_index, 'masterSlide', None, None, password, folder_name)
        self.assertEqual(1, len(animation.main_sequence))

        effect1 = Effect()
        effect1.type = "Blink"
        effect1.shape_index = 2

        effect2 = Effect()
        effect2.type = "Appear"
        effect2.shape_index = 3

        dto = SlideAnimation()
        dto.main_sequence = [ effect1, effect2 ]
        animation = BaseTest.slides_api.set_special_slide_animation(file_name, slide_index, 'masterSlide', dto, password, folder_name)
        self.assertEqual(len(dto.main_sequence), len(animation.main_sequence))

        animation = BaseTest.slides_api.get_special_slide_animation(file_name, slide_index, 'masterSlide', 3, None, password, folder_name)
        self.assertEqual(1, len(animation.main_sequence))

        BaseTest.slides_api.delete_special_slide_animation_effect(file_name, slide_index, 'masterSlide', 2, password, folder_name)
        self.assertEqual(len(dto.main_sequence) - 1, len(animation.main_sequence))

        animation = BaseTest.slides_api.get_special_slide_animation(file_name, slide_index, 'masterSlide', 3, None, password, folder_name)
        self.assertEqual(0, len(animation.main_sequence))

        BaseTest.slides_api.delete_special_slide_animation(file_name, slide_index, 'masterSlide', password, folder_name)
        self.assertEqual(0, len(animation.main_sequence))

    def test_layout_slides(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        source_file = "TemplateCV.pptx"
        source_path = folder_name + "/" + source_file
        password = "password"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        BaseTest.slides_api.copy_file("TempTests/" + source_file, source_path)

        layout_slides = BaseTest.slides_api.get_layout_slides(file_name, password, folder_name)
        self.assertEqual(11, len(layout_slides.slide_list))

        layout_slide = BaseTest.slides_api.get_layout_slide(file_name, 1, password, folder_name)
        self.assertEqual("Title Slide", layout_slide.name)

        layout_slide = BaseTest.slides_api.copy_layout_slide(file_name, source_path, 2, None, None, password, folder_name)
        self.assertEqual("Title and Content", layout_slide.name)

        layout_slides = BaseTest.slides_api.get_layout_slides(file_name, password, folder_name)
        self.assertEqual(12, len(layout_slides.slide_list))

    def test_layout_slide_shapes(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        password = "password"
        slide_index = 1
        shape_count = 5
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)

        shapes = BaseTest.slides_api.get_special_slide_shapes(file_name, slide_index, 'layoutSlide', password, folder_name)
        self.assertEqual(shape_count, len(shapes.shapes_links))

        dto = Shape()
        dto.x = 100
        dto.y = 100
        dto.width = 500
        dto.height = 200
        dto.shape_type = "Rectangle"
        dto.text = "New shape"
        shape = BaseTest.slides_api.create_special_slide_shape(file_name, slide_index, 'layoutSlide', dto, None, None, password, folder_name)
        self.assertEqual(dto.text, shape.text)
        shapes = BaseTest.slides_api.get_special_slide_shapes(file_name, slide_index, 'layoutSlide', password, folder_name)
        self.assertEqual(shape_count + 1, len(shapes.shapes_links))

        dto.Text = "updated shape"
        shape = BaseTest.slides_api.update_special_slide_shape(file_name, slide_index, 'layoutSlide', shape_count + 1, dto, password, folder_name)
        self.assertEqual(dto.text, shape.text)
        shapes = BaseTest.slides_api.get_special_slide_shapes(file_name, slide_index, 'layoutSlide', password, folder_name)
        self.assertEqual(shape_count + 1, len(shapes.shapes_links))

        BaseTest.slides_api.delete_special_slide_shape(file_name, slide_index, 'layoutSlide', shape_count + 1, password, folder_name)
        shapes = BaseTest.slides_api.get_special_slide_shapes(file_name, slide_index, 'layoutSlide', password, folder_name)
        self.assertEqual(shape_count, len(shapes.shapes_links))

    def test_layout_slide_paragraphs(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        password = "password"
        slide_index = 1
        shape_index = 2
        paragraph_count = 1
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)

        paragraphs = BaseTest.slides_api.get_special_slide_paragraphs(file_name, slide_index, 'layoutSlide', shape_index, password, folder_name)
        self.assertEqual(paragraph_count, len(paragraphs.paragraph_links))

        portion = Portion()
        portion.text = "New Paragraph"
        dto = Paragraph()
        dto.alignment = "Right"
        dto.portion_list = [ portion ]
        paragraph = BaseTest.slides_api.create_special_slide_paragraph(file_name, slide_index, 'layoutSlide', shape_index, dto, None, password, folder_name)
        self.assertEqual(dto.alignment, paragraph.alignment)
        paragraphs = BaseTest.slides_api.get_special_slide_paragraphs(file_name, slide_index, 'layoutSlide', shape_index, password, folder_name)
        self.assertEqual(paragraph_count + 1, len(paragraphs.paragraph_links))

        dto = Paragraph()
        dto.alignment = "Center"
        paragraph = BaseTest.slides_api.update_special_slide_paragraph(file_name, slide_index, 'layoutSlide', shape_index, paragraph_count + 1, dto, password, folder_name)
        self.assertEqual(dto.alignment, paragraph.alignment)
        paragraphs = BaseTest.slides_api.get_special_slide_paragraphs(file_name, slide_index, 'layoutSlide', shape_index, password, folder_name)
        self.assertEqual(paragraph_count + 1, len(paragraphs.paragraph_links))

        BaseTest.slides_api.delete_special_slide_paragraph(file_name, slide_index, 'layoutSlide', shape_index, paragraph_count + 1, password, folder_name)
        paragraphs = BaseTest.slides_api.get_special_slide_paragraphs(file_name, slide_index, 'layoutSlide', shape_index, password, folder_name)
        self.assertEqual(paragraph_count, len(paragraphs.paragraph_links))

    def test_layout_slide_portions(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        password = "password"
        slide_index = 1
        shape_index = 2
        paragraph_index = 1
        portion_count = 1
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)

        portions = BaseTest.slides_api.get_special_slide_portions(file_name, slide_index, 'layoutSlide', shape_index, paragraph_index, password, folder_name)
        self.assertEqual(portion_count, len(portions.items))

        dto = Portion()
        dto.text = "New portion"
        dto.font_bold = "True"
        portion = BaseTest.slides_api.create_special_slide_portion(file_name, slide_index, 'layoutSlide', shape_index, paragraph_index, dto, None, password, folder_name)
        self.assertEqual(dto.font_bold, portion.font_bold)
        self.assertEqual(dto.text, portion.text)
        portions = BaseTest.slides_api.get_special_slide_portions(file_name, slide_index, 'layoutSlide', shape_index, paragraph_index, password, folder_name)
        self.assertEqual(portion_count + 1, len(portions.items))

        dto2 = Portion()
        dto2.text = "Updated portion"
        dto2.font_height = 22
        portion = BaseTest.slides_api.update_special_slide_portion(file_name, slide_index, 'layoutSlide', shape_index, paragraph_index, portion_count + 1, dto2, password, folder_name)
        self.assertEqual(dto.font_bold, portion.font_bold)
        self.assertEqual(dto2.font_height, portion.font_height)
        self.assertEqual(dto2.text, portion.text)
        portions = BaseTest.slides_api.get_special_slide_portions(file_name, slide_index, 'layoutSlide', shape_index, paragraph_index, password, folder_name)
        self.assertEqual(portion_count + 1, len(portions.items))

        BaseTest.slides_api.delete_special_slide_portion(file_name, slide_index, 'layoutSlide', shape_index, paragraph_index, portion_count + 1, password, folder_name)
        portions = BaseTest.slides_api.get_special_slide_portions(file_name, slide_index, 'layoutSlide', shape_index, paragraph_index, password, folder_name)
        self.assertEqual(portion_count, len(portions.items))

    def test_layout_slide_animation(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        password = "password"
        slide_index = 1
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)

        animation = BaseTest.slides_api.get_special_slide_animation(file_name, slide_index, 'layoutSlide', None, None, password, folder_name)
        self.assertEqual(0, len(animation.main_sequence))

        effect1 = Effect()
        effect1.type = "Blink"
        effect1.shape_index = 2

        effect2 = Effect()
        effect2.type = "Appear"
        effect2.shape_index = 3

        dto = SlideAnimation()
        dto.main_sequence = [ effect1, effect2 ]
        animation = BaseTest.slides_api.set_special_slide_animation(file_name, slide_index, 'layoutSlide', dto, password, folder_name)
        self.assertEqual(len(dto.main_sequence), len(animation.main_sequence))

        animation = BaseTest.slides_api.get_special_slide_animation(file_name, slide_index, 'layoutSlide', 3, None, password, folder_name)
        self.assertEqual(1, len(animation.main_sequence))

        BaseTest.slides_api.delete_special_slide_animation_effect(file_name, slide_index, 'layoutSlide', 2, password, folder_name)
        self.assertEqual(len(dto.main_sequence) - 1, len(animation.main_sequence))

        animation = BaseTest.slides_api.get_special_slide_animation(file_name, slide_index, 'layoutSlide', 3, None, password, folder_name)
        self.assertEqual(0, len(animation.main_sequence))

        BaseTest.slides_api.delete_special_slide_animation(file_name, slide_index, 'layoutSlide', password, folder_name)
        self.assertEqual(0, len(animation.main_sequence))

    def test_shape_add(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        dto = Shape()
        dto.shape_type = 'Callout1'
        result = BaseTest.slides_api.create_shape(file_name, 1, dto, None, None, "password", folder_name)
        self.assertTrue(isinstance(result, Shape))

    def test_shape_empty(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        dto = Shape()
        try:
            BaseTest.slides_api.create_shape(file_name, 1, dto, None, None, "password", folder_name)
            self.fail("Shape with undefinined type should not have been created")
        except ApiException as ex:
            self.assertEqual(400, ex.status)

    def test_graphical_object_empty(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        dto = GraphicalObject()
        try:
            BaseTest.slides_api.create_shape(file_name, 1, dto, None, None, "password", folder_name)
            self.fail("GraphicalObject should not have been created")
        except ApiException as ex:
            self.assertEqual(400, ex.status)

    def test_picture_frame_add(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        dto = PictureFrame()
        fill = PictureFill()
        fill.base64_data = "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAANSURBVBhXY5g+ffp/AAZTAsWGL27gAAAAAElFTkSuQmCC"
        dto.picture_fill_format = fill
        result = BaseTest.slides_api.create_shape(file_name, 1, dto, None, None, "password", folder_name)
        self.assertTrue(isinstance(result, PictureFrame))

    def test_picture_frame_empty(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        dto = PictureFrame()
        try:
            BaseTest.slides_api.create_shape(file_name, 1, dto, None, None, "password", folder_name)
            self.fail("PictureFrame with undefinined data should not have been created")
        except ApiException as ex:
            self.assertEqual(400, ex.status)

    def test_audio_frame_add(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        dto = AudioFrame()
        dto.base64_data = "bXAzc2FtcGxl"
        result = BaseTest.slides_api.create_shape(file_name, 1, dto, None, None, "password", folder_name)
        self.assertTrue(isinstance(result, AudioFrame))

    def test_audio_frame_empty(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        dto = AudioFrame()
        try:
            BaseTest.slides_api.create_shape(file_name, 1, dto, None, None, "password", folder_name)
            self.fail("AudioFrame with undefinined data should not have been created")
        except ApiException as ex:
            self.assertEqual(400, ex.status)

    def test_video_frame_add(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        dto = VideoFrame()
        dto.base64_data = "bXAzc2FtcGxl"
        result = BaseTest.slides_api.create_shape(file_name, 1, dto, None, None, "password", folder_name)
        self.assertTrue(isinstance(result, VideoFrame))

    def test_video_frame_empty(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        dto = VideoFrame()
        try:
            BaseTest.slides_api.create_shape(file_name, 1, dto, None, None, "password", folder_name)
            self.fail("VideoFrame with undefinined data should not have been created")
        except ApiException as ex:
            self.assertEqual(400, ex.status)

    def test_ole_object_frame_empty(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        dto = OleObjectFrame()
        try:
            BaseTest.slides_api.create_shape(file_name, 1, dto, None, None, "password", folder_name)
            self.fail("OleObjectFrame should not have been created")
        except ApiException as ex:
            self.assertEqual(400, ex.status)

    def test_smart_art_add(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        dto = SmartArt()
        dto.x = 0
        dto.y = 0
        dto.width = 300
        dto.height = 200
        dto.layout = 'BasicProcess'
        dto.quick_style = 'SimpleFill'
        dto.color_style = 'ColoredFillAccent1'
        node1 = SmartArtNode()
        node1.text = "First"
        node1.org_chart_layout = 'Initial'
        sub_node1 = SmartArtNode()
        sub_node1.text = "SubFirst"
        sub_node1.org_chart_layout = 'Initial'
        node1.nodes = [ sub_node1 ]
        node2 = SmartArtNode()
        node2.text = "Second"
        node2.org_chart_layout = 'Initial'
        dto.nodes = [ node1, node2 ]
        result = BaseTest.slides_api.create_shape(file_name, 1, dto, None, None, "password", folder_name)
        self.assertTrue(isinstance(result, SmartArt))

    def test_smart_art_empty(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        dto = SmartArt()
        result = BaseTest.slides_api.create_shape(file_name, 1, dto, None, None, "password", folder_name)
        self.assertTrue(isinstance(result, SmartArt))

    def test_chart_empty(self): #See Chart tests for non-empty chart examples
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        dto = Chart()
        result = BaseTest.slides_api.create_shape(file_name, 1, dto, None, None, "password", folder_name)
        self.assertTrue(isinstance(result, Chart))

    def test_table_add(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        dto = Table()
        dto.x = 30
        dto.y = 20
        dto.style = 'MediumStyle2Accent1'
        row1 = TableRow()
        cell11 = TableCell()
        cell11.text = "0.1"
        cell12 = TableCell()
        cell12.text = "0.2"
        cell13 = TableCell()
        cell13.text = "0.3"
        cell14 = TableCell()
        cell14.text = "0.4"
        row1.cells = [ cell11, cell12, cell13, cell14 ]
        row2 = TableRow()
        cell21 = TableCell()
        cell21.text = "1"
        cell22 = TableCell()
        cell22.text = "2-3"
        cell22.col_span = 2
        cell22.row_span = 2
        cell24 = TableCell()
        cell24.text = "4"
        row2.cells = [ cell21, cell22, cell24 ]
        row3 = TableRow()
        cell31 = TableCell()
        cell31.text = "first"
        cell32 = TableCell()
        cell32.text = "last"
        row3.cells = [ cell31, cell32 ]
        row4 = TableRow()
        cell41 = TableCell()
        cell41.text = "3.1"
        cell42 = TableCell()
        cell42.text = "3.2"
        cell43 = TableCell()
        cell43.text = "3.3"
        cell44 = TableCell()
        cell44.text = "3.4"
        row4.cells = [ cell41, cell42, cell43, cell44 ]
        row5 = TableRow()
        cell51 = TableCell()
        cell51.text = "4.1"
        cell52 = TableCell()
        cell52.text = "4.2"
        cell53 = TableCell()
        cell53.text = "4.3"
        cell54 = TableCell()
        cell54.text = "4.4"
        row5.cells = [ cell51, cell52, cell53, cell54 ]
        dto.rows = [ row1, row2, row3, row4, row5 ]
        column1 = TableColumn()
        column1.width = 100
        column2 = TableColumn()
        column2.width = 100
        column3 = TableColumn()
        column3.width = 100
        column4 = TableColumn()
        column4.width = 100
        dto.columns = [ column1, column2, column3, column4 ]
        dto.first_row = True
        dto.horizontal_banding = True
        result = BaseTest.slides_api.create_shape(file_name, 1, dto, None, None, "password", folder_name)
        self.assertTrue(isinstance(result, Table))

    def test_table_empty(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        dto = Table()
        try:
            BaseTest.slides_api.create_shape(file_name, 1, dto, None, None, "password", folder_name)
            self.fail("Table with undefinined cell data should not have been created")
        except ApiException as ex:
            self.assertEqual(400, ex.status)

    def test_group_shape_empty(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        dto = GroupShape()
        try:
            BaseTest.slides_api.create_shape(file_name, 1, dto, None, None, "password", folder_name)
            self.fail("GroupShape should not have been created")
        except ApiException as ex:
            self.assertEqual(400, ex.status)

    def test_connector_add(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        dto = Connector()
        dto.shape_type = 'BentConnector3'
        start = ResourceUri()
        start.href = "https://api.aspose.cloud/v3.0/slides/myPresentation.pptx/slides/1/shapes/1"
        dto.start_shape_connected_to = start
        end = ResourceUri()
        end.href = "https://api.aspose.cloud/v3.0/slides/myPresentation.pptx/slides/1/shapes/2"
        dto.end_shape_connected_to = end
        result = BaseTest.slides_api.create_shape(file_name, 1, dto, None, None, "password", folder_name)
        self.assertTrue(isinstance(result, Connector))

    def test_connector_empty(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        dto = Connector()
        result = BaseTest.slides_api.create_shape(file_name, 1, dto, None, None, "password", folder_name)
        self.assertTrue(isinstance(result, Connector))

    def test_shapes_align(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        password = "password"
        slide_index = 3
        shape1_index = 1
        shape2_index = 2
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        shape11 = BaseTest.slides_api.get_shape(file_name, slide_index, shape1_index, password, folder_name)
        shape12 = BaseTest.slides_api.get_shape(file_name, slide_index, shape2_index, password, folder_name)
        self.assertNotEqual(shape11.x, shape12.x)
        self.assertNotEqual(shape11.y, shape12.y)
        BaseTest.slides_api.align_shapes(file_name, slide_index, "AlignTop", None, None, password, folder_name)
        shape21 = BaseTest.slides_api.get_shape(file_name, slide_index, shape1_index, password, folder_name)
        shape22 = BaseTest.slides_api.get_shape(file_name, slide_index, shape2_index, password, folder_name)
        self.assertNotEqual(shape21.x, shape22.x)
        self.assertLess(abs(shape21.y - shape22.y), 1)
        BaseTest.slides_api.align_shapes(file_name, slide_index, "AlignLeft", True, [1, 2], password, folder_name)
        shape31 = BaseTest.slides_api.get_shape(file_name, slide_index, shape1_index, password, folder_name)
        shape32 = BaseTest.slides_api.get_shape(file_name, slide_index, shape2_index, password, folder_name)
        self.assertLess(abs(shape31.x - shape32.x), 1)
        self.assertLess(abs(shape31.x), 1)
        self.assertLess(abs(shape31.y - shape32.y), 1)

    def test_chart_get(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        chart = BaseTest.slides_api.get_shape(file_name, 3, 1, "password", folder_name)
        self.assertEqual(3, len(chart.series))
        self.assertEqual(4, len(chart.categories))

    def test_chart_create(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        chart = Chart()
        chart.chart_type = 'ClusteredColumn'
        chart.width = 400
        chart.height = 300
        series1 = OneValueSeries()
        series1.name = "Series1"
        point11 = OneValueChartDataPoint()
        point11.value = 40
        point12 = OneValueChartDataPoint()
        point12.value = 50
        point13 = OneValueChartDataPoint()
        point13.value = 70
        series1.data_points = [point11, point12, point13]
        series2 = OneValueSeries()
        series2.name = "Series2"
        point21 = OneValueChartDataPoint()
        point21.value = 55
        point22 = OneValueChartDataPoint()
        point22.value = 35
        point23 = OneValueChartDataPoint()
        point23.value = 90
        series2.data_points = [point21, point22, point23]
        chart.series = [ series1, series2 ]
        category1 = ChartCategory()
        category1.value = "Category1"
        category2 = ChartCategory()
        category2.value = "Category2"
        category3 = ChartCategory()
        category3.value = "Category3"
        chart.categories = [category1, category2, category3]
        result = BaseTest.slides_api.create_shape(file_name, 3, chart, None, None, "password", folder_name)
        self.assertEqual(2, len(result.series))
        self.assertEqual(3, len(result.categories))

    def test_chart_update(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        chart = Chart()
        chart.chart_type = 'ClusteredColumn'
        chart.width = 400
        chart.height = 300
        series1 = OneValueSeries()
        series1.name = "Series1"
        point11 = OneValueChartDataPoint()
        point11.value = 40
        point12 = OneValueChartDataPoint()
        point12.value = 50
        point13 = OneValueChartDataPoint()
        point13.value = 70
        series1.data_points = [point11, point12, point13]
        series2 = OneValueSeries()
        series2.name = "Series2"
        point21 = OneValueChartDataPoint()
        point21.value = 55
        point22 = OneValueChartDataPoint()
        point22.value = 35
        point23 = OneValueChartDataPoint()
        point23.value = 90
        series2.data_points = [point21, point22, point23]
        chart.series = [ series1, series2 ]
        category1 = ChartCategory()
        category1.value = "Category1"
        category2 = ChartCategory()
        category2.value = "Category2"
        category3 = ChartCategory()
        category3.value = "Category3"
        chart.categories = [category1, category2, category3]
        result = BaseTest.slides_api.update_shape(file_name, 3, 1, chart, "password", folder_name)
        self.assertEqual(2, len(result.series))
        self.assertEqual(3, len(result.categories))

    def test_chart_series_create(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        series = OneValueSeries()
        series.name = "Series3"
        point1 = OneValueChartDataPoint()
        point1.value = 40
        point2 = OneValueChartDataPoint()
        point2.value = 50
        point3 = OneValueChartDataPoint()
        point3.value = 14
        point4 = OneValueChartDataPoint()
        point4.value = 70
        series.data_points = [point1, point2, point3, point4]
        result = BaseTest.slides_api.create_chart_series(file_name, 3, 1, series, "password", folder_name)
        self.assertEqual(4, len(result.series))
        self.assertEqual(4, len(result.categories))

    def test_chart_series_update(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        series = OneValueSeries()
        series.name = "Series3"
        point1 = OneValueChartDataPoint()
        point1.value = 40
        point2 = OneValueChartDataPoint()
        point2.value = 50
        point3 = OneValueChartDataPoint()
        point3.value = 14
        point4 = OneValueChartDataPoint()
        point4.value = 70
        series.data_points = [point1, point2, point3, point4]
        result = BaseTest.slides_api.update_chart_series(file_name, 3, 1, 2, series, "password", folder_name)
        self.assertEqual(3, len(result.series))
        self.assertEqual(4, len(result.categories))

    def test_chart_series_delete(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        result = BaseTest.slides_api.delete_chart_series(file_name, 3, 1, 2, "password", folder_name)
        self.assertEqual(2, len(result.series))
        self.assertEqual(4, len(result.categories))

    def test_chart_category_create(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        category = ChartCategory()
        category.value = "NewCategory"
        point1 = OneValueChartDataPoint()
        point1.value = 40
        point2 = OneValueChartDataPoint()
        point2.value = 50
        point3 = OneValueChartDataPoint()
        point3.value = 14
        category.data_points = [point1, point2, point3]
        result = BaseTest.slides_api.create_chart_category(file_name, 3, 1, category, "password", folder_name)
        self.assertEqual(3, len(result.series))
        self.assertEqual(5, len(result.categories))
        self.assertEqual(5, len(result.series[0].data_points))
        self.assertEqual(category.data_points[0].value, result.series[0].data_points[4].value)

    def test_chart_category_update(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        category = ChartCategory()
        category.value = "NewCategory"
        point1 = OneValueChartDataPoint()
        point1.value = 40
        point2 = OneValueChartDataPoint()
        point2.value = 50
        point3 = OneValueChartDataPoint()
        point3.value = 14
        category.data_points = [point1, point2, point3]
        result = BaseTest.slides_api.update_chart_category(file_name, 3, 1, 2, category, "password", folder_name)
        self.assertEqual(3, len(result.series))
        self.assertEqual(4, len(result.categories))
        self.assertEqual(4, len(result.series[0].data_points))
        self.assertEqual(category.data_points[0].value, result.series[0].data_points[1].value)

    def test_chart_category_delete(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        result = BaseTest.slides_api.delete_chart_category(file_name, 3, 1, 2, "password", folder_name)
        self.assertEqual(3, len(result.series))
        self.assertEqual(3, len(result.categories))
        self.assertEqual(3, len(result.series[0].data_points))

    def test_chart_data_point_create(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        point = OneValueChartDataPoint()
        point.value = 40
        try:
            BaseTest.slides_api.create_chart_data_point(file_name, 3, 1, 2, point, "password", folder_name)
            self.fail("Must have failed because adding data points only works with Scatter & Bubble charts")
        except ApiException as ex:
            self.assertEqual(400, ex.status)

    def test_chart_data_point_update(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        point = OneValueChartDataPoint()
        point.value = 40
        result = BaseTest.slides_api.update_chart_data_point(file_name, 3, 1, 2, 2, point, "password", folder_name)
        self.assertEqual(3, len(result.series))
        self.assertEqual(4, len(result.categories))
        self.assertEqual(4, len(result.series[1].data_points))
        self.assertEqual(point.value, result.series[1].data_points[1].value)

    def test_chart_data_point_delete(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        result = BaseTest.slides_api.delete_chart_data_point(file_name, 3, 1, 2, 2, "password", folder_name)
        self.assertEqual(3, len(result.series))
        self.assertEqual(4, len(result.categories))
        self.assertIsNone(result.series[1].data_points[1])

    def test_chart_sunburst(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        chart = Chart()
        chart.chart_type = 'Sunburst'
        chart.width = 400
        chart.height = 300
        series1 = OneValueSeries()
        series1.name = "Series1"
        point1 = OneValueChartDataPoint()
        point1.value = 40
        point2 = OneValueChartDataPoint()
        point2.value = 50
        point3 = OneValueChartDataPoint()
        point3.value = 70
        point4 = OneValueChartDataPoint()
        point4.value = 60
        series1.data_points = [point1, point2, point3, point4]
        chart.series = [ series1 ]
        category1 = ChartCategory()
        category1.value = "Leaf1"
        category1.level = 3
        category1.parent_categories = [ "Branch1", "Stem1" ]
        category2 = ChartCategory()
        category2.value = "Leaf2"
        category2.level = 3
        category2.parent_categories = [ "Branch1", "Stem1" ]
        category3 = ChartCategory()
        category3.value = "Branch2"
        category3.level = 2
        category3.parent_categories = [ "Stem1" ]
        category4 = ChartCategory()
        category4.value = "Stem2"
        category4.level = 1
        chart.categories = [ category1, category2, category3, category4 ]
        result = BaseTest.slides_api.create_shape(file_name, 3, chart, None, None, "password", folder_name)
        self.assertEqual(1, len(result.series))
        self.assertEqual(4, len(result.categories))

    def test_shape_format_line(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        password = "password"
        slideIndex = 1
        shapeIndex = 1
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)

        dto = Shape()
        line_format = LineFormat()
        line_format.style = "ThickThin"
        line_format.width = 7
        line_format.dash_style = "Dash"
        dto.line_format = line_format
        shape = BaseTest.slides_api.update_shape(file_name, 1, 1, dto, password, folder_name)
        self.assertTrue(isinstance(shape, Shape))
        shape = BaseTest.slides_api.get_shape(file_name, 1, 1, password, folder_name)
        self.assertTrue(isinstance(shape, Shape))
        self.assertEqual(dto.line_format.width, shape.line_format.width)

    def test_shape_format_fill(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        password = "password"
        slideIndex = 1
        shapeIndex = 1
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)

        dto = Shape()
        fill_format = SolidFill()
        fill_format.color = "#FFFFFF00"
        dto.fill_format = fill_format
        shape = BaseTest.slides_api.update_shape(file_name, 1, 1, dto, password, folder_name)
        self.assertTrue(isinstance(shape, Shape))
        shape = BaseTest.slides_api.get_shape(file_name, 1, 1, password, folder_name)
        self.assertTrue(isinstance(shape, Shape))
        self.assertTrue(isinstance(shape.fill_format, SolidFill))
        self.assertEqual(dto.fill_format.color, shape.fill_format.color)

    def test_shape_format_effect(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        password = "password"
        slideIndex = 1
        shapeIndex = 1
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)

        dto = Shape()
        effect_format = EffectFormat()
        inner_shadow = InnerShadowEffect()
        inner_shadow.direction = 35
        inner_shadow.blur_radius = 30
        inner_shadow.distance = 40
        inner_shadow.shadow_color = "#FFFFFF00"
        effect_format.inner_shadow = inner_shadow
        dto.effect_format = effect_format
        shape = BaseTest.slides_api.update_shape(file_name, 1, 1, dto, password, folder_name)
        self.assertTrue(isinstance(shape, Shape))
        shape = BaseTest.slides_api.get_shape(file_name, 1, 1, password, folder_name)
        self.assertTrue(isinstance(shape, Shape))
        self.assertEqual(dto.effect_format.inner_shadow.direction, shape.effect_format.inner_shadow.direction)

    def test_shape_format_3d(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        password = "password"
        slideIndex = 1
        shapeIndex = 1
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)

        dto = Shape()
        three_d_format = ThreeDFormat()
        three_d_format.depth = 4

        bevel_top = ShapeBevel()
        bevel_top.bevel_type = "Circle"
        bevel_top.height = 6
        bevel_top.width = 6
        three_d_format.bevel_top = bevel_top

        camera = Camera()
        camera.camera_type = "OrthographicFront"
        three_d_format.camera = camera

        light_rig = LightRig()
        light_rig.light_type = "ThreePt"
        light_rig.direction = "Top"
        three_d_format.light_rig = light_rig
        dto.three_d_format = three_d_format
        shape = BaseTest.slides_api.update_shape(file_name, 1, 1, dto, password, folder_name)
        self.assertTrue(isinstance(shape, Shape))
        shape = BaseTest.slides_api.get_shape(file_name, 1, 1, password, folder_name)
        self.assertTrue(isinstance(shape, Shape))
        self.assertEqual(dto.three_d_format.depth, shape.three_d_format.depth)

    def test_header_footer_all_slides(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        password = "password"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        dto = HeaderFooter()
        dto.is_footer_visible = True
        dto.footer_text = "footer"
        dto.is_date_time_visible = False
        BaseTest.slides_api.set_presentation_header_footer(file_name, dto, "password", folder_name)
        result = BaseTest.slides_api.get_slide_header_footer(file_name, 1, "password", folder_name)
        self.assertTrue(result.is_footer_visible)
        self.assertFalse(result.is_date_time_visible)

    def test_header_footer_slide(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        password = "password"
        slide_index = 1
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        dto = HeaderFooter()
        dto.is_footer_visible = True
        dto.footer_text = "footer"
        dto.is_date_time_visible = False
        result = BaseTest.slides_api.set_slide_header_footer(file_name, slide_index, dto, "password", folder_name)
        self.assertTrue(result.is_footer_visible)
        self.assertFalse(result.is_date_time_visible)
        result = BaseTest.slides_api.get_slide_header_footer(file_name, slide_index, "password", folder_name)
        self.assertTrue(result.is_footer_visible)
        self.assertFalse(result.is_date_time_visible)

    def test_header_footer_notes_slide(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        password = "password"
        slide_index = 1
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        dto = NotesSlideHeaderFooter()
        dto.is_header_visible = True
        dto.footer_text = "footer"
        dto.is_date_time_visible = False
        result = BaseTest.slides_api.set_notes_slide_header_footer(file_name, slide_index, dto, "password", folder_name)
        self.assertTrue(result.is_header_visible)
        self.assertFalse(result.is_date_time_visible)
        result = BaseTest.slides_api.get_notes_slide_header_footer(file_name, slide_index, "password", folder_name)
        self.assertTrue(result.is_header_visible)
        self.assertFalse(result.is_date_time_visible)

    def test_sections_get(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        result = BaseTest.slides_api.get_sections(file_name, "password", folder_name)
        self.assertEqual(3, len(result.section_list))

    def test_sections_replace(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        dto = Sections()
        section1 = Section()
        section1.name = "Section1"
        section1.first_slide_index = 1
        section2 = Section()
        section2.name = "Section2"
        section2.first_slide_index = 3
        dto.section_list = [ section1, section2 ]
        result = BaseTest.slides_api.set_sections(file_name, dto, "password", folder_name)
        self.assertEqual(len(dto.section_list), len(result.section_list))
        self.assertEqual(section2.first_slide_index - section1.first_slide_index, len(result.section_list[0].slide_list))

    def test_sections_post(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        result = BaseTest.slides_api.create_section(file_name, "NewSection", 5, "password", folder_name)
        self.assertEqual(4, len(result.section_list))

    def test_sections_put(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        section_index = 2
        section_name = "UpdatedSection"
        result = BaseTest.slides_api.update_section(file_name, section_index, section_name, "password", folder_name)
        self.assertEqual(3, len(result.section_list))
        self.assertEqual(section_name, result.section_list[section_index - 1].name)

    def test_sections_move(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        result = BaseTest.slides_api.move_section(file_name, 1, 2, "password", folder_name)
        self.assertEqual(3, len(result.section_list))

    def test_sections_clear(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        result = BaseTest.slides_api.delete_sections(file_name, None, None, "password", folder_name)
        self.assertEqual(0, len(result.section_list))

    def test_sections_delete_many(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        result = BaseTest.slides_api.delete_sections(file_name, [ 2, 3 ], None, "password", folder_name)
        self.assertEqual(1, len(result.section_list))

    def test_sections_delete(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        result = BaseTest.slides_api.delete_section(file_name, 2, None, "password", folder_name)
        self.assertEqual(2, len(result.section_list))

    def test_property_builtin(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        password = "password"
        property_name = "Author"
        updated_property_value = "New Value"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        result = BaseTest.slides_api.get_document_property(file_name, property_name, password, folder_name)
        self.assertEqual(property_name, result.name)
        self.assertTrue(result.built_in)
        property = DocumentProperty()
        property.value = updated_property_value
        result = BaseTest.slides_api.set_document_property(file_name, property_name, property, password, folder_name)
        self.assertEqual(property_name, result.name)
        self.assertEqual(updated_property_value, result.value)
        self.assertTrue(result.built_in)
        BaseTest.slides_api.delete_document_property(file_name, property_name, password, folder_name)
        result = BaseTest.slides_api.get_document_property(file_name, property_name, password, folder_name)
        #built-in property is not actually deleted
        self.assertEqual(property_name, result.name)
        self.assertNotEqual(updated_property_value, result.value)
        self.assertTrue(result.built_in)

    def test_property_custom(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        password = "password"
        property_name = "CustomProperty2"
        updated_property_value = "New Value"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        property = DocumentProperty()
        property.value = updated_property_value
        result = BaseTest.slides_api.set_document_property(file_name, property_name, property, password, folder_name)
        self.assertEqual(property_name, result.name)
        self.assertEqual(updated_property_value, result.value)
        self.assertFalse(result.built_in)
        BaseTest.slides_api.delete_document_property(file_name, property_name, password, folder_name)
        try:
            BaseTest.slides_api.get_document_property(file_name, property_name, password, folder_name)
            self.fail("The property must have been deleted")
        except ApiException as ex:
            self.assertEqual(404, ex.status)

    def test_property_bulk_update(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        password = "password"
        property_name = "Author"
        custom_property_name = "CustomProperty2"
        updated_property_value = "New Value"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        result = BaseTest.slides_api.get_document_properties(file_name, password, folder_name)
        count = len(result.list)
        property1 = DocumentProperty()
        property1.name = property_name
        property1.value = updated_property_value
        property2 = DocumentProperty()
        property2.name = custom_property_name
        property2.value = updated_property_value
        properties = DocumentProperties()
        properties.list = [ property1, property2 ]
        result = BaseTest.slides_api.set_document_properties(file_name, properties, password, folder_name)
        self.assertEqual(count + 1, len(result.list))
        result = BaseTest.slides_api.delete_document_properties(file_name, password, folder_name)
        self.assertEqual(count - 1, len(result.list))

    def test_property_slide_properties(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        password = "password"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        get_result = BaseTest.slides_api.get_slide_properties(file_name, password, folder_name)
        dto = SlideProperties()
        dto.first_slide_number = get_result.first_slide_number + 2
        put_result = BaseTest.slides_api.set_slide_properties(file_name, dto, password, folder_name)
        self.assertEqual(get_result.orientation, put_result.orientation)
        self.assertNotEqual(get_result.first_slide_number, put_result.first_slide_number)

    def test_property_slide_size_preset(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        password = "password"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        dto = SlideProperties()
        dto.size_type = 'B4IsoPaper'
        result = BaseTest.slides_api.set_slide_properties(file_name, dto, password, folder_name)
        self.assertEqual('B4IsoPaper', result.size_type)
        self.assertEqual(852, result.width)
        self.assertEqual(639, result.height)

    def test_property_slide_size_custom(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        password = "password"
        width = 800
        height = 500
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        dto = SlideProperties()
        dto.width = width
        dto.height = height
        result = BaseTest.slides_api.set_slide_properties(file_name, dto, password, folder_name)
        self.assertEqual('Custom', result.size_type)
        self.assertEqual(width, result.width)
        self.assertEqual(height, result.height)

    def test_property_protection(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        password = "password"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        get_result = BaseTest.slides_api.get_protection_properties(file_name, password, folder_name)
        dto = ProtectionProperties()
        dto.read_only_recommended = not get_result.read_only_recommended
        put_result = BaseTest.slides_api.set_protection(file_name, dto, password, folder_name)
        self.assertEqual(get_result.encrypt_document_properties, put_result.encrypt_document_properties)
        self.assertNotEqual(get_result.read_only_recommended, put_result.read_only_recommended)

    def test_property_protection_delete(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        password = "password"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        result = BaseTest.slides_api.delete_protection(file_name, password, folder_name)
        self.assertFalse(result.is_encrypted)
        self.assertFalse(result.read_only_recommended)
        self.assertFalse(result.read_password)

    def test_property_protection_online(self):
        dto = ProtectionProperties()
        dto.read_password = "newPassword"
        with open("TestData/test.pptx", 'rb') as f:
            source = f.read()
        result = BaseTest.slides_api.set_protection_online(source, dto, "password")
        self.assertNotEqual(len(source), os.path.getsize(result))

    def test_property_protection_unprotect_online(self):
        with open("TestData/test.pptx", 'rb') as f:
            source = f.read()
        result = BaseTest.slides_api.delete_protection_online(source, "password")
        self.assertNotEqual(len(source), os.path.getsize(result))

    def test_good_auth(self):
        config = Configuration()
        config.app_sid = self.configuration.app_sid
        config.app_key = self.configuration.app_key
        config.base_url = self.configuration.base_url
        config.auth_base_url = self.configuration.auth_base_url
        config.debug = self.configuration.debug
        api = asposeslidescloud.apis.slides_api.SlidesApi(config)
        api.get_api_info()

    def test_bad_auth(self):
        config = Configuration()
        config.app_sid = "invalid"
        config.app_key = self.configuration.app_key
        config.base_url = self.configuration.base_url
        config.auth_base_url = self.configuration.auth_base_url
        config.debug = self.configuration.debug
        try:
            api = asposeslidescloud.apis.slides_api.SlidesApi(config)
            api.get_api_info()
            self.fail("Must have failed")
        except ApiException as ex:
            self.assertEqual(401, ex.status)

    def test_good_token(self):
        config = Configuration()
        config.app_sid = self.configuration.app_sid
        config.app_key = self.configuration.app_key
        config.base_url = self.configuration.base_url
        config.auth_base_url = self.configuration.auth_base_url
        config.debug = self.configuration.debug
        api = asposeslidescloud.apis.slides_api.SlidesApi(config)
        api.get_api_info()
        config.app_sid = "invalid"
        api = asposeslidescloud.apis.slides_api.SlidesApi(config)
        api.get_api_info()

    def test_bad_token(self):
        config = Configuration()
        config.app_sid = self.configuration.app_sid
        config.app_key = self.configuration.app_key
        config.base_url = self.configuration.base_url
        config.auth_base_url = self.configuration.auth_base_url
        config.debug = self.configuration.debug
        config.access_token = "invalid"
        api = asposeslidescloud.apis.slides_api.SlidesApi(config)
        api.get_api_info()

    def test_image_get(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        password = "password"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        presentation_result = BaseTest.slides_api.get_presentation_images(file_name, password, folder_name)
        slide_result = BaseTest.slides_api.get_slide_images(file_name, 1, password, folder_name)
        self.assertLess(len(slide_result.list), len(presentation_result.list))

    def test_image_download_all_storage(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        password = "password"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        default_result = BaseTest.slides_api.download_images_default_format(file_name, password, folder_name)
        png_result = BaseTest.slides_api.download_images(file_name, 'png', password, folder_name)
        self.assertNotEqual(os.path.getsize(default_result), os.path.getsize(png_result))
        with ZipFile(default_result) as default_zip:
            with ZipFile(png_result) as png_zip:
                self.assertEqual(len(default_zip.namelist()), len(png_zip.namelist()))

    def test_image_download_all_request(self):
        password = "password"
        with open("TestData/test.pptx", 'rb') as f:
            source = f.read()
        default_result = BaseTest.slides_api.download_images_default_format_online(source, password)
        png_result = BaseTest.slides_api.download_images_online(source, 'png', password)
        self.assertNotEqual(os.path.getsize(default_result), os.path.getsize(png_result))
        with ZipFile(default_result) as default_zip:
            with ZipFile(png_result) as png_zip:
                self.assertEqual(len(default_zip.namelist()), len(png_zip.namelist()))

    def test_image_download_storage(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        slide_index = 1
        password = "password"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        default_result = BaseTest.slides_api.download_image_default_format(file_name, slide_index, password, folder_name)
        png_result = BaseTest.slides_api.download_image(file_name, slide_index, 'png', password, folder_name)
        self.assertNotEqual(os.path.getsize(default_result), os.path.getsize(png_result))

    def test_image_download_request(self):
        password = "password"
        slide_index = 1
        with open("TestData/test.pptx", 'rb') as f:
            source = f.read()
        default_result = BaseTest.slides_api.download_image_default_format_online(source, slide_index, password)
        png_result = BaseTest.slides_api.download_image_online(source, slide_index, 'png', password)
        self.assertNotEqual(os.path.getsize(default_result), os.path.getsize(png_result))

    def test_merge_storage(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        file_name2 = "test-unprotected.pptx"
        password = "password"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        BaseTest.slides_api.copy_file("TempTests/" + file_name2, folder_name + "/" + file_name2)
        request = PresentationsMergeRequest()
        request.presentation_paths = [ folder_name + "/" + file_name2 ]
        BaseTest.slides_api.merge(file_name, request, password, folder_name)

    def test_merge_ordered_storage(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        file_name2 = "test-unprotected.pptx"
        password = "password"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        BaseTest.slides_api.copy_file("TempTests/" + file_name2, folder_name + "/" + file_name2)
        request = OrderedMergeRequest()
        presentation = PresentationToMerge()
        presentation.path = folder_name + "/" + file_name2
        presentation.slides = [ 2, 1 ]
        request.presentations = [ presentation ]
        BaseTest.slides_api.ordered_merge(file_name, request, password, folder_name)

    def test_merge_request(self):
        with open("TestData/TemplateCV.pptx", 'rb') as f:
            source1 = f.read()
        with open("TestData/test-unprotected.pptx", 'rb') as f:
            source2 = f.read()
        files = [ source1, source2 ]
        BaseTest.slides_api.merge_online(files)

    def test_merge_and_save_request(self):
        out_path = "TestData/out.pptx"
        with open("TestData/TemplateCV.pptx", 'rb') as f:
            source1 = f.read()
        with open("TestData/test-unprotected.pptx", 'rb') as f:
            source2 = f.read()
        files = [ source1, source2 ]
        BaseTest.slides_api.merge_and_save_online(out_path, files)
        self.assertTrue(BaseTest.slides_api.object_exists(out_path).exists)

    def test_merge_ordered_request(self):
        with open("TestData/test.pptx", 'rb') as f:
            source1 = f.read()
        with open("TestData/test-unprotected.pptx", 'rb') as f:
            source2 = f.read()
        files = [ source1, source2 ]
        request = OrderedMergeRequest()
        presentation1 = PresentationToMerge()
        presentation1.path = "file1"
        presentation1.password = "password"
        presentation2 = PresentationToMerge()
        presentation2.path = "file2"
        presentation2.slides = [ 1, 2 ]
        request.presentations = [ presentation1, presentation2 ]
        BaseTest.slides_api.merge_online(files, request)

    def test_merge_ordered_combined(self):
        folder_name = "TempSlidesSDK"
        file_name2 = "test-unprotected.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name2, folder_name + "/" + file_name2)
        with open("TestData/test.pptx", 'rb') as f:
            source = f.read()
        files = [ source ]
        request = OrderedMergeRequest()
        presentation1 = PresentationToMerge()
        presentation1.path = "file1"
        presentation1.password = "password"
        presentation2 = PresentationToMerge()
        presentation2.path = "test-unprotected.pptx"
        presentation2.slides = [ 1, 2 ]
        presentation2.source = 'Storage'
        presentation2.path = folder_name + "/" + file_name2
        request.presentations = [ presentation1, presentation2 ]
        BaseTest.slides_api.merge_online(files, request)

    def test_split_storage(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        password = "password"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        result1 = BaseTest.slides_api.split(file_name, None, None, None, None, None, None, None, password, folder_name)
        result2 = BaseTest.slides_api.split(file_name, None, None, None, None, 2, 3, None, password, folder_name)
        self.assertEqual(2, len(result2.slides))
        self.assertGreater(len(result1.slides), len(result2.slides))
        url = result1.slides[0].href
        path = url[url.index("/storage/file/") + len("/storage/file/"):]
        self.assertTrue(BaseTest.slides_api.object_exists(path).exists)

    def test_split_request(self):
        with open("TestData/test.pptx", 'rb') as f:
            source = f.read()
        password = "password"
        result1 = BaseTest.slides_api.split_online(source, 'png', None, None, None, None, password)
        result2 = BaseTest.slides_api.split_online(source, 'png', None, None, 2, 3, password)
        with ZipFile(result1) as zip1:
            with ZipFile(result2) as zip2:
                self.assertEqual(2, len(zip2.namelist()))
                self.assertGreater(len(zip1.namelist()), len(zip2.namelist()))

    def test_split_request_to_storage(self):
        with open("TestData/test.pptx", 'rb') as f:
            source = f.read()
        password = "password"
        result1 = BaseTest.slides_api.split_and_save_online(source, 'png', None, None, None, None, None, password)
        result2 = BaseTest.slides_api.split_and_save_online(source, 'png', None, None, None, 2, 3, password)
        self.assertEqual(2, len(result2.slides))
        self.assertGreater(len(result1.slides), len(result2.slides))
        url = result1.slides[0].href
        path = url[url.index("/storage/file/") + len("/storage/file/"):]
        self.assertTrue(BaseTest.slides_api.object_exists(path).exists)

    def test_split_with_options(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        password = "password"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        options = PdfExportOptions()
        options.jpeg_quality = 50
        result = BaseTest.slides_api.split(file_name, options, None, None, None, None, None, None, password, folder_name)
        url = result.slides[0].href
        path = url[url.index("/storage/file/") + len("/storage/file/"):]
        self.assertTrue(BaseTest.slides_api.object_exists(path).exists)

    def test_text_get(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        password = "password"
        slide_index = 1
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        result = BaseTest.slides_api.get_presentation_text_items(file_name, None, password, folder_name)
        result_with_empty = BaseTest.slides_api.get_presentation_text_items(file_name, True, password, folder_name)
        slide_result = BaseTest.slides_api.get_slide_text_items(file_name, slide_index, None, password, folder_name)
        slide_result_with_empty = BaseTest.slides_api.get_slide_text_items(file_name, slide_index, True, password, folder_name)
        self.assertLess(len(result.items), len(result_with_empty.items))
        self.assertLess(len(slide_result.items), len(result.items))
        self.assertLess(len(slide_result.items), len(slide_result_with_empty.items))

    def test_text_replace_storage(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        password = "password"
        slide_index = 1
        old_value = "text"
        new_value = "new_text"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        result = BaseTest.slides_api.replace_presentation_text(file_name, old_value, new_value, None, password, folder_name)
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        result_with_empty = BaseTest.slides_api.replace_presentation_text(file_name, old_value, new_value, True, password, folder_name)
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        slide_result = BaseTest.slides_api.replace_slide_text(file_name, slide_index, old_value, new_value, None, password, folder_name)
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        slide_result_with_empty = BaseTest.slides_api.replace_slide_text(file_name, slide_index, old_value, new_value, True, password, folder_name)
        self.assertLess(result.matches, result_with_empty.matches)
        self.assertLess(slide_result.matches, result.matches)
        self.assertLess(slide_result.matches, slide_result_with_empty.matches)

    def test_text_replace_request(self):
        password = "password"
        slide_index = 1
        old_value = "text"
        new_value = "new_text"
        with open("TestData/test.pptx", 'rb') as f:
            source = f.read()
        BaseTest.slides_api.replace_presentation_text_online(source, old_value, new_value, None, password)
        BaseTest.slides_api.replace_presentation_text_online(source, old_value, new_value, True, password)
        BaseTest.slides_api.replace_slide_text_online(source, slide_index, old_value, new_value, None, password)
        BaseTest.slides_api.replace_slide_text_online(source, slide_index, old_value, new_value, True, password)


    def test_watermark_text_storage(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        password = "password"
        slide_index = 1
        watermark_text = "watermarkText"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        get1_result = BaseTest.slides_api.get_shapes(file_name, slide_index, password, folder_name)
        shape_count = len(get1_result.shapes_links) + 1
        BaseTest.slides_api.create_watermark(file_name, None, None, watermark_text, None, None, password, folder_name)
        get2_result = BaseTest.slides_api.get_shapes(file_name, slide_index, password, folder_name)
        self.assertEqual(shape_count, len(get2_result.shapes_links))
        shape = BaseTest.slides_api.get_shape(file_name, slide_index, shape_count, password, folder_name)
        self.assertEqual("watermark", shape.name)
        self.assertEqual(watermark_text, shape.text)
        BaseTest.slides_api.delete_watermark(file_name, None, password, folder_name)
        get3_result = BaseTest.slides_api.get_shapes(file_name, slide_index, password, folder_name)
        self.assertEqual(shape_count - 1, len(get3_result.shapes_links))

    def test_watermark_dto_storage(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        password = "password"
        slide_index = 1
        watermark_text = "watermarkText"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        get1_result = BaseTest.slides_api.get_shapes(file_name, slide_index, password, folder_name)
        shape_count = len(get1_result.shapes_links) + 1
        watermark = Shape()
        watermark.text = watermark_text
        BaseTest.slides_api.create_watermark(file_name, watermark, None, None, None, None, password, folder_name)
        get2_result = BaseTest.slides_api.get_shapes(file_name, slide_index, password, folder_name)
        self.assertEqual(shape_count, len(get2_result.shapes_links))
        shape = BaseTest.slides_api.get_shape(file_name, slide_index, shape_count, password, folder_name)
        self.assertEqual("watermark", shape.name)
        self.assertEqual(watermark_text, shape.text)
        BaseTest.slides_api.delete_watermark(file_name, None, password, folder_name)
        get3_result = BaseTest.slides_api.get_shapes(file_name, slide_index, password, folder_name)
        self.assertEqual(shape_count - 1, len(get3_result.shapes_links))

    def test_watermark_image_storage(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        password = "password"
        slide_index = 1
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        get1_result = BaseTest.slides_api.get_shapes(file_name, slide_index, password, folder_name)
        shape_count = len(get1_result.shapes_links) + 1
        with open("TestData/watermark.png", 'rb') as f:
            source = f.read()
        BaseTest.slides_api.create_image_watermark(file_name, source, None, password, folder_name)
        get2_result = BaseTest.slides_api.get_shapes(file_name, slide_index, password, folder_name)
        self.assertEqual(shape_count, len(get2_result.shapes_links))
        shape = BaseTest.slides_api.get_shape(file_name, slide_index, shape_count, password, folder_name)
        self.assertEqual("watermark", shape.name)
        BaseTest.slides_api.delete_watermark(file_name, None, password, folder_name)
        get3_result = BaseTest.slides_api.get_shapes(file_name, slide_index, password, folder_name)
        self.assertEqual(shape_count - 1, len(get3_result.shapes_links))

    def test_watermark_image_dto_storage(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        password = "password"
        slide_index = 1
        watermark_name = "myWatermark"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        get1_result = BaseTest.slides_api.get_shapes(file_name, slide_index, password, folder_name)
        shape_count = len(get1_result.shapes_links) + 1
        with open("TestData/watermark.png", 'rb') as f:
            source = f.read()
        watermark = PictureFrame()
        fill_format = PictureFill()
        fill_format.base64_data = base64.b64encode(source).decode('utf-8')
        watermark.fill_format = fill_format
        watermark.name = watermark_name
        BaseTest.slides_api.create_image_watermark(file_name, None, watermark, password, folder_name)
        get2_result = BaseTest.slides_api.get_shapes(file_name, slide_index, password, folder_name)
        self.assertEqual(shape_count, len(get2_result.shapes_links))
        shape = BaseTest.slides_api.get_shape(file_name, slide_index, shape_count, password, folder_name)
        self.assertEqual(watermark_name, shape.name)
        BaseTest.slides_api.delete_watermark(file_name, watermark_name, password, folder_name)
        get3_result = BaseTest.slides_api.get_shapes(file_name, slide_index, password, folder_name)
        self.assertEqual(shape_count - 1, len(get3_result.shapes_links))

    def test_watermark_text_request(self):
        password = "password"
        with open("TestData/test.pptx", 'rb') as f:
            source = f.read()
        post_result = BaseTest.slides_api.create_watermark_online(source, None, None, "watermarkText", None, None, password)
        self.assertNotEqual(len(source), os.path.getsize(post_result))
        delete_result = BaseTest.slides_api.delete_watermark_online(source, None, password)
        self.assertLess(os.path.getsize(delete_result), os.path.getsize(post_result))

    def test_watermark_dto_request(self):
        password = "password"
        with open("TestData/test.pptx", 'rb') as f:
            source = f.read()
        watermark = Shape()
        watermark.text = "watermarkText"
        post_result = BaseTest.slides_api.create_watermark_online(source, watermark, None, None, None, None, password)
        self.assertNotEqual(len(source), os.path.getsize(post_result))
        delete_result = BaseTest.slides_api.delete_watermark_online(source, None, password)
        self.assertLess(os.path.getsize(delete_result), os.path.getsize(post_result))

    def test_watermark_image_request(self):
        password = "password"
        with open("TestData/test.pptx", 'rb') as f:
            source = f.read()
        with open("TestData/watermark.png", 'rb') as f:
            watermark = f.read()
        post_result = BaseTest.slides_api.create_image_watermark_online(source, watermark, None, password)
        self.assertNotEqual(len(source), os.path.getsize(post_result))
        delete_result = BaseTest.slides_api.delete_watermark_online(source, None, password)
        self.assertLess(os.path.getsize(delete_result), os.path.getsize(post_result))

    def test_watermark_image_dto_request(self):
        password = "password"
        with open("TestData/test.pptx", 'rb') as f:
            source = f.read()
        with open("TestData/watermark.png", 'rb') as f:
            watermark_source = f.read()
        watermark = PictureFrame()
        fill_format = PictureFill()
        fill_format.base64_data = base64.b64encode(watermark_source).decode('utf-8')
        watermark.fill_format = fill_format
        post_result = BaseTest.slides_api.create_image_watermark_online(source, None, watermark, password)
        self.assertNotEqual(len(source), os.path.getsize(post_result))
        delete_result = BaseTest.slides_api.delete_watermark_online(source, None, password)
        self.assertLess(os.path.getsize(delete_result), os.path.getsize(post_result))

    def test_animation_get(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        password = "password"
        slide_index = 1
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)

        animation = BaseTest.slides_api.get_animation(file_name, slide_index, None, None, password, folder_name)
        self.assertEqual(1, len(animation.main_sequence))
        self.assertEqual(1, len(animation.interactive_sequences))

        animation = BaseTest.slides_api.get_animation(file_name, slide_index, 3, None, password, folder_name)
        self.assertEqual(1, len(animation.main_sequence))
        self.assertEqual(0, len(animation.interactive_sequences))

        animation = BaseTest.slides_api.get_animation(file_name, slide_index, 3, 1, password, folder_name)
        self.assertEqual(0, len(animation.main_sequence))

    def test_animation_set(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)

        dto = SlideAnimation()

        effect1 = Effect()
        effect1.type = "Blink"
        effect1.shape_index = 2
        effect1.paragraph_index = 1

        effect2 = Effect()
        effect2.type = "Box"
        effect2.subtype = "In"
        effect2.preset_class_type = "Entrance"
        effect2.shape_index = 4
        dto.main_sequence = [ effect1, effect2 ]
        dto.interactive_sequences = []
        animation = BaseTest.slides_api.set_animation(file_name, 1, dto, "password", folder_name)
        self.assertEqual(len(dto.main_sequence), len(animation.main_sequence))
        self.assertEqual(0, len(animation.interactive_sequences))

    def test_animation_create_effect(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)

        dto = Effect()
        dto.type = "Blast"
        dto.shape_index = 3
        animation = BaseTest.slides_api.create_animation_effect(file_name, 1, dto, "password", folder_name)
        self.assertEqual(2, len(animation.main_sequence))
        self.assertEqual(1, len(animation.interactive_sequences))

    def test_animation_create_interactive_sequence(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)

        dto = InteractiveSequence()
        dto.trigger_shape_index = 2
        effect = Effect()
        effect.type = "Blast"
        effect.shape_index = 3
        dto.effects = [ effect ]
        animation = BaseTest.slides_api.create_animation_interactive_sequence(file_name, 1, dto, "password", folder_name)
        self.assertEqual(1, len(animation.main_sequence))
        self.assertEqual(2, len(animation.interactive_sequences))

    def test_animation_create_interactive_sequence_effect(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)

        dto = Effect()
        dto.type = "Blast"
        dto.shape_index = 3
        animation = BaseTest.slides_api.create_animation_interactive_sequence_effect(file_name, 1, 1, dto, "password", folder_name)
        self.assertEqual(1, len(animation.main_sequence))
        self.assertEqual(1, len(animation.interactive_sequences))

    def test_animation_update_effect(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)

        dto = Effect()
        dto.type = "Blast"
        dto.shape_index = 3
        animation = BaseTest.slides_api.update_animation_effect(file_name, 1, 1, dto, "password", folder_name)
        self.assertEqual(1, len(animation.main_sequence))
        self.assertEqual(1, len(animation.interactive_sequences))

    def test_animation_update_interactive_sequence_effect(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)

        dto = Effect()
        dto.type = "Blast"
        dto.shape_index = 3
        animation = BaseTest.slides_api.update_animation_interactive_sequence_effect(file_name, 1, 1, 1, dto, "password", folder_name)
        self.assertEqual(1, len(animation.main_sequence))
        self.assertEqual(1, len(animation.interactive_sequences))

    def test_animation_delete(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        animation = BaseTest.slides_api.delete_animation(file_name, 1, "password", folder_name)
        self.assertEqual(0, len(animation.main_sequence))
        self.assertEqual(0, len(animation.interactive_sequences))

    def test_animation_delete_main_sequence(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        animation = BaseTest.slides_api.delete_animation_main_sequence(file_name, 1, "password", folder_name)
        self.assertEqual(0, len(animation.main_sequence))
        self.assertEqual(1, len(animation.interactive_sequences))

    def test_animation_delete_main_sequence_effect(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        animation = BaseTest.slides_api.delete_animation_effect(file_name, 1, 1, "password", folder_name)
        self.assertEqual(0, len(animation.main_sequence))
        self.assertEqual(1, len(animation.interactive_sequences))

    def test_animation_delete_interactive_sequences(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        animation = BaseTest.slides_api.delete_animation_interactive_sequences(file_name, 1, "password", folder_name)
        self.assertEqual(1, len(animation.main_sequence))
        self.assertEqual(0, len(animation.interactive_sequences))

    def test_animation_delete_interactive_sequence(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        animation = BaseTest.slides_api.delete_animation_interactive_sequence(file_name, 1, 1, "password", folder_name)
        self.assertEqual(1, len(animation.main_sequence))
        self.assertEqual(0, len(animation.interactive_sequences))

    def test_animation_delete_interactive_sequence_effect(self):
        folder_name = "TempSlidesSDK"
        file_name = "test.pptx"
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)
        animation = BaseTest.slides_api.delete_animation_interactive_sequence_effect(file_name, 1, 1, 1, "password", folder_name)
        self.assertEqual(1, len(animation.main_sequence))
        self.assertEqual(1, len(animation.interactive_sequences))

    def test_pipeline(self):
        file1 = RequestInputFile()
        file1.type = "Request"
        file1.index = 0

        file2 = RequestInputFile()
        file2.type = "Request"
        file2.index = 1

        input = Input()
        input.templateData = file1
        input.template = file2

        output = OutputFile("Response")
        output.type = "Response"

        task = Save()
        task.format = ExportFormat.PPTX
        task.output = output
        task.type = "Save"

        pipeline = Pipeline()
        pipeline.input = input
        pipeline.tasks = [ task ]

        files = {}
        with open("TestData/TemplatingCVDataWithBase64.xml", 'rb') as f:
            files["file1"] = ("TemplatingCVDataWithBase64.xml", f.read())
 
        with open("TestData/TemplateCV.pptx", 'rb') as f:
            files["file2"] = ("TemplateCV.pptx", f.read())

        result = self.api.pipeline(pipeline, files)
        self.assertTrue(isinstance(result, str))
        self.assertTrue(len(result) > 0)

    def test_base_shape(self):
        self.initialize('get_slide_shape', None, None)
        result = self.api.get_shape("test.pptx", 1, 1, "password", "TempSlidesSDK")
        self.assertEqual("1", result.text)

    def test_chart(self):
        chart = Chart()
        self.assertEqual("Chart", chart.type)

    def test_nullable_properties(self):
        folder_name = "TempSlidesSDK";
        file_name = "test.pptx";
        password = "password";
        min1  = 44.3;
        min2 = 12;
        max1 = 104.3;
        max2 = 87;
        self.initialize('no_method', 'no_property', None)
        BaseTest.slides_api.copy_file("TempTests/" + file_name, folder_name + "/" + file_name)

        test_dto = Chart()
        test_dto.chart_type = "Line"
        test_dto.width = 400
        test_dto.height = 300
        test_title = ChartTitle()
        test_title.has_title = True
        test_title.text = "MyTitle"
        test_dto.title = test_title
        test_series = OneValueSeries()
        test_series.type = "ClusteredColumn"
        test_series.data_point_type = "OneValue"
        test_series.name = "Series1"
        test_point1 = OneValueChartDataPoint
        test_point1.value = 40
        test_point2 = OneValueChartDataPoint()
        test_point2.value = 50
        test_series.data_points = [ test_point1, test_point2 ]
        test_dto.series = ([test_series])
        test_axes = Axes()
        test_axis = Axis()
        test_axis.is_automatic_min_value = False
        test_axis.min_value = min1
        test_axis.is_automatic_max_value = False
        test_axis.max_value = max1
        test_axes.horizontal_axis = test_axis
        test_dto.axes = test_axes
        result = BaseTest.slides_api.create_shape(file_name, 1, test_dto, None, None, password, folder_name)

        result = BaseTest.slides_api.get_shape(file_name, 1, 5, password, folder_name)
        self.assertEqual(min1, result.axes.horizontal_axis.min_value)
        self.assertEqual(max1, result.axes.horizontal_axis.max_value)

        test_dto = Chart()
        test_axes = Axes()
        test_axis = Axis()
        test_axis.min_value = min2
        test_axes.horizontal_axis = test_axis
        test_dto.axes = test_axes
        result = BaseTest.slides_api.update_shape(file_name, 1, 5, test_dto, password, folder_name)

        result = BaseTest.slides_api.get_shape(file_name, 1, 5, password, folder_name)
        self.assertEqual(min2, result.axes.horizontal_axis.min_value)
        self.assertEqual(max1, result.axes.horizontal_axis.max_value)

        test_axis = Axis()
        test_axis.max_value = max2
        test_axes.horizontal_axis = test_axis
        test_dto.axes = test_axes
        result = BaseTest.slides_api.update_shape(file_name, 1, 5, test_dto, password, folder_name)

        result = BaseTest.slides_api.get_shape(file_name, 1, 5, password, folder_name)
        self.assertEqual(min2, result.axes.horizontal_axis.min_value)
        self.assertEqual(max2, result.axes.horizontal_axis.max_value)

    def test_timeout(self):
        return # unstable test
        self.initialize('post_slide_save_as', None, None)
        config = Configuration()
        config.app_sid = self.configuration.app_sid
        config.app_key = self.configuration.app_key
        config.base_url = self.configuration.base_url
        config.auth_base_url = self.configuration.auth_base_url
        config.debug = self.configuration.debug
        config.timeout = 1
        api = asposeslidescloud.apis.slides_api.SlidesApi(config)  # noqa: E501
        result = api.download_slide("test.pptx", 1, "svg", None, None, None, "password", "TempSlidesSDK")

if __name__ == '__main__':
    unittest.main()
