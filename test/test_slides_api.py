# coding: utf-8

# -----------------------------------------------------------------------------------
# <copyright company="Aspose">
#   Copyright (c) 2018 Aspose.Slides for Cloud
# </copyright>
# <summary>
#   Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in all
#  copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#  SOFTWARE.
# </summary>
# -----------------------------------------------------------------------------------

from __future__ import absolute_import

import unittest

from test.base_test import BaseTest

import asposeslidescloud
from asposeslidescloud.apis.slides_api import SlidesApi  # noqa: E501
from asposeslidescloud.rest import ApiException

class TestSlidesApi(BaseTest):

    def setUp(self):
        self.api = asposeslidescloud.apis.slides_api.SlidesApi(self.configuration)  # noqa: E501

    def tearDown(self):
        pass

    def test_align_shapes(self):
        """Test case for align_shapes
        """
        param_name = self.get_test_value('align_shapes', 'name', 'str')
        param_slide_index = self.get_test_value('align_shapes', 'slide_index', 'int')
        param_alignment_type = self.get_test_value('align_shapes', 'alignment_type', 'str')
        param_align_to_slide = self.get_test_value('align_shapes', 'align_to_slide', 'bool')
        param_shapes = self.get_test_value('align_shapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('align_shapes', 'password', 'str')
        param_folder = self.get_test_value('align_shapes', 'folder', 'str')
        param_storage = self.get_test_value('align_shapes', 'storage', 'str')
        self.initialize('align_shapes', None, None)
        response = self.api.align_shapes(param_name, param_slide_index, param_alignment_type, param_align_to_slide, param_shapes, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_align_shapes_invalid_name(self):
        """Test case for align_shapes with invalid name
        """
        param_name = self.get_test_value('align_shapes', 'name', 'str')
        param_slide_index = self.get_test_value('align_shapes', 'slide_index', 'int')
        param_alignment_type = self.get_test_value('align_shapes', 'alignment_type', 'str')
        param_align_to_slide = self.get_test_value('align_shapes', 'align_to_slide', 'bool')
        param_shapes = self.get_test_value('align_shapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('align_shapes', 'password', 'str')
        param_folder = self.get_test_value('align_shapes', 'folder', 'str')
        param_storage = self.get_test_value('align_shapes', 'storage', 'str')
        param_name = self.get_invalid_test_value('align_shapes', 'name', param_name, 'str')
        self.initialize('align_shapes', 'name', param_name)
        ok = False
        try:
            self.api.align_shapes(param_name, param_slide_index, param_alignment_type, param_align_to_slide, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'align_shapes', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'align_shapes', 'name', param_name)
        if ok:
            self.assert_no_exception('align_shapes', 'name')

    def test_align_shapes_invalid_slide_index(self):
        """Test case for align_shapes with invalid slide_index
        """
        param_name = self.get_test_value('align_shapes', 'name', 'str')
        param_slide_index = self.get_test_value('align_shapes', 'slide_index', 'int')
        param_alignment_type = self.get_test_value('align_shapes', 'alignment_type', 'str')
        param_align_to_slide = self.get_test_value('align_shapes', 'align_to_slide', 'bool')
        param_shapes = self.get_test_value('align_shapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('align_shapes', 'password', 'str')
        param_folder = self.get_test_value('align_shapes', 'folder', 'str')
        param_storage = self.get_test_value('align_shapes', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('align_shapes', 'slide_index', param_slide_index, 'int')
        self.initialize('align_shapes', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.align_shapes(param_name, param_slide_index, param_alignment_type, param_align_to_slide, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'align_shapes', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'align_shapes', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('align_shapes', 'slide_index')

    def test_align_shapes_invalid_alignment_type(self):
        """Test case for align_shapes with invalid alignment_type
        """
        param_name = self.get_test_value('align_shapes', 'name', 'str')
        param_slide_index = self.get_test_value('align_shapes', 'slide_index', 'int')
        param_alignment_type = self.get_test_value('align_shapes', 'alignment_type', 'str')
        param_align_to_slide = self.get_test_value('align_shapes', 'align_to_slide', 'bool')
        param_shapes = self.get_test_value('align_shapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('align_shapes', 'password', 'str')
        param_folder = self.get_test_value('align_shapes', 'folder', 'str')
        param_storage = self.get_test_value('align_shapes', 'storage', 'str')
        param_alignment_type = self.get_invalid_test_value('align_shapes', 'alignment_type', param_alignment_type, 'str')
        self.initialize('align_shapes', 'alignment_type', param_alignment_type)
        ok = False
        try:
            self.api.align_shapes(param_name, param_slide_index, param_alignment_type, param_align_to_slide, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'align_shapes', 'alignment_type', param_alignment_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'align_shapes', 'alignment_type', param_alignment_type)
        if ok:
            self.assert_no_exception('align_shapes', 'alignment_type')

    def test_align_shapes_invalid_align_to_slide(self):
        """Test case for align_shapes with invalid align_to_slide
        """
        param_name = self.get_test_value('align_shapes', 'name', 'str')
        param_slide_index = self.get_test_value('align_shapes', 'slide_index', 'int')
        param_alignment_type = self.get_test_value('align_shapes', 'alignment_type', 'str')
        param_align_to_slide = self.get_test_value('align_shapes', 'align_to_slide', 'bool')
        param_shapes = self.get_test_value('align_shapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('align_shapes', 'password', 'str')
        param_folder = self.get_test_value('align_shapes', 'folder', 'str')
        param_storage = self.get_test_value('align_shapes', 'storage', 'str')
        param_align_to_slide = self.get_invalid_test_value('align_shapes', 'align_to_slide', param_align_to_slide, 'bool')
        self.initialize('align_shapes', 'align_to_slide', param_align_to_slide)
        ok = False
        try:
            self.api.align_shapes(param_name, param_slide_index, param_alignment_type, param_align_to_slide, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'align_shapes', 'align_to_slide', param_align_to_slide)
        except ValueError as ex:
            self.assert_value_error(ex, 'align_shapes', 'align_to_slide', param_align_to_slide)
        if ok:
            self.assert_no_exception('align_shapes', 'align_to_slide')

    def test_align_shapes_invalid_shapes(self):
        """Test case for align_shapes with invalid shapes
        """
        param_name = self.get_test_value('align_shapes', 'name', 'str')
        param_slide_index = self.get_test_value('align_shapes', 'slide_index', 'int')
        param_alignment_type = self.get_test_value('align_shapes', 'alignment_type', 'str')
        param_align_to_slide = self.get_test_value('align_shapes', 'align_to_slide', 'bool')
        param_shapes = self.get_test_value('align_shapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('align_shapes', 'password', 'str')
        param_folder = self.get_test_value('align_shapes', 'folder', 'str')
        param_storage = self.get_test_value('align_shapes', 'storage', 'str')
        param_shapes = self.get_invalid_test_value('align_shapes', 'shapes', param_shapes, 'list[int]')
        self.initialize('align_shapes', 'shapes', param_shapes)
        ok = False
        try:
            self.api.align_shapes(param_name, param_slide_index, param_alignment_type, param_align_to_slide, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'align_shapes', 'shapes', param_shapes)
        except ValueError as ex:
            self.assert_value_error(ex, 'align_shapes', 'shapes', param_shapes)
        if ok:
            self.assert_no_exception('align_shapes', 'shapes')

    def test_align_shapes_invalid_password(self):
        """Test case for align_shapes with invalid password
        """
        param_name = self.get_test_value('align_shapes', 'name', 'str')
        param_slide_index = self.get_test_value('align_shapes', 'slide_index', 'int')
        param_alignment_type = self.get_test_value('align_shapes', 'alignment_type', 'str')
        param_align_to_slide = self.get_test_value('align_shapes', 'align_to_slide', 'bool')
        param_shapes = self.get_test_value('align_shapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('align_shapes', 'password', 'str')
        param_folder = self.get_test_value('align_shapes', 'folder', 'str')
        param_storage = self.get_test_value('align_shapes', 'storage', 'str')
        param_password = self.get_invalid_test_value('align_shapes', 'password', param_password, 'str')
        self.initialize('align_shapes', 'password', param_password)
        ok = False
        try:
            self.api.align_shapes(param_name, param_slide_index, param_alignment_type, param_align_to_slide, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'align_shapes', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'align_shapes', 'password', param_password)
        if ok:
            self.assert_no_exception('align_shapes', 'password')

    def test_align_shapes_invalid_folder(self):
        """Test case for align_shapes with invalid folder
        """
        param_name = self.get_test_value('align_shapes', 'name', 'str')
        param_slide_index = self.get_test_value('align_shapes', 'slide_index', 'int')
        param_alignment_type = self.get_test_value('align_shapes', 'alignment_type', 'str')
        param_align_to_slide = self.get_test_value('align_shapes', 'align_to_slide', 'bool')
        param_shapes = self.get_test_value('align_shapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('align_shapes', 'password', 'str')
        param_folder = self.get_test_value('align_shapes', 'folder', 'str')
        param_storage = self.get_test_value('align_shapes', 'storage', 'str')
        param_folder = self.get_invalid_test_value('align_shapes', 'folder', param_folder, 'str')
        self.initialize('align_shapes', 'folder', param_folder)
        ok = False
        try:
            self.api.align_shapes(param_name, param_slide_index, param_alignment_type, param_align_to_slide, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'align_shapes', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'align_shapes', 'folder', param_folder)
        if ok:
            self.assert_no_exception('align_shapes', 'folder')

    def test_align_shapes_invalid_storage(self):
        """Test case for align_shapes with invalid storage
        """
        param_name = self.get_test_value('align_shapes', 'name', 'str')
        param_slide_index = self.get_test_value('align_shapes', 'slide_index', 'int')
        param_alignment_type = self.get_test_value('align_shapes', 'alignment_type', 'str')
        param_align_to_slide = self.get_test_value('align_shapes', 'align_to_slide', 'bool')
        param_shapes = self.get_test_value('align_shapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('align_shapes', 'password', 'str')
        param_folder = self.get_test_value('align_shapes', 'folder', 'str')
        param_storage = self.get_test_value('align_shapes', 'storage', 'str')
        param_storage = self.get_invalid_test_value('align_shapes', 'storage', param_storage, 'str')
        self.initialize('align_shapes', 'storage', param_storage)
        ok = False
        try:
            self.api.align_shapes(param_name, param_slide_index, param_alignment_type, param_align_to_slide, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'align_shapes', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'align_shapes', 'storage', param_storage)
        if ok:
            self.assert_no_exception('align_shapes', 'storage')

    def test_align_special_slide_shapes(self):
        """Test case for align_special_slide_shapes
        """
        param_name = self.get_test_value('align_special_slide_shapes', 'name', 'str')
        param_slide_index = self.get_test_value('align_special_slide_shapes', 'slide_index', 'int')
        param_slide_type = self.get_test_value('align_special_slide_shapes', 'slide_type', 'str')
        param_alignment_type = self.get_test_value('align_special_slide_shapes', 'alignment_type', 'str')
        param_align_to_slide = self.get_test_value('align_special_slide_shapes', 'align_to_slide', 'bool')
        param_shapes = self.get_test_value('align_special_slide_shapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('align_special_slide_shapes', 'password', 'str')
        param_folder = self.get_test_value('align_special_slide_shapes', 'folder', 'str')
        param_storage = self.get_test_value('align_special_slide_shapes', 'storage', 'str')
        self.initialize('align_special_slide_shapes', None, None)
        response = self.api.align_special_slide_shapes(param_name, param_slide_index, param_slide_type, param_alignment_type, param_align_to_slide, param_shapes, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_align_special_slide_shapes_invalid_name(self):
        """Test case for align_special_slide_shapes with invalid name
        """
        param_name = self.get_test_value('align_special_slide_shapes', 'name', 'str')
        param_slide_index = self.get_test_value('align_special_slide_shapes', 'slide_index', 'int')
        param_slide_type = self.get_test_value('align_special_slide_shapes', 'slide_type', 'str')
        param_alignment_type = self.get_test_value('align_special_slide_shapes', 'alignment_type', 'str')
        param_align_to_slide = self.get_test_value('align_special_slide_shapes', 'align_to_slide', 'bool')
        param_shapes = self.get_test_value('align_special_slide_shapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('align_special_slide_shapes', 'password', 'str')
        param_folder = self.get_test_value('align_special_slide_shapes', 'folder', 'str')
        param_storage = self.get_test_value('align_special_slide_shapes', 'storage', 'str')
        param_name = self.get_invalid_test_value('align_special_slide_shapes', 'name', param_name, 'str')
        self.initialize('align_special_slide_shapes', 'name', param_name)
        ok = False
        try:
            self.api.align_special_slide_shapes(param_name, param_slide_index, param_slide_type, param_alignment_type, param_align_to_slide, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'align_special_slide_shapes', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'align_special_slide_shapes', 'name', param_name)
        if ok:
            self.assert_no_exception('align_special_slide_shapes', 'name')

    def test_align_special_slide_shapes_invalid_slide_index(self):
        """Test case for align_special_slide_shapes with invalid slide_index
        """
        param_name = self.get_test_value('align_special_slide_shapes', 'name', 'str')
        param_slide_index = self.get_test_value('align_special_slide_shapes', 'slide_index', 'int')
        param_slide_type = self.get_test_value('align_special_slide_shapes', 'slide_type', 'str')
        param_alignment_type = self.get_test_value('align_special_slide_shapes', 'alignment_type', 'str')
        param_align_to_slide = self.get_test_value('align_special_slide_shapes', 'align_to_slide', 'bool')
        param_shapes = self.get_test_value('align_special_slide_shapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('align_special_slide_shapes', 'password', 'str')
        param_folder = self.get_test_value('align_special_slide_shapes', 'folder', 'str')
        param_storage = self.get_test_value('align_special_slide_shapes', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('align_special_slide_shapes', 'slide_index', param_slide_index, 'int')
        self.initialize('align_special_slide_shapes', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.align_special_slide_shapes(param_name, param_slide_index, param_slide_type, param_alignment_type, param_align_to_slide, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'align_special_slide_shapes', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'align_special_slide_shapes', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('align_special_slide_shapes', 'slide_index')

    def test_align_special_slide_shapes_invalid_slide_type(self):
        """Test case for align_special_slide_shapes with invalid slide_type
        """
        param_name = self.get_test_value('align_special_slide_shapes', 'name', 'str')
        param_slide_index = self.get_test_value('align_special_slide_shapes', 'slide_index', 'int')
        param_slide_type = self.get_test_value('align_special_slide_shapes', 'slide_type', 'str')
        param_alignment_type = self.get_test_value('align_special_slide_shapes', 'alignment_type', 'str')
        param_align_to_slide = self.get_test_value('align_special_slide_shapes', 'align_to_slide', 'bool')
        param_shapes = self.get_test_value('align_special_slide_shapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('align_special_slide_shapes', 'password', 'str')
        param_folder = self.get_test_value('align_special_slide_shapes', 'folder', 'str')
        param_storage = self.get_test_value('align_special_slide_shapes', 'storage', 'str')
        param_slide_type = self.get_invalid_test_value('align_special_slide_shapes', 'slide_type', param_slide_type, 'str')
        self.initialize('align_special_slide_shapes', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.align_special_slide_shapes(param_name, param_slide_index, param_slide_type, param_alignment_type, param_align_to_slide, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'align_special_slide_shapes', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'align_special_slide_shapes', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('align_special_slide_shapes', 'slide_type')

    def test_align_special_slide_shapes_invalid_alignment_type(self):
        """Test case for align_special_slide_shapes with invalid alignment_type
        """
        param_name = self.get_test_value('align_special_slide_shapes', 'name', 'str')
        param_slide_index = self.get_test_value('align_special_slide_shapes', 'slide_index', 'int')
        param_slide_type = self.get_test_value('align_special_slide_shapes', 'slide_type', 'str')
        param_alignment_type = self.get_test_value('align_special_slide_shapes', 'alignment_type', 'str')
        param_align_to_slide = self.get_test_value('align_special_slide_shapes', 'align_to_slide', 'bool')
        param_shapes = self.get_test_value('align_special_slide_shapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('align_special_slide_shapes', 'password', 'str')
        param_folder = self.get_test_value('align_special_slide_shapes', 'folder', 'str')
        param_storage = self.get_test_value('align_special_slide_shapes', 'storage', 'str')
        param_alignment_type = self.get_invalid_test_value('align_special_slide_shapes', 'alignment_type', param_alignment_type, 'str')
        self.initialize('align_special_slide_shapes', 'alignment_type', param_alignment_type)
        ok = False
        try:
            self.api.align_special_slide_shapes(param_name, param_slide_index, param_slide_type, param_alignment_type, param_align_to_slide, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'align_special_slide_shapes', 'alignment_type', param_alignment_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'align_special_slide_shapes', 'alignment_type', param_alignment_type)
        if ok:
            self.assert_no_exception('align_special_slide_shapes', 'alignment_type')

    def test_align_special_slide_shapes_invalid_align_to_slide(self):
        """Test case for align_special_slide_shapes with invalid align_to_slide
        """
        param_name = self.get_test_value('align_special_slide_shapes', 'name', 'str')
        param_slide_index = self.get_test_value('align_special_slide_shapes', 'slide_index', 'int')
        param_slide_type = self.get_test_value('align_special_slide_shapes', 'slide_type', 'str')
        param_alignment_type = self.get_test_value('align_special_slide_shapes', 'alignment_type', 'str')
        param_align_to_slide = self.get_test_value('align_special_slide_shapes', 'align_to_slide', 'bool')
        param_shapes = self.get_test_value('align_special_slide_shapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('align_special_slide_shapes', 'password', 'str')
        param_folder = self.get_test_value('align_special_slide_shapes', 'folder', 'str')
        param_storage = self.get_test_value('align_special_slide_shapes', 'storage', 'str')
        param_align_to_slide = self.get_invalid_test_value('align_special_slide_shapes', 'align_to_slide', param_align_to_slide, 'bool')
        self.initialize('align_special_slide_shapes', 'align_to_slide', param_align_to_slide)
        ok = False
        try:
            self.api.align_special_slide_shapes(param_name, param_slide_index, param_slide_type, param_alignment_type, param_align_to_slide, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'align_special_slide_shapes', 'align_to_slide', param_align_to_slide)
        except ValueError as ex:
            self.assert_value_error(ex, 'align_special_slide_shapes', 'align_to_slide', param_align_to_slide)
        if ok:
            self.assert_no_exception('align_special_slide_shapes', 'align_to_slide')

    def test_align_special_slide_shapes_invalid_shapes(self):
        """Test case for align_special_slide_shapes with invalid shapes
        """
        param_name = self.get_test_value('align_special_slide_shapes', 'name', 'str')
        param_slide_index = self.get_test_value('align_special_slide_shapes', 'slide_index', 'int')
        param_slide_type = self.get_test_value('align_special_slide_shapes', 'slide_type', 'str')
        param_alignment_type = self.get_test_value('align_special_slide_shapes', 'alignment_type', 'str')
        param_align_to_slide = self.get_test_value('align_special_slide_shapes', 'align_to_slide', 'bool')
        param_shapes = self.get_test_value('align_special_slide_shapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('align_special_slide_shapes', 'password', 'str')
        param_folder = self.get_test_value('align_special_slide_shapes', 'folder', 'str')
        param_storage = self.get_test_value('align_special_slide_shapes', 'storage', 'str')
        param_shapes = self.get_invalid_test_value('align_special_slide_shapes', 'shapes', param_shapes, 'list[int]')
        self.initialize('align_special_slide_shapes', 'shapes', param_shapes)
        ok = False
        try:
            self.api.align_special_slide_shapes(param_name, param_slide_index, param_slide_type, param_alignment_type, param_align_to_slide, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'align_special_slide_shapes', 'shapes', param_shapes)
        except ValueError as ex:
            self.assert_value_error(ex, 'align_special_slide_shapes', 'shapes', param_shapes)
        if ok:
            self.assert_no_exception('align_special_slide_shapes', 'shapes')

    def test_align_special_slide_shapes_invalid_password(self):
        """Test case for align_special_slide_shapes with invalid password
        """
        param_name = self.get_test_value('align_special_slide_shapes', 'name', 'str')
        param_slide_index = self.get_test_value('align_special_slide_shapes', 'slide_index', 'int')
        param_slide_type = self.get_test_value('align_special_slide_shapes', 'slide_type', 'str')
        param_alignment_type = self.get_test_value('align_special_slide_shapes', 'alignment_type', 'str')
        param_align_to_slide = self.get_test_value('align_special_slide_shapes', 'align_to_slide', 'bool')
        param_shapes = self.get_test_value('align_special_slide_shapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('align_special_slide_shapes', 'password', 'str')
        param_folder = self.get_test_value('align_special_slide_shapes', 'folder', 'str')
        param_storage = self.get_test_value('align_special_slide_shapes', 'storage', 'str')
        param_password = self.get_invalid_test_value('align_special_slide_shapes', 'password', param_password, 'str')
        self.initialize('align_special_slide_shapes', 'password', param_password)
        ok = False
        try:
            self.api.align_special_slide_shapes(param_name, param_slide_index, param_slide_type, param_alignment_type, param_align_to_slide, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'align_special_slide_shapes', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'align_special_slide_shapes', 'password', param_password)
        if ok:
            self.assert_no_exception('align_special_slide_shapes', 'password')

    def test_align_special_slide_shapes_invalid_folder(self):
        """Test case for align_special_slide_shapes with invalid folder
        """
        param_name = self.get_test_value('align_special_slide_shapes', 'name', 'str')
        param_slide_index = self.get_test_value('align_special_slide_shapes', 'slide_index', 'int')
        param_slide_type = self.get_test_value('align_special_slide_shapes', 'slide_type', 'str')
        param_alignment_type = self.get_test_value('align_special_slide_shapes', 'alignment_type', 'str')
        param_align_to_slide = self.get_test_value('align_special_slide_shapes', 'align_to_slide', 'bool')
        param_shapes = self.get_test_value('align_special_slide_shapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('align_special_slide_shapes', 'password', 'str')
        param_folder = self.get_test_value('align_special_slide_shapes', 'folder', 'str')
        param_storage = self.get_test_value('align_special_slide_shapes', 'storage', 'str')
        param_folder = self.get_invalid_test_value('align_special_slide_shapes', 'folder', param_folder, 'str')
        self.initialize('align_special_slide_shapes', 'folder', param_folder)
        ok = False
        try:
            self.api.align_special_slide_shapes(param_name, param_slide_index, param_slide_type, param_alignment_type, param_align_to_slide, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'align_special_slide_shapes', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'align_special_slide_shapes', 'folder', param_folder)
        if ok:
            self.assert_no_exception('align_special_slide_shapes', 'folder')

    def test_align_special_slide_shapes_invalid_storage(self):
        """Test case for align_special_slide_shapes with invalid storage
        """
        param_name = self.get_test_value('align_special_slide_shapes', 'name', 'str')
        param_slide_index = self.get_test_value('align_special_slide_shapes', 'slide_index', 'int')
        param_slide_type = self.get_test_value('align_special_slide_shapes', 'slide_type', 'str')
        param_alignment_type = self.get_test_value('align_special_slide_shapes', 'alignment_type', 'str')
        param_align_to_slide = self.get_test_value('align_special_slide_shapes', 'align_to_slide', 'bool')
        param_shapes = self.get_test_value('align_special_slide_shapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('align_special_slide_shapes', 'password', 'str')
        param_folder = self.get_test_value('align_special_slide_shapes', 'folder', 'str')
        param_storage = self.get_test_value('align_special_slide_shapes', 'storage', 'str')
        param_storage = self.get_invalid_test_value('align_special_slide_shapes', 'storage', param_storage, 'str')
        self.initialize('align_special_slide_shapes', 'storage', param_storage)
        ok = False
        try:
            self.api.align_special_slide_shapes(param_name, param_slide_index, param_slide_type, param_alignment_type, param_align_to_slide, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'align_special_slide_shapes', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'align_special_slide_shapes', 'storage', param_storage)
        if ok:
            self.assert_no_exception('align_special_slide_shapes', 'storage')

    def test_align_subshapes(self):
        """Test case for align_subshapes
        """
        param_name = self.get_test_value('align_subshapes', 'name', 'str')
        param_slide_index = self.get_test_value('align_subshapes', 'slide_index', 'int')
        param_path = self.get_test_value('align_subshapes', 'path', 'str')
        param_alignment_type = self.get_test_value('align_subshapes', 'alignment_type', 'str')
        param_align_to_slide = self.get_test_value('align_subshapes', 'align_to_slide', 'bool')
        param_shapes = self.get_test_value('align_subshapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('align_subshapes', 'password', 'str')
        param_folder = self.get_test_value('align_subshapes', 'folder', 'str')
        param_storage = self.get_test_value('align_subshapes', 'storage', 'str')
        self.initialize('align_subshapes', None, None)
        response = self.api.align_subshapes(param_name, param_slide_index, param_path, param_alignment_type, param_align_to_slide, param_shapes, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_align_subshapes_invalid_name(self):
        """Test case for align_subshapes with invalid name
        """
        param_name = self.get_test_value('align_subshapes', 'name', 'str')
        param_slide_index = self.get_test_value('align_subshapes', 'slide_index', 'int')
        param_path = self.get_test_value('align_subshapes', 'path', 'str')
        param_alignment_type = self.get_test_value('align_subshapes', 'alignment_type', 'str')
        param_align_to_slide = self.get_test_value('align_subshapes', 'align_to_slide', 'bool')
        param_shapes = self.get_test_value('align_subshapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('align_subshapes', 'password', 'str')
        param_folder = self.get_test_value('align_subshapes', 'folder', 'str')
        param_storage = self.get_test_value('align_subshapes', 'storage', 'str')
        param_name = self.get_invalid_test_value('align_subshapes', 'name', param_name, 'str')
        self.initialize('align_subshapes', 'name', param_name)
        ok = False
        try:
            self.api.align_subshapes(param_name, param_slide_index, param_path, param_alignment_type, param_align_to_slide, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'align_subshapes', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'align_subshapes', 'name', param_name)
        if ok:
            self.assert_no_exception('align_subshapes', 'name')

    def test_align_subshapes_invalid_slide_index(self):
        """Test case for align_subshapes with invalid slide_index
        """
        param_name = self.get_test_value('align_subshapes', 'name', 'str')
        param_slide_index = self.get_test_value('align_subshapes', 'slide_index', 'int')
        param_path = self.get_test_value('align_subshapes', 'path', 'str')
        param_alignment_type = self.get_test_value('align_subshapes', 'alignment_type', 'str')
        param_align_to_slide = self.get_test_value('align_subshapes', 'align_to_slide', 'bool')
        param_shapes = self.get_test_value('align_subshapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('align_subshapes', 'password', 'str')
        param_folder = self.get_test_value('align_subshapes', 'folder', 'str')
        param_storage = self.get_test_value('align_subshapes', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('align_subshapes', 'slide_index', param_slide_index, 'int')
        self.initialize('align_subshapes', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.align_subshapes(param_name, param_slide_index, param_path, param_alignment_type, param_align_to_slide, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'align_subshapes', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'align_subshapes', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('align_subshapes', 'slide_index')

    def test_align_subshapes_invalid_path(self):
        """Test case for align_subshapes with invalid path
        """
        param_name = self.get_test_value('align_subshapes', 'name', 'str')
        param_slide_index = self.get_test_value('align_subshapes', 'slide_index', 'int')
        param_path = self.get_test_value('align_subshapes', 'path', 'str')
        param_alignment_type = self.get_test_value('align_subshapes', 'alignment_type', 'str')
        param_align_to_slide = self.get_test_value('align_subshapes', 'align_to_slide', 'bool')
        param_shapes = self.get_test_value('align_subshapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('align_subshapes', 'password', 'str')
        param_folder = self.get_test_value('align_subshapes', 'folder', 'str')
        param_storage = self.get_test_value('align_subshapes', 'storage', 'str')
        param_path = self.get_invalid_test_value('align_subshapes', 'path', param_path, 'str')
        self.initialize('align_subshapes', 'path', param_path)
        ok = False
        try:
            self.api.align_subshapes(param_name, param_slide_index, param_path, param_alignment_type, param_align_to_slide, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'align_subshapes', 'path', param_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'align_subshapes', 'path', param_path)
        if ok:
            self.assert_no_exception('align_subshapes', 'path')

    def test_align_subshapes_invalid_alignment_type(self):
        """Test case for align_subshapes with invalid alignment_type
        """
        param_name = self.get_test_value('align_subshapes', 'name', 'str')
        param_slide_index = self.get_test_value('align_subshapes', 'slide_index', 'int')
        param_path = self.get_test_value('align_subshapes', 'path', 'str')
        param_alignment_type = self.get_test_value('align_subshapes', 'alignment_type', 'str')
        param_align_to_slide = self.get_test_value('align_subshapes', 'align_to_slide', 'bool')
        param_shapes = self.get_test_value('align_subshapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('align_subshapes', 'password', 'str')
        param_folder = self.get_test_value('align_subshapes', 'folder', 'str')
        param_storage = self.get_test_value('align_subshapes', 'storage', 'str')
        param_alignment_type = self.get_invalid_test_value('align_subshapes', 'alignment_type', param_alignment_type, 'str')
        self.initialize('align_subshapes', 'alignment_type', param_alignment_type)
        ok = False
        try:
            self.api.align_subshapes(param_name, param_slide_index, param_path, param_alignment_type, param_align_to_slide, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'align_subshapes', 'alignment_type', param_alignment_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'align_subshapes', 'alignment_type', param_alignment_type)
        if ok:
            self.assert_no_exception('align_subshapes', 'alignment_type')

    def test_align_subshapes_invalid_align_to_slide(self):
        """Test case for align_subshapes with invalid align_to_slide
        """
        param_name = self.get_test_value('align_subshapes', 'name', 'str')
        param_slide_index = self.get_test_value('align_subshapes', 'slide_index', 'int')
        param_path = self.get_test_value('align_subshapes', 'path', 'str')
        param_alignment_type = self.get_test_value('align_subshapes', 'alignment_type', 'str')
        param_align_to_slide = self.get_test_value('align_subshapes', 'align_to_slide', 'bool')
        param_shapes = self.get_test_value('align_subshapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('align_subshapes', 'password', 'str')
        param_folder = self.get_test_value('align_subshapes', 'folder', 'str')
        param_storage = self.get_test_value('align_subshapes', 'storage', 'str')
        param_align_to_slide = self.get_invalid_test_value('align_subshapes', 'align_to_slide', param_align_to_slide, 'bool')
        self.initialize('align_subshapes', 'align_to_slide', param_align_to_slide)
        ok = False
        try:
            self.api.align_subshapes(param_name, param_slide_index, param_path, param_alignment_type, param_align_to_slide, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'align_subshapes', 'align_to_slide', param_align_to_slide)
        except ValueError as ex:
            self.assert_value_error(ex, 'align_subshapes', 'align_to_slide', param_align_to_slide)
        if ok:
            self.assert_no_exception('align_subshapes', 'align_to_slide')

    def test_align_subshapes_invalid_shapes(self):
        """Test case for align_subshapes with invalid shapes
        """
        param_name = self.get_test_value('align_subshapes', 'name', 'str')
        param_slide_index = self.get_test_value('align_subshapes', 'slide_index', 'int')
        param_path = self.get_test_value('align_subshapes', 'path', 'str')
        param_alignment_type = self.get_test_value('align_subshapes', 'alignment_type', 'str')
        param_align_to_slide = self.get_test_value('align_subshapes', 'align_to_slide', 'bool')
        param_shapes = self.get_test_value('align_subshapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('align_subshapes', 'password', 'str')
        param_folder = self.get_test_value('align_subshapes', 'folder', 'str')
        param_storage = self.get_test_value('align_subshapes', 'storage', 'str')
        param_shapes = self.get_invalid_test_value('align_subshapes', 'shapes', param_shapes, 'list[int]')
        self.initialize('align_subshapes', 'shapes', param_shapes)
        ok = False
        try:
            self.api.align_subshapes(param_name, param_slide_index, param_path, param_alignment_type, param_align_to_slide, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'align_subshapes', 'shapes', param_shapes)
        except ValueError as ex:
            self.assert_value_error(ex, 'align_subshapes', 'shapes', param_shapes)
        if ok:
            self.assert_no_exception('align_subshapes', 'shapes')

    def test_align_subshapes_invalid_password(self):
        """Test case for align_subshapes with invalid password
        """
        param_name = self.get_test_value('align_subshapes', 'name', 'str')
        param_slide_index = self.get_test_value('align_subshapes', 'slide_index', 'int')
        param_path = self.get_test_value('align_subshapes', 'path', 'str')
        param_alignment_type = self.get_test_value('align_subshapes', 'alignment_type', 'str')
        param_align_to_slide = self.get_test_value('align_subshapes', 'align_to_slide', 'bool')
        param_shapes = self.get_test_value('align_subshapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('align_subshapes', 'password', 'str')
        param_folder = self.get_test_value('align_subshapes', 'folder', 'str')
        param_storage = self.get_test_value('align_subshapes', 'storage', 'str')
        param_password = self.get_invalid_test_value('align_subshapes', 'password', param_password, 'str')
        self.initialize('align_subshapes', 'password', param_password)
        ok = False
        try:
            self.api.align_subshapes(param_name, param_slide_index, param_path, param_alignment_type, param_align_to_slide, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'align_subshapes', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'align_subshapes', 'password', param_password)
        if ok:
            self.assert_no_exception('align_subshapes', 'password')

    def test_align_subshapes_invalid_folder(self):
        """Test case for align_subshapes with invalid folder
        """
        param_name = self.get_test_value('align_subshapes', 'name', 'str')
        param_slide_index = self.get_test_value('align_subshapes', 'slide_index', 'int')
        param_path = self.get_test_value('align_subshapes', 'path', 'str')
        param_alignment_type = self.get_test_value('align_subshapes', 'alignment_type', 'str')
        param_align_to_slide = self.get_test_value('align_subshapes', 'align_to_slide', 'bool')
        param_shapes = self.get_test_value('align_subshapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('align_subshapes', 'password', 'str')
        param_folder = self.get_test_value('align_subshapes', 'folder', 'str')
        param_storage = self.get_test_value('align_subshapes', 'storage', 'str')
        param_folder = self.get_invalid_test_value('align_subshapes', 'folder', param_folder, 'str')
        self.initialize('align_subshapes', 'folder', param_folder)
        ok = False
        try:
            self.api.align_subshapes(param_name, param_slide_index, param_path, param_alignment_type, param_align_to_slide, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'align_subshapes', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'align_subshapes', 'folder', param_folder)
        if ok:
            self.assert_no_exception('align_subshapes', 'folder')

    def test_align_subshapes_invalid_storage(self):
        """Test case for align_subshapes with invalid storage
        """
        param_name = self.get_test_value('align_subshapes', 'name', 'str')
        param_slide_index = self.get_test_value('align_subshapes', 'slide_index', 'int')
        param_path = self.get_test_value('align_subshapes', 'path', 'str')
        param_alignment_type = self.get_test_value('align_subshapes', 'alignment_type', 'str')
        param_align_to_slide = self.get_test_value('align_subshapes', 'align_to_slide', 'bool')
        param_shapes = self.get_test_value('align_subshapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('align_subshapes', 'password', 'str')
        param_folder = self.get_test_value('align_subshapes', 'folder', 'str')
        param_storage = self.get_test_value('align_subshapes', 'storage', 'str')
        param_storage = self.get_invalid_test_value('align_subshapes', 'storage', param_storage, 'str')
        self.initialize('align_subshapes', 'storage', param_storage)
        ok = False
        try:
            self.api.align_subshapes(param_name, param_slide_index, param_path, param_alignment_type, param_align_to_slide, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'align_subshapes', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'align_subshapes', 'storage', param_storage)
        if ok:
            self.assert_no_exception('align_subshapes', 'storage')

    def test_convert(self):
        """Test case for convert
        """
        param_document = self.get_test_value('convert', 'document', 'file')
        param_format = self.get_test_value('convert', 'format', 'str')
        param_password = self.get_test_value('convert', 'password', 'str')
        param_storage = self.get_test_value('convert', 'storage', 'str')
        param_fonts_folder = self.get_test_value('convert', 'fonts_folder', 'str')
        param_slides = self.get_test_value('convert', 'slides', 'list[int]')
        param_options = self.get_test_value('convert', 'options', 'ExportOptions')
        self.initialize('convert', None, None)
        response = self.api.convert(param_document, param_format, param_password, param_storage, param_fonts_folder, param_slides, param_options)
        self.assertTrue(isinstance(response, str))
        self.assertTrue(len(response) > 0)

    def test_convert_invalid_document(self):
        """Test case for convert with invalid document
        """
        param_document = self.get_test_value('convert', 'document', 'file')
        param_format = self.get_test_value('convert', 'format', 'str')
        param_password = self.get_test_value('convert', 'password', 'str')
        param_storage = self.get_test_value('convert', 'storage', 'str')
        param_fonts_folder = self.get_test_value('convert', 'fonts_folder', 'str')
        param_slides = self.get_test_value('convert', 'slides', 'list[int]')
        param_options = self.get_test_value('convert', 'options', 'ExportOptions')
        param_document = self.get_invalid_test_value('convert', 'document', param_document, 'file')
        self.initialize('convert', 'document', param_document)
        ok = False
        try:
            self.api.convert(param_document, param_format, param_password, param_storage, param_fonts_folder, param_slides, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'convert', 'document', param_document)
        except ValueError as ex:
            self.assert_value_error(ex, 'convert', 'document', param_document)
        if ok:
            self.assert_no_exception('convert', 'document')

    def test_convert_invalid_format(self):
        """Test case for convert with invalid format
        """
        param_document = self.get_test_value('convert', 'document', 'file')
        param_format = self.get_test_value('convert', 'format', 'str')
        param_password = self.get_test_value('convert', 'password', 'str')
        param_storage = self.get_test_value('convert', 'storage', 'str')
        param_fonts_folder = self.get_test_value('convert', 'fonts_folder', 'str')
        param_slides = self.get_test_value('convert', 'slides', 'list[int]')
        param_options = self.get_test_value('convert', 'options', 'ExportOptions')
        param_format = self.get_invalid_test_value('convert', 'format', param_format, 'str')
        self.initialize('convert', 'format', param_format)
        ok = False
        try:
            self.api.convert(param_document, param_format, param_password, param_storage, param_fonts_folder, param_slides, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'convert', 'format', param_format)
        except ValueError as ex:
            self.assert_value_error(ex, 'convert', 'format', param_format)
        if ok:
            self.assert_no_exception('convert', 'format')

    def test_convert_invalid_password(self):
        """Test case for convert with invalid password
        """
        param_document = self.get_test_value('convert', 'document', 'file')
        param_format = self.get_test_value('convert', 'format', 'str')
        param_password = self.get_test_value('convert', 'password', 'str')
        param_storage = self.get_test_value('convert', 'storage', 'str')
        param_fonts_folder = self.get_test_value('convert', 'fonts_folder', 'str')
        param_slides = self.get_test_value('convert', 'slides', 'list[int]')
        param_options = self.get_test_value('convert', 'options', 'ExportOptions')
        param_password = self.get_invalid_test_value('convert', 'password', param_password, 'str')
        self.initialize('convert', 'password', param_password)
        ok = False
        try:
            self.api.convert(param_document, param_format, param_password, param_storage, param_fonts_folder, param_slides, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'convert', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'convert', 'password', param_password)
        if ok:
            self.assert_no_exception('convert', 'password')

    def test_convert_invalid_storage(self):
        """Test case for convert with invalid storage
        """
        param_document = self.get_test_value('convert', 'document', 'file')
        param_format = self.get_test_value('convert', 'format', 'str')
        param_password = self.get_test_value('convert', 'password', 'str')
        param_storage = self.get_test_value('convert', 'storage', 'str')
        param_fonts_folder = self.get_test_value('convert', 'fonts_folder', 'str')
        param_slides = self.get_test_value('convert', 'slides', 'list[int]')
        param_options = self.get_test_value('convert', 'options', 'ExportOptions')
        param_storage = self.get_invalid_test_value('convert', 'storage', param_storage, 'str')
        self.initialize('convert', 'storage', param_storage)
        ok = False
        try:
            self.api.convert(param_document, param_format, param_password, param_storage, param_fonts_folder, param_slides, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'convert', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'convert', 'storage', param_storage)
        if ok:
            self.assert_no_exception('convert', 'storage')

    def test_convert_invalid_fonts_folder(self):
        """Test case for convert with invalid fonts_folder
        """
        param_document = self.get_test_value('convert', 'document', 'file')
        param_format = self.get_test_value('convert', 'format', 'str')
        param_password = self.get_test_value('convert', 'password', 'str')
        param_storage = self.get_test_value('convert', 'storage', 'str')
        param_fonts_folder = self.get_test_value('convert', 'fonts_folder', 'str')
        param_slides = self.get_test_value('convert', 'slides', 'list[int]')
        param_options = self.get_test_value('convert', 'options', 'ExportOptions')
        param_fonts_folder = self.get_invalid_test_value('convert', 'fonts_folder', param_fonts_folder, 'str')
        self.initialize('convert', 'fonts_folder', param_fonts_folder)
        ok = False
        try:
            self.api.convert(param_document, param_format, param_password, param_storage, param_fonts_folder, param_slides, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'convert', 'fonts_folder', param_fonts_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'convert', 'fonts_folder', param_fonts_folder)
        if ok:
            self.assert_no_exception('convert', 'fonts_folder')

    def test_convert_invalid_slides(self):
        """Test case for convert with invalid slides
        """
        param_document = self.get_test_value('convert', 'document', 'file')
        param_format = self.get_test_value('convert', 'format', 'str')
        param_password = self.get_test_value('convert', 'password', 'str')
        param_storage = self.get_test_value('convert', 'storage', 'str')
        param_fonts_folder = self.get_test_value('convert', 'fonts_folder', 'str')
        param_slides = self.get_test_value('convert', 'slides', 'list[int]')
        param_options = self.get_test_value('convert', 'options', 'ExportOptions')
        param_slides = self.get_invalid_test_value('convert', 'slides', param_slides, 'list[int]')
        self.initialize('convert', 'slides', param_slides)
        ok = False
        try:
            self.api.convert(param_document, param_format, param_password, param_storage, param_fonts_folder, param_slides, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'convert', 'slides', param_slides)
        except ValueError as ex:
            self.assert_value_error(ex, 'convert', 'slides', param_slides)
        if ok:
            self.assert_no_exception('convert', 'slides')

    def test_convert_invalid_options(self):
        """Test case for convert with invalid options
        """
        param_document = self.get_test_value('convert', 'document', 'file')
        param_format = self.get_test_value('convert', 'format', 'str')
        param_password = self.get_test_value('convert', 'password', 'str')
        param_storage = self.get_test_value('convert', 'storage', 'str')
        param_fonts_folder = self.get_test_value('convert', 'fonts_folder', 'str')
        param_slides = self.get_test_value('convert', 'slides', 'list[int]')
        param_options = self.get_test_value('convert', 'options', 'ExportOptions')
        param_options = self.get_invalid_test_value('convert', 'options', param_options, 'ExportOptions')
        self.initialize('convert', 'options', param_options)
        ok = False
        try:
            self.api.convert(param_document, param_format, param_password, param_storage, param_fonts_folder, param_slides, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'convert', 'options', param_options)
        except ValueError as ex:
            self.assert_value_error(ex, 'convert', 'options', param_options)
        if ok:
            self.assert_no_exception('convert', 'options')

    def test_convert_and_save(self):
        """Test case for convert_and_save
        """
        param_document = self.get_test_value('convert_and_save', 'document', 'file')
        param_format = self.get_test_value('convert_and_save', 'format', 'str')
        param_out_path = self.get_test_value('convert_and_save', 'out_path', 'str')
        param_password = self.get_test_value('convert_and_save', 'password', 'str')
        param_storage = self.get_test_value('convert_and_save', 'storage', 'str')
        param_fonts_folder = self.get_test_value('convert_and_save', 'fonts_folder', 'str')
        param_slides = self.get_test_value('convert_and_save', 'slides', 'list[int]')
        param_options = self.get_test_value('convert_and_save', 'options', 'ExportOptions')
        self.initialize('convert_and_save', None, None)
        response = self.api.convert_and_save(param_document, param_format, param_out_path, param_password, param_storage, param_fonts_folder, param_slides, param_options)
        self.assertIsNone(response)

    def test_convert_and_save_invalid_document(self):
        """Test case for convert_and_save with invalid document
        """
        param_document = self.get_test_value('convert_and_save', 'document', 'file')
        param_format = self.get_test_value('convert_and_save', 'format', 'str')
        param_out_path = self.get_test_value('convert_and_save', 'out_path', 'str')
        param_password = self.get_test_value('convert_and_save', 'password', 'str')
        param_storage = self.get_test_value('convert_and_save', 'storage', 'str')
        param_fonts_folder = self.get_test_value('convert_and_save', 'fonts_folder', 'str')
        param_slides = self.get_test_value('convert_and_save', 'slides', 'list[int]')
        param_options = self.get_test_value('convert_and_save', 'options', 'ExportOptions')
        param_document = self.get_invalid_test_value('convert_and_save', 'document', param_document, 'file')
        self.initialize('convert_and_save', 'document', param_document)
        ok = False
        try:
            self.api.convert_and_save(param_document, param_format, param_out_path, param_password, param_storage, param_fonts_folder, param_slides, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'convert_and_save', 'document', param_document)
        except ValueError as ex:
            self.assert_value_error(ex, 'convert_and_save', 'document', param_document)
        if ok:
            self.assert_no_exception('convert_and_save', 'document')

    def test_convert_and_save_invalid_format(self):
        """Test case for convert_and_save with invalid format
        """
        param_document = self.get_test_value('convert_and_save', 'document', 'file')
        param_format = self.get_test_value('convert_and_save', 'format', 'str')
        param_out_path = self.get_test_value('convert_and_save', 'out_path', 'str')
        param_password = self.get_test_value('convert_and_save', 'password', 'str')
        param_storage = self.get_test_value('convert_and_save', 'storage', 'str')
        param_fonts_folder = self.get_test_value('convert_and_save', 'fonts_folder', 'str')
        param_slides = self.get_test_value('convert_and_save', 'slides', 'list[int]')
        param_options = self.get_test_value('convert_and_save', 'options', 'ExportOptions')
        param_format = self.get_invalid_test_value('convert_and_save', 'format', param_format, 'str')
        self.initialize('convert_and_save', 'format', param_format)
        ok = False
        try:
            self.api.convert_and_save(param_document, param_format, param_out_path, param_password, param_storage, param_fonts_folder, param_slides, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'convert_and_save', 'format', param_format)
        except ValueError as ex:
            self.assert_value_error(ex, 'convert_and_save', 'format', param_format)
        if ok:
            self.assert_no_exception('convert_and_save', 'format')

    def test_convert_and_save_invalid_out_path(self):
        """Test case for convert_and_save with invalid out_path
        """
        param_document = self.get_test_value('convert_and_save', 'document', 'file')
        param_format = self.get_test_value('convert_and_save', 'format', 'str')
        param_out_path = self.get_test_value('convert_and_save', 'out_path', 'str')
        param_password = self.get_test_value('convert_and_save', 'password', 'str')
        param_storage = self.get_test_value('convert_and_save', 'storage', 'str')
        param_fonts_folder = self.get_test_value('convert_and_save', 'fonts_folder', 'str')
        param_slides = self.get_test_value('convert_and_save', 'slides', 'list[int]')
        param_options = self.get_test_value('convert_and_save', 'options', 'ExportOptions')
        param_out_path = self.get_invalid_test_value('convert_and_save', 'out_path', param_out_path, 'str')
        self.initialize('convert_and_save', 'out_path', param_out_path)
        ok = False
        try:
            self.api.convert_and_save(param_document, param_format, param_out_path, param_password, param_storage, param_fonts_folder, param_slides, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'convert_and_save', 'out_path', param_out_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'convert_and_save', 'out_path', param_out_path)
        if ok:
            self.assert_no_exception('convert_and_save', 'out_path')

    def test_convert_and_save_invalid_password(self):
        """Test case for convert_and_save with invalid password
        """
        param_document = self.get_test_value('convert_and_save', 'document', 'file')
        param_format = self.get_test_value('convert_and_save', 'format', 'str')
        param_out_path = self.get_test_value('convert_and_save', 'out_path', 'str')
        param_password = self.get_test_value('convert_and_save', 'password', 'str')
        param_storage = self.get_test_value('convert_and_save', 'storage', 'str')
        param_fonts_folder = self.get_test_value('convert_and_save', 'fonts_folder', 'str')
        param_slides = self.get_test_value('convert_and_save', 'slides', 'list[int]')
        param_options = self.get_test_value('convert_and_save', 'options', 'ExportOptions')
        param_password = self.get_invalid_test_value('convert_and_save', 'password', param_password, 'str')
        self.initialize('convert_and_save', 'password', param_password)
        ok = False
        try:
            self.api.convert_and_save(param_document, param_format, param_out_path, param_password, param_storage, param_fonts_folder, param_slides, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'convert_and_save', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'convert_and_save', 'password', param_password)
        if ok:
            self.assert_no_exception('convert_and_save', 'password')

    def test_convert_and_save_invalid_storage(self):
        """Test case for convert_and_save with invalid storage
        """
        param_document = self.get_test_value('convert_and_save', 'document', 'file')
        param_format = self.get_test_value('convert_and_save', 'format', 'str')
        param_out_path = self.get_test_value('convert_and_save', 'out_path', 'str')
        param_password = self.get_test_value('convert_and_save', 'password', 'str')
        param_storage = self.get_test_value('convert_and_save', 'storage', 'str')
        param_fonts_folder = self.get_test_value('convert_and_save', 'fonts_folder', 'str')
        param_slides = self.get_test_value('convert_and_save', 'slides', 'list[int]')
        param_options = self.get_test_value('convert_and_save', 'options', 'ExportOptions')
        param_storage = self.get_invalid_test_value('convert_and_save', 'storage', param_storage, 'str')
        self.initialize('convert_and_save', 'storage', param_storage)
        ok = False
        try:
            self.api.convert_and_save(param_document, param_format, param_out_path, param_password, param_storage, param_fonts_folder, param_slides, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'convert_and_save', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'convert_and_save', 'storage', param_storage)
        if ok:
            self.assert_no_exception('convert_and_save', 'storage')

    def test_convert_and_save_invalid_fonts_folder(self):
        """Test case for convert_and_save with invalid fonts_folder
        """
        param_document = self.get_test_value('convert_and_save', 'document', 'file')
        param_format = self.get_test_value('convert_and_save', 'format', 'str')
        param_out_path = self.get_test_value('convert_and_save', 'out_path', 'str')
        param_password = self.get_test_value('convert_and_save', 'password', 'str')
        param_storage = self.get_test_value('convert_and_save', 'storage', 'str')
        param_fonts_folder = self.get_test_value('convert_and_save', 'fonts_folder', 'str')
        param_slides = self.get_test_value('convert_and_save', 'slides', 'list[int]')
        param_options = self.get_test_value('convert_and_save', 'options', 'ExportOptions')
        param_fonts_folder = self.get_invalid_test_value('convert_and_save', 'fonts_folder', param_fonts_folder, 'str')
        self.initialize('convert_and_save', 'fonts_folder', param_fonts_folder)
        ok = False
        try:
            self.api.convert_and_save(param_document, param_format, param_out_path, param_password, param_storage, param_fonts_folder, param_slides, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'convert_and_save', 'fonts_folder', param_fonts_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'convert_and_save', 'fonts_folder', param_fonts_folder)
        if ok:
            self.assert_no_exception('convert_and_save', 'fonts_folder')

    def test_convert_and_save_invalid_slides(self):
        """Test case for convert_and_save with invalid slides
        """
        param_document = self.get_test_value('convert_and_save', 'document', 'file')
        param_format = self.get_test_value('convert_and_save', 'format', 'str')
        param_out_path = self.get_test_value('convert_and_save', 'out_path', 'str')
        param_password = self.get_test_value('convert_and_save', 'password', 'str')
        param_storage = self.get_test_value('convert_and_save', 'storage', 'str')
        param_fonts_folder = self.get_test_value('convert_and_save', 'fonts_folder', 'str')
        param_slides = self.get_test_value('convert_and_save', 'slides', 'list[int]')
        param_options = self.get_test_value('convert_and_save', 'options', 'ExportOptions')
        param_slides = self.get_invalid_test_value('convert_and_save', 'slides', param_slides, 'list[int]')
        self.initialize('convert_and_save', 'slides', param_slides)
        ok = False
        try:
            self.api.convert_and_save(param_document, param_format, param_out_path, param_password, param_storage, param_fonts_folder, param_slides, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'convert_and_save', 'slides', param_slides)
        except ValueError as ex:
            self.assert_value_error(ex, 'convert_and_save', 'slides', param_slides)
        if ok:
            self.assert_no_exception('convert_and_save', 'slides')

    def test_convert_and_save_invalid_options(self):
        """Test case for convert_and_save with invalid options
        """
        param_document = self.get_test_value('convert_and_save', 'document', 'file')
        param_format = self.get_test_value('convert_and_save', 'format', 'str')
        param_out_path = self.get_test_value('convert_and_save', 'out_path', 'str')
        param_password = self.get_test_value('convert_and_save', 'password', 'str')
        param_storage = self.get_test_value('convert_and_save', 'storage', 'str')
        param_fonts_folder = self.get_test_value('convert_and_save', 'fonts_folder', 'str')
        param_slides = self.get_test_value('convert_and_save', 'slides', 'list[int]')
        param_options = self.get_test_value('convert_and_save', 'options', 'ExportOptions')
        param_options = self.get_invalid_test_value('convert_and_save', 'options', param_options, 'ExportOptions')
        self.initialize('convert_and_save', 'options', param_options)
        ok = False
        try:
            self.api.convert_and_save(param_document, param_format, param_out_path, param_password, param_storage, param_fonts_folder, param_slides, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'convert_and_save', 'options', param_options)
        except ValueError as ex:
            self.assert_value_error(ex, 'convert_and_save', 'options', param_options)
        if ok:
            self.assert_no_exception('convert_and_save', 'options')

    def test_copy_file(self):
        """Test case for copy_file
        """
        param_src_path = self.get_test_value('copy_file', 'src_path', 'str')
        param_dest_path = self.get_test_value('copy_file', 'dest_path', 'str')
        param_src_storage_name = self.get_test_value('copy_file', 'src_storage_name', 'str')
        param_dest_storage_name = self.get_test_value('copy_file', 'dest_storage_name', 'str')
        param_version_id = self.get_test_value('copy_file', 'version_id', 'str')
        self.initialize('copy_file', None, None)
        response = self.api.copy_file(param_src_path, param_dest_path, param_src_storage_name, param_dest_storage_name, param_version_id)
        self.assertIsNone(response)

    def test_copy_file_invalid_src_path(self):
        """Test case for copy_file with invalid src_path
        """
        param_src_path = self.get_test_value('copy_file', 'src_path', 'str')
        param_dest_path = self.get_test_value('copy_file', 'dest_path', 'str')
        param_src_storage_name = self.get_test_value('copy_file', 'src_storage_name', 'str')
        param_dest_storage_name = self.get_test_value('copy_file', 'dest_storage_name', 'str')
        param_version_id = self.get_test_value('copy_file', 'version_id', 'str')
        param_src_path = self.get_invalid_test_value('copy_file', 'src_path', param_src_path, 'str')
        self.initialize('copy_file', 'src_path', param_src_path)
        ok = False
        try:
            self.api.copy_file(param_src_path, param_dest_path, param_src_storage_name, param_dest_storage_name, param_version_id)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'copy_file', 'src_path', param_src_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'copy_file', 'src_path', param_src_path)
        if ok:
            self.assert_no_exception('copy_file', 'src_path')

    def test_copy_file_invalid_dest_path(self):
        """Test case for copy_file with invalid dest_path
        """
        param_src_path = self.get_test_value('copy_file', 'src_path', 'str')
        param_dest_path = self.get_test_value('copy_file', 'dest_path', 'str')
        param_src_storage_name = self.get_test_value('copy_file', 'src_storage_name', 'str')
        param_dest_storage_name = self.get_test_value('copy_file', 'dest_storage_name', 'str')
        param_version_id = self.get_test_value('copy_file', 'version_id', 'str')
        param_dest_path = self.get_invalid_test_value('copy_file', 'dest_path', param_dest_path, 'str')
        self.initialize('copy_file', 'dest_path', param_dest_path)
        ok = False
        try:
            self.api.copy_file(param_src_path, param_dest_path, param_src_storage_name, param_dest_storage_name, param_version_id)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'copy_file', 'dest_path', param_dest_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'copy_file', 'dest_path', param_dest_path)
        if ok:
            self.assert_no_exception('copy_file', 'dest_path')

    def test_copy_file_invalid_src_storage_name(self):
        """Test case for copy_file with invalid src_storage_name
        """
        param_src_path = self.get_test_value('copy_file', 'src_path', 'str')
        param_dest_path = self.get_test_value('copy_file', 'dest_path', 'str')
        param_src_storage_name = self.get_test_value('copy_file', 'src_storage_name', 'str')
        param_dest_storage_name = self.get_test_value('copy_file', 'dest_storage_name', 'str')
        param_version_id = self.get_test_value('copy_file', 'version_id', 'str')
        param_src_storage_name = self.get_invalid_test_value('copy_file', 'src_storage_name', param_src_storage_name, 'str')
        self.initialize('copy_file', 'src_storage_name', param_src_storage_name)
        ok = False
        try:
            self.api.copy_file(param_src_path, param_dest_path, param_src_storage_name, param_dest_storage_name, param_version_id)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'copy_file', 'src_storage_name', param_src_storage_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'copy_file', 'src_storage_name', param_src_storage_name)
        if ok:
            self.assert_no_exception('copy_file', 'src_storage_name')

    def test_copy_file_invalid_dest_storage_name(self):
        """Test case for copy_file with invalid dest_storage_name
        """
        param_src_path = self.get_test_value('copy_file', 'src_path', 'str')
        param_dest_path = self.get_test_value('copy_file', 'dest_path', 'str')
        param_src_storage_name = self.get_test_value('copy_file', 'src_storage_name', 'str')
        param_dest_storage_name = self.get_test_value('copy_file', 'dest_storage_name', 'str')
        param_version_id = self.get_test_value('copy_file', 'version_id', 'str')
        param_dest_storage_name = self.get_invalid_test_value('copy_file', 'dest_storage_name', param_dest_storage_name, 'str')
        self.initialize('copy_file', 'dest_storage_name', param_dest_storage_name)
        ok = False
        try:
            self.api.copy_file(param_src_path, param_dest_path, param_src_storage_name, param_dest_storage_name, param_version_id)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'copy_file', 'dest_storage_name', param_dest_storage_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'copy_file', 'dest_storage_name', param_dest_storage_name)
        if ok:
            self.assert_no_exception('copy_file', 'dest_storage_name')

    def test_copy_file_invalid_version_id(self):
        """Test case for copy_file with invalid version_id
        """
        param_src_path = self.get_test_value('copy_file', 'src_path', 'str')
        param_dest_path = self.get_test_value('copy_file', 'dest_path', 'str')
        param_src_storage_name = self.get_test_value('copy_file', 'src_storage_name', 'str')
        param_dest_storage_name = self.get_test_value('copy_file', 'dest_storage_name', 'str')
        param_version_id = self.get_test_value('copy_file', 'version_id', 'str')
        param_version_id = self.get_invalid_test_value('copy_file', 'version_id', param_version_id, 'str')
        self.initialize('copy_file', 'version_id', param_version_id)
        ok = False
        try:
            self.api.copy_file(param_src_path, param_dest_path, param_src_storage_name, param_dest_storage_name, param_version_id)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'copy_file', 'version_id', param_version_id)
        except ValueError as ex:
            self.assert_value_error(ex, 'copy_file', 'version_id', param_version_id)
        if ok:
            self.assert_no_exception('copy_file', 'version_id')

    def test_copy_folder(self):
        """Test case for copy_folder
        """
        param_src_path = self.get_test_value('copy_folder', 'src_path', 'str')
        param_dest_path = self.get_test_value('copy_folder', 'dest_path', 'str')
        param_src_storage_name = self.get_test_value('copy_folder', 'src_storage_name', 'str')
        param_dest_storage_name = self.get_test_value('copy_folder', 'dest_storage_name', 'str')
        self.initialize('copy_folder', None, None)
        response = self.api.copy_folder(param_src_path, param_dest_path, param_src_storage_name, param_dest_storage_name)
        self.assertIsNone(response)

    def test_copy_folder_invalid_src_path(self):
        """Test case for copy_folder with invalid src_path
        """
        param_src_path = self.get_test_value('copy_folder', 'src_path', 'str')
        param_dest_path = self.get_test_value('copy_folder', 'dest_path', 'str')
        param_src_storage_name = self.get_test_value('copy_folder', 'src_storage_name', 'str')
        param_dest_storage_name = self.get_test_value('copy_folder', 'dest_storage_name', 'str')
        param_src_path = self.get_invalid_test_value('copy_folder', 'src_path', param_src_path, 'str')
        self.initialize('copy_folder', 'src_path', param_src_path)
        ok = False
        try:
            self.api.copy_folder(param_src_path, param_dest_path, param_src_storage_name, param_dest_storage_name)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'copy_folder', 'src_path', param_src_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'copy_folder', 'src_path', param_src_path)
        if ok:
            self.assert_no_exception('copy_folder', 'src_path')

    def test_copy_folder_invalid_dest_path(self):
        """Test case for copy_folder with invalid dest_path
        """
        param_src_path = self.get_test_value('copy_folder', 'src_path', 'str')
        param_dest_path = self.get_test_value('copy_folder', 'dest_path', 'str')
        param_src_storage_name = self.get_test_value('copy_folder', 'src_storage_name', 'str')
        param_dest_storage_name = self.get_test_value('copy_folder', 'dest_storage_name', 'str')
        param_dest_path = self.get_invalid_test_value('copy_folder', 'dest_path', param_dest_path, 'str')
        self.initialize('copy_folder', 'dest_path', param_dest_path)
        ok = False
        try:
            self.api.copy_folder(param_src_path, param_dest_path, param_src_storage_name, param_dest_storage_name)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'copy_folder', 'dest_path', param_dest_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'copy_folder', 'dest_path', param_dest_path)
        if ok:
            self.assert_no_exception('copy_folder', 'dest_path')

    def test_copy_folder_invalid_src_storage_name(self):
        """Test case for copy_folder with invalid src_storage_name
        """
        param_src_path = self.get_test_value('copy_folder', 'src_path', 'str')
        param_dest_path = self.get_test_value('copy_folder', 'dest_path', 'str')
        param_src_storage_name = self.get_test_value('copy_folder', 'src_storage_name', 'str')
        param_dest_storage_name = self.get_test_value('copy_folder', 'dest_storage_name', 'str')
        param_src_storage_name = self.get_invalid_test_value('copy_folder', 'src_storage_name', param_src_storage_name, 'str')
        self.initialize('copy_folder', 'src_storage_name', param_src_storage_name)
        ok = False
        try:
            self.api.copy_folder(param_src_path, param_dest_path, param_src_storage_name, param_dest_storage_name)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'copy_folder', 'src_storage_name', param_src_storage_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'copy_folder', 'src_storage_name', param_src_storage_name)
        if ok:
            self.assert_no_exception('copy_folder', 'src_storage_name')

    def test_copy_folder_invalid_dest_storage_name(self):
        """Test case for copy_folder with invalid dest_storage_name
        """
        param_src_path = self.get_test_value('copy_folder', 'src_path', 'str')
        param_dest_path = self.get_test_value('copy_folder', 'dest_path', 'str')
        param_src_storage_name = self.get_test_value('copy_folder', 'src_storage_name', 'str')
        param_dest_storage_name = self.get_test_value('copy_folder', 'dest_storage_name', 'str')
        param_dest_storage_name = self.get_invalid_test_value('copy_folder', 'dest_storage_name', param_dest_storage_name, 'str')
        self.initialize('copy_folder', 'dest_storage_name', param_dest_storage_name)
        ok = False
        try:
            self.api.copy_folder(param_src_path, param_dest_path, param_src_storage_name, param_dest_storage_name)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'copy_folder', 'dest_storage_name', param_dest_storage_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'copy_folder', 'dest_storage_name', param_dest_storage_name)
        if ok:
            self.assert_no_exception('copy_folder', 'dest_storage_name')

    def test_copy_layout_slide(self):
        """Test case for copy_layout_slide
        """
        param_name = self.get_test_value('copy_layout_slide', 'name', 'str')
        param_clone_from = self.get_test_value('copy_layout_slide', 'clone_from', 'str')
        param_clone_from_position = self.get_test_value('copy_layout_slide', 'clone_from_position', 'int')
        param_clone_from_password = self.get_test_value('copy_layout_slide', 'clone_from_password', 'str')
        param_clone_from_storage = self.get_test_value('copy_layout_slide', 'clone_from_storage', 'str')
        param_password = self.get_test_value('copy_layout_slide', 'password', 'str')
        param_folder = self.get_test_value('copy_layout_slide', 'folder', 'str')
        param_storage = self.get_test_value('copy_layout_slide', 'storage', 'str')
        self.initialize('copy_layout_slide', None, None)
        response = self.api.copy_layout_slide(param_name, param_clone_from, param_clone_from_position, param_clone_from_password, param_clone_from_storage, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_copy_layout_slide_invalid_name(self):
        """Test case for copy_layout_slide with invalid name
        """
        param_name = self.get_test_value('copy_layout_slide', 'name', 'str')
        param_clone_from = self.get_test_value('copy_layout_slide', 'clone_from', 'str')
        param_clone_from_position = self.get_test_value('copy_layout_slide', 'clone_from_position', 'int')
        param_clone_from_password = self.get_test_value('copy_layout_slide', 'clone_from_password', 'str')
        param_clone_from_storage = self.get_test_value('copy_layout_slide', 'clone_from_storage', 'str')
        param_password = self.get_test_value('copy_layout_slide', 'password', 'str')
        param_folder = self.get_test_value('copy_layout_slide', 'folder', 'str')
        param_storage = self.get_test_value('copy_layout_slide', 'storage', 'str')
        param_name = self.get_invalid_test_value('copy_layout_slide', 'name', param_name, 'str')
        self.initialize('copy_layout_slide', 'name', param_name)
        ok = False
        try:
            self.api.copy_layout_slide(param_name, param_clone_from, param_clone_from_position, param_clone_from_password, param_clone_from_storage, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'copy_layout_slide', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'copy_layout_slide', 'name', param_name)
        if ok:
            self.assert_no_exception('copy_layout_slide', 'name')

    def test_copy_layout_slide_invalid_clone_from(self):
        """Test case for copy_layout_slide with invalid clone_from
        """
        param_name = self.get_test_value('copy_layout_slide', 'name', 'str')
        param_clone_from = self.get_test_value('copy_layout_slide', 'clone_from', 'str')
        param_clone_from_position = self.get_test_value('copy_layout_slide', 'clone_from_position', 'int')
        param_clone_from_password = self.get_test_value('copy_layout_slide', 'clone_from_password', 'str')
        param_clone_from_storage = self.get_test_value('copy_layout_slide', 'clone_from_storage', 'str')
        param_password = self.get_test_value('copy_layout_slide', 'password', 'str')
        param_folder = self.get_test_value('copy_layout_slide', 'folder', 'str')
        param_storage = self.get_test_value('copy_layout_slide', 'storage', 'str')
        param_clone_from = self.get_invalid_test_value('copy_layout_slide', 'clone_from', param_clone_from, 'str')
        self.initialize('copy_layout_slide', 'clone_from', param_clone_from)
        ok = False
        try:
            self.api.copy_layout_slide(param_name, param_clone_from, param_clone_from_position, param_clone_from_password, param_clone_from_storage, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'copy_layout_slide', 'clone_from', param_clone_from)
        except ValueError as ex:
            self.assert_value_error(ex, 'copy_layout_slide', 'clone_from', param_clone_from)
        if ok:
            self.assert_no_exception('copy_layout_slide', 'clone_from')

    def test_copy_layout_slide_invalid_clone_from_position(self):
        """Test case for copy_layout_slide with invalid clone_from_position
        """
        param_name = self.get_test_value('copy_layout_slide', 'name', 'str')
        param_clone_from = self.get_test_value('copy_layout_slide', 'clone_from', 'str')
        param_clone_from_position = self.get_test_value('copy_layout_slide', 'clone_from_position', 'int')
        param_clone_from_password = self.get_test_value('copy_layout_slide', 'clone_from_password', 'str')
        param_clone_from_storage = self.get_test_value('copy_layout_slide', 'clone_from_storage', 'str')
        param_password = self.get_test_value('copy_layout_slide', 'password', 'str')
        param_folder = self.get_test_value('copy_layout_slide', 'folder', 'str')
        param_storage = self.get_test_value('copy_layout_slide', 'storage', 'str')
        param_clone_from_position = self.get_invalid_test_value('copy_layout_slide', 'clone_from_position', param_clone_from_position, 'int')
        self.initialize('copy_layout_slide', 'clone_from_position', param_clone_from_position)
        ok = False
        try:
            self.api.copy_layout_slide(param_name, param_clone_from, param_clone_from_position, param_clone_from_password, param_clone_from_storage, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'copy_layout_slide', 'clone_from_position', param_clone_from_position)
        except ValueError as ex:
            self.assert_value_error(ex, 'copy_layout_slide', 'clone_from_position', param_clone_from_position)
        if ok:
            self.assert_no_exception('copy_layout_slide', 'clone_from_position')

    def test_copy_layout_slide_invalid_clone_from_password(self):
        """Test case for copy_layout_slide with invalid clone_from_password
        """
        param_name = self.get_test_value('copy_layout_slide', 'name', 'str')
        param_clone_from = self.get_test_value('copy_layout_slide', 'clone_from', 'str')
        param_clone_from_position = self.get_test_value('copy_layout_slide', 'clone_from_position', 'int')
        param_clone_from_password = self.get_test_value('copy_layout_slide', 'clone_from_password', 'str')
        param_clone_from_storage = self.get_test_value('copy_layout_slide', 'clone_from_storage', 'str')
        param_password = self.get_test_value('copy_layout_slide', 'password', 'str')
        param_folder = self.get_test_value('copy_layout_slide', 'folder', 'str')
        param_storage = self.get_test_value('copy_layout_slide', 'storage', 'str')
        param_clone_from_password = self.get_invalid_test_value('copy_layout_slide', 'clone_from_password', param_clone_from_password, 'str')
        self.initialize('copy_layout_slide', 'clone_from_password', param_clone_from_password)
        ok = False
        try:
            self.api.copy_layout_slide(param_name, param_clone_from, param_clone_from_position, param_clone_from_password, param_clone_from_storage, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'copy_layout_slide', 'clone_from_password', param_clone_from_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'copy_layout_slide', 'clone_from_password', param_clone_from_password)
        if ok:
            self.assert_no_exception('copy_layout_slide', 'clone_from_password')

    def test_copy_layout_slide_invalid_clone_from_storage(self):
        """Test case for copy_layout_slide with invalid clone_from_storage
        """
        param_name = self.get_test_value('copy_layout_slide', 'name', 'str')
        param_clone_from = self.get_test_value('copy_layout_slide', 'clone_from', 'str')
        param_clone_from_position = self.get_test_value('copy_layout_slide', 'clone_from_position', 'int')
        param_clone_from_password = self.get_test_value('copy_layout_slide', 'clone_from_password', 'str')
        param_clone_from_storage = self.get_test_value('copy_layout_slide', 'clone_from_storage', 'str')
        param_password = self.get_test_value('copy_layout_slide', 'password', 'str')
        param_folder = self.get_test_value('copy_layout_slide', 'folder', 'str')
        param_storage = self.get_test_value('copy_layout_slide', 'storage', 'str')
        param_clone_from_storage = self.get_invalid_test_value('copy_layout_slide', 'clone_from_storage', param_clone_from_storage, 'str')
        self.initialize('copy_layout_slide', 'clone_from_storage', param_clone_from_storage)
        ok = False
        try:
            self.api.copy_layout_slide(param_name, param_clone_from, param_clone_from_position, param_clone_from_password, param_clone_from_storage, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'copy_layout_slide', 'clone_from_storage', param_clone_from_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'copy_layout_slide', 'clone_from_storage', param_clone_from_storage)
        if ok:
            self.assert_no_exception('copy_layout_slide', 'clone_from_storage')

    def test_copy_layout_slide_invalid_password(self):
        """Test case for copy_layout_slide with invalid password
        """
        param_name = self.get_test_value('copy_layout_slide', 'name', 'str')
        param_clone_from = self.get_test_value('copy_layout_slide', 'clone_from', 'str')
        param_clone_from_position = self.get_test_value('copy_layout_slide', 'clone_from_position', 'int')
        param_clone_from_password = self.get_test_value('copy_layout_slide', 'clone_from_password', 'str')
        param_clone_from_storage = self.get_test_value('copy_layout_slide', 'clone_from_storage', 'str')
        param_password = self.get_test_value('copy_layout_slide', 'password', 'str')
        param_folder = self.get_test_value('copy_layout_slide', 'folder', 'str')
        param_storage = self.get_test_value('copy_layout_slide', 'storage', 'str')
        param_password = self.get_invalid_test_value('copy_layout_slide', 'password', param_password, 'str')
        self.initialize('copy_layout_slide', 'password', param_password)
        ok = False
        try:
            self.api.copy_layout_slide(param_name, param_clone_from, param_clone_from_position, param_clone_from_password, param_clone_from_storage, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'copy_layout_slide', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'copy_layout_slide', 'password', param_password)
        if ok:
            self.assert_no_exception('copy_layout_slide', 'password')

    def test_copy_layout_slide_invalid_folder(self):
        """Test case for copy_layout_slide with invalid folder
        """
        param_name = self.get_test_value('copy_layout_slide', 'name', 'str')
        param_clone_from = self.get_test_value('copy_layout_slide', 'clone_from', 'str')
        param_clone_from_position = self.get_test_value('copy_layout_slide', 'clone_from_position', 'int')
        param_clone_from_password = self.get_test_value('copy_layout_slide', 'clone_from_password', 'str')
        param_clone_from_storage = self.get_test_value('copy_layout_slide', 'clone_from_storage', 'str')
        param_password = self.get_test_value('copy_layout_slide', 'password', 'str')
        param_folder = self.get_test_value('copy_layout_slide', 'folder', 'str')
        param_storage = self.get_test_value('copy_layout_slide', 'storage', 'str')
        param_folder = self.get_invalid_test_value('copy_layout_slide', 'folder', param_folder, 'str')
        self.initialize('copy_layout_slide', 'folder', param_folder)
        ok = False
        try:
            self.api.copy_layout_slide(param_name, param_clone_from, param_clone_from_position, param_clone_from_password, param_clone_from_storage, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'copy_layout_slide', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'copy_layout_slide', 'folder', param_folder)
        if ok:
            self.assert_no_exception('copy_layout_slide', 'folder')

    def test_copy_layout_slide_invalid_storage(self):
        """Test case for copy_layout_slide with invalid storage
        """
        param_name = self.get_test_value('copy_layout_slide', 'name', 'str')
        param_clone_from = self.get_test_value('copy_layout_slide', 'clone_from', 'str')
        param_clone_from_position = self.get_test_value('copy_layout_slide', 'clone_from_position', 'int')
        param_clone_from_password = self.get_test_value('copy_layout_slide', 'clone_from_password', 'str')
        param_clone_from_storage = self.get_test_value('copy_layout_slide', 'clone_from_storage', 'str')
        param_password = self.get_test_value('copy_layout_slide', 'password', 'str')
        param_folder = self.get_test_value('copy_layout_slide', 'folder', 'str')
        param_storage = self.get_test_value('copy_layout_slide', 'storage', 'str')
        param_storage = self.get_invalid_test_value('copy_layout_slide', 'storage', param_storage, 'str')
        self.initialize('copy_layout_slide', 'storage', param_storage)
        ok = False
        try:
            self.api.copy_layout_slide(param_name, param_clone_from, param_clone_from_position, param_clone_from_password, param_clone_from_storage, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'copy_layout_slide', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'copy_layout_slide', 'storage', param_storage)
        if ok:
            self.assert_no_exception('copy_layout_slide', 'storage')

    def test_copy_master_slide(self):
        """Test case for copy_master_slide
        """
        param_name = self.get_test_value('copy_master_slide', 'name', 'str')
        param_clone_from = self.get_test_value('copy_master_slide', 'clone_from', 'str')
        param_clone_from_position = self.get_test_value('copy_master_slide', 'clone_from_position', 'int')
        param_clone_from_password = self.get_test_value('copy_master_slide', 'clone_from_password', 'str')
        param_clone_from_storage = self.get_test_value('copy_master_slide', 'clone_from_storage', 'str')
        param_apply_to_all = self.get_test_value('copy_master_slide', 'apply_to_all', 'bool')
        param_password = self.get_test_value('copy_master_slide', 'password', 'str')
        param_folder = self.get_test_value('copy_master_slide', 'folder', 'str')
        param_storage = self.get_test_value('copy_master_slide', 'storage', 'str')
        self.initialize('copy_master_slide', None, None)
        response = self.api.copy_master_slide(param_name, param_clone_from, param_clone_from_position, param_clone_from_password, param_clone_from_storage, param_apply_to_all, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_copy_master_slide_invalid_name(self):
        """Test case for copy_master_slide with invalid name
        """
        param_name = self.get_test_value('copy_master_slide', 'name', 'str')
        param_clone_from = self.get_test_value('copy_master_slide', 'clone_from', 'str')
        param_clone_from_position = self.get_test_value('copy_master_slide', 'clone_from_position', 'int')
        param_clone_from_password = self.get_test_value('copy_master_slide', 'clone_from_password', 'str')
        param_clone_from_storage = self.get_test_value('copy_master_slide', 'clone_from_storage', 'str')
        param_apply_to_all = self.get_test_value('copy_master_slide', 'apply_to_all', 'bool')
        param_password = self.get_test_value('copy_master_slide', 'password', 'str')
        param_folder = self.get_test_value('copy_master_slide', 'folder', 'str')
        param_storage = self.get_test_value('copy_master_slide', 'storage', 'str')
        param_name = self.get_invalid_test_value('copy_master_slide', 'name', param_name, 'str')
        self.initialize('copy_master_slide', 'name', param_name)
        ok = False
        try:
            self.api.copy_master_slide(param_name, param_clone_from, param_clone_from_position, param_clone_from_password, param_clone_from_storage, param_apply_to_all, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'copy_master_slide', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'copy_master_slide', 'name', param_name)
        if ok:
            self.assert_no_exception('copy_master_slide', 'name')

    def test_copy_master_slide_invalid_clone_from(self):
        """Test case for copy_master_slide with invalid clone_from
        """
        param_name = self.get_test_value('copy_master_slide', 'name', 'str')
        param_clone_from = self.get_test_value('copy_master_slide', 'clone_from', 'str')
        param_clone_from_position = self.get_test_value('copy_master_slide', 'clone_from_position', 'int')
        param_clone_from_password = self.get_test_value('copy_master_slide', 'clone_from_password', 'str')
        param_clone_from_storage = self.get_test_value('copy_master_slide', 'clone_from_storage', 'str')
        param_apply_to_all = self.get_test_value('copy_master_slide', 'apply_to_all', 'bool')
        param_password = self.get_test_value('copy_master_slide', 'password', 'str')
        param_folder = self.get_test_value('copy_master_slide', 'folder', 'str')
        param_storage = self.get_test_value('copy_master_slide', 'storage', 'str')
        param_clone_from = self.get_invalid_test_value('copy_master_slide', 'clone_from', param_clone_from, 'str')
        self.initialize('copy_master_slide', 'clone_from', param_clone_from)
        ok = False
        try:
            self.api.copy_master_slide(param_name, param_clone_from, param_clone_from_position, param_clone_from_password, param_clone_from_storage, param_apply_to_all, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'copy_master_slide', 'clone_from', param_clone_from)
        except ValueError as ex:
            self.assert_value_error(ex, 'copy_master_slide', 'clone_from', param_clone_from)
        if ok:
            self.assert_no_exception('copy_master_slide', 'clone_from')

    def test_copy_master_slide_invalid_clone_from_position(self):
        """Test case for copy_master_slide with invalid clone_from_position
        """
        param_name = self.get_test_value('copy_master_slide', 'name', 'str')
        param_clone_from = self.get_test_value('copy_master_slide', 'clone_from', 'str')
        param_clone_from_position = self.get_test_value('copy_master_slide', 'clone_from_position', 'int')
        param_clone_from_password = self.get_test_value('copy_master_slide', 'clone_from_password', 'str')
        param_clone_from_storage = self.get_test_value('copy_master_slide', 'clone_from_storage', 'str')
        param_apply_to_all = self.get_test_value('copy_master_slide', 'apply_to_all', 'bool')
        param_password = self.get_test_value('copy_master_slide', 'password', 'str')
        param_folder = self.get_test_value('copy_master_slide', 'folder', 'str')
        param_storage = self.get_test_value('copy_master_slide', 'storage', 'str')
        param_clone_from_position = self.get_invalid_test_value('copy_master_slide', 'clone_from_position', param_clone_from_position, 'int')
        self.initialize('copy_master_slide', 'clone_from_position', param_clone_from_position)
        ok = False
        try:
            self.api.copy_master_slide(param_name, param_clone_from, param_clone_from_position, param_clone_from_password, param_clone_from_storage, param_apply_to_all, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'copy_master_slide', 'clone_from_position', param_clone_from_position)
        except ValueError as ex:
            self.assert_value_error(ex, 'copy_master_slide', 'clone_from_position', param_clone_from_position)
        if ok:
            self.assert_no_exception('copy_master_slide', 'clone_from_position')

    def test_copy_master_slide_invalid_clone_from_password(self):
        """Test case for copy_master_slide with invalid clone_from_password
        """
        param_name = self.get_test_value('copy_master_slide', 'name', 'str')
        param_clone_from = self.get_test_value('copy_master_slide', 'clone_from', 'str')
        param_clone_from_position = self.get_test_value('copy_master_slide', 'clone_from_position', 'int')
        param_clone_from_password = self.get_test_value('copy_master_slide', 'clone_from_password', 'str')
        param_clone_from_storage = self.get_test_value('copy_master_slide', 'clone_from_storage', 'str')
        param_apply_to_all = self.get_test_value('copy_master_slide', 'apply_to_all', 'bool')
        param_password = self.get_test_value('copy_master_slide', 'password', 'str')
        param_folder = self.get_test_value('copy_master_slide', 'folder', 'str')
        param_storage = self.get_test_value('copy_master_slide', 'storage', 'str')
        param_clone_from_password = self.get_invalid_test_value('copy_master_slide', 'clone_from_password', param_clone_from_password, 'str')
        self.initialize('copy_master_slide', 'clone_from_password', param_clone_from_password)
        ok = False
        try:
            self.api.copy_master_slide(param_name, param_clone_from, param_clone_from_position, param_clone_from_password, param_clone_from_storage, param_apply_to_all, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'copy_master_slide', 'clone_from_password', param_clone_from_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'copy_master_slide', 'clone_from_password', param_clone_from_password)
        if ok:
            self.assert_no_exception('copy_master_slide', 'clone_from_password')

    def test_copy_master_slide_invalid_clone_from_storage(self):
        """Test case for copy_master_slide with invalid clone_from_storage
        """
        param_name = self.get_test_value('copy_master_slide', 'name', 'str')
        param_clone_from = self.get_test_value('copy_master_slide', 'clone_from', 'str')
        param_clone_from_position = self.get_test_value('copy_master_slide', 'clone_from_position', 'int')
        param_clone_from_password = self.get_test_value('copy_master_slide', 'clone_from_password', 'str')
        param_clone_from_storage = self.get_test_value('copy_master_slide', 'clone_from_storage', 'str')
        param_apply_to_all = self.get_test_value('copy_master_slide', 'apply_to_all', 'bool')
        param_password = self.get_test_value('copy_master_slide', 'password', 'str')
        param_folder = self.get_test_value('copy_master_slide', 'folder', 'str')
        param_storage = self.get_test_value('copy_master_slide', 'storage', 'str')
        param_clone_from_storage = self.get_invalid_test_value('copy_master_slide', 'clone_from_storage', param_clone_from_storage, 'str')
        self.initialize('copy_master_slide', 'clone_from_storage', param_clone_from_storage)
        ok = False
        try:
            self.api.copy_master_slide(param_name, param_clone_from, param_clone_from_position, param_clone_from_password, param_clone_from_storage, param_apply_to_all, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'copy_master_slide', 'clone_from_storage', param_clone_from_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'copy_master_slide', 'clone_from_storage', param_clone_from_storage)
        if ok:
            self.assert_no_exception('copy_master_slide', 'clone_from_storage')

    def test_copy_master_slide_invalid_apply_to_all(self):
        """Test case for copy_master_slide with invalid apply_to_all
        """
        param_name = self.get_test_value('copy_master_slide', 'name', 'str')
        param_clone_from = self.get_test_value('copy_master_slide', 'clone_from', 'str')
        param_clone_from_position = self.get_test_value('copy_master_slide', 'clone_from_position', 'int')
        param_clone_from_password = self.get_test_value('copy_master_slide', 'clone_from_password', 'str')
        param_clone_from_storage = self.get_test_value('copy_master_slide', 'clone_from_storage', 'str')
        param_apply_to_all = self.get_test_value('copy_master_slide', 'apply_to_all', 'bool')
        param_password = self.get_test_value('copy_master_slide', 'password', 'str')
        param_folder = self.get_test_value('copy_master_slide', 'folder', 'str')
        param_storage = self.get_test_value('copy_master_slide', 'storage', 'str')
        param_apply_to_all = self.get_invalid_test_value('copy_master_slide', 'apply_to_all', param_apply_to_all, 'bool')
        self.initialize('copy_master_slide', 'apply_to_all', param_apply_to_all)
        ok = False
        try:
            self.api.copy_master_slide(param_name, param_clone_from, param_clone_from_position, param_clone_from_password, param_clone_from_storage, param_apply_to_all, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'copy_master_slide', 'apply_to_all', param_apply_to_all)
        except ValueError as ex:
            self.assert_value_error(ex, 'copy_master_slide', 'apply_to_all', param_apply_to_all)
        if ok:
            self.assert_no_exception('copy_master_slide', 'apply_to_all')

    def test_copy_master_slide_invalid_password(self):
        """Test case for copy_master_slide with invalid password
        """
        param_name = self.get_test_value('copy_master_slide', 'name', 'str')
        param_clone_from = self.get_test_value('copy_master_slide', 'clone_from', 'str')
        param_clone_from_position = self.get_test_value('copy_master_slide', 'clone_from_position', 'int')
        param_clone_from_password = self.get_test_value('copy_master_slide', 'clone_from_password', 'str')
        param_clone_from_storage = self.get_test_value('copy_master_slide', 'clone_from_storage', 'str')
        param_apply_to_all = self.get_test_value('copy_master_slide', 'apply_to_all', 'bool')
        param_password = self.get_test_value('copy_master_slide', 'password', 'str')
        param_folder = self.get_test_value('copy_master_slide', 'folder', 'str')
        param_storage = self.get_test_value('copy_master_slide', 'storage', 'str')
        param_password = self.get_invalid_test_value('copy_master_slide', 'password', param_password, 'str')
        self.initialize('copy_master_slide', 'password', param_password)
        ok = False
        try:
            self.api.copy_master_slide(param_name, param_clone_from, param_clone_from_position, param_clone_from_password, param_clone_from_storage, param_apply_to_all, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'copy_master_slide', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'copy_master_slide', 'password', param_password)
        if ok:
            self.assert_no_exception('copy_master_slide', 'password')

    def test_copy_master_slide_invalid_folder(self):
        """Test case for copy_master_slide with invalid folder
        """
        param_name = self.get_test_value('copy_master_slide', 'name', 'str')
        param_clone_from = self.get_test_value('copy_master_slide', 'clone_from', 'str')
        param_clone_from_position = self.get_test_value('copy_master_slide', 'clone_from_position', 'int')
        param_clone_from_password = self.get_test_value('copy_master_slide', 'clone_from_password', 'str')
        param_clone_from_storage = self.get_test_value('copy_master_slide', 'clone_from_storage', 'str')
        param_apply_to_all = self.get_test_value('copy_master_slide', 'apply_to_all', 'bool')
        param_password = self.get_test_value('copy_master_slide', 'password', 'str')
        param_folder = self.get_test_value('copy_master_slide', 'folder', 'str')
        param_storage = self.get_test_value('copy_master_slide', 'storage', 'str')
        param_folder = self.get_invalid_test_value('copy_master_slide', 'folder', param_folder, 'str')
        self.initialize('copy_master_slide', 'folder', param_folder)
        ok = False
        try:
            self.api.copy_master_slide(param_name, param_clone_from, param_clone_from_position, param_clone_from_password, param_clone_from_storage, param_apply_to_all, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'copy_master_slide', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'copy_master_slide', 'folder', param_folder)
        if ok:
            self.assert_no_exception('copy_master_slide', 'folder')

    def test_copy_master_slide_invalid_storage(self):
        """Test case for copy_master_slide with invalid storage
        """
        param_name = self.get_test_value('copy_master_slide', 'name', 'str')
        param_clone_from = self.get_test_value('copy_master_slide', 'clone_from', 'str')
        param_clone_from_position = self.get_test_value('copy_master_slide', 'clone_from_position', 'int')
        param_clone_from_password = self.get_test_value('copy_master_slide', 'clone_from_password', 'str')
        param_clone_from_storage = self.get_test_value('copy_master_slide', 'clone_from_storage', 'str')
        param_apply_to_all = self.get_test_value('copy_master_slide', 'apply_to_all', 'bool')
        param_password = self.get_test_value('copy_master_slide', 'password', 'str')
        param_folder = self.get_test_value('copy_master_slide', 'folder', 'str')
        param_storage = self.get_test_value('copy_master_slide', 'storage', 'str')
        param_storage = self.get_invalid_test_value('copy_master_slide', 'storage', param_storage, 'str')
        self.initialize('copy_master_slide', 'storage', param_storage)
        ok = False
        try:
            self.api.copy_master_slide(param_name, param_clone_from, param_clone_from_position, param_clone_from_password, param_clone_from_storage, param_apply_to_all, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'copy_master_slide', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'copy_master_slide', 'storage', param_storage)
        if ok:
            self.assert_no_exception('copy_master_slide', 'storage')

    def test_copy_slide(self):
        """Test case for copy_slide
        """
        param_name = self.get_test_value('copy_slide', 'name', 'str')
        param_slide_to_copy = self.get_test_value('copy_slide', 'slide_to_copy', 'int')
        param_position = self.get_test_value('copy_slide', 'position', 'int')
        param_source = self.get_test_value('copy_slide', 'source', 'str')
        param_source_password = self.get_test_value('copy_slide', 'source_password', 'str')
        param_source_storage = self.get_test_value('copy_slide', 'source_storage', 'str')
        param_password = self.get_test_value('copy_slide', 'password', 'str')
        param_folder = self.get_test_value('copy_slide', 'folder', 'str')
        param_storage = self.get_test_value('copy_slide', 'storage', 'str')
        self.initialize('copy_slide', None, None)
        response = self.api.copy_slide(param_name, param_slide_to_copy, param_position, param_source, param_source_password, param_source_storage, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_copy_slide_invalid_name(self):
        """Test case for copy_slide with invalid name
        """
        param_name = self.get_test_value('copy_slide', 'name', 'str')
        param_slide_to_copy = self.get_test_value('copy_slide', 'slide_to_copy', 'int')
        param_position = self.get_test_value('copy_slide', 'position', 'int')
        param_source = self.get_test_value('copy_slide', 'source', 'str')
        param_source_password = self.get_test_value('copy_slide', 'source_password', 'str')
        param_source_storage = self.get_test_value('copy_slide', 'source_storage', 'str')
        param_password = self.get_test_value('copy_slide', 'password', 'str')
        param_folder = self.get_test_value('copy_slide', 'folder', 'str')
        param_storage = self.get_test_value('copy_slide', 'storage', 'str')
        param_name = self.get_invalid_test_value('copy_slide', 'name', param_name, 'str')
        self.initialize('copy_slide', 'name', param_name)
        ok = False
        try:
            self.api.copy_slide(param_name, param_slide_to_copy, param_position, param_source, param_source_password, param_source_storage, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'copy_slide', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'copy_slide', 'name', param_name)
        if ok:
            self.assert_no_exception('copy_slide', 'name')

    def test_copy_slide_invalid_slide_to_copy(self):
        """Test case for copy_slide with invalid slide_to_copy
        """
        param_name = self.get_test_value('copy_slide', 'name', 'str')
        param_slide_to_copy = self.get_test_value('copy_slide', 'slide_to_copy', 'int')
        param_position = self.get_test_value('copy_slide', 'position', 'int')
        param_source = self.get_test_value('copy_slide', 'source', 'str')
        param_source_password = self.get_test_value('copy_slide', 'source_password', 'str')
        param_source_storage = self.get_test_value('copy_slide', 'source_storage', 'str')
        param_password = self.get_test_value('copy_slide', 'password', 'str')
        param_folder = self.get_test_value('copy_slide', 'folder', 'str')
        param_storage = self.get_test_value('copy_slide', 'storage', 'str')
        param_slide_to_copy = self.get_invalid_test_value('copy_slide', 'slide_to_copy', param_slide_to_copy, 'int')
        self.initialize('copy_slide', 'slide_to_copy', param_slide_to_copy)
        ok = False
        try:
            self.api.copy_slide(param_name, param_slide_to_copy, param_position, param_source, param_source_password, param_source_storage, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'copy_slide', 'slide_to_copy', param_slide_to_copy)
        except ValueError as ex:
            self.assert_value_error(ex, 'copy_slide', 'slide_to_copy', param_slide_to_copy)
        if ok:
            self.assert_no_exception('copy_slide', 'slide_to_copy')

    def test_copy_slide_invalid_position(self):
        """Test case for copy_slide with invalid position
        """
        param_name = self.get_test_value('copy_slide', 'name', 'str')
        param_slide_to_copy = self.get_test_value('copy_slide', 'slide_to_copy', 'int')
        param_position = self.get_test_value('copy_slide', 'position', 'int')
        param_source = self.get_test_value('copy_slide', 'source', 'str')
        param_source_password = self.get_test_value('copy_slide', 'source_password', 'str')
        param_source_storage = self.get_test_value('copy_slide', 'source_storage', 'str')
        param_password = self.get_test_value('copy_slide', 'password', 'str')
        param_folder = self.get_test_value('copy_slide', 'folder', 'str')
        param_storage = self.get_test_value('copy_slide', 'storage', 'str')
        param_position = self.get_invalid_test_value('copy_slide', 'position', param_position, 'int')
        self.initialize('copy_slide', 'position', param_position)
        ok = False
        try:
            self.api.copy_slide(param_name, param_slide_to_copy, param_position, param_source, param_source_password, param_source_storage, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'copy_slide', 'position', param_position)
        except ValueError as ex:
            self.assert_value_error(ex, 'copy_slide', 'position', param_position)
        if ok:
            self.assert_no_exception('copy_slide', 'position')

    def test_copy_slide_invalid_source(self):
        """Test case for copy_slide with invalid source
        """
        param_name = self.get_test_value('copy_slide', 'name', 'str')
        param_slide_to_copy = self.get_test_value('copy_slide', 'slide_to_copy', 'int')
        param_position = self.get_test_value('copy_slide', 'position', 'int')
        param_source = self.get_test_value('copy_slide', 'source', 'str')
        param_source_password = self.get_test_value('copy_slide', 'source_password', 'str')
        param_source_storage = self.get_test_value('copy_slide', 'source_storage', 'str')
        param_password = self.get_test_value('copy_slide', 'password', 'str')
        param_folder = self.get_test_value('copy_slide', 'folder', 'str')
        param_storage = self.get_test_value('copy_slide', 'storage', 'str')
        param_source = self.get_invalid_test_value('copy_slide', 'source', param_source, 'str')
        self.initialize('copy_slide', 'source', param_source)
        ok = False
        try:
            self.api.copy_slide(param_name, param_slide_to_copy, param_position, param_source, param_source_password, param_source_storage, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'copy_slide', 'source', param_source)
        except ValueError as ex:
            self.assert_value_error(ex, 'copy_slide', 'source', param_source)
        if ok:
            self.assert_no_exception('copy_slide', 'source')

    def test_copy_slide_invalid_source_password(self):
        """Test case for copy_slide with invalid source_password
        """
        param_name = self.get_test_value('copy_slide', 'name', 'str')
        param_slide_to_copy = self.get_test_value('copy_slide', 'slide_to_copy', 'int')
        param_position = self.get_test_value('copy_slide', 'position', 'int')
        param_source = self.get_test_value('copy_slide', 'source', 'str')
        param_source_password = self.get_test_value('copy_slide', 'source_password', 'str')
        param_source_storage = self.get_test_value('copy_slide', 'source_storage', 'str')
        param_password = self.get_test_value('copy_slide', 'password', 'str')
        param_folder = self.get_test_value('copy_slide', 'folder', 'str')
        param_storage = self.get_test_value('copy_slide', 'storage', 'str')
        param_source_password = self.get_invalid_test_value('copy_slide', 'source_password', param_source_password, 'str')
        self.initialize('copy_slide', 'source_password', param_source_password)
        ok = False
        try:
            self.api.copy_slide(param_name, param_slide_to_copy, param_position, param_source, param_source_password, param_source_storage, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'copy_slide', 'source_password', param_source_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'copy_slide', 'source_password', param_source_password)
        if ok:
            self.assert_no_exception('copy_slide', 'source_password')

    def test_copy_slide_invalid_source_storage(self):
        """Test case for copy_slide with invalid source_storage
        """
        param_name = self.get_test_value('copy_slide', 'name', 'str')
        param_slide_to_copy = self.get_test_value('copy_slide', 'slide_to_copy', 'int')
        param_position = self.get_test_value('copy_slide', 'position', 'int')
        param_source = self.get_test_value('copy_slide', 'source', 'str')
        param_source_password = self.get_test_value('copy_slide', 'source_password', 'str')
        param_source_storage = self.get_test_value('copy_slide', 'source_storage', 'str')
        param_password = self.get_test_value('copy_slide', 'password', 'str')
        param_folder = self.get_test_value('copy_slide', 'folder', 'str')
        param_storage = self.get_test_value('copy_slide', 'storage', 'str')
        param_source_storage = self.get_invalid_test_value('copy_slide', 'source_storage', param_source_storage, 'str')
        self.initialize('copy_slide', 'source_storage', param_source_storage)
        ok = False
        try:
            self.api.copy_slide(param_name, param_slide_to_copy, param_position, param_source, param_source_password, param_source_storage, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'copy_slide', 'source_storage', param_source_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'copy_slide', 'source_storage', param_source_storage)
        if ok:
            self.assert_no_exception('copy_slide', 'source_storage')

    def test_copy_slide_invalid_password(self):
        """Test case for copy_slide with invalid password
        """
        param_name = self.get_test_value('copy_slide', 'name', 'str')
        param_slide_to_copy = self.get_test_value('copy_slide', 'slide_to_copy', 'int')
        param_position = self.get_test_value('copy_slide', 'position', 'int')
        param_source = self.get_test_value('copy_slide', 'source', 'str')
        param_source_password = self.get_test_value('copy_slide', 'source_password', 'str')
        param_source_storage = self.get_test_value('copy_slide', 'source_storage', 'str')
        param_password = self.get_test_value('copy_slide', 'password', 'str')
        param_folder = self.get_test_value('copy_slide', 'folder', 'str')
        param_storage = self.get_test_value('copy_slide', 'storage', 'str')
        param_password = self.get_invalid_test_value('copy_slide', 'password', param_password, 'str')
        self.initialize('copy_slide', 'password', param_password)
        ok = False
        try:
            self.api.copy_slide(param_name, param_slide_to_copy, param_position, param_source, param_source_password, param_source_storage, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'copy_slide', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'copy_slide', 'password', param_password)
        if ok:
            self.assert_no_exception('copy_slide', 'password')

    def test_copy_slide_invalid_folder(self):
        """Test case for copy_slide with invalid folder
        """
        param_name = self.get_test_value('copy_slide', 'name', 'str')
        param_slide_to_copy = self.get_test_value('copy_slide', 'slide_to_copy', 'int')
        param_position = self.get_test_value('copy_slide', 'position', 'int')
        param_source = self.get_test_value('copy_slide', 'source', 'str')
        param_source_password = self.get_test_value('copy_slide', 'source_password', 'str')
        param_source_storage = self.get_test_value('copy_slide', 'source_storage', 'str')
        param_password = self.get_test_value('copy_slide', 'password', 'str')
        param_folder = self.get_test_value('copy_slide', 'folder', 'str')
        param_storage = self.get_test_value('copy_slide', 'storage', 'str')
        param_folder = self.get_invalid_test_value('copy_slide', 'folder', param_folder, 'str')
        self.initialize('copy_slide', 'folder', param_folder)
        ok = False
        try:
            self.api.copy_slide(param_name, param_slide_to_copy, param_position, param_source, param_source_password, param_source_storage, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'copy_slide', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'copy_slide', 'folder', param_folder)
        if ok:
            self.assert_no_exception('copy_slide', 'folder')

    def test_copy_slide_invalid_storage(self):
        """Test case for copy_slide with invalid storage
        """
        param_name = self.get_test_value('copy_slide', 'name', 'str')
        param_slide_to_copy = self.get_test_value('copy_slide', 'slide_to_copy', 'int')
        param_position = self.get_test_value('copy_slide', 'position', 'int')
        param_source = self.get_test_value('copy_slide', 'source', 'str')
        param_source_password = self.get_test_value('copy_slide', 'source_password', 'str')
        param_source_storage = self.get_test_value('copy_slide', 'source_storage', 'str')
        param_password = self.get_test_value('copy_slide', 'password', 'str')
        param_folder = self.get_test_value('copy_slide', 'folder', 'str')
        param_storage = self.get_test_value('copy_slide', 'storage', 'str')
        param_storage = self.get_invalid_test_value('copy_slide', 'storage', param_storage, 'str')
        self.initialize('copy_slide', 'storage', param_storage)
        ok = False
        try:
            self.api.copy_slide(param_name, param_slide_to_copy, param_position, param_source, param_source_password, param_source_storage, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'copy_slide', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'copy_slide', 'storage', param_storage)
        if ok:
            self.assert_no_exception('copy_slide', 'storage')

    def test_create_animation_effect(self):
        """Test case for create_animation_effect
        """
        param_name = self.get_test_value('create_animation_effect', 'name', 'str')
        param_slide_index = self.get_test_value('create_animation_effect', 'slide_index', 'int')
        param_effect = self.get_test_value('create_animation_effect', 'effect', 'Effect')
        param_password = self.get_test_value('create_animation_effect', 'password', 'str')
        param_folder = self.get_test_value('create_animation_effect', 'folder', 'str')
        param_storage = self.get_test_value('create_animation_effect', 'storage', 'str')
        self.initialize('create_animation_effect', None, None)
        response = self.api.create_animation_effect(param_name, param_slide_index, param_effect, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_create_animation_effect_invalid_name(self):
        """Test case for create_animation_effect with invalid name
        """
        param_name = self.get_test_value('create_animation_effect', 'name', 'str')
        param_slide_index = self.get_test_value('create_animation_effect', 'slide_index', 'int')
        param_effect = self.get_test_value('create_animation_effect', 'effect', 'Effect')
        param_password = self.get_test_value('create_animation_effect', 'password', 'str')
        param_folder = self.get_test_value('create_animation_effect', 'folder', 'str')
        param_storage = self.get_test_value('create_animation_effect', 'storage', 'str')
        param_name = self.get_invalid_test_value('create_animation_effect', 'name', param_name, 'str')
        self.initialize('create_animation_effect', 'name', param_name)
        ok = False
        try:
            self.api.create_animation_effect(param_name, param_slide_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_animation_effect', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_animation_effect', 'name', param_name)
        if ok:
            self.assert_no_exception('create_animation_effect', 'name')

    def test_create_animation_effect_invalid_slide_index(self):
        """Test case for create_animation_effect with invalid slide_index
        """
        param_name = self.get_test_value('create_animation_effect', 'name', 'str')
        param_slide_index = self.get_test_value('create_animation_effect', 'slide_index', 'int')
        param_effect = self.get_test_value('create_animation_effect', 'effect', 'Effect')
        param_password = self.get_test_value('create_animation_effect', 'password', 'str')
        param_folder = self.get_test_value('create_animation_effect', 'folder', 'str')
        param_storage = self.get_test_value('create_animation_effect', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('create_animation_effect', 'slide_index', param_slide_index, 'int')
        self.initialize('create_animation_effect', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.create_animation_effect(param_name, param_slide_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_animation_effect', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_animation_effect', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('create_animation_effect', 'slide_index')

    def test_create_animation_effect_invalid_effect(self):
        """Test case for create_animation_effect with invalid effect
        """
        param_name = self.get_test_value('create_animation_effect', 'name', 'str')
        param_slide_index = self.get_test_value('create_animation_effect', 'slide_index', 'int')
        param_effect = self.get_test_value('create_animation_effect', 'effect', 'Effect')
        param_password = self.get_test_value('create_animation_effect', 'password', 'str')
        param_folder = self.get_test_value('create_animation_effect', 'folder', 'str')
        param_storage = self.get_test_value('create_animation_effect', 'storage', 'str')
        param_effect = self.get_invalid_test_value('create_animation_effect', 'effect', param_effect, 'Effect')
        self.initialize('create_animation_effect', 'effect', param_effect)
        ok = False
        try:
            self.api.create_animation_effect(param_name, param_slide_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_animation_effect', 'effect', param_effect)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_animation_effect', 'effect', param_effect)
        if ok:
            self.assert_no_exception('create_animation_effect', 'effect')

    def test_create_animation_effect_invalid_password(self):
        """Test case for create_animation_effect with invalid password
        """
        param_name = self.get_test_value('create_animation_effect', 'name', 'str')
        param_slide_index = self.get_test_value('create_animation_effect', 'slide_index', 'int')
        param_effect = self.get_test_value('create_animation_effect', 'effect', 'Effect')
        param_password = self.get_test_value('create_animation_effect', 'password', 'str')
        param_folder = self.get_test_value('create_animation_effect', 'folder', 'str')
        param_storage = self.get_test_value('create_animation_effect', 'storage', 'str')
        param_password = self.get_invalid_test_value('create_animation_effect', 'password', param_password, 'str')
        self.initialize('create_animation_effect', 'password', param_password)
        ok = False
        try:
            self.api.create_animation_effect(param_name, param_slide_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_animation_effect', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_animation_effect', 'password', param_password)
        if ok:
            self.assert_no_exception('create_animation_effect', 'password')

    def test_create_animation_effect_invalid_folder(self):
        """Test case for create_animation_effect with invalid folder
        """
        param_name = self.get_test_value('create_animation_effect', 'name', 'str')
        param_slide_index = self.get_test_value('create_animation_effect', 'slide_index', 'int')
        param_effect = self.get_test_value('create_animation_effect', 'effect', 'Effect')
        param_password = self.get_test_value('create_animation_effect', 'password', 'str')
        param_folder = self.get_test_value('create_animation_effect', 'folder', 'str')
        param_storage = self.get_test_value('create_animation_effect', 'storage', 'str')
        param_folder = self.get_invalid_test_value('create_animation_effect', 'folder', param_folder, 'str')
        self.initialize('create_animation_effect', 'folder', param_folder)
        ok = False
        try:
            self.api.create_animation_effect(param_name, param_slide_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_animation_effect', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_animation_effect', 'folder', param_folder)
        if ok:
            self.assert_no_exception('create_animation_effect', 'folder')

    def test_create_animation_effect_invalid_storage(self):
        """Test case for create_animation_effect with invalid storage
        """
        param_name = self.get_test_value('create_animation_effect', 'name', 'str')
        param_slide_index = self.get_test_value('create_animation_effect', 'slide_index', 'int')
        param_effect = self.get_test_value('create_animation_effect', 'effect', 'Effect')
        param_password = self.get_test_value('create_animation_effect', 'password', 'str')
        param_folder = self.get_test_value('create_animation_effect', 'folder', 'str')
        param_storage = self.get_test_value('create_animation_effect', 'storage', 'str')
        param_storage = self.get_invalid_test_value('create_animation_effect', 'storage', param_storage, 'str')
        self.initialize('create_animation_effect', 'storage', param_storage)
        ok = False
        try:
            self.api.create_animation_effect(param_name, param_slide_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_animation_effect', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_animation_effect', 'storage', param_storage)
        if ok:
            self.assert_no_exception('create_animation_effect', 'storage')

    def test_create_animation_interactive_sequence(self):
        """Test case for create_animation_interactive_sequence
        """
        param_name = self.get_test_value('create_animation_interactive_sequence', 'name', 'str')
        param_slide_index = self.get_test_value('create_animation_interactive_sequence', 'slide_index', 'int')
        param_sequence = self.get_test_value('create_animation_interactive_sequence', 'sequence', 'InteractiveSequence')
        param_password = self.get_test_value('create_animation_interactive_sequence', 'password', 'str')
        param_folder = self.get_test_value('create_animation_interactive_sequence', 'folder', 'str')
        param_storage = self.get_test_value('create_animation_interactive_sequence', 'storage', 'str')
        self.initialize('create_animation_interactive_sequence', None, None)
        response = self.api.create_animation_interactive_sequence(param_name, param_slide_index, param_sequence, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_create_animation_interactive_sequence_invalid_name(self):
        """Test case for create_animation_interactive_sequence with invalid name
        """
        param_name = self.get_test_value('create_animation_interactive_sequence', 'name', 'str')
        param_slide_index = self.get_test_value('create_animation_interactive_sequence', 'slide_index', 'int')
        param_sequence = self.get_test_value('create_animation_interactive_sequence', 'sequence', 'InteractiveSequence')
        param_password = self.get_test_value('create_animation_interactive_sequence', 'password', 'str')
        param_folder = self.get_test_value('create_animation_interactive_sequence', 'folder', 'str')
        param_storage = self.get_test_value('create_animation_interactive_sequence', 'storage', 'str')
        param_name = self.get_invalid_test_value('create_animation_interactive_sequence', 'name', param_name, 'str')
        self.initialize('create_animation_interactive_sequence', 'name', param_name)
        ok = False
        try:
            self.api.create_animation_interactive_sequence(param_name, param_slide_index, param_sequence, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_animation_interactive_sequence', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_animation_interactive_sequence', 'name', param_name)
        if ok:
            self.assert_no_exception('create_animation_interactive_sequence', 'name')

    def test_create_animation_interactive_sequence_invalid_slide_index(self):
        """Test case for create_animation_interactive_sequence with invalid slide_index
        """
        param_name = self.get_test_value('create_animation_interactive_sequence', 'name', 'str')
        param_slide_index = self.get_test_value('create_animation_interactive_sequence', 'slide_index', 'int')
        param_sequence = self.get_test_value('create_animation_interactive_sequence', 'sequence', 'InteractiveSequence')
        param_password = self.get_test_value('create_animation_interactive_sequence', 'password', 'str')
        param_folder = self.get_test_value('create_animation_interactive_sequence', 'folder', 'str')
        param_storage = self.get_test_value('create_animation_interactive_sequence', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('create_animation_interactive_sequence', 'slide_index', param_slide_index, 'int')
        self.initialize('create_animation_interactive_sequence', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.create_animation_interactive_sequence(param_name, param_slide_index, param_sequence, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_animation_interactive_sequence', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_animation_interactive_sequence', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('create_animation_interactive_sequence', 'slide_index')

    def test_create_animation_interactive_sequence_invalid_sequence(self):
        """Test case for create_animation_interactive_sequence with invalid sequence
        """
        param_name = self.get_test_value('create_animation_interactive_sequence', 'name', 'str')
        param_slide_index = self.get_test_value('create_animation_interactive_sequence', 'slide_index', 'int')
        param_sequence = self.get_test_value('create_animation_interactive_sequence', 'sequence', 'InteractiveSequence')
        param_password = self.get_test_value('create_animation_interactive_sequence', 'password', 'str')
        param_folder = self.get_test_value('create_animation_interactive_sequence', 'folder', 'str')
        param_storage = self.get_test_value('create_animation_interactive_sequence', 'storage', 'str')
        param_sequence = self.get_invalid_test_value('create_animation_interactive_sequence', 'sequence', param_sequence, 'InteractiveSequence')
        self.initialize('create_animation_interactive_sequence', 'sequence', param_sequence)
        ok = False
        try:
            self.api.create_animation_interactive_sequence(param_name, param_slide_index, param_sequence, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_animation_interactive_sequence', 'sequence', param_sequence)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_animation_interactive_sequence', 'sequence', param_sequence)
        if ok:
            self.assert_no_exception('create_animation_interactive_sequence', 'sequence')

    def test_create_animation_interactive_sequence_invalid_password(self):
        """Test case for create_animation_interactive_sequence with invalid password
        """
        param_name = self.get_test_value('create_animation_interactive_sequence', 'name', 'str')
        param_slide_index = self.get_test_value('create_animation_interactive_sequence', 'slide_index', 'int')
        param_sequence = self.get_test_value('create_animation_interactive_sequence', 'sequence', 'InteractiveSequence')
        param_password = self.get_test_value('create_animation_interactive_sequence', 'password', 'str')
        param_folder = self.get_test_value('create_animation_interactive_sequence', 'folder', 'str')
        param_storage = self.get_test_value('create_animation_interactive_sequence', 'storage', 'str')
        param_password = self.get_invalid_test_value('create_animation_interactive_sequence', 'password', param_password, 'str')
        self.initialize('create_animation_interactive_sequence', 'password', param_password)
        ok = False
        try:
            self.api.create_animation_interactive_sequence(param_name, param_slide_index, param_sequence, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_animation_interactive_sequence', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_animation_interactive_sequence', 'password', param_password)
        if ok:
            self.assert_no_exception('create_animation_interactive_sequence', 'password')

    def test_create_animation_interactive_sequence_invalid_folder(self):
        """Test case for create_animation_interactive_sequence with invalid folder
        """
        param_name = self.get_test_value('create_animation_interactive_sequence', 'name', 'str')
        param_slide_index = self.get_test_value('create_animation_interactive_sequence', 'slide_index', 'int')
        param_sequence = self.get_test_value('create_animation_interactive_sequence', 'sequence', 'InteractiveSequence')
        param_password = self.get_test_value('create_animation_interactive_sequence', 'password', 'str')
        param_folder = self.get_test_value('create_animation_interactive_sequence', 'folder', 'str')
        param_storage = self.get_test_value('create_animation_interactive_sequence', 'storage', 'str')
        param_folder = self.get_invalid_test_value('create_animation_interactive_sequence', 'folder', param_folder, 'str')
        self.initialize('create_animation_interactive_sequence', 'folder', param_folder)
        ok = False
        try:
            self.api.create_animation_interactive_sequence(param_name, param_slide_index, param_sequence, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_animation_interactive_sequence', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_animation_interactive_sequence', 'folder', param_folder)
        if ok:
            self.assert_no_exception('create_animation_interactive_sequence', 'folder')

    def test_create_animation_interactive_sequence_invalid_storage(self):
        """Test case for create_animation_interactive_sequence with invalid storage
        """
        param_name = self.get_test_value('create_animation_interactive_sequence', 'name', 'str')
        param_slide_index = self.get_test_value('create_animation_interactive_sequence', 'slide_index', 'int')
        param_sequence = self.get_test_value('create_animation_interactive_sequence', 'sequence', 'InteractiveSequence')
        param_password = self.get_test_value('create_animation_interactive_sequence', 'password', 'str')
        param_folder = self.get_test_value('create_animation_interactive_sequence', 'folder', 'str')
        param_storage = self.get_test_value('create_animation_interactive_sequence', 'storage', 'str')
        param_storage = self.get_invalid_test_value('create_animation_interactive_sequence', 'storage', param_storage, 'str')
        self.initialize('create_animation_interactive_sequence', 'storage', param_storage)
        ok = False
        try:
            self.api.create_animation_interactive_sequence(param_name, param_slide_index, param_sequence, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_animation_interactive_sequence', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_animation_interactive_sequence', 'storage', param_storage)
        if ok:
            self.assert_no_exception('create_animation_interactive_sequence', 'storage')

    def test_create_animation_interactive_sequence_effect(self):
        """Test case for create_animation_interactive_sequence_effect
        """
        param_name = self.get_test_value('create_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('create_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_sequence_index = self.get_test_value('create_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect = self.get_test_value('create_animation_interactive_sequence_effect', 'effect', 'Effect')
        param_password = self.get_test_value('create_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('create_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('create_animation_interactive_sequence_effect', 'storage', 'str')
        self.initialize('create_animation_interactive_sequence_effect', None, None)
        response = self.api.create_animation_interactive_sequence_effect(param_name, param_slide_index, param_sequence_index, param_effect, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_create_animation_interactive_sequence_effect_invalid_name(self):
        """Test case for create_animation_interactive_sequence_effect with invalid name
        """
        param_name = self.get_test_value('create_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('create_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_sequence_index = self.get_test_value('create_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect = self.get_test_value('create_animation_interactive_sequence_effect', 'effect', 'Effect')
        param_password = self.get_test_value('create_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('create_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('create_animation_interactive_sequence_effect', 'storage', 'str')
        param_name = self.get_invalid_test_value('create_animation_interactive_sequence_effect', 'name', param_name, 'str')
        self.initialize('create_animation_interactive_sequence_effect', 'name', param_name)
        ok = False
        try:
            self.api.create_animation_interactive_sequence_effect(param_name, param_slide_index, param_sequence_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_animation_interactive_sequence_effect', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_animation_interactive_sequence_effect', 'name', param_name)
        if ok:
            self.assert_no_exception('create_animation_interactive_sequence_effect', 'name')

    def test_create_animation_interactive_sequence_effect_invalid_slide_index(self):
        """Test case for create_animation_interactive_sequence_effect with invalid slide_index
        """
        param_name = self.get_test_value('create_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('create_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_sequence_index = self.get_test_value('create_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect = self.get_test_value('create_animation_interactive_sequence_effect', 'effect', 'Effect')
        param_password = self.get_test_value('create_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('create_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('create_animation_interactive_sequence_effect', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('create_animation_interactive_sequence_effect', 'slide_index', param_slide_index, 'int')
        self.initialize('create_animation_interactive_sequence_effect', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.create_animation_interactive_sequence_effect(param_name, param_slide_index, param_sequence_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_animation_interactive_sequence_effect', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_animation_interactive_sequence_effect', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('create_animation_interactive_sequence_effect', 'slide_index')

    def test_create_animation_interactive_sequence_effect_invalid_sequence_index(self):
        """Test case for create_animation_interactive_sequence_effect with invalid sequence_index
        """
        param_name = self.get_test_value('create_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('create_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_sequence_index = self.get_test_value('create_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect = self.get_test_value('create_animation_interactive_sequence_effect', 'effect', 'Effect')
        param_password = self.get_test_value('create_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('create_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('create_animation_interactive_sequence_effect', 'storage', 'str')
        param_sequence_index = self.get_invalid_test_value('create_animation_interactive_sequence_effect', 'sequence_index', param_sequence_index, 'int')
        self.initialize('create_animation_interactive_sequence_effect', 'sequence_index', param_sequence_index)
        ok = False
        try:
            self.api.create_animation_interactive_sequence_effect(param_name, param_slide_index, param_sequence_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_animation_interactive_sequence_effect', 'sequence_index', param_sequence_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_animation_interactive_sequence_effect', 'sequence_index', param_sequence_index)
        if ok:
            self.assert_no_exception('create_animation_interactive_sequence_effect', 'sequence_index')

    def test_create_animation_interactive_sequence_effect_invalid_effect(self):
        """Test case for create_animation_interactive_sequence_effect with invalid effect
        """
        param_name = self.get_test_value('create_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('create_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_sequence_index = self.get_test_value('create_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect = self.get_test_value('create_animation_interactive_sequence_effect', 'effect', 'Effect')
        param_password = self.get_test_value('create_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('create_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('create_animation_interactive_sequence_effect', 'storage', 'str')
        param_effect = self.get_invalid_test_value('create_animation_interactive_sequence_effect', 'effect', param_effect, 'Effect')
        self.initialize('create_animation_interactive_sequence_effect', 'effect', param_effect)
        ok = False
        try:
            self.api.create_animation_interactive_sequence_effect(param_name, param_slide_index, param_sequence_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_animation_interactive_sequence_effect', 'effect', param_effect)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_animation_interactive_sequence_effect', 'effect', param_effect)
        if ok:
            self.assert_no_exception('create_animation_interactive_sequence_effect', 'effect')

    def test_create_animation_interactive_sequence_effect_invalid_password(self):
        """Test case for create_animation_interactive_sequence_effect with invalid password
        """
        param_name = self.get_test_value('create_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('create_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_sequence_index = self.get_test_value('create_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect = self.get_test_value('create_animation_interactive_sequence_effect', 'effect', 'Effect')
        param_password = self.get_test_value('create_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('create_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('create_animation_interactive_sequence_effect', 'storage', 'str')
        param_password = self.get_invalid_test_value('create_animation_interactive_sequence_effect', 'password', param_password, 'str')
        self.initialize('create_animation_interactive_sequence_effect', 'password', param_password)
        ok = False
        try:
            self.api.create_animation_interactive_sequence_effect(param_name, param_slide_index, param_sequence_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_animation_interactive_sequence_effect', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_animation_interactive_sequence_effect', 'password', param_password)
        if ok:
            self.assert_no_exception('create_animation_interactive_sequence_effect', 'password')

    def test_create_animation_interactive_sequence_effect_invalid_folder(self):
        """Test case for create_animation_interactive_sequence_effect with invalid folder
        """
        param_name = self.get_test_value('create_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('create_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_sequence_index = self.get_test_value('create_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect = self.get_test_value('create_animation_interactive_sequence_effect', 'effect', 'Effect')
        param_password = self.get_test_value('create_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('create_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('create_animation_interactive_sequence_effect', 'storage', 'str')
        param_folder = self.get_invalid_test_value('create_animation_interactive_sequence_effect', 'folder', param_folder, 'str')
        self.initialize('create_animation_interactive_sequence_effect', 'folder', param_folder)
        ok = False
        try:
            self.api.create_animation_interactive_sequence_effect(param_name, param_slide_index, param_sequence_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_animation_interactive_sequence_effect', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_animation_interactive_sequence_effect', 'folder', param_folder)
        if ok:
            self.assert_no_exception('create_animation_interactive_sequence_effect', 'folder')

    def test_create_animation_interactive_sequence_effect_invalid_storage(self):
        """Test case for create_animation_interactive_sequence_effect with invalid storage
        """
        param_name = self.get_test_value('create_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('create_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_sequence_index = self.get_test_value('create_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect = self.get_test_value('create_animation_interactive_sequence_effect', 'effect', 'Effect')
        param_password = self.get_test_value('create_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('create_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('create_animation_interactive_sequence_effect', 'storage', 'str')
        param_storage = self.get_invalid_test_value('create_animation_interactive_sequence_effect', 'storage', param_storage, 'str')
        self.initialize('create_animation_interactive_sequence_effect', 'storage', param_storage)
        ok = False
        try:
            self.api.create_animation_interactive_sequence_effect(param_name, param_slide_index, param_sequence_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_animation_interactive_sequence_effect', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_animation_interactive_sequence_effect', 'storage', param_storage)
        if ok:
            self.assert_no_exception('create_animation_interactive_sequence_effect', 'storage')

    def test_create_chart_category(self):
        """Test case for create_chart_category
        """
        param_name = self.get_test_value('create_chart_category', 'name', 'str')
        param_slide_index = self.get_test_value('create_chart_category', 'slide_index', 'int')
        param_shape_index = self.get_test_value('create_chart_category', 'shape_index', 'int')
        param_category = self.get_test_value('create_chart_category', 'category', 'ChartCategory')
        param_password = self.get_test_value('create_chart_category', 'password', 'str')
        param_folder = self.get_test_value('create_chart_category', 'folder', 'str')
        param_storage = self.get_test_value('create_chart_category', 'storage', 'str')
        self.initialize('create_chart_category', None, None)
        response = self.api.create_chart_category(param_name, param_slide_index, param_shape_index, param_category, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_create_chart_category_invalid_name(self):
        """Test case for create_chart_category with invalid name
        """
        param_name = self.get_test_value('create_chart_category', 'name', 'str')
        param_slide_index = self.get_test_value('create_chart_category', 'slide_index', 'int')
        param_shape_index = self.get_test_value('create_chart_category', 'shape_index', 'int')
        param_category = self.get_test_value('create_chart_category', 'category', 'ChartCategory')
        param_password = self.get_test_value('create_chart_category', 'password', 'str')
        param_folder = self.get_test_value('create_chart_category', 'folder', 'str')
        param_storage = self.get_test_value('create_chart_category', 'storage', 'str')
        param_name = self.get_invalid_test_value('create_chart_category', 'name', param_name, 'str')
        self.initialize('create_chart_category', 'name', param_name)
        ok = False
        try:
            self.api.create_chart_category(param_name, param_slide_index, param_shape_index, param_category, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_chart_category', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_chart_category', 'name', param_name)
        if ok:
            self.assert_no_exception('create_chart_category', 'name')

    def test_create_chart_category_invalid_slide_index(self):
        """Test case for create_chart_category with invalid slide_index
        """
        param_name = self.get_test_value('create_chart_category', 'name', 'str')
        param_slide_index = self.get_test_value('create_chart_category', 'slide_index', 'int')
        param_shape_index = self.get_test_value('create_chart_category', 'shape_index', 'int')
        param_category = self.get_test_value('create_chart_category', 'category', 'ChartCategory')
        param_password = self.get_test_value('create_chart_category', 'password', 'str')
        param_folder = self.get_test_value('create_chart_category', 'folder', 'str')
        param_storage = self.get_test_value('create_chart_category', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('create_chart_category', 'slide_index', param_slide_index, 'int')
        self.initialize('create_chart_category', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.create_chart_category(param_name, param_slide_index, param_shape_index, param_category, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_chart_category', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_chart_category', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('create_chart_category', 'slide_index')

    def test_create_chart_category_invalid_shape_index(self):
        """Test case for create_chart_category with invalid shape_index
        """
        param_name = self.get_test_value('create_chart_category', 'name', 'str')
        param_slide_index = self.get_test_value('create_chart_category', 'slide_index', 'int')
        param_shape_index = self.get_test_value('create_chart_category', 'shape_index', 'int')
        param_category = self.get_test_value('create_chart_category', 'category', 'ChartCategory')
        param_password = self.get_test_value('create_chart_category', 'password', 'str')
        param_folder = self.get_test_value('create_chart_category', 'folder', 'str')
        param_storage = self.get_test_value('create_chart_category', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('create_chart_category', 'shape_index', param_shape_index, 'int')
        self.initialize('create_chart_category', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.create_chart_category(param_name, param_slide_index, param_shape_index, param_category, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_chart_category', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_chart_category', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('create_chart_category', 'shape_index')

    def test_create_chart_category_invalid_category(self):
        """Test case for create_chart_category with invalid category
        """
        param_name = self.get_test_value('create_chart_category', 'name', 'str')
        param_slide_index = self.get_test_value('create_chart_category', 'slide_index', 'int')
        param_shape_index = self.get_test_value('create_chart_category', 'shape_index', 'int')
        param_category = self.get_test_value('create_chart_category', 'category', 'ChartCategory')
        param_password = self.get_test_value('create_chart_category', 'password', 'str')
        param_folder = self.get_test_value('create_chart_category', 'folder', 'str')
        param_storage = self.get_test_value('create_chart_category', 'storage', 'str')
        param_category = self.get_invalid_test_value('create_chart_category', 'category', param_category, 'ChartCategory')
        self.initialize('create_chart_category', 'category', param_category)
        ok = False
        try:
            self.api.create_chart_category(param_name, param_slide_index, param_shape_index, param_category, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_chart_category', 'category', param_category)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_chart_category', 'category', param_category)
        if ok:
            self.assert_no_exception('create_chart_category', 'category')

    def test_create_chart_category_invalid_password(self):
        """Test case for create_chart_category with invalid password
        """
        param_name = self.get_test_value('create_chart_category', 'name', 'str')
        param_slide_index = self.get_test_value('create_chart_category', 'slide_index', 'int')
        param_shape_index = self.get_test_value('create_chart_category', 'shape_index', 'int')
        param_category = self.get_test_value('create_chart_category', 'category', 'ChartCategory')
        param_password = self.get_test_value('create_chart_category', 'password', 'str')
        param_folder = self.get_test_value('create_chart_category', 'folder', 'str')
        param_storage = self.get_test_value('create_chart_category', 'storage', 'str')
        param_password = self.get_invalid_test_value('create_chart_category', 'password', param_password, 'str')
        self.initialize('create_chart_category', 'password', param_password)
        ok = False
        try:
            self.api.create_chart_category(param_name, param_slide_index, param_shape_index, param_category, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_chart_category', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_chart_category', 'password', param_password)
        if ok:
            self.assert_no_exception('create_chart_category', 'password')

    def test_create_chart_category_invalid_folder(self):
        """Test case for create_chart_category with invalid folder
        """
        param_name = self.get_test_value('create_chart_category', 'name', 'str')
        param_slide_index = self.get_test_value('create_chart_category', 'slide_index', 'int')
        param_shape_index = self.get_test_value('create_chart_category', 'shape_index', 'int')
        param_category = self.get_test_value('create_chart_category', 'category', 'ChartCategory')
        param_password = self.get_test_value('create_chart_category', 'password', 'str')
        param_folder = self.get_test_value('create_chart_category', 'folder', 'str')
        param_storage = self.get_test_value('create_chart_category', 'storage', 'str')
        param_folder = self.get_invalid_test_value('create_chart_category', 'folder', param_folder, 'str')
        self.initialize('create_chart_category', 'folder', param_folder)
        ok = False
        try:
            self.api.create_chart_category(param_name, param_slide_index, param_shape_index, param_category, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_chart_category', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_chart_category', 'folder', param_folder)
        if ok:
            self.assert_no_exception('create_chart_category', 'folder')

    def test_create_chart_category_invalid_storage(self):
        """Test case for create_chart_category with invalid storage
        """
        param_name = self.get_test_value('create_chart_category', 'name', 'str')
        param_slide_index = self.get_test_value('create_chart_category', 'slide_index', 'int')
        param_shape_index = self.get_test_value('create_chart_category', 'shape_index', 'int')
        param_category = self.get_test_value('create_chart_category', 'category', 'ChartCategory')
        param_password = self.get_test_value('create_chart_category', 'password', 'str')
        param_folder = self.get_test_value('create_chart_category', 'folder', 'str')
        param_storage = self.get_test_value('create_chart_category', 'storage', 'str')
        param_storage = self.get_invalid_test_value('create_chart_category', 'storage', param_storage, 'str')
        self.initialize('create_chart_category', 'storage', param_storage)
        ok = False
        try:
            self.api.create_chart_category(param_name, param_slide_index, param_shape_index, param_category, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_chart_category', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_chart_category', 'storage', param_storage)
        if ok:
            self.assert_no_exception('create_chart_category', 'storage')

    def test_create_chart_data_point(self):
        """Test case for create_chart_data_point
        """
        param_name = self.get_test_value('create_chart_data_point', 'name', 'str')
        param_slide_index = self.get_test_value('create_chart_data_point', 'slide_index', 'int')
        param_shape_index = self.get_test_value('create_chart_data_point', 'shape_index', 'int')
        param_series_index = self.get_test_value('create_chart_data_point', 'series_index', 'int')
        param_data_point = self.get_test_value('create_chart_data_point', 'data_point', 'DataPoint')
        param_password = self.get_test_value('create_chart_data_point', 'password', 'str')
        param_folder = self.get_test_value('create_chart_data_point', 'folder', 'str')
        param_storage = self.get_test_value('create_chart_data_point', 'storage', 'str')
        self.initialize('create_chart_data_point', None, None)
        response = self.api.create_chart_data_point(param_name, param_slide_index, param_shape_index, param_series_index, param_data_point, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_create_chart_data_point_invalid_name(self):
        """Test case for create_chart_data_point with invalid name
        """
        param_name = self.get_test_value('create_chart_data_point', 'name', 'str')
        param_slide_index = self.get_test_value('create_chart_data_point', 'slide_index', 'int')
        param_shape_index = self.get_test_value('create_chart_data_point', 'shape_index', 'int')
        param_series_index = self.get_test_value('create_chart_data_point', 'series_index', 'int')
        param_data_point = self.get_test_value('create_chart_data_point', 'data_point', 'DataPoint')
        param_password = self.get_test_value('create_chart_data_point', 'password', 'str')
        param_folder = self.get_test_value('create_chart_data_point', 'folder', 'str')
        param_storage = self.get_test_value('create_chart_data_point', 'storage', 'str')
        param_name = self.get_invalid_test_value('create_chart_data_point', 'name', param_name, 'str')
        self.initialize('create_chart_data_point', 'name', param_name)
        ok = False
        try:
            self.api.create_chart_data_point(param_name, param_slide_index, param_shape_index, param_series_index, param_data_point, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_chart_data_point', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_chart_data_point', 'name', param_name)
        if ok:
            self.assert_no_exception('create_chart_data_point', 'name')

    def test_create_chart_data_point_invalid_slide_index(self):
        """Test case for create_chart_data_point with invalid slide_index
        """
        param_name = self.get_test_value('create_chart_data_point', 'name', 'str')
        param_slide_index = self.get_test_value('create_chart_data_point', 'slide_index', 'int')
        param_shape_index = self.get_test_value('create_chart_data_point', 'shape_index', 'int')
        param_series_index = self.get_test_value('create_chart_data_point', 'series_index', 'int')
        param_data_point = self.get_test_value('create_chart_data_point', 'data_point', 'DataPoint')
        param_password = self.get_test_value('create_chart_data_point', 'password', 'str')
        param_folder = self.get_test_value('create_chart_data_point', 'folder', 'str')
        param_storage = self.get_test_value('create_chart_data_point', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('create_chart_data_point', 'slide_index', param_slide_index, 'int')
        self.initialize('create_chart_data_point', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.create_chart_data_point(param_name, param_slide_index, param_shape_index, param_series_index, param_data_point, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_chart_data_point', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_chart_data_point', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('create_chart_data_point', 'slide_index')

    def test_create_chart_data_point_invalid_shape_index(self):
        """Test case for create_chart_data_point with invalid shape_index
        """
        param_name = self.get_test_value('create_chart_data_point', 'name', 'str')
        param_slide_index = self.get_test_value('create_chart_data_point', 'slide_index', 'int')
        param_shape_index = self.get_test_value('create_chart_data_point', 'shape_index', 'int')
        param_series_index = self.get_test_value('create_chart_data_point', 'series_index', 'int')
        param_data_point = self.get_test_value('create_chart_data_point', 'data_point', 'DataPoint')
        param_password = self.get_test_value('create_chart_data_point', 'password', 'str')
        param_folder = self.get_test_value('create_chart_data_point', 'folder', 'str')
        param_storage = self.get_test_value('create_chart_data_point', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('create_chart_data_point', 'shape_index', param_shape_index, 'int')
        self.initialize('create_chart_data_point', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.create_chart_data_point(param_name, param_slide_index, param_shape_index, param_series_index, param_data_point, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_chart_data_point', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_chart_data_point', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('create_chart_data_point', 'shape_index')

    def test_create_chart_data_point_invalid_series_index(self):
        """Test case for create_chart_data_point with invalid series_index
        """
        param_name = self.get_test_value('create_chart_data_point', 'name', 'str')
        param_slide_index = self.get_test_value('create_chart_data_point', 'slide_index', 'int')
        param_shape_index = self.get_test_value('create_chart_data_point', 'shape_index', 'int')
        param_series_index = self.get_test_value('create_chart_data_point', 'series_index', 'int')
        param_data_point = self.get_test_value('create_chart_data_point', 'data_point', 'DataPoint')
        param_password = self.get_test_value('create_chart_data_point', 'password', 'str')
        param_folder = self.get_test_value('create_chart_data_point', 'folder', 'str')
        param_storage = self.get_test_value('create_chart_data_point', 'storage', 'str')
        param_series_index = self.get_invalid_test_value('create_chart_data_point', 'series_index', param_series_index, 'int')
        self.initialize('create_chart_data_point', 'series_index', param_series_index)
        ok = False
        try:
            self.api.create_chart_data_point(param_name, param_slide_index, param_shape_index, param_series_index, param_data_point, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_chart_data_point', 'series_index', param_series_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_chart_data_point', 'series_index', param_series_index)
        if ok:
            self.assert_no_exception('create_chart_data_point', 'series_index')

    def test_create_chart_data_point_invalid_data_point(self):
        """Test case for create_chart_data_point with invalid data_point
        """
        param_name = self.get_test_value('create_chart_data_point', 'name', 'str')
        param_slide_index = self.get_test_value('create_chart_data_point', 'slide_index', 'int')
        param_shape_index = self.get_test_value('create_chart_data_point', 'shape_index', 'int')
        param_series_index = self.get_test_value('create_chart_data_point', 'series_index', 'int')
        param_data_point = self.get_test_value('create_chart_data_point', 'data_point', 'DataPoint')
        param_password = self.get_test_value('create_chart_data_point', 'password', 'str')
        param_folder = self.get_test_value('create_chart_data_point', 'folder', 'str')
        param_storage = self.get_test_value('create_chart_data_point', 'storage', 'str')
        param_data_point = self.get_invalid_test_value('create_chart_data_point', 'data_point', param_data_point, 'DataPoint')
        self.initialize('create_chart_data_point', 'data_point', param_data_point)
        ok = False
        try:
            self.api.create_chart_data_point(param_name, param_slide_index, param_shape_index, param_series_index, param_data_point, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_chart_data_point', 'data_point', param_data_point)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_chart_data_point', 'data_point', param_data_point)
        if ok:
            self.assert_no_exception('create_chart_data_point', 'data_point')

    def test_create_chart_data_point_invalid_password(self):
        """Test case for create_chart_data_point with invalid password
        """
        param_name = self.get_test_value('create_chart_data_point', 'name', 'str')
        param_slide_index = self.get_test_value('create_chart_data_point', 'slide_index', 'int')
        param_shape_index = self.get_test_value('create_chart_data_point', 'shape_index', 'int')
        param_series_index = self.get_test_value('create_chart_data_point', 'series_index', 'int')
        param_data_point = self.get_test_value('create_chart_data_point', 'data_point', 'DataPoint')
        param_password = self.get_test_value('create_chart_data_point', 'password', 'str')
        param_folder = self.get_test_value('create_chart_data_point', 'folder', 'str')
        param_storage = self.get_test_value('create_chart_data_point', 'storage', 'str')
        param_password = self.get_invalid_test_value('create_chart_data_point', 'password', param_password, 'str')
        self.initialize('create_chart_data_point', 'password', param_password)
        ok = False
        try:
            self.api.create_chart_data_point(param_name, param_slide_index, param_shape_index, param_series_index, param_data_point, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_chart_data_point', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_chart_data_point', 'password', param_password)
        if ok:
            self.assert_no_exception('create_chart_data_point', 'password')

    def test_create_chart_data_point_invalid_folder(self):
        """Test case for create_chart_data_point with invalid folder
        """
        param_name = self.get_test_value('create_chart_data_point', 'name', 'str')
        param_slide_index = self.get_test_value('create_chart_data_point', 'slide_index', 'int')
        param_shape_index = self.get_test_value('create_chart_data_point', 'shape_index', 'int')
        param_series_index = self.get_test_value('create_chart_data_point', 'series_index', 'int')
        param_data_point = self.get_test_value('create_chart_data_point', 'data_point', 'DataPoint')
        param_password = self.get_test_value('create_chart_data_point', 'password', 'str')
        param_folder = self.get_test_value('create_chart_data_point', 'folder', 'str')
        param_storage = self.get_test_value('create_chart_data_point', 'storage', 'str')
        param_folder = self.get_invalid_test_value('create_chart_data_point', 'folder', param_folder, 'str')
        self.initialize('create_chart_data_point', 'folder', param_folder)
        ok = False
        try:
            self.api.create_chart_data_point(param_name, param_slide_index, param_shape_index, param_series_index, param_data_point, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_chart_data_point', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_chart_data_point', 'folder', param_folder)
        if ok:
            self.assert_no_exception('create_chart_data_point', 'folder')

    def test_create_chart_data_point_invalid_storage(self):
        """Test case for create_chart_data_point with invalid storage
        """
        param_name = self.get_test_value('create_chart_data_point', 'name', 'str')
        param_slide_index = self.get_test_value('create_chart_data_point', 'slide_index', 'int')
        param_shape_index = self.get_test_value('create_chart_data_point', 'shape_index', 'int')
        param_series_index = self.get_test_value('create_chart_data_point', 'series_index', 'int')
        param_data_point = self.get_test_value('create_chart_data_point', 'data_point', 'DataPoint')
        param_password = self.get_test_value('create_chart_data_point', 'password', 'str')
        param_folder = self.get_test_value('create_chart_data_point', 'folder', 'str')
        param_storage = self.get_test_value('create_chart_data_point', 'storage', 'str')
        param_storage = self.get_invalid_test_value('create_chart_data_point', 'storage', param_storage, 'str')
        self.initialize('create_chart_data_point', 'storage', param_storage)
        ok = False
        try:
            self.api.create_chart_data_point(param_name, param_slide_index, param_shape_index, param_series_index, param_data_point, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_chart_data_point', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_chart_data_point', 'storage', param_storage)
        if ok:
            self.assert_no_exception('create_chart_data_point', 'storage')

    def test_create_chart_series(self):
        """Test case for create_chart_series
        """
        param_name = self.get_test_value('create_chart_series', 'name', 'str')
        param_slide_index = self.get_test_value('create_chart_series', 'slide_index', 'int')
        param_shape_index = self.get_test_value('create_chart_series', 'shape_index', 'int')
        param_series = self.get_test_value('create_chart_series', 'series', 'Series')
        param_password = self.get_test_value('create_chart_series', 'password', 'str')
        param_folder = self.get_test_value('create_chart_series', 'folder', 'str')
        param_storage = self.get_test_value('create_chart_series', 'storage', 'str')
        self.initialize('create_chart_series', None, None)
        response = self.api.create_chart_series(param_name, param_slide_index, param_shape_index, param_series, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_create_chart_series_invalid_name(self):
        """Test case for create_chart_series with invalid name
        """
        param_name = self.get_test_value('create_chart_series', 'name', 'str')
        param_slide_index = self.get_test_value('create_chart_series', 'slide_index', 'int')
        param_shape_index = self.get_test_value('create_chart_series', 'shape_index', 'int')
        param_series = self.get_test_value('create_chart_series', 'series', 'Series')
        param_password = self.get_test_value('create_chart_series', 'password', 'str')
        param_folder = self.get_test_value('create_chart_series', 'folder', 'str')
        param_storage = self.get_test_value('create_chart_series', 'storage', 'str')
        param_name = self.get_invalid_test_value('create_chart_series', 'name', param_name, 'str')
        self.initialize('create_chart_series', 'name', param_name)
        ok = False
        try:
            self.api.create_chart_series(param_name, param_slide_index, param_shape_index, param_series, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_chart_series', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_chart_series', 'name', param_name)
        if ok:
            self.assert_no_exception('create_chart_series', 'name')

    def test_create_chart_series_invalid_slide_index(self):
        """Test case for create_chart_series with invalid slide_index
        """
        param_name = self.get_test_value('create_chart_series', 'name', 'str')
        param_slide_index = self.get_test_value('create_chart_series', 'slide_index', 'int')
        param_shape_index = self.get_test_value('create_chart_series', 'shape_index', 'int')
        param_series = self.get_test_value('create_chart_series', 'series', 'Series')
        param_password = self.get_test_value('create_chart_series', 'password', 'str')
        param_folder = self.get_test_value('create_chart_series', 'folder', 'str')
        param_storage = self.get_test_value('create_chart_series', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('create_chart_series', 'slide_index', param_slide_index, 'int')
        self.initialize('create_chart_series', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.create_chart_series(param_name, param_slide_index, param_shape_index, param_series, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_chart_series', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_chart_series', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('create_chart_series', 'slide_index')

    def test_create_chart_series_invalid_shape_index(self):
        """Test case for create_chart_series with invalid shape_index
        """
        param_name = self.get_test_value('create_chart_series', 'name', 'str')
        param_slide_index = self.get_test_value('create_chart_series', 'slide_index', 'int')
        param_shape_index = self.get_test_value('create_chart_series', 'shape_index', 'int')
        param_series = self.get_test_value('create_chart_series', 'series', 'Series')
        param_password = self.get_test_value('create_chart_series', 'password', 'str')
        param_folder = self.get_test_value('create_chart_series', 'folder', 'str')
        param_storage = self.get_test_value('create_chart_series', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('create_chart_series', 'shape_index', param_shape_index, 'int')
        self.initialize('create_chart_series', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.create_chart_series(param_name, param_slide_index, param_shape_index, param_series, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_chart_series', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_chart_series', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('create_chart_series', 'shape_index')

    def test_create_chart_series_invalid_series(self):
        """Test case for create_chart_series with invalid series
        """
        param_name = self.get_test_value('create_chart_series', 'name', 'str')
        param_slide_index = self.get_test_value('create_chart_series', 'slide_index', 'int')
        param_shape_index = self.get_test_value('create_chart_series', 'shape_index', 'int')
        param_series = self.get_test_value('create_chart_series', 'series', 'Series')
        param_password = self.get_test_value('create_chart_series', 'password', 'str')
        param_folder = self.get_test_value('create_chart_series', 'folder', 'str')
        param_storage = self.get_test_value('create_chart_series', 'storage', 'str')
        param_series = self.get_invalid_test_value('create_chart_series', 'series', param_series, 'Series')
        self.initialize('create_chart_series', 'series', param_series)
        ok = False
        try:
            self.api.create_chart_series(param_name, param_slide_index, param_shape_index, param_series, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_chart_series', 'series', param_series)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_chart_series', 'series', param_series)
        if ok:
            self.assert_no_exception('create_chart_series', 'series')

    def test_create_chart_series_invalid_password(self):
        """Test case for create_chart_series with invalid password
        """
        param_name = self.get_test_value('create_chart_series', 'name', 'str')
        param_slide_index = self.get_test_value('create_chart_series', 'slide_index', 'int')
        param_shape_index = self.get_test_value('create_chart_series', 'shape_index', 'int')
        param_series = self.get_test_value('create_chart_series', 'series', 'Series')
        param_password = self.get_test_value('create_chart_series', 'password', 'str')
        param_folder = self.get_test_value('create_chart_series', 'folder', 'str')
        param_storage = self.get_test_value('create_chart_series', 'storage', 'str')
        param_password = self.get_invalid_test_value('create_chart_series', 'password', param_password, 'str')
        self.initialize('create_chart_series', 'password', param_password)
        ok = False
        try:
            self.api.create_chart_series(param_name, param_slide_index, param_shape_index, param_series, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_chart_series', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_chart_series', 'password', param_password)
        if ok:
            self.assert_no_exception('create_chart_series', 'password')

    def test_create_chart_series_invalid_folder(self):
        """Test case for create_chart_series with invalid folder
        """
        param_name = self.get_test_value('create_chart_series', 'name', 'str')
        param_slide_index = self.get_test_value('create_chart_series', 'slide_index', 'int')
        param_shape_index = self.get_test_value('create_chart_series', 'shape_index', 'int')
        param_series = self.get_test_value('create_chart_series', 'series', 'Series')
        param_password = self.get_test_value('create_chart_series', 'password', 'str')
        param_folder = self.get_test_value('create_chart_series', 'folder', 'str')
        param_storage = self.get_test_value('create_chart_series', 'storage', 'str')
        param_folder = self.get_invalid_test_value('create_chart_series', 'folder', param_folder, 'str')
        self.initialize('create_chart_series', 'folder', param_folder)
        ok = False
        try:
            self.api.create_chart_series(param_name, param_slide_index, param_shape_index, param_series, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_chart_series', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_chart_series', 'folder', param_folder)
        if ok:
            self.assert_no_exception('create_chart_series', 'folder')

    def test_create_chart_series_invalid_storage(self):
        """Test case for create_chart_series with invalid storage
        """
        param_name = self.get_test_value('create_chart_series', 'name', 'str')
        param_slide_index = self.get_test_value('create_chart_series', 'slide_index', 'int')
        param_shape_index = self.get_test_value('create_chart_series', 'shape_index', 'int')
        param_series = self.get_test_value('create_chart_series', 'series', 'Series')
        param_password = self.get_test_value('create_chart_series', 'password', 'str')
        param_folder = self.get_test_value('create_chart_series', 'folder', 'str')
        param_storage = self.get_test_value('create_chart_series', 'storage', 'str')
        param_storage = self.get_invalid_test_value('create_chart_series', 'storage', param_storage, 'str')
        self.initialize('create_chart_series', 'storage', param_storage)
        ok = False
        try:
            self.api.create_chart_series(param_name, param_slide_index, param_shape_index, param_series, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_chart_series', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_chart_series', 'storage', param_storage)
        if ok:
            self.assert_no_exception('create_chart_series', 'storage')

    def test_create_comment(self):
        """Test case for create_comment
        """
        param_name = self.get_test_value('create_comment', 'name', 'str')
        param_slide_index = self.get_test_value('create_comment', 'slide_index', 'int')
        param_dto = self.get_test_value('create_comment', 'dto', 'SlideComment')
        param_password = self.get_test_value('create_comment', 'password', 'str')
        param_folder = self.get_test_value('create_comment', 'folder', 'str')
        param_storage = self.get_test_value('create_comment', 'storage', 'str')
        self.initialize('create_comment', None, None)
        response = self.api.create_comment(param_name, param_slide_index, param_dto, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_create_comment_invalid_name(self):
        """Test case for create_comment with invalid name
        """
        param_name = self.get_test_value('create_comment', 'name', 'str')
        param_slide_index = self.get_test_value('create_comment', 'slide_index', 'int')
        param_dto = self.get_test_value('create_comment', 'dto', 'SlideComment')
        param_password = self.get_test_value('create_comment', 'password', 'str')
        param_folder = self.get_test_value('create_comment', 'folder', 'str')
        param_storage = self.get_test_value('create_comment', 'storage', 'str')
        param_name = self.get_invalid_test_value('create_comment', 'name', param_name, 'str')
        self.initialize('create_comment', 'name', param_name)
        ok = False
        try:
            self.api.create_comment(param_name, param_slide_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_comment', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_comment', 'name', param_name)
        if ok:
            self.assert_no_exception('create_comment', 'name')

    def test_create_comment_invalid_slide_index(self):
        """Test case for create_comment with invalid slide_index
        """
        param_name = self.get_test_value('create_comment', 'name', 'str')
        param_slide_index = self.get_test_value('create_comment', 'slide_index', 'int')
        param_dto = self.get_test_value('create_comment', 'dto', 'SlideComment')
        param_password = self.get_test_value('create_comment', 'password', 'str')
        param_folder = self.get_test_value('create_comment', 'folder', 'str')
        param_storage = self.get_test_value('create_comment', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('create_comment', 'slide_index', param_slide_index, 'int')
        self.initialize('create_comment', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.create_comment(param_name, param_slide_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_comment', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_comment', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('create_comment', 'slide_index')

    def test_create_comment_invalid_dto(self):
        """Test case for create_comment with invalid dto
        """
        param_name = self.get_test_value('create_comment', 'name', 'str')
        param_slide_index = self.get_test_value('create_comment', 'slide_index', 'int')
        param_dto = self.get_test_value('create_comment', 'dto', 'SlideComment')
        param_password = self.get_test_value('create_comment', 'password', 'str')
        param_folder = self.get_test_value('create_comment', 'folder', 'str')
        param_storage = self.get_test_value('create_comment', 'storage', 'str')
        param_dto = self.get_invalid_test_value('create_comment', 'dto', param_dto, 'SlideComment')
        self.initialize('create_comment', 'dto', param_dto)
        ok = False
        try:
            self.api.create_comment(param_name, param_slide_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_comment', 'dto', param_dto)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_comment', 'dto', param_dto)
        if ok:
            self.assert_no_exception('create_comment', 'dto')

    def test_create_comment_invalid_password(self):
        """Test case for create_comment with invalid password
        """
        param_name = self.get_test_value('create_comment', 'name', 'str')
        param_slide_index = self.get_test_value('create_comment', 'slide_index', 'int')
        param_dto = self.get_test_value('create_comment', 'dto', 'SlideComment')
        param_password = self.get_test_value('create_comment', 'password', 'str')
        param_folder = self.get_test_value('create_comment', 'folder', 'str')
        param_storage = self.get_test_value('create_comment', 'storage', 'str')
        param_password = self.get_invalid_test_value('create_comment', 'password', param_password, 'str')
        self.initialize('create_comment', 'password', param_password)
        ok = False
        try:
            self.api.create_comment(param_name, param_slide_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_comment', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_comment', 'password', param_password)
        if ok:
            self.assert_no_exception('create_comment', 'password')

    def test_create_comment_invalid_folder(self):
        """Test case for create_comment with invalid folder
        """
        param_name = self.get_test_value('create_comment', 'name', 'str')
        param_slide_index = self.get_test_value('create_comment', 'slide_index', 'int')
        param_dto = self.get_test_value('create_comment', 'dto', 'SlideComment')
        param_password = self.get_test_value('create_comment', 'password', 'str')
        param_folder = self.get_test_value('create_comment', 'folder', 'str')
        param_storage = self.get_test_value('create_comment', 'storage', 'str')
        param_folder = self.get_invalid_test_value('create_comment', 'folder', param_folder, 'str')
        self.initialize('create_comment', 'folder', param_folder)
        ok = False
        try:
            self.api.create_comment(param_name, param_slide_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_comment', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_comment', 'folder', param_folder)
        if ok:
            self.assert_no_exception('create_comment', 'folder')

    def test_create_comment_invalid_storage(self):
        """Test case for create_comment with invalid storage
        """
        param_name = self.get_test_value('create_comment', 'name', 'str')
        param_slide_index = self.get_test_value('create_comment', 'slide_index', 'int')
        param_dto = self.get_test_value('create_comment', 'dto', 'SlideComment')
        param_password = self.get_test_value('create_comment', 'password', 'str')
        param_folder = self.get_test_value('create_comment', 'folder', 'str')
        param_storage = self.get_test_value('create_comment', 'storage', 'str')
        param_storage = self.get_invalid_test_value('create_comment', 'storage', param_storage, 'str')
        self.initialize('create_comment', 'storage', param_storage)
        ok = False
        try:
            self.api.create_comment(param_name, param_slide_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_comment', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_comment', 'storage', param_storage)
        if ok:
            self.assert_no_exception('create_comment', 'storage')

    def test_create_comment_online(self):
        """Test case for create_comment_online
        """
        param_document = self.get_test_value('create_comment_online', 'document', 'file')
        param_slide_index = self.get_test_value('create_comment_online', 'slide_index', 'int')
        param_dto = self.get_test_value('create_comment_online', 'dto', 'SlideComment')
        param_password = self.get_test_value('create_comment_online', 'password', 'str')
        self.initialize('create_comment_online', None, None)
        response = self.api.create_comment_online(param_document, param_slide_index, param_dto, param_password)
        self.assertTrue(isinstance(response, str))
        self.assertTrue(len(response) > 0)

    def test_create_comment_online_invalid_document(self):
        """Test case for create_comment_online with invalid document
        """
        param_document = self.get_test_value('create_comment_online', 'document', 'file')
        param_slide_index = self.get_test_value('create_comment_online', 'slide_index', 'int')
        param_dto = self.get_test_value('create_comment_online', 'dto', 'SlideComment')
        param_password = self.get_test_value('create_comment_online', 'password', 'str')
        param_document = self.get_invalid_test_value('create_comment_online', 'document', param_document, 'file')
        self.initialize('create_comment_online', 'document', param_document)
        ok = False
        try:
            self.api.create_comment_online(param_document, param_slide_index, param_dto, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_comment_online', 'document', param_document)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_comment_online', 'document', param_document)
        if ok:
            self.assert_no_exception('create_comment_online', 'document')

    def test_create_comment_online_invalid_slide_index(self):
        """Test case for create_comment_online with invalid slide_index
        """
        param_document = self.get_test_value('create_comment_online', 'document', 'file')
        param_slide_index = self.get_test_value('create_comment_online', 'slide_index', 'int')
        param_dto = self.get_test_value('create_comment_online', 'dto', 'SlideComment')
        param_password = self.get_test_value('create_comment_online', 'password', 'str')
        param_slide_index = self.get_invalid_test_value('create_comment_online', 'slide_index', param_slide_index, 'int')
        self.initialize('create_comment_online', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.create_comment_online(param_document, param_slide_index, param_dto, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_comment_online', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_comment_online', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('create_comment_online', 'slide_index')

    def test_create_comment_online_invalid_dto(self):
        """Test case for create_comment_online with invalid dto
        """
        param_document = self.get_test_value('create_comment_online', 'document', 'file')
        param_slide_index = self.get_test_value('create_comment_online', 'slide_index', 'int')
        param_dto = self.get_test_value('create_comment_online', 'dto', 'SlideComment')
        param_password = self.get_test_value('create_comment_online', 'password', 'str')
        param_dto = self.get_invalid_test_value('create_comment_online', 'dto', param_dto, 'SlideComment')
        self.initialize('create_comment_online', 'dto', param_dto)
        ok = False
        try:
            self.api.create_comment_online(param_document, param_slide_index, param_dto, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_comment_online', 'dto', param_dto)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_comment_online', 'dto', param_dto)
        if ok:
            self.assert_no_exception('create_comment_online', 'dto')

    def test_create_comment_online_invalid_password(self):
        """Test case for create_comment_online with invalid password
        """
        param_document = self.get_test_value('create_comment_online', 'document', 'file')
        param_slide_index = self.get_test_value('create_comment_online', 'slide_index', 'int')
        param_dto = self.get_test_value('create_comment_online', 'dto', 'SlideComment')
        param_password = self.get_test_value('create_comment_online', 'password', 'str')
        param_password = self.get_invalid_test_value('create_comment_online', 'password', param_password, 'str')
        self.initialize('create_comment_online', 'password', param_password)
        ok = False
        try:
            self.api.create_comment_online(param_document, param_slide_index, param_dto, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_comment_online', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_comment_online', 'password', param_password)
        if ok:
            self.assert_no_exception('create_comment_online', 'password')

    def test_create_folder(self):
        """Test case for create_folder
        """
        param_path = self.get_test_value('create_folder', 'path', 'str')
        param_storage_name = self.get_test_value('create_folder', 'storage_name', 'str')
        self.initialize('create_folder', None, None)
        response = self.api.create_folder(param_path, param_storage_name)
        self.assertIsNone(response)

    def test_create_folder_invalid_path(self):
        """Test case for create_folder with invalid path
        """
        param_path = self.get_test_value('create_folder', 'path', 'str')
        param_storage_name = self.get_test_value('create_folder', 'storage_name', 'str')
        param_path = self.get_invalid_test_value('create_folder', 'path', param_path, 'str')
        self.initialize('create_folder', 'path', param_path)
        ok = False
        try:
            self.api.create_folder(param_path, param_storage_name)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_folder', 'path', param_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_folder', 'path', param_path)
        if ok:
            self.assert_no_exception('create_folder', 'path')

    def test_create_folder_invalid_storage_name(self):
        """Test case for create_folder with invalid storage_name
        """
        param_path = self.get_test_value('create_folder', 'path', 'str')
        param_storage_name = self.get_test_value('create_folder', 'storage_name', 'str')
        param_storage_name = self.get_invalid_test_value('create_folder', 'storage_name', param_storage_name, 'str')
        self.initialize('create_folder', 'storage_name', param_storage_name)
        ok = False
        try:
            self.api.create_folder(param_path, param_storage_name)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_folder', 'storage_name', param_storage_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_folder', 'storage_name', param_storage_name)
        if ok:
            self.assert_no_exception('create_folder', 'storage_name')

    def test_create_image_watermark(self):
        """Test case for create_image_watermark
        """
        param_name = self.get_test_value('create_image_watermark', 'name', 'str')
        param_image = self.get_test_value('create_image_watermark', 'image', 'file')
        param_picture_frame = self.get_test_value('create_image_watermark', 'picture_frame', 'PictureFrame')
        param_password = self.get_test_value('create_image_watermark', 'password', 'str')
        param_folder = self.get_test_value('create_image_watermark', 'folder', 'str')
        param_storage = self.get_test_value('create_image_watermark', 'storage', 'str')
        self.initialize('create_image_watermark', None, None)
        response = self.api.create_image_watermark(param_name, param_image, param_picture_frame, param_password, param_folder, param_storage)
        self.assertIsNone(response)

    def test_create_image_watermark_invalid_name(self):
        """Test case for create_image_watermark with invalid name
        """
        param_name = self.get_test_value('create_image_watermark', 'name', 'str')
        param_image = self.get_test_value('create_image_watermark', 'image', 'file')
        param_picture_frame = self.get_test_value('create_image_watermark', 'picture_frame', 'PictureFrame')
        param_password = self.get_test_value('create_image_watermark', 'password', 'str')
        param_folder = self.get_test_value('create_image_watermark', 'folder', 'str')
        param_storage = self.get_test_value('create_image_watermark', 'storage', 'str')
        param_name = self.get_invalid_test_value('create_image_watermark', 'name', param_name, 'str')
        self.initialize('create_image_watermark', 'name', param_name)
        ok = False
        try:
            self.api.create_image_watermark(param_name, param_image, param_picture_frame, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_image_watermark', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_image_watermark', 'name', param_name)
        if ok:
            self.assert_no_exception('create_image_watermark', 'name')

    def test_create_image_watermark_invalid_image(self):
        """Test case for create_image_watermark with invalid image
        """
        param_name = self.get_test_value('create_image_watermark', 'name', 'str')
        param_image = self.get_test_value('create_image_watermark', 'image', 'file')
        param_picture_frame = self.get_test_value('create_image_watermark', 'picture_frame', 'PictureFrame')
        param_password = self.get_test_value('create_image_watermark', 'password', 'str')
        param_folder = self.get_test_value('create_image_watermark', 'folder', 'str')
        param_storage = self.get_test_value('create_image_watermark', 'storage', 'str')
        param_image = self.get_invalid_test_value('create_image_watermark', 'image', param_image, 'file')
        self.initialize('create_image_watermark', 'image', param_image)
        ok = False
        try:
            self.api.create_image_watermark(param_name, param_image, param_picture_frame, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_image_watermark', 'image', param_image)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_image_watermark', 'image', param_image)
        if ok:
            self.assert_no_exception('create_image_watermark', 'image')

    def test_create_image_watermark_invalid_picture_frame(self):
        """Test case for create_image_watermark with invalid picture_frame
        """
        param_name = self.get_test_value('create_image_watermark', 'name', 'str')
        param_image = self.get_test_value('create_image_watermark', 'image', 'file')
        param_picture_frame = self.get_test_value('create_image_watermark', 'picture_frame', 'PictureFrame')
        param_password = self.get_test_value('create_image_watermark', 'password', 'str')
        param_folder = self.get_test_value('create_image_watermark', 'folder', 'str')
        param_storage = self.get_test_value('create_image_watermark', 'storage', 'str')
        param_picture_frame = self.get_invalid_test_value('create_image_watermark', 'picture_frame', param_picture_frame, 'PictureFrame')
        self.initialize('create_image_watermark', 'picture_frame', param_picture_frame)
        ok = False
        try:
            self.api.create_image_watermark(param_name, param_image, param_picture_frame, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_image_watermark', 'picture_frame', param_picture_frame)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_image_watermark', 'picture_frame', param_picture_frame)
        if ok:
            self.assert_no_exception('create_image_watermark', 'picture_frame')

    def test_create_image_watermark_invalid_password(self):
        """Test case for create_image_watermark with invalid password
        """
        param_name = self.get_test_value('create_image_watermark', 'name', 'str')
        param_image = self.get_test_value('create_image_watermark', 'image', 'file')
        param_picture_frame = self.get_test_value('create_image_watermark', 'picture_frame', 'PictureFrame')
        param_password = self.get_test_value('create_image_watermark', 'password', 'str')
        param_folder = self.get_test_value('create_image_watermark', 'folder', 'str')
        param_storage = self.get_test_value('create_image_watermark', 'storage', 'str')
        param_password = self.get_invalid_test_value('create_image_watermark', 'password', param_password, 'str')
        self.initialize('create_image_watermark', 'password', param_password)
        ok = False
        try:
            self.api.create_image_watermark(param_name, param_image, param_picture_frame, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_image_watermark', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_image_watermark', 'password', param_password)
        if ok:
            self.assert_no_exception('create_image_watermark', 'password')

    def test_create_image_watermark_invalid_folder(self):
        """Test case for create_image_watermark with invalid folder
        """
        param_name = self.get_test_value('create_image_watermark', 'name', 'str')
        param_image = self.get_test_value('create_image_watermark', 'image', 'file')
        param_picture_frame = self.get_test_value('create_image_watermark', 'picture_frame', 'PictureFrame')
        param_password = self.get_test_value('create_image_watermark', 'password', 'str')
        param_folder = self.get_test_value('create_image_watermark', 'folder', 'str')
        param_storage = self.get_test_value('create_image_watermark', 'storage', 'str')
        param_folder = self.get_invalid_test_value('create_image_watermark', 'folder', param_folder, 'str')
        self.initialize('create_image_watermark', 'folder', param_folder)
        ok = False
        try:
            self.api.create_image_watermark(param_name, param_image, param_picture_frame, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_image_watermark', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_image_watermark', 'folder', param_folder)
        if ok:
            self.assert_no_exception('create_image_watermark', 'folder')

    def test_create_image_watermark_invalid_storage(self):
        """Test case for create_image_watermark with invalid storage
        """
        param_name = self.get_test_value('create_image_watermark', 'name', 'str')
        param_image = self.get_test_value('create_image_watermark', 'image', 'file')
        param_picture_frame = self.get_test_value('create_image_watermark', 'picture_frame', 'PictureFrame')
        param_password = self.get_test_value('create_image_watermark', 'password', 'str')
        param_folder = self.get_test_value('create_image_watermark', 'folder', 'str')
        param_storage = self.get_test_value('create_image_watermark', 'storage', 'str')
        param_storage = self.get_invalid_test_value('create_image_watermark', 'storage', param_storage, 'str')
        self.initialize('create_image_watermark', 'storage', param_storage)
        ok = False
        try:
            self.api.create_image_watermark(param_name, param_image, param_picture_frame, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_image_watermark', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_image_watermark', 'storage', param_storage)
        if ok:
            self.assert_no_exception('create_image_watermark', 'storage')

    def test_create_image_watermark_online(self):
        """Test case for create_image_watermark_online
        """
        param_document = self.get_test_value('create_image_watermark_online', 'document', 'file')
        param_image = self.get_test_value('create_image_watermark_online', 'image', 'file')
        param_picture_frame = self.get_test_value('create_image_watermark_online', 'picture_frame', 'PictureFrame')
        param_password = self.get_test_value('create_image_watermark_online', 'password', 'str')
        self.initialize('create_image_watermark_online', None, None)
        response = self.api.create_image_watermark_online(param_document, param_image, param_picture_frame, param_password)
        self.assertTrue(isinstance(response, str))
        self.assertTrue(len(response) > 0)

    def test_create_image_watermark_online_invalid_document(self):
        """Test case for create_image_watermark_online with invalid document
        """
        param_document = self.get_test_value('create_image_watermark_online', 'document', 'file')
        param_image = self.get_test_value('create_image_watermark_online', 'image', 'file')
        param_picture_frame = self.get_test_value('create_image_watermark_online', 'picture_frame', 'PictureFrame')
        param_password = self.get_test_value('create_image_watermark_online', 'password', 'str')
        param_document = self.get_invalid_test_value('create_image_watermark_online', 'document', param_document, 'file')
        self.initialize('create_image_watermark_online', 'document', param_document)
        ok = False
        try:
            self.api.create_image_watermark_online(param_document, param_image, param_picture_frame, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_image_watermark_online', 'document', param_document)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_image_watermark_online', 'document', param_document)
        if ok:
            self.assert_no_exception('create_image_watermark_online', 'document')

    def test_create_image_watermark_online_invalid_image(self):
        """Test case for create_image_watermark_online with invalid image
        """
        param_document = self.get_test_value('create_image_watermark_online', 'document', 'file')
        param_image = self.get_test_value('create_image_watermark_online', 'image', 'file')
        param_picture_frame = self.get_test_value('create_image_watermark_online', 'picture_frame', 'PictureFrame')
        param_password = self.get_test_value('create_image_watermark_online', 'password', 'str')
        param_image = self.get_invalid_test_value('create_image_watermark_online', 'image', param_image, 'file')
        self.initialize('create_image_watermark_online', 'image', param_image)
        ok = False
        try:
            self.api.create_image_watermark_online(param_document, param_image, param_picture_frame, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_image_watermark_online', 'image', param_image)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_image_watermark_online', 'image', param_image)
        if ok:
            self.assert_no_exception('create_image_watermark_online', 'image')

    def test_create_image_watermark_online_invalid_picture_frame(self):
        """Test case for create_image_watermark_online with invalid picture_frame
        """
        param_document = self.get_test_value('create_image_watermark_online', 'document', 'file')
        param_image = self.get_test_value('create_image_watermark_online', 'image', 'file')
        param_picture_frame = self.get_test_value('create_image_watermark_online', 'picture_frame', 'PictureFrame')
        param_password = self.get_test_value('create_image_watermark_online', 'password', 'str')
        param_picture_frame = self.get_invalid_test_value('create_image_watermark_online', 'picture_frame', param_picture_frame, 'PictureFrame')
        self.initialize('create_image_watermark_online', 'picture_frame', param_picture_frame)
        ok = False
        try:
            self.api.create_image_watermark_online(param_document, param_image, param_picture_frame, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_image_watermark_online', 'picture_frame', param_picture_frame)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_image_watermark_online', 'picture_frame', param_picture_frame)
        if ok:
            self.assert_no_exception('create_image_watermark_online', 'picture_frame')

    def test_create_image_watermark_online_invalid_password(self):
        """Test case for create_image_watermark_online with invalid password
        """
        param_document = self.get_test_value('create_image_watermark_online', 'document', 'file')
        param_image = self.get_test_value('create_image_watermark_online', 'image', 'file')
        param_picture_frame = self.get_test_value('create_image_watermark_online', 'picture_frame', 'PictureFrame')
        param_password = self.get_test_value('create_image_watermark_online', 'password', 'str')
        param_password = self.get_invalid_test_value('create_image_watermark_online', 'password', param_password, 'str')
        self.initialize('create_image_watermark_online', 'password', param_password)
        ok = False
        try:
            self.api.create_image_watermark_online(param_document, param_image, param_picture_frame, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_image_watermark_online', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_image_watermark_online', 'password', param_password)
        if ok:
            self.assert_no_exception('create_image_watermark_online', 'password')

    def test_create_notes_slide(self):
        """Test case for create_notes_slide
        """
        param_name = self.get_test_value('create_notes_slide', 'name', 'str')
        param_slide_index = self.get_test_value('create_notes_slide', 'slide_index', 'int')
        param_dto = self.get_test_value('create_notes_slide', 'dto', 'NotesSlide')
        param_password = self.get_test_value('create_notes_slide', 'password', 'str')
        param_folder = self.get_test_value('create_notes_slide', 'folder', 'str')
        param_storage = self.get_test_value('create_notes_slide', 'storage', 'str')
        self.initialize('create_notes_slide', None, None)
        response = self.api.create_notes_slide(param_name, param_slide_index, param_dto, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_create_notes_slide_invalid_name(self):
        """Test case for create_notes_slide with invalid name
        """
        param_name = self.get_test_value('create_notes_slide', 'name', 'str')
        param_slide_index = self.get_test_value('create_notes_slide', 'slide_index', 'int')
        param_dto = self.get_test_value('create_notes_slide', 'dto', 'NotesSlide')
        param_password = self.get_test_value('create_notes_slide', 'password', 'str')
        param_folder = self.get_test_value('create_notes_slide', 'folder', 'str')
        param_storage = self.get_test_value('create_notes_slide', 'storage', 'str')
        param_name = self.get_invalid_test_value('create_notes_slide', 'name', param_name, 'str')
        self.initialize('create_notes_slide', 'name', param_name)
        ok = False
        try:
            self.api.create_notes_slide(param_name, param_slide_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_notes_slide', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_notes_slide', 'name', param_name)
        if ok:
            self.assert_no_exception('create_notes_slide', 'name')

    def test_create_notes_slide_invalid_slide_index(self):
        """Test case for create_notes_slide with invalid slide_index
        """
        param_name = self.get_test_value('create_notes_slide', 'name', 'str')
        param_slide_index = self.get_test_value('create_notes_slide', 'slide_index', 'int')
        param_dto = self.get_test_value('create_notes_slide', 'dto', 'NotesSlide')
        param_password = self.get_test_value('create_notes_slide', 'password', 'str')
        param_folder = self.get_test_value('create_notes_slide', 'folder', 'str')
        param_storage = self.get_test_value('create_notes_slide', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('create_notes_slide', 'slide_index', param_slide_index, 'int')
        self.initialize('create_notes_slide', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.create_notes_slide(param_name, param_slide_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_notes_slide', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_notes_slide', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('create_notes_slide', 'slide_index')

    def test_create_notes_slide_invalid_dto(self):
        """Test case for create_notes_slide with invalid dto
        """
        param_name = self.get_test_value('create_notes_slide', 'name', 'str')
        param_slide_index = self.get_test_value('create_notes_slide', 'slide_index', 'int')
        param_dto = self.get_test_value('create_notes_slide', 'dto', 'NotesSlide')
        param_password = self.get_test_value('create_notes_slide', 'password', 'str')
        param_folder = self.get_test_value('create_notes_slide', 'folder', 'str')
        param_storage = self.get_test_value('create_notes_slide', 'storage', 'str')
        param_dto = self.get_invalid_test_value('create_notes_slide', 'dto', param_dto, 'NotesSlide')
        self.initialize('create_notes_slide', 'dto', param_dto)
        ok = False
        try:
            self.api.create_notes_slide(param_name, param_slide_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_notes_slide', 'dto', param_dto)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_notes_slide', 'dto', param_dto)
        if ok:
            self.assert_no_exception('create_notes_slide', 'dto')

    def test_create_notes_slide_invalid_password(self):
        """Test case for create_notes_slide with invalid password
        """
        param_name = self.get_test_value('create_notes_slide', 'name', 'str')
        param_slide_index = self.get_test_value('create_notes_slide', 'slide_index', 'int')
        param_dto = self.get_test_value('create_notes_slide', 'dto', 'NotesSlide')
        param_password = self.get_test_value('create_notes_slide', 'password', 'str')
        param_folder = self.get_test_value('create_notes_slide', 'folder', 'str')
        param_storage = self.get_test_value('create_notes_slide', 'storage', 'str')
        param_password = self.get_invalid_test_value('create_notes_slide', 'password', param_password, 'str')
        self.initialize('create_notes_slide', 'password', param_password)
        ok = False
        try:
            self.api.create_notes_slide(param_name, param_slide_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_notes_slide', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_notes_slide', 'password', param_password)
        if ok:
            self.assert_no_exception('create_notes_slide', 'password')

    def test_create_notes_slide_invalid_folder(self):
        """Test case for create_notes_slide with invalid folder
        """
        param_name = self.get_test_value('create_notes_slide', 'name', 'str')
        param_slide_index = self.get_test_value('create_notes_slide', 'slide_index', 'int')
        param_dto = self.get_test_value('create_notes_slide', 'dto', 'NotesSlide')
        param_password = self.get_test_value('create_notes_slide', 'password', 'str')
        param_folder = self.get_test_value('create_notes_slide', 'folder', 'str')
        param_storage = self.get_test_value('create_notes_slide', 'storage', 'str')
        param_folder = self.get_invalid_test_value('create_notes_slide', 'folder', param_folder, 'str')
        self.initialize('create_notes_slide', 'folder', param_folder)
        ok = False
        try:
            self.api.create_notes_slide(param_name, param_slide_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_notes_slide', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_notes_slide', 'folder', param_folder)
        if ok:
            self.assert_no_exception('create_notes_slide', 'folder')

    def test_create_notes_slide_invalid_storage(self):
        """Test case for create_notes_slide with invalid storage
        """
        param_name = self.get_test_value('create_notes_slide', 'name', 'str')
        param_slide_index = self.get_test_value('create_notes_slide', 'slide_index', 'int')
        param_dto = self.get_test_value('create_notes_slide', 'dto', 'NotesSlide')
        param_password = self.get_test_value('create_notes_slide', 'password', 'str')
        param_folder = self.get_test_value('create_notes_slide', 'folder', 'str')
        param_storage = self.get_test_value('create_notes_slide', 'storage', 'str')
        param_storage = self.get_invalid_test_value('create_notes_slide', 'storage', param_storage, 'str')
        self.initialize('create_notes_slide', 'storage', param_storage)
        ok = False
        try:
            self.api.create_notes_slide(param_name, param_slide_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_notes_slide', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_notes_slide', 'storage', param_storage)
        if ok:
            self.assert_no_exception('create_notes_slide', 'storage')

    def test_create_paragraph(self):
        """Test case for create_paragraph
        """
        param_name = self.get_test_value('create_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('create_paragraph', 'slide_index', 'int')
        param_shape_index = self.get_test_value('create_paragraph', 'shape_index', 'int')
        param_dto = self.get_test_value('create_paragraph', 'dto', 'Paragraph')
        param_position = self.get_test_value('create_paragraph', 'position', 'int')
        param_password = self.get_test_value('create_paragraph', 'password', 'str')
        param_folder = self.get_test_value('create_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('create_paragraph', 'storage', 'str')
        self.initialize('create_paragraph', None, None)
        response = self.api.create_paragraph(param_name, param_slide_index, param_shape_index, param_dto, param_position, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_create_paragraph_invalid_name(self):
        """Test case for create_paragraph with invalid name
        """
        param_name = self.get_test_value('create_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('create_paragraph', 'slide_index', 'int')
        param_shape_index = self.get_test_value('create_paragraph', 'shape_index', 'int')
        param_dto = self.get_test_value('create_paragraph', 'dto', 'Paragraph')
        param_position = self.get_test_value('create_paragraph', 'position', 'int')
        param_password = self.get_test_value('create_paragraph', 'password', 'str')
        param_folder = self.get_test_value('create_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('create_paragraph', 'storage', 'str')
        param_name = self.get_invalid_test_value('create_paragraph', 'name', param_name, 'str')
        self.initialize('create_paragraph', 'name', param_name)
        ok = False
        try:
            self.api.create_paragraph(param_name, param_slide_index, param_shape_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_paragraph', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_paragraph', 'name', param_name)
        if ok:
            self.assert_no_exception('create_paragraph', 'name')

    def test_create_paragraph_invalid_slide_index(self):
        """Test case for create_paragraph with invalid slide_index
        """
        param_name = self.get_test_value('create_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('create_paragraph', 'slide_index', 'int')
        param_shape_index = self.get_test_value('create_paragraph', 'shape_index', 'int')
        param_dto = self.get_test_value('create_paragraph', 'dto', 'Paragraph')
        param_position = self.get_test_value('create_paragraph', 'position', 'int')
        param_password = self.get_test_value('create_paragraph', 'password', 'str')
        param_folder = self.get_test_value('create_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('create_paragraph', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('create_paragraph', 'slide_index', param_slide_index, 'int')
        self.initialize('create_paragraph', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.create_paragraph(param_name, param_slide_index, param_shape_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_paragraph', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_paragraph', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('create_paragraph', 'slide_index')

    def test_create_paragraph_invalid_shape_index(self):
        """Test case for create_paragraph with invalid shape_index
        """
        param_name = self.get_test_value('create_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('create_paragraph', 'slide_index', 'int')
        param_shape_index = self.get_test_value('create_paragraph', 'shape_index', 'int')
        param_dto = self.get_test_value('create_paragraph', 'dto', 'Paragraph')
        param_position = self.get_test_value('create_paragraph', 'position', 'int')
        param_password = self.get_test_value('create_paragraph', 'password', 'str')
        param_folder = self.get_test_value('create_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('create_paragraph', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('create_paragraph', 'shape_index', param_shape_index, 'int')
        self.initialize('create_paragraph', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.create_paragraph(param_name, param_slide_index, param_shape_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_paragraph', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_paragraph', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('create_paragraph', 'shape_index')

    def test_create_paragraph_invalid_dto(self):
        """Test case for create_paragraph with invalid dto
        """
        param_name = self.get_test_value('create_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('create_paragraph', 'slide_index', 'int')
        param_shape_index = self.get_test_value('create_paragraph', 'shape_index', 'int')
        param_dto = self.get_test_value('create_paragraph', 'dto', 'Paragraph')
        param_position = self.get_test_value('create_paragraph', 'position', 'int')
        param_password = self.get_test_value('create_paragraph', 'password', 'str')
        param_folder = self.get_test_value('create_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('create_paragraph', 'storage', 'str')
        param_dto = self.get_invalid_test_value('create_paragraph', 'dto', param_dto, 'Paragraph')
        self.initialize('create_paragraph', 'dto', param_dto)
        ok = False
        try:
            self.api.create_paragraph(param_name, param_slide_index, param_shape_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_paragraph', 'dto', param_dto)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_paragraph', 'dto', param_dto)
        if ok:
            self.assert_no_exception('create_paragraph', 'dto')

    def test_create_paragraph_invalid_position(self):
        """Test case for create_paragraph with invalid position
        """
        param_name = self.get_test_value('create_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('create_paragraph', 'slide_index', 'int')
        param_shape_index = self.get_test_value('create_paragraph', 'shape_index', 'int')
        param_dto = self.get_test_value('create_paragraph', 'dto', 'Paragraph')
        param_position = self.get_test_value('create_paragraph', 'position', 'int')
        param_password = self.get_test_value('create_paragraph', 'password', 'str')
        param_folder = self.get_test_value('create_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('create_paragraph', 'storage', 'str')
        param_position = self.get_invalid_test_value('create_paragraph', 'position', param_position, 'int')
        self.initialize('create_paragraph', 'position', param_position)
        ok = False
        try:
            self.api.create_paragraph(param_name, param_slide_index, param_shape_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_paragraph', 'position', param_position)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_paragraph', 'position', param_position)
        if ok:
            self.assert_no_exception('create_paragraph', 'position')

    def test_create_paragraph_invalid_password(self):
        """Test case for create_paragraph with invalid password
        """
        param_name = self.get_test_value('create_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('create_paragraph', 'slide_index', 'int')
        param_shape_index = self.get_test_value('create_paragraph', 'shape_index', 'int')
        param_dto = self.get_test_value('create_paragraph', 'dto', 'Paragraph')
        param_position = self.get_test_value('create_paragraph', 'position', 'int')
        param_password = self.get_test_value('create_paragraph', 'password', 'str')
        param_folder = self.get_test_value('create_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('create_paragraph', 'storage', 'str')
        param_password = self.get_invalid_test_value('create_paragraph', 'password', param_password, 'str')
        self.initialize('create_paragraph', 'password', param_password)
        ok = False
        try:
            self.api.create_paragraph(param_name, param_slide_index, param_shape_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_paragraph', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_paragraph', 'password', param_password)
        if ok:
            self.assert_no_exception('create_paragraph', 'password')

    def test_create_paragraph_invalid_folder(self):
        """Test case for create_paragraph with invalid folder
        """
        param_name = self.get_test_value('create_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('create_paragraph', 'slide_index', 'int')
        param_shape_index = self.get_test_value('create_paragraph', 'shape_index', 'int')
        param_dto = self.get_test_value('create_paragraph', 'dto', 'Paragraph')
        param_position = self.get_test_value('create_paragraph', 'position', 'int')
        param_password = self.get_test_value('create_paragraph', 'password', 'str')
        param_folder = self.get_test_value('create_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('create_paragraph', 'storage', 'str')
        param_folder = self.get_invalid_test_value('create_paragraph', 'folder', param_folder, 'str')
        self.initialize('create_paragraph', 'folder', param_folder)
        ok = False
        try:
            self.api.create_paragraph(param_name, param_slide_index, param_shape_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_paragraph', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_paragraph', 'folder', param_folder)
        if ok:
            self.assert_no_exception('create_paragraph', 'folder')

    def test_create_paragraph_invalid_storage(self):
        """Test case for create_paragraph with invalid storage
        """
        param_name = self.get_test_value('create_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('create_paragraph', 'slide_index', 'int')
        param_shape_index = self.get_test_value('create_paragraph', 'shape_index', 'int')
        param_dto = self.get_test_value('create_paragraph', 'dto', 'Paragraph')
        param_position = self.get_test_value('create_paragraph', 'position', 'int')
        param_password = self.get_test_value('create_paragraph', 'password', 'str')
        param_folder = self.get_test_value('create_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('create_paragraph', 'storage', 'str')
        param_storage = self.get_invalid_test_value('create_paragraph', 'storage', param_storage, 'str')
        self.initialize('create_paragraph', 'storage', param_storage)
        ok = False
        try:
            self.api.create_paragraph(param_name, param_slide_index, param_shape_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_paragraph', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_paragraph', 'storage', param_storage)
        if ok:
            self.assert_no_exception('create_paragraph', 'storage')

    def test_create_portion(self):
        """Test case for create_portion
        """
        param_name = self.get_test_value('create_portion', 'name', 'str')
        param_slide_index = self.get_test_value('create_portion', 'slide_index', 'int')
        param_shape_index = self.get_test_value('create_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('create_portion', 'paragraph_index', 'int')
        param_dto = self.get_test_value('create_portion', 'dto', 'Portion')
        param_position = self.get_test_value('create_portion', 'position', 'int')
        param_password = self.get_test_value('create_portion', 'password', 'str')
        param_folder = self.get_test_value('create_portion', 'folder', 'str')
        param_storage = self.get_test_value('create_portion', 'storage', 'str')
        self.initialize('create_portion', None, None)
        response = self.api.create_portion(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_dto, param_position, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_create_portion_invalid_name(self):
        """Test case for create_portion with invalid name
        """
        param_name = self.get_test_value('create_portion', 'name', 'str')
        param_slide_index = self.get_test_value('create_portion', 'slide_index', 'int')
        param_shape_index = self.get_test_value('create_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('create_portion', 'paragraph_index', 'int')
        param_dto = self.get_test_value('create_portion', 'dto', 'Portion')
        param_position = self.get_test_value('create_portion', 'position', 'int')
        param_password = self.get_test_value('create_portion', 'password', 'str')
        param_folder = self.get_test_value('create_portion', 'folder', 'str')
        param_storage = self.get_test_value('create_portion', 'storage', 'str')
        param_name = self.get_invalid_test_value('create_portion', 'name', param_name, 'str')
        self.initialize('create_portion', 'name', param_name)
        ok = False
        try:
            self.api.create_portion(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_portion', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_portion', 'name', param_name)
        if ok:
            self.assert_no_exception('create_portion', 'name')

    def test_create_portion_invalid_slide_index(self):
        """Test case for create_portion with invalid slide_index
        """
        param_name = self.get_test_value('create_portion', 'name', 'str')
        param_slide_index = self.get_test_value('create_portion', 'slide_index', 'int')
        param_shape_index = self.get_test_value('create_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('create_portion', 'paragraph_index', 'int')
        param_dto = self.get_test_value('create_portion', 'dto', 'Portion')
        param_position = self.get_test_value('create_portion', 'position', 'int')
        param_password = self.get_test_value('create_portion', 'password', 'str')
        param_folder = self.get_test_value('create_portion', 'folder', 'str')
        param_storage = self.get_test_value('create_portion', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('create_portion', 'slide_index', param_slide_index, 'int')
        self.initialize('create_portion', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.create_portion(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_portion', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_portion', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('create_portion', 'slide_index')

    def test_create_portion_invalid_shape_index(self):
        """Test case for create_portion with invalid shape_index
        """
        param_name = self.get_test_value('create_portion', 'name', 'str')
        param_slide_index = self.get_test_value('create_portion', 'slide_index', 'int')
        param_shape_index = self.get_test_value('create_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('create_portion', 'paragraph_index', 'int')
        param_dto = self.get_test_value('create_portion', 'dto', 'Portion')
        param_position = self.get_test_value('create_portion', 'position', 'int')
        param_password = self.get_test_value('create_portion', 'password', 'str')
        param_folder = self.get_test_value('create_portion', 'folder', 'str')
        param_storage = self.get_test_value('create_portion', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('create_portion', 'shape_index', param_shape_index, 'int')
        self.initialize('create_portion', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.create_portion(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_portion', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_portion', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('create_portion', 'shape_index')

    def test_create_portion_invalid_paragraph_index(self):
        """Test case for create_portion with invalid paragraph_index
        """
        param_name = self.get_test_value('create_portion', 'name', 'str')
        param_slide_index = self.get_test_value('create_portion', 'slide_index', 'int')
        param_shape_index = self.get_test_value('create_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('create_portion', 'paragraph_index', 'int')
        param_dto = self.get_test_value('create_portion', 'dto', 'Portion')
        param_position = self.get_test_value('create_portion', 'position', 'int')
        param_password = self.get_test_value('create_portion', 'password', 'str')
        param_folder = self.get_test_value('create_portion', 'folder', 'str')
        param_storage = self.get_test_value('create_portion', 'storage', 'str')
        param_paragraph_index = self.get_invalid_test_value('create_portion', 'paragraph_index', param_paragraph_index, 'int')
        self.initialize('create_portion', 'paragraph_index', param_paragraph_index)
        ok = False
        try:
            self.api.create_portion(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_portion', 'paragraph_index', param_paragraph_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_portion', 'paragraph_index', param_paragraph_index)
        if ok:
            self.assert_no_exception('create_portion', 'paragraph_index')

    def test_create_portion_invalid_dto(self):
        """Test case for create_portion with invalid dto
        """
        param_name = self.get_test_value('create_portion', 'name', 'str')
        param_slide_index = self.get_test_value('create_portion', 'slide_index', 'int')
        param_shape_index = self.get_test_value('create_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('create_portion', 'paragraph_index', 'int')
        param_dto = self.get_test_value('create_portion', 'dto', 'Portion')
        param_position = self.get_test_value('create_portion', 'position', 'int')
        param_password = self.get_test_value('create_portion', 'password', 'str')
        param_folder = self.get_test_value('create_portion', 'folder', 'str')
        param_storage = self.get_test_value('create_portion', 'storage', 'str')
        param_dto = self.get_invalid_test_value('create_portion', 'dto', param_dto, 'Portion')
        self.initialize('create_portion', 'dto', param_dto)
        ok = False
        try:
            self.api.create_portion(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_portion', 'dto', param_dto)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_portion', 'dto', param_dto)
        if ok:
            self.assert_no_exception('create_portion', 'dto')

    def test_create_portion_invalid_position(self):
        """Test case for create_portion with invalid position
        """
        param_name = self.get_test_value('create_portion', 'name', 'str')
        param_slide_index = self.get_test_value('create_portion', 'slide_index', 'int')
        param_shape_index = self.get_test_value('create_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('create_portion', 'paragraph_index', 'int')
        param_dto = self.get_test_value('create_portion', 'dto', 'Portion')
        param_position = self.get_test_value('create_portion', 'position', 'int')
        param_password = self.get_test_value('create_portion', 'password', 'str')
        param_folder = self.get_test_value('create_portion', 'folder', 'str')
        param_storage = self.get_test_value('create_portion', 'storage', 'str')
        param_position = self.get_invalid_test_value('create_portion', 'position', param_position, 'int')
        self.initialize('create_portion', 'position', param_position)
        ok = False
        try:
            self.api.create_portion(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_portion', 'position', param_position)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_portion', 'position', param_position)
        if ok:
            self.assert_no_exception('create_portion', 'position')

    def test_create_portion_invalid_password(self):
        """Test case for create_portion with invalid password
        """
        param_name = self.get_test_value('create_portion', 'name', 'str')
        param_slide_index = self.get_test_value('create_portion', 'slide_index', 'int')
        param_shape_index = self.get_test_value('create_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('create_portion', 'paragraph_index', 'int')
        param_dto = self.get_test_value('create_portion', 'dto', 'Portion')
        param_position = self.get_test_value('create_portion', 'position', 'int')
        param_password = self.get_test_value('create_portion', 'password', 'str')
        param_folder = self.get_test_value('create_portion', 'folder', 'str')
        param_storage = self.get_test_value('create_portion', 'storage', 'str')
        param_password = self.get_invalid_test_value('create_portion', 'password', param_password, 'str')
        self.initialize('create_portion', 'password', param_password)
        ok = False
        try:
            self.api.create_portion(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_portion', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_portion', 'password', param_password)
        if ok:
            self.assert_no_exception('create_portion', 'password')

    def test_create_portion_invalid_folder(self):
        """Test case for create_portion with invalid folder
        """
        param_name = self.get_test_value('create_portion', 'name', 'str')
        param_slide_index = self.get_test_value('create_portion', 'slide_index', 'int')
        param_shape_index = self.get_test_value('create_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('create_portion', 'paragraph_index', 'int')
        param_dto = self.get_test_value('create_portion', 'dto', 'Portion')
        param_position = self.get_test_value('create_portion', 'position', 'int')
        param_password = self.get_test_value('create_portion', 'password', 'str')
        param_folder = self.get_test_value('create_portion', 'folder', 'str')
        param_storage = self.get_test_value('create_portion', 'storage', 'str')
        param_folder = self.get_invalid_test_value('create_portion', 'folder', param_folder, 'str')
        self.initialize('create_portion', 'folder', param_folder)
        ok = False
        try:
            self.api.create_portion(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_portion', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_portion', 'folder', param_folder)
        if ok:
            self.assert_no_exception('create_portion', 'folder')

    def test_create_portion_invalid_storage(self):
        """Test case for create_portion with invalid storage
        """
        param_name = self.get_test_value('create_portion', 'name', 'str')
        param_slide_index = self.get_test_value('create_portion', 'slide_index', 'int')
        param_shape_index = self.get_test_value('create_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('create_portion', 'paragraph_index', 'int')
        param_dto = self.get_test_value('create_portion', 'dto', 'Portion')
        param_position = self.get_test_value('create_portion', 'position', 'int')
        param_password = self.get_test_value('create_portion', 'password', 'str')
        param_folder = self.get_test_value('create_portion', 'folder', 'str')
        param_storage = self.get_test_value('create_portion', 'storage', 'str')
        param_storage = self.get_invalid_test_value('create_portion', 'storage', param_storage, 'str')
        self.initialize('create_portion', 'storage', param_storage)
        ok = False
        try:
            self.api.create_portion(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_portion', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_portion', 'storage', param_storage)
        if ok:
            self.assert_no_exception('create_portion', 'storage')

    def test_create_presentation(self):
        """Test case for create_presentation
        """
        param_name = self.get_test_value('create_presentation', 'name', 'str')
        param_data = self.get_test_value('create_presentation', 'data', 'file')
        param_input_password = self.get_test_value('create_presentation', 'input_password', 'str')
        param_password = self.get_test_value('create_presentation', 'password', 'str')
        param_folder = self.get_test_value('create_presentation', 'folder', 'str')
        param_storage = self.get_test_value('create_presentation', 'storage', 'str')
        self.initialize('create_presentation', None, None)
        response = self.api.create_presentation(param_name, param_data, param_input_password, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_create_presentation_invalid_name(self):
        """Test case for create_presentation with invalid name
        """
        param_name = self.get_test_value('create_presentation', 'name', 'str')
        param_data = self.get_test_value('create_presentation', 'data', 'file')
        param_input_password = self.get_test_value('create_presentation', 'input_password', 'str')
        param_password = self.get_test_value('create_presentation', 'password', 'str')
        param_folder = self.get_test_value('create_presentation', 'folder', 'str')
        param_storage = self.get_test_value('create_presentation', 'storage', 'str')
        param_name = self.get_invalid_test_value('create_presentation', 'name', param_name, 'str')
        self.initialize('create_presentation', 'name', param_name)
        ok = False
        try:
            self.api.create_presentation(param_name, param_data, param_input_password, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_presentation', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_presentation', 'name', param_name)
        if ok:
            self.assert_no_exception('create_presentation', 'name')

    def test_create_presentation_invalid_data(self):
        """Test case for create_presentation with invalid data
        """
        param_name = self.get_test_value('create_presentation', 'name', 'str')
        param_data = self.get_test_value('create_presentation', 'data', 'file')
        param_input_password = self.get_test_value('create_presentation', 'input_password', 'str')
        param_password = self.get_test_value('create_presentation', 'password', 'str')
        param_folder = self.get_test_value('create_presentation', 'folder', 'str')
        param_storage = self.get_test_value('create_presentation', 'storage', 'str')
        param_data = self.get_invalid_test_value('create_presentation', 'data', param_data, 'file')
        self.initialize('create_presentation', 'data', param_data)
        ok = False
        try:
            self.api.create_presentation(param_name, param_data, param_input_password, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_presentation', 'data', param_data)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_presentation', 'data', param_data)
        if ok:
            self.assert_no_exception('create_presentation', 'data')

    def test_create_presentation_invalid_input_password(self):
        """Test case for create_presentation with invalid input_password
        """
        param_name = self.get_test_value('create_presentation', 'name', 'str')
        param_data = self.get_test_value('create_presentation', 'data', 'file')
        param_input_password = self.get_test_value('create_presentation', 'input_password', 'str')
        param_password = self.get_test_value('create_presentation', 'password', 'str')
        param_folder = self.get_test_value('create_presentation', 'folder', 'str')
        param_storage = self.get_test_value('create_presentation', 'storage', 'str')
        param_input_password = self.get_invalid_test_value('create_presentation', 'input_password', param_input_password, 'str')
        self.initialize('create_presentation', 'input_password', param_input_password)
        ok = False
        try:
            self.api.create_presentation(param_name, param_data, param_input_password, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_presentation', 'input_password', param_input_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_presentation', 'input_password', param_input_password)
        if ok:
            self.assert_no_exception('create_presentation', 'input_password')

    def test_create_presentation_invalid_password(self):
        """Test case for create_presentation with invalid password
        """
        param_name = self.get_test_value('create_presentation', 'name', 'str')
        param_data = self.get_test_value('create_presentation', 'data', 'file')
        param_input_password = self.get_test_value('create_presentation', 'input_password', 'str')
        param_password = self.get_test_value('create_presentation', 'password', 'str')
        param_folder = self.get_test_value('create_presentation', 'folder', 'str')
        param_storage = self.get_test_value('create_presentation', 'storage', 'str')
        param_password = self.get_invalid_test_value('create_presentation', 'password', param_password, 'str')
        self.initialize('create_presentation', 'password', param_password)
        ok = False
        try:
            self.api.create_presentation(param_name, param_data, param_input_password, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_presentation', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_presentation', 'password', param_password)
        if ok:
            self.assert_no_exception('create_presentation', 'password')

    def test_create_presentation_invalid_folder(self):
        """Test case for create_presentation with invalid folder
        """
        param_name = self.get_test_value('create_presentation', 'name', 'str')
        param_data = self.get_test_value('create_presentation', 'data', 'file')
        param_input_password = self.get_test_value('create_presentation', 'input_password', 'str')
        param_password = self.get_test_value('create_presentation', 'password', 'str')
        param_folder = self.get_test_value('create_presentation', 'folder', 'str')
        param_storage = self.get_test_value('create_presentation', 'storage', 'str')
        param_folder = self.get_invalid_test_value('create_presentation', 'folder', param_folder, 'str')
        self.initialize('create_presentation', 'folder', param_folder)
        ok = False
        try:
            self.api.create_presentation(param_name, param_data, param_input_password, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_presentation', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_presentation', 'folder', param_folder)
        if ok:
            self.assert_no_exception('create_presentation', 'folder')

    def test_create_presentation_invalid_storage(self):
        """Test case for create_presentation with invalid storage
        """
        param_name = self.get_test_value('create_presentation', 'name', 'str')
        param_data = self.get_test_value('create_presentation', 'data', 'file')
        param_input_password = self.get_test_value('create_presentation', 'input_password', 'str')
        param_password = self.get_test_value('create_presentation', 'password', 'str')
        param_folder = self.get_test_value('create_presentation', 'folder', 'str')
        param_storage = self.get_test_value('create_presentation', 'storage', 'str')
        param_storage = self.get_invalid_test_value('create_presentation', 'storage', param_storage, 'str')
        self.initialize('create_presentation', 'storage', param_storage)
        ok = False
        try:
            self.api.create_presentation(param_name, param_data, param_input_password, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_presentation', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_presentation', 'storage', param_storage)
        if ok:
            self.assert_no_exception('create_presentation', 'storage')

    def test_create_presentation_from_source(self):
        """Test case for create_presentation_from_source
        """
        param_name = self.get_test_value('create_presentation_from_source', 'name', 'str')
        param_source_path = self.get_test_value('create_presentation_from_source', 'source_path', 'str')
        param_source_password = self.get_test_value('create_presentation_from_source', 'source_password', 'str')
        param_source_storage = self.get_test_value('create_presentation_from_source', 'source_storage', 'str')
        param_password = self.get_test_value('create_presentation_from_source', 'password', 'str')
        param_folder = self.get_test_value('create_presentation_from_source', 'folder', 'str')
        param_storage = self.get_test_value('create_presentation_from_source', 'storage', 'str')
        self.initialize('create_presentation_from_source', None, None)
        response = self.api.create_presentation_from_source(param_name, param_source_path, param_source_password, param_source_storage, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_create_presentation_from_source_invalid_name(self):
        """Test case for create_presentation_from_source with invalid name
        """
        param_name = self.get_test_value('create_presentation_from_source', 'name', 'str')
        param_source_path = self.get_test_value('create_presentation_from_source', 'source_path', 'str')
        param_source_password = self.get_test_value('create_presentation_from_source', 'source_password', 'str')
        param_source_storage = self.get_test_value('create_presentation_from_source', 'source_storage', 'str')
        param_password = self.get_test_value('create_presentation_from_source', 'password', 'str')
        param_folder = self.get_test_value('create_presentation_from_source', 'folder', 'str')
        param_storage = self.get_test_value('create_presentation_from_source', 'storage', 'str')
        param_name = self.get_invalid_test_value('create_presentation_from_source', 'name', param_name, 'str')
        self.initialize('create_presentation_from_source', 'name', param_name)
        ok = False
        try:
            self.api.create_presentation_from_source(param_name, param_source_path, param_source_password, param_source_storage, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_presentation_from_source', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_presentation_from_source', 'name', param_name)
        if ok:
            self.assert_no_exception('create_presentation_from_source', 'name')

    def test_create_presentation_from_source_invalid_source_path(self):
        """Test case for create_presentation_from_source with invalid source_path
        """
        param_name = self.get_test_value('create_presentation_from_source', 'name', 'str')
        param_source_path = self.get_test_value('create_presentation_from_source', 'source_path', 'str')
        param_source_password = self.get_test_value('create_presentation_from_source', 'source_password', 'str')
        param_source_storage = self.get_test_value('create_presentation_from_source', 'source_storage', 'str')
        param_password = self.get_test_value('create_presentation_from_source', 'password', 'str')
        param_folder = self.get_test_value('create_presentation_from_source', 'folder', 'str')
        param_storage = self.get_test_value('create_presentation_from_source', 'storage', 'str')
        param_source_path = self.get_invalid_test_value('create_presentation_from_source', 'source_path', param_source_path, 'str')
        self.initialize('create_presentation_from_source', 'source_path', param_source_path)
        ok = False
        try:
            self.api.create_presentation_from_source(param_name, param_source_path, param_source_password, param_source_storage, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_presentation_from_source', 'source_path', param_source_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_presentation_from_source', 'source_path', param_source_path)
        if ok:
            self.assert_no_exception('create_presentation_from_source', 'source_path')

    def test_create_presentation_from_source_invalid_source_password(self):
        """Test case for create_presentation_from_source with invalid source_password
        """
        param_name = self.get_test_value('create_presentation_from_source', 'name', 'str')
        param_source_path = self.get_test_value('create_presentation_from_source', 'source_path', 'str')
        param_source_password = self.get_test_value('create_presentation_from_source', 'source_password', 'str')
        param_source_storage = self.get_test_value('create_presentation_from_source', 'source_storage', 'str')
        param_password = self.get_test_value('create_presentation_from_source', 'password', 'str')
        param_folder = self.get_test_value('create_presentation_from_source', 'folder', 'str')
        param_storage = self.get_test_value('create_presentation_from_source', 'storage', 'str')
        param_source_password = self.get_invalid_test_value('create_presentation_from_source', 'source_password', param_source_password, 'str')
        self.initialize('create_presentation_from_source', 'source_password', param_source_password)
        ok = False
        try:
            self.api.create_presentation_from_source(param_name, param_source_path, param_source_password, param_source_storage, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_presentation_from_source', 'source_password', param_source_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_presentation_from_source', 'source_password', param_source_password)
        if ok:
            self.assert_no_exception('create_presentation_from_source', 'source_password')

    def test_create_presentation_from_source_invalid_source_storage(self):
        """Test case for create_presentation_from_source with invalid source_storage
        """
        param_name = self.get_test_value('create_presentation_from_source', 'name', 'str')
        param_source_path = self.get_test_value('create_presentation_from_source', 'source_path', 'str')
        param_source_password = self.get_test_value('create_presentation_from_source', 'source_password', 'str')
        param_source_storage = self.get_test_value('create_presentation_from_source', 'source_storage', 'str')
        param_password = self.get_test_value('create_presentation_from_source', 'password', 'str')
        param_folder = self.get_test_value('create_presentation_from_source', 'folder', 'str')
        param_storage = self.get_test_value('create_presentation_from_source', 'storage', 'str')
        param_source_storage = self.get_invalid_test_value('create_presentation_from_source', 'source_storage', param_source_storage, 'str')
        self.initialize('create_presentation_from_source', 'source_storage', param_source_storage)
        ok = False
        try:
            self.api.create_presentation_from_source(param_name, param_source_path, param_source_password, param_source_storage, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_presentation_from_source', 'source_storage', param_source_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_presentation_from_source', 'source_storage', param_source_storage)
        if ok:
            self.assert_no_exception('create_presentation_from_source', 'source_storage')

    def test_create_presentation_from_source_invalid_password(self):
        """Test case for create_presentation_from_source with invalid password
        """
        param_name = self.get_test_value('create_presentation_from_source', 'name', 'str')
        param_source_path = self.get_test_value('create_presentation_from_source', 'source_path', 'str')
        param_source_password = self.get_test_value('create_presentation_from_source', 'source_password', 'str')
        param_source_storage = self.get_test_value('create_presentation_from_source', 'source_storage', 'str')
        param_password = self.get_test_value('create_presentation_from_source', 'password', 'str')
        param_folder = self.get_test_value('create_presentation_from_source', 'folder', 'str')
        param_storage = self.get_test_value('create_presentation_from_source', 'storage', 'str')
        param_password = self.get_invalid_test_value('create_presentation_from_source', 'password', param_password, 'str')
        self.initialize('create_presentation_from_source', 'password', param_password)
        ok = False
        try:
            self.api.create_presentation_from_source(param_name, param_source_path, param_source_password, param_source_storage, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_presentation_from_source', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_presentation_from_source', 'password', param_password)
        if ok:
            self.assert_no_exception('create_presentation_from_source', 'password')

    def test_create_presentation_from_source_invalid_folder(self):
        """Test case for create_presentation_from_source with invalid folder
        """
        param_name = self.get_test_value('create_presentation_from_source', 'name', 'str')
        param_source_path = self.get_test_value('create_presentation_from_source', 'source_path', 'str')
        param_source_password = self.get_test_value('create_presentation_from_source', 'source_password', 'str')
        param_source_storage = self.get_test_value('create_presentation_from_source', 'source_storage', 'str')
        param_password = self.get_test_value('create_presentation_from_source', 'password', 'str')
        param_folder = self.get_test_value('create_presentation_from_source', 'folder', 'str')
        param_storage = self.get_test_value('create_presentation_from_source', 'storage', 'str')
        param_folder = self.get_invalid_test_value('create_presentation_from_source', 'folder', param_folder, 'str')
        self.initialize('create_presentation_from_source', 'folder', param_folder)
        ok = False
        try:
            self.api.create_presentation_from_source(param_name, param_source_path, param_source_password, param_source_storage, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_presentation_from_source', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_presentation_from_source', 'folder', param_folder)
        if ok:
            self.assert_no_exception('create_presentation_from_source', 'folder')

    def test_create_presentation_from_source_invalid_storage(self):
        """Test case for create_presentation_from_source with invalid storage
        """
        param_name = self.get_test_value('create_presentation_from_source', 'name', 'str')
        param_source_path = self.get_test_value('create_presentation_from_source', 'source_path', 'str')
        param_source_password = self.get_test_value('create_presentation_from_source', 'source_password', 'str')
        param_source_storage = self.get_test_value('create_presentation_from_source', 'source_storage', 'str')
        param_password = self.get_test_value('create_presentation_from_source', 'password', 'str')
        param_folder = self.get_test_value('create_presentation_from_source', 'folder', 'str')
        param_storage = self.get_test_value('create_presentation_from_source', 'storage', 'str')
        param_storage = self.get_invalid_test_value('create_presentation_from_source', 'storage', param_storage, 'str')
        self.initialize('create_presentation_from_source', 'storage', param_storage)
        ok = False
        try:
            self.api.create_presentation_from_source(param_name, param_source_path, param_source_password, param_source_storage, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_presentation_from_source', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_presentation_from_source', 'storage', param_storage)
        if ok:
            self.assert_no_exception('create_presentation_from_source', 'storage')

    def test_create_presentation_from_template(self):
        """Test case for create_presentation_from_template
        """
        param_name = self.get_test_value('create_presentation_from_template', 'name', 'str')
        param_template_path = self.get_test_value('create_presentation_from_template', 'template_path', 'str')
        param_data = self.get_test_value('create_presentation_from_template', 'data', 'str')
        param_template_password = self.get_test_value('create_presentation_from_template', 'template_password', 'str')
        param_template_storage = self.get_test_value('create_presentation_from_template', 'template_storage', 'str')
        param_is_image_data_embedded = self.get_test_value('create_presentation_from_template', 'is_image_data_embedded', 'bool')
        param_password = self.get_test_value('create_presentation_from_template', 'password', 'str')
        param_folder = self.get_test_value('create_presentation_from_template', 'folder', 'str')
        param_storage = self.get_test_value('create_presentation_from_template', 'storage', 'str')
        self.initialize('create_presentation_from_template', None, None)
        response = self.api.create_presentation_from_template(param_name, param_template_path, param_data, param_template_password, param_template_storage, param_is_image_data_embedded, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_create_presentation_from_template_invalid_name(self):
        """Test case for create_presentation_from_template with invalid name
        """
        param_name = self.get_test_value('create_presentation_from_template', 'name', 'str')
        param_template_path = self.get_test_value('create_presentation_from_template', 'template_path', 'str')
        param_data = self.get_test_value('create_presentation_from_template', 'data', 'str')
        param_template_password = self.get_test_value('create_presentation_from_template', 'template_password', 'str')
        param_template_storage = self.get_test_value('create_presentation_from_template', 'template_storage', 'str')
        param_is_image_data_embedded = self.get_test_value('create_presentation_from_template', 'is_image_data_embedded', 'bool')
        param_password = self.get_test_value('create_presentation_from_template', 'password', 'str')
        param_folder = self.get_test_value('create_presentation_from_template', 'folder', 'str')
        param_storage = self.get_test_value('create_presentation_from_template', 'storage', 'str')
        param_name = self.get_invalid_test_value('create_presentation_from_template', 'name', param_name, 'str')
        self.initialize('create_presentation_from_template', 'name', param_name)
        ok = False
        try:
            self.api.create_presentation_from_template(param_name, param_template_path, param_data, param_template_password, param_template_storage, param_is_image_data_embedded, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_presentation_from_template', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_presentation_from_template', 'name', param_name)
        if ok:
            self.assert_no_exception('create_presentation_from_template', 'name')

    def test_create_presentation_from_template_invalid_template_path(self):
        """Test case for create_presentation_from_template with invalid template_path
        """
        param_name = self.get_test_value('create_presentation_from_template', 'name', 'str')
        param_template_path = self.get_test_value('create_presentation_from_template', 'template_path', 'str')
        param_data = self.get_test_value('create_presentation_from_template', 'data', 'str')
        param_template_password = self.get_test_value('create_presentation_from_template', 'template_password', 'str')
        param_template_storage = self.get_test_value('create_presentation_from_template', 'template_storage', 'str')
        param_is_image_data_embedded = self.get_test_value('create_presentation_from_template', 'is_image_data_embedded', 'bool')
        param_password = self.get_test_value('create_presentation_from_template', 'password', 'str')
        param_folder = self.get_test_value('create_presentation_from_template', 'folder', 'str')
        param_storage = self.get_test_value('create_presentation_from_template', 'storage', 'str')
        param_template_path = self.get_invalid_test_value('create_presentation_from_template', 'template_path', param_template_path, 'str')
        self.initialize('create_presentation_from_template', 'template_path', param_template_path)
        ok = False
        try:
            self.api.create_presentation_from_template(param_name, param_template_path, param_data, param_template_password, param_template_storage, param_is_image_data_embedded, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_presentation_from_template', 'template_path', param_template_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_presentation_from_template', 'template_path', param_template_path)
        if ok:
            self.assert_no_exception('create_presentation_from_template', 'template_path')

    def test_create_presentation_from_template_invalid_data(self):
        """Test case for create_presentation_from_template with invalid data
        """
        param_name = self.get_test_value('create_presentation_from_template', 'name', 'str')
        param_template_path = self.get_test_value('create_presentation_from_template', 'template_path', 'str')
        param_data = self.get_test_value('create_presentation_from_template', 'data', 'str')
        param_template_password = self.get_test_value('create_presentation_from_template', 'template_password', 'str')
        param_template_storage = self.get_test_value('create_presentation_from_template', 'template_storage', 'str')
        param_is_image_data_embedded = self.get_test_value('create_presentation_from_template', 'is_image_data_embedded', 'bool')
        param_password = self.get_test_value('create_presentation_from_template', 'password', 'str')
        param_folder = self.get_test_value('create_presentation_from_template', 'folder', 'str')
        param_storage = self.get_test_value('create_presentation_from_template', 'storage', 'str')
        param_data = self.get_invalid_test_value('create_presentation_from_template', 'data', param_data, 'str')
        self.initialize('create_presentation_from_template', 'data', param_data)
        ok = False
        try:
            self.api.create_presentation_from_template(param_name, param_template_path, param_data, param_template_password, param_template_storage, param_is_image_data_embedded, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_presentation_from_template', 'data', param_data)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_presentation_from_template', 'data', param_data)
        if ok:
            self.assert_no_exception('create_presentation_from_template', 'data')

    def test_create_presentation_from_template_invalid_template_password(self):
        """Test case for create_presentation_from_template with invalid template_password
        """
        param_name = self.get_test_value('create_presentation_from_template', 'name', 'str')
        param_template_path = self.get_test_value('create_presentation_from_template', 'template_path', 'str')
        param_data = self.get_test_value('create_presentation_from_template', 'data', 'str')
        param_template_password = self.get_test_value('create_presentation_from_template', 'template_password', 'str')
        param_template_storage = self.get_test_value('create_presentation_from_template', 'template_storage', 'str')
        param_is_image_data_embedded = self.get_test_value('create_presentation_from_template', 'is_image_data_embedded', 'bool')
        param_password = self.get_test_value('create_presentation_from_template', 'password', 'str')
        param_folder = self.get_test_value('create_presentation_from_template', 'folder', 'str')
        param_storage = self.get_test_value('create_presentation_from_template', 'storage', 'str')
        param_template_password = self.get_invalid_test_value('create_presentation_from_template', 'template_password', param_template_password, 'str')
        self.initialize('create_presentation_from_template', 'template_password', param_template_password)
        ok = False
        try:
            self.api.create_presentation_from_template(param_name, param_template_path, param_data, param_template_password, param_template_storage, param_is_image_data_embedded, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_presentation_from_template', 'template_password', param_template_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_presentation_from_template', 'template_password', param_template_password)
        if ok:
            self.assert_no_exception('create_presentation_from_template', 'template_password')

    def test_create_presentation_from_template_invalid_template_storage(self):
        """Test case for create_presentation_from_template with invalid template_storage
        """
        param_name = self.get_test_value('create_presentation_from_template', 'name', 'str')
        param_template_path = self.get_test_value('create_presentation_from_template', 'template_path', 'str')
        param_data = self.get_test_value('create_presentation_from_template', 'data', 'str')
        param_template_password = self.get_test_value('create_presentation_from_template', 'template_password', 'str')
        param_template_storage = self.get_test_value('create_presentation_from_template', 'template_storage', 'str')
        param_is_image_data_embedded = self.get_test_value('create_presentation_from_template', 'is_image_data_embedded', 'bool')
        param_password = self.get_test_value('create_presentation_from_template', 'password', 'str')
        param_folder = self.get_test_value('create_presentation_from_template', 'folder', 'str')
        param_storage = self.get_test_value('create_presentation_from_template', 'storage', 'str')
        param_template_storage = self.get_invalid_test_value('create_presentation_from_template', 'template_storage', param_template_storage, 'str')
        self.initialize('create_presentation_from_template', 'template_storage', param_template_storage)
        ok = False
        try:
            self.api.create_presentation_from_template(param_name, param_template_path, param_data, param_template_password, param_template_storage, param_is_image_data_embedded, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_presentation_from_template', 'template_storage', param_template_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_presentation_from_template', 'template_storage', param_template_storage)
        if ok:
            self.assert_no_exception('create_presentation_from_template', 'template_storage')

    def test_create_presentation_from_template_invalid_is_image_data_embedded(self):
        """Test case for create_presentation_from_template with invalid is_image_data_embedded
        """
        param_name = self.get_test_value('create_presentation_from_template', 'name', 'str')
        param_template_path = self.get_test_value('create_presentation_from_template', 'template_path', 'str')
        param_data = self.get_test_value('create_presentation_from_template', 'data', 'str')
        param_template_password = self.get_test_value('create_presentation_from_template', 'template_password', 'str')
        param_template_storage = self.get_test_value('create_presentation_from_template', 'template_storage', 'str')
        param_is_image_data_embedded = self.get_test_value('create_presentation_from_template', 'is_image_data_embedded', 'bool')
        param_password = self.get_test_value('create_presentation_from_template', 'password', 'str')
        param_folder = self.get_test_value('create_presentation_from_template', 'folder', 'str')
        param_storage = self.get_test_value('create_presentation_from_template', 'storage', 'str')
        param_is_image_data_embedded = self.get_invalid_test_value('create_presentation_from_template', 'is_image_data_embedded', param_is_image_data_embedded, 'bool')
        self.initialize('create_presentation_from_template', 'is_image_data_embedded', param_is_image_data_embedded)
        ok = False
        try:
            self.api.create_presentation_from_template(param_name, param_template_path, param_data, param_template_password, param_template_storage, param_is_image_data_embedded, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_presentation_from_template', 'is_image_data_embedded', param_is_image_data_embedded)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_presentation_from_template', 'is_image_data_embedded', param_is_image_data_embedded)
        if ok:
            self.assert_no_exception('create_presentation_from_template', 'is_image_data_embedded')

    def test_create_presentation_from_template_invalid_password(self):
        """Test case for create_presentation_from_template with invalid password
        """
        param_name = self.get_test_value('create_presentation_from_template', 'name', 'str')
        param_template_path = self.get_test_value('create_presentation_from_template', 'template_path', 'str')
        param_data = self.get_test_value('create_presentation_from_template', 'data', 'str')
        param_template_password = self.get_test_value('create_presentation_from_template', 'template_password', 'str')
        param_template_storage = self.get_test_value('create_presentation_from_template', 'template_storage', 'str')
        param_is_image_data_embedded = self.get_test_value('create_presentation_from_template', 'is_image_data_embedded', 'bool')
        param_password = self.get_test_value('create_presentation_from_template', 'password', 'str')
        param_folder = self.get_test_value('create_presentation_from_template', 'folder', 'str')
        param_storage = self.get_test_value('create_presentation_from_template', 'storage', 'str')
        param_password = self.get_invalid_test_value('create_presentation_from_template', 'password', param_password, 'str')
        self.initialize('create_presentation_from_template', 'password', param_password)
        ok = False
        try:
            self.api.create_presentation_from_template(param_name, param_template_path, param_data, param_template_password, param_template_storage, param_is_image_data_embedded, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_presentation_from_template', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_presentation_from_template', 'password', param_password)
        if ok:
            self.assert_no_exception('create_presentation_from_template', 'password')

    def test_create_presentation_from_template_invalid_folder(self):
        """Test case for create_presentation_from_template with invalid folder
        """
        param_name = self.get_test_value('create_presentation_from_template', 'name', 'str')
        param_template_path = self.get_test_value('create_presentation_from_template', 'template_path', 'str')
        param_data = self.get_test_value('create_presentation_from_template', 'data', 'str')
        param_template_password = self.get_test_value('create_presentation_from_template', 'template_password', 'str')
        param_template_storage = self.get_test_value('create_presentation_from_template', 'template_storage', 'str')
        param_is_image_data_embedded = self.get_test_value('create_presentation_from_template', 'is_image_data_embedded', 'bool')
        param_password = self.get_test_value('create_presentation_from_template', 'password', 'str')
        param_folder = self.get_test_value('create_presentation_from_template', 'folder', 'str')
        param_storage = self.get_test_value('create_presentation_from_template', 'storage', 'str')
        param_folder = self.get_invalid_test_value('create_presentation_from_template', 'folder', param_folder, 'str')
        self.initialize('create_presentation_from_template', 'folder', param_folder)
        ok = False
        try:
            self.api.create_presentation_from_template(param_name, param_template_path, param_data, param_template_password, param_template_storage, param_is_image_data_embedded, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_presentation_from_template', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_presentation_from_template', 'folder', param_folder)
        if ok:
            self.assert_no_exception('create_presentation_from_template', 'folder')

    def test_create_presentation_from_template_invalid_storage(self):
        """Test case for create_presentation_from_template with invalid storage
        """
        param_name = self.get_test_value('create_presentation_from_template', 'name', 'str')
        param_template_path = self.get_test_value('create_presentation_from_template', 'template_path', 'str')
        param_data = self.get_test_value('create_presentation_from_template', 'data', 'str')
        param_template_password = self.get_test_value('create_presentation_from_template', 'template_password', 'str')
        param_template_storage = self.get_test_value('create_presentation_from_template', 'template_storage', 'str')
        param_is_image_data_embedded = self.get_test_value('create_presentation_from_template', 'is_image_data_embedded', 'bool')
        param_password = self.get_test_value('create_presentation_from_template', 'password', 'str')
        param_folder = self.get_test_value('create_presentation_from_template', 'folder', 'str')
        param_storage = self.get_test_value('create_presentation_from_template', 'storage', 'str')
        param_storage = self.get_invalid_test_value('create_presentation_from_template', 'storage', param_storage, 'str')
        self.initialize('create_presentation_from_template', 'storage', param_storage)
        ok = False
        try:
            self.api.create_presentation_from_template(param_name, param_template_path, param_data, param_template_password, param_template_storage, param_is_image_data_embedded, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_presentation_from_template', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_presentation_from_template', 'storage', param_storage)
        if ok:
            self.assert_no_exception('create_presentation_from_template', 'storage')

    def test_create_section(self):
        """Test case for create_section
        """
        param_name = self.get_test_value('create_section', 'name', 'str')
        param_section_name = self.get_test_value('create_section', 'section_name', 'str')
        param_slide_index = self.get_test_value('create_section', 'slide_index', 'int')
        param_password = self.get_test_value('create_section', 'password', 'str')
        param_folder = self.get_test_value('create_section', 'folder', 'str')
        param_storage = self.get_test_value('create_section', 'storage', 'str')
        self.initialize('create_section', None, None)
        response = self.api.create_section(param_name, param_section_name, param_slide_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_create_section_invalid_name(self):
        """Test case for create_section with invalid name
        """
        param_name = self.get_test_value('create_section', 'name', 'str')
        param_section_name = self.get_test_value('create_section', 'section_name', 'str')
        param_slide_index = self.get_test_value('create_section', 'slide_index', 'int')
        param_password = self.get_test_value('create_section', 'password', 'str')
        param_folder = self.get_test_value('create_section', 'folder', 'str')
        param_storage = self.get_test_value('create_section', 'storage', 'str')
        param_name = self.get_invalid_test_value('create_section', 'name', param_name, 'str')
        self.initialize('create_section', 'name', param_name)
        ok = False
        try:
            self.api.create_section(param_name, param_section_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_section', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_section', 'name', param_name)
        if ok:
            self.assert_no_exception('create_section', 'name')

    def test_create_section_invalid_section_name(self):
        """Test case for create_section with invalid section_name
        """
        param_name = self.get_test_value('create_section', 'name', 'str')
        param_section_name = self.get_test_value('create_section', 'section_name', 'str')
        param_slide_index = self.get_test_value('create_section', 'slide_index', 'int')
        param_password = self.get_test_value('create_section', 'password', 'str')
        param_folder = self.get_test_value('create_section', 'folder', 'str')
        param_storage = self.get_test_value('create_section', 'storage', 'str')
        param_section_name = self.get_invalid_test_value('create_section', 'section_name', param_section_name, 'str')
        self.initialize('create_section', 'section_name', param_section_name)
        ok = False
        try:
            self.api.create_section(param_name, param_section_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_section', 'section_name', param_section_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_section', 'section_name', param_section_name)
        if ok:
            self.assert_no_exception('create_section', 'section_name')

    def test_create_section_invalid_slide_index(self):
        """Test case for create_section with invalid slide_index
        """
        param_name = self.get_test_value('create_section', 'name', 'str')
        param_section_name = self.get_test_value('create_section', 'section_name', 'str')
        param_slide_index = self.get_test_value('create_section', 'slide_index', 'int')
        param_password = self.get_test_value('create_section', 'password', 'str')
        param_folder = self.get_test_value('create_section', 'folder', 'str')
        param_storage = self.get_test_value('create_section', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('create_section', 'slide_index', param_slide_index, 'int')
        self.initialize('create_section', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.create_section(param_name, param_section_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_section', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_section', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('create_section', 'slide_index')

    def test_create_section_invalid_password(self):
        """Test case for create_section with invalid password
        """
        param_name = self.get_test_value('create_section', 'name', 'str')
        param_section_name = self.get_test_value('create_section', 'section_name', 'str')
        param_slide_index = self.get_test_value('create_section', 'slide_index', 'int')
        param_password = self.get_test_value('create_section', 'password', 'str')
        param_folder = self.get_test_value('create_section', 'folder', 'str')
        param_storage = self.get_test_value('create_section', 'storage', 'str')
        param_password = self.get_invalid_test_value('create_section', 'password', param_password, 'str')
        self.initialize('create_section', 'password', param_password)
        ok = False
        try:
            self.api.create_section(param_name, param_section_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_section', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_section', 'password', param_password)
        if ok:
            self.assert_no_exception('create_section', 'password')

    def test_create_section_invalid_folder(self):
        """Test case for create_section with invalid folder
        """
        param_name = self.get_test_value('create_section', 'name', 'str')
        param_section_name = self.get_test_value('create_section', 'section_name', 'str')
        param_slide_index = self.get_test_value('create_section', 'slide_index', 'int')
        param_password = self.get_test_value('create_section', 'password', 'str')
        param_folder = self.get_test_value('create_section', 'folder', 'str')
        param_storage = self.get_test_value('create_section', 'storage', 'str')
        param_folder = self.get_invalid_test_value('create_section', 'folder', param_folder, 'str')
        self.initialize('create_section', 'folder', param_folder)
        ok = False
        try:
            self.api.create_section(param_name, param_section_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_section', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_section', 'folder', param_folder)
        if ok:
            self.assert_no_exception('create_section', 'folder')

    def test_create_section_invalid_storage(self):
        """Test case for create_section with invalid storage
        """
        param_name = self.get_test_value('create_section', 'name', 'str')
        param_section_name = self.get_test_value('create_section', 'section_name', 'str')
        param_slide_index = self.get_test_value('create_section', 'slide_index', 'int')
        param_password = self.get_test_value('create_section', 'password', 'str')
        param_folder = self.get_test_value('create_section', 'folder', 'str')
        param_storage = self.get_test_value('create_section', 'storage', 'str')
        param_storage = self.get_invalid_test_value('create_section', 'storage', param_storage, 'str')
        self.initialize('create_section', 'storage', param_storage)
        ok = False
        try:
            self.api.create_section(param_name, param_section_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_section', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_section', 'storage', param_storage)
        if ok:
            self.assert_no_exception('create_section', 'storage')

    def test_create_shape(self):
        """Test case for create_shape
        """
        param_name = self.get_test_value('create_shape', 'name', 'str')
        param_slide_index = self.get_test_value('create_shape', 'slide_index', 'int')
        param_dto = self.get_test_value('create_shape', 'dto', 'ShapeBase')
        param_shape_to_clone = self.get_test_value('create_shape', 'shape_to_clone', 'int')
        param_position = self.get_test_value('create_shape', 'position', 'int')
        param_password = self.get_test_value('create_shape', 'password', 'str')
        param_folder = self.get_test_value('create_shape', 'folder', 'str')
        param_storage = self.get_test_value('create_shape', 'storage', 'str')
        self.initialize('create_shape', None, None)
        response = self.api.create_shape(param_name, param_slide_index, param_dto, param_shape_to_clone, param_position, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_create_shape_invalid_name(self):
        """Test case for create_shape with invalid name
        """
        param_name = self.get_test_value('create_shape', 'name', 'str')
        param_slide_index = self.get_test_value('create_shape', 'slide_index', 'int')
        param_dto = self.get_test_value('create_shape', 'dto', 'ShapeBase')
        param_shape_to_clone = self.get_test_value('create_shape', 'shape_to_clone', 'int')
        param_position = self.get_test_value('create_shape', 'position', 'int')
        param_password = self.get_test_value('create_shape', 'password', 'str')
        param_folder = self.get_test_value('create_shape', 'folder', 'str')
        param_storage = self.get_test_value('create_shape', 'storage', 'str')
        param_name = self.get_invalid_test_value('create_shape', 'name', param_name, 'str')
        self.initialize('create_shape', 'name', param_name)
        ok = False
        try:
            self.api.create_shape(param_name, param_slide_index, param_dto, param_shape_to_clone, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_shape', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_shape', 'name', param_name)
        if ok:
            self.assert_no_exception('create_shape', 'name')

    def test_create_shape_invalid_slide_index(self):
        """Test case for create_shape with invalid slide_index
        """
        param_name = self.get_test_value('create_shape', 'name', 'str')
        param_slide_index = self.get_test_value('create_shape', 'slide_index', 'int')
        param_dto = self.get_test_value('create_shape', 'dto', 'ShapeBase')
        param_shape_to_clone = self.get_test_value('create_shape', 'shape_to_clone', 'int')
        param_position = self.get_test_value('create_shape', 'position', 'int')
        param_password = self.get_test_value('create_shape', 'password', 'str')
        param_folder = self.get_test_value('create_shape', 'folder', 'str')
        param_storage = self.get_test_value('create_shape', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('create_shape', 'slide_index', param_slide_index, 'int')
        self.initialize('create_shape', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.create_shape(param_name, param_slide_index, param_dto, param_shape_to_clone, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_shape', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_shape', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('create_shape', 'slide_index')

    def test_create_shape_invalid_dto(self):
        """Test case for create_shape with invalid dto
        """
        param_name = self.get_test_value('create_shape', 'name', 'str')
        param_slide_index = self.get_test_value('create_shape', 'slide_index', 'int')
        param_dto = self.get_test_value('create_shape', 'dto', 'ShapeBase')
        param_shape_to_clone = self.get_test_value('create_shape', 'shape_to_clone', 'int')
        param_position = self.get_test_value('create_shape', 'position', 'int')
        param_password = self.get_test_value('create_shape', 'password', 'str')
        param_folder = self.get_test_value('create_shape', 'folder', 'str')
        param_storage = self.get_test_value('create_shape', 'storage', 'str')
        param_dto = self.get_invalid_test_value('create_shape', 'dto', param_dto, 'ShapeBase')
        self.initialize('create_shape', 'dto', param_dto)
        ok = False
        try:
            self.api.create_shape(param_name, param_slide_index, param_dto, param_shape_to_clone, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_shape', 'dto', param_dto)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_shape', 'dto', param_dto)
        if ok:
            self.assert_no_exception('create_shape', 'dto')

    def test_create_shape_invalid_shape_to_clone(self):
        """Test case for create_shape with invalid shape_to_clone
        """
        param_name = self.get_test_value('create_shape', 'name', 'str')
        param_slide_index = self.get_test_value('create_shape', 'slide_index', 'int')
        param_dto = self.get_test_value('create_shape', 'dto', 'ShapeBase')
        param_shape_to_clone = self.get_test_value('create_shape', 'shape_to_clone', 'int')
        param_position = self.get_test_value('create_shape', 'position', 'int')
        param_password = self.get_test_value('create_shape', 'password', 'str')
        param_folder = self.get_test_value('create_shape', 'folder', 'str')
        param_storage = self.get_test_value('create_shape', 'storage', 'str')
        param_shape_to_clone = self.get_invalid_test_value('create_shape', 'shape_to_clone', param_shape_to_clone, 'int')
        self.initialize('create_shape', 'shape_to_clone', param_shape_to_clone)
        ok = False
        try:
            self.api.create_shape(param_name, param_slide_index, param_dto, param_shape_to_clone, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_shape', 'shape_to_clone', param_shape_to_clone)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_shape', 'shape_to_clone', param_shape_to_clone)
        if ok:
            self.assert_no_exception('create_shape', 'shape_to_clone')

    def test_create_shape_invalid_position(self):
        """Test case for create_shape with invalid position
        """
        param_name = self.get_test_value('create_shape', 'name', 'str')
        param_slide_index = self.get_test_value('create_shape', 'slide_index', 'int')
        param_dto = self.get_test_value('create_shape', 'dto', 'ShapeBase')
        param_shape_to_clone = self.get_test_value('create_shape', 'shape_to_clone', 'int')
        param_position = self.get_test_value('create_shape', 'position', 'int')
        param_password = self.get_test_value('create_shape', 'password', 'str')
        param_folder = self.get_test_value('create_shape', 'folder', 'str')
        param_storage = self.get_test_value('create_shape', 'storage', 'str')
        param_position = self.get_invalid_test_value('create_shape', 'position', param_position, 'int')
        self.initialize('create_shape', 'position', param_position)
        ok = False
        try:
            self.api.create_shape(param_name, param_slide_index, param_dto, param_shape_to_clone, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_shape', 'position', param_position)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_shape', 'position', param_position)
        if ok:
            self.assert_no_exception('create_shape', 'position')

    def test_create_shape_invalid_password(self):
        """Test case for create_shape with invalid password
        """
        param_name = self.get_test_value('create_shape', 'name', 'str')
        param_slide_index = self.get_test_value('create_shape', 'slide_index', 'int')
        param_dto = self.get_test_value('create_shape', 'dto', 'ShapeBase')
        param_shape_to_clone = self.get_test_value('create_shape', 'shape_to_clone', 'int')
        param_position = self.get_test_value('create_shape', 'position', 'int')
        param_password = self.get_test_value('create_shape', 'password', 'str')
        param_folder = self.get_test_value('create_shape', 'folder', 'str')
        param_storage = self.get_test_value('create_shape', 'storage', 'str')
        param_password = self.get_invalid_test_value('create_shape', 'password', param_password, 'str')
        self.initialize('create_shape', 'password', param_password)
        ok = False
        try:
            self.api.create_shape(param_name, param_slide_index, param_dto, param_shape_to_clone, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_shape', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_shape', 'password', param_password)
        if ok:
            self.assert_no_exception('create_shape', 'password')

    def test_create_shape_invalid_folder(self):
        """Test case for create_shape with invalid folder
        """
        param_name = self.get_test_value('create_shape', 'name', 'str')
        param_slide_index = self.get_test_value('create_shape', 'slide_index', 'int')
        param_dto = self.get_test_value('create_shape', 'dto', 'ShapeBase')
        param_shape_to_clone = self.get_test_value('create_shape', 'shape_to_clone', 'int')
        param_position = self.get_test_value('create_shape', 'position', 'int')
        param_password = self.get_test_value('create_shape', 'password', 'str')
        param_folder = self.get_test_value('create_shape', 'folder', 'str')
        param_storage = self.get_test_value('create_shape', 'storage', 'str')
        param_folder = self.get_invalid_test_value('create_shape', 'folder', param_folder, 'str')
        self.initialize('create_shape', 'folder', param_folder)
        ok = False
        try:
            self.api.create_shape(param_name, param_slide_index, param_dto, param_shape_to_clone, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_shape', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_shape', 'folder', param_folder)
        if ok:
            self.assert_no_exception('create_shape', 'folder')

    def test_create_shape_invalid_storage(self):
        """Test case for create_shape with invalid storage
        """
        param_name = self.get_test_value('create_shape', 'name', 'str')
        param_slide_index = self.get_test_value('create_shape', 'slide_index', 'int')
        param_dto = self.get_test_value('create_shape', 'dto', 'ShapeBase')
        param_shape_to_clone = self.get_test_value('create_shape', 'shape_to_clone', 'int')
        param_position = self.get_test_value('create_shape', 'position', 'int')
        param_password = self.get_test_value('create_shape', 'password', 'str')
        param_folder = self.get_test_value('create_shape', 'folder', 'str')
        param_storage = self.get_test_value('create_shape', 'storage', 'str')
        param_storage = self.get_invalid_test_value('create_shape', 'storage', param_storage, 'str')
        self.initialize('create_shape', 'storage', param_storage)
        ok = False
        try:
            self.api.create_shape(param_name, param_slide_index, param_dto, param_shape_to_clone, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_shape', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_shape', 'storage', param_storage)
        if ok:
            self.assert_no_exception('create_shape', 'storage')

    def test_create_slide(self):
        """Test case for create_slide
        """
        param_name = self.get_test_value('create_slide', 'name', 'str')
        param_layout_alias = self.get_test_value('create_slide', 'layout_alias', 'str')
        param_position = self.get_test_value('create_slide', 'position', 'int')
        param_password = self.get_test_value('create_slide', 'password', 'str')
        param_folder = self.get_test_value('create_slide', 'folder', 'str')
        param_storage = self.get_test_value('create_slide', 'storage', 'str')
        self.initialize('create_slide', None, None)
        response = self.api.create_slide(param_name, param_layout_alias, param_position, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_create_slide_invalid_name(self):
        """Test case for create_slide with invalid name
        """
        param_name = self.get_test_value('create_slide', 'name', 'str')
        param_layout_alias = self.get_test_value('create_slide', 'layout_alias', 'str')
        param_position = self.get_test_value('create_slide', 'position', 'int')
        param_password = self.get_test_value('create_slide', 'password', 'str')
        param_folder = self.get_test_value('create_slide', 'folder', 'str')
        param_storage = self.get_test_value('create_slide', 'storage', 'str')
        param_name = self.get_invalid_test_value('create_slide', 'name', param_name, 'str')
        self.initialize('create_slide', 'name', param_name)
        ok = False
        try:
            self.api.create_slide(param_name, param_layout_alias, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_slide', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_slide', 'name', param_name)
        if ok:
            self.assert_no_exception('create_slide', 'name')

    def test_create_slide_invalid_layout_alias(self):
        """Test case for create_slide with invalid layout_alias
        """
        param_name = self.get_test_value('create_slide', 'name', 'str')
        param_layout_alias = self.get_test_value('create_slide', 'layout_alias', 'str')
        param_position = self.get_test_value('create_slide', 'position', 'int')
        param_password = self.get_test_value('create_slide', 'password', 'str')
        param_folder = self.get_test_value('create_slide', 'folder', 'str')
        param_storage = self.get_test_value('create_slide', 'storage', 'str')
        param_layout_alias = self.get_invalid_test_value('create_slide', 'layout_alias', param_layout_alias, 'str')
        self.initialize('create_slide', 'layout_alias', param_layout_alias)
        ok = False
        try:
            self.api.create_slide(param_name, param_layout_alias, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_slide', 'layout_alias', param_layout_alias)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_slide', 'layout_alias', param_layout_alias)
        if ok:
            self.assert_no_exception('create_slide', 'layout_alias')

    def test_create_slide_invalid_position(self):
        """Test case for create_slide with invalid position
        """
        param_name = self.get_test_value('create_slide', 'name', 'str')
        param_layout_alias = self.get_test_value('create_slide', 'layout_alias', 'str')
        param_position = self.get_test_value('create_slide', 'position', 'int')
        param_password = self.get_test_value('create_slide', 'password', 'str')
        param_folder = self.get_test_value('create_slide', 'folder', 'str')
        param_storage = self.get_test_value('create_slide', 'storage', 'str')
        param_position = self.get_invalid_test_value('create_slide', 'position', param_position, 'int')
        self.initialize('create_slide', 'position', param_position)
        ok = False
        try:
            self.api.create_slide(param_name, param_layout_alias, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_slide', 'position', param_position)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_slide', 'position', param_position)
        if ok:
            self.assert_no_exception('create_slide', 'position')

    def test_create_slide_invalid_password(self):
        """Test case for create_slide with invalid password
        """
        param_name = self.get_test_value('create_slide', 'name', 'str')
        param_layout_alias = self.get_test_value('create_slide', 'layout_alias', 'str')
        param_position = self.get_test_value('create_slide', 'position', 'int')
        param_password = self.get_test_value('create_slide', 'password', 'str')
        param_folder = self.get_test_value('create_slide', 'folder', 'str')
        param_storage = self.get_test_value('create_slide', 'storage', 'str')
        param_password = self.get_invalid_test_value('create_slide', 'password', param_password, 'str')
        self.initialize('create_slide', 'password', param_password)
        ok = False
        try:
            self.api.create_slide(param_name, param_layout_alias, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_slide', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_slide', 'password', param_password)
        if ok:
            self.assert_no_exception('create_slide', 'password')

    def test_create_slide_invalid_folder(self):
        """Test case for create_slide with invalid folder
        """
        param_name = self.get_test_value('create_slide', 'name', 'str')
        param_layout_alias = self.get_test_value('create_slide', 'layout_alias', 'str')
        param_position = self.get_test_value('create_slide', 'position', 'int')
        param_password = self.get_test_value('create_slide', 'password', 'str')
        param_folder = self.get_test_value('create_slide', 'folder', 'str')
        param_storage = self.get_test_value('create_slide', 'storage', 'str')
        param_folder = self.get_invalid_test_value('create_slide', 'folder', param_folder, 'str')
        self.initialize('create_slide', 'folder', param_folder)
        ok = False
        try:
            self.api.create_slide(param_name, param_layout_alias, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_slide', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_slide', 'folder', param_folder)
        if ok:
            self.assert_no_exception('create_slide', 'folder')

    def test_create_slide_invalid_storage(self):
        """Test case for create_slide with invalid storage
        """
        param_name = self.get_test_value('create_slide', 'name', 'str')
        param_layout_alias = self.get_test_value('create_slide', 'layout_alias', 'str')
        param_position = self.get_test_value('create_slide', 'position', 'int')
        param_password = self.get_test_value('create_slide', 'password', 'str')
        param_folder = self.get_test_value('create_slide', 'folder', 'str')
        param_storage = self.get_test_value('create_slide', 'storage', 'str')
        param_storage = self.get_invalid_test_value('create_slide', 'storage', param_storage, 'str')
        self.initialize('create_slide', 'storage', param_storage)
        ok = False
        try:
            self.api.create_slide(param_name, param_layout_alias, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_slide', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_slide', 'storage', param_storage)
        if ok:
            self.assert_no_exception('create_slide', 'storage')

    def test_create_special_slide_animation_effect(self):
        """Test case for create_special_slide_animation_effect
        """
        param_name = self.get_test_value('create_special_slide_animation_effect', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_animation_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_animation_effect', 'slide_type', 'str')
        param_effect = self.get_test_value('create_special_slide_animation_effect', 'effect', 'Effect')
        param_password = self.get_test_value('create_special_slide_animation_effect', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_animation_effect', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_animation_effect', 'storage', 'str')
        self.initialize('create_special_slide_animation_effect', None, None)
        response = self.api.create_special_slide_animation_effect(param_name, param_slide_index, param_slide_type, param_effect, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_create_special_slide_animation_effect_invalid_name(self):
        """Test case for create_special_slide_animation_effect with invalid name
        """
        param_name = self.get_test_value('create_special_slide_animation_effect', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_animation_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_animation_effect', 'slide_type', 'str')
        param_effect = self.get_test_value('create_special_slide_animation_effect', 'effect', 'Effect')
        param_password = self.get_test_value('create_special_slide_animation_effect', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_animation_effect', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_animation_effect', 'storage', 'str')
        param_name = self.get_invalid_test_value('create_special_slide_animation_effect', 'name', param_name, 'str')
        self.initialize('create_special_slide_animation_effect', 'name', param_name)
        ok = False
        try:
            self.api.create_special_slide_animation_effect(param_name, param_slide_index, param_slide_type, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_animation_effect', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_animation_effect', 'name', param_name)
        if ok:
            self.assert_no_exception('create_special_slide_animation_effect', 'name')

    def test_create_special_slide_animation_effect_invalid_slide_index(self):
        """Test case for create_special_slide_animation_effect with invalid slide_index
        """
        param_name = self.get_test_value('create_special_slide_animation_effect', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_animation_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_animation_effect', 'slide_type', 'str')
        param_effect = self.get_test_value('create_special_slide_animation_effect', 'effect', 'Effect')
        param_password = self.get_test_value('create_special_slide_animation_effect', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_animation_effect', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_animation_effect', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('create_special_slide_animation_effect', 'slide_index', param_slide_index, 'int')
        self.initialize('create_special_slide_animation_effect', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.create_special_slide_animation_effect(param_name, param_slide_index, param_slide_type, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_animation_effect', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_animation_effect', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('create_special_slide_animation_effect', 'slide_index')

    def test_create_special_slide_animation_effect_invalid_slide_type(self):
        """Test case for create_special_slide_animation_effect with invalid slide_type
        """
        param_name = self.get_test_value('create_special_slide_animation_effect', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_animation_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_animation_effect', 'slide_type', 'str')
        param_effect = self.get_test_value('create_special_slide_animation_effect', 'effect', 'Effect')
        param_password = self.get_test_value('create_special_slide_animation_effect', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_animation_effect', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_animation_effect', 'storage', 'str')
        param_slide_type = self.get_invalid_test_value('create_special_slide_animation_effect', 'slide_type', param_slide_type, 'str')
        self.initialize('create_special_slide_animation_effect', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.create_special_slide_animation_effect(param_name, param_slide_index, param_slide_type, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_animation_effect', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_animation_effect', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('create_special_slide_animation_effect', 'slide_type')

    def test_create_special_slide_animation_effect_invalid_effect(self):
        """Test case for create_special_slide_animation_effect with invalid effect
        """
        param_name = self.get_test_value('create_special_slide_animation_effect', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_animation_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_animation_effect', 'slide_type', 'str')
        param_effect = self.get_test_value('create_special_slide_animation_effect', 'effect', 'Effect')
        param_password = self.get_test_value('create_special_slide_animation_effect', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_animation_effect', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_animation_effect', 'storage', 'str')
        param_effect = self.get_invalid_test_value('create_special_slide_animation_effect', 'effect', param_effect, 'Effect')
        self.initialize('create_special_slide_animation_effect', 'effect', param_effect)
        ok = False
        try:
            self.api.create_special_slide_animation_effect(param_name, param_slide_index, param_slide_type, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_animation_effect', 'effect', param_effect)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_animation_effect', 'effect', param_effect)
        if ok:
            self.assert_no_exception('create_special_slide_animation_effect', 'effect')

    def test_create_special_slide_animation_effect_invalid_password(self):
        """Test case for create_special_slide_animation_effect with invalid password
        """
        param_name = self.get_test_value('create_special_slide_animation_effect', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_animation_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_animation_effect', 'slide_type', 'str')
        param_effect = self.get_test_value('create_special_slide_animation_effect', 'effect', 'Effect')
        param_password = self.get_test_value('create_special_slide_animation_effect', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_animation_effect', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_animation_effect', 'storage', 'str')
        param_password = self.get_invalid_test_value('create_special_slide_animation_effect', 'password', param_password, 'str')
        self.initialize('create_special_slide_animation_effect', 'password', param_password)
        ok = False
        try:
            self.api.create_special_slide_animation_effect(param_name, param_slide_index, param_slide_type, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_animation_effect', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_animation_effect', 'password', param_password)
        if ok:
            self.assert_no_exception('create_special_slide_animation_effect', 'password')

    def test_create_special_slide_animation_effect_invalid_folder(self):
        """Test case for create_special_slide_animation_effect with invalid folder
        """
        param_name = self.get_test_value('create_special_slide_animation_effect', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_animation_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_animation_effect', 'slide_type', 'str')
        param_effect = self.get_test_value('create_special_slide_animation_effect', 'effect', 'Effect')
        param_password = self.get_test_value('create_special_slide_animation_effect', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_animation_effect', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_animation_effect', 'storage', 'str')
        param_folder = self.get_invalid_test_value('create_special_slide_animation_effect', 'folder', param_folder, 'str')
        self.initialize('create_special_slide_animation_effect', 'folder', param_folder)
        ok = False
        try:
            self.api.create_special_slide_animation_effect(param_name, param_slide_index, param_slide_type, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_animation_effect', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_animation_effect', 'folder', param_folder)
        if ok:
            self.assert_no_exception('create_special_slide_animation_effect', 'folder')

    def test_create_special_slide_animation_effect_invalid_storage(self):
        """Test case for create_special_slide_animation_effect with invalid storage
        """
        param_name = self.get_test_value('create_special_slide_animation_effect', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_animation_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_animation_effect', 'slide_type', 'str')
        param_effect = self.get_test_value('create_special_slide_animation_effect', 'effect', 'Effect')
        param_password = self.get_test_value('create_special_slide_animation_effect', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_animation_effect', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_animation_effect', 'storage', 'str')
        param_storage = self.get_invalid_test_value('create_special_slide_animation_effect', 'storage', param_storage, 'str')
        self.initialize('create_special_slide_animation_effect', 'storage', param_storage)
        ok = False
        try:
            self.api.create_special_slide_animation_effect(param_name, param_slide_index, param_slide_type, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_animation_effect', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_animation_effect', 'storage', param_storage)
        if ok:
            self.assert_no_exception('create_special_slide_animation_effect', 'storage')

    def test_create_special_slide_animation_interactive_sequence(self):
        """Test case for create_special_slide_animation_interactive_sequence
        """
        param_name = self.get_test_value('create_special_slide_animation_interactive_sequence', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_animation_interactive_sequence', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_animation_interactive_sequence', 'slide_type', 'str')
        param_sequence = self.get_test_value('create_special_slide_animation_interactive_sequence', 'sequence', 'InteractiveSequence')
        param_password = self.get_test_value('create_special_slide_animation_interactive_sequence', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_animation_interactive_sequence', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_animation_interactive_sequence', 'storage', 'str')
        self.initialize('create_special_slide_animation_interactive_sequence', None, None)
        response = self.api.create_special_slide_animation_interactive_sequence(param_name, param_slide_index, param_slide_type, param_sequence, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_create_special_slide_animation_interactive_sequence_invalid_name(self):
        """Test case for create_special_slide_animation_interactive_sequence with invalid name
        """
        param_name = self.get_test_value('create_special_slide_animation_interactive_sequence', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_animation_interactive_sequence', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_animation_interactive_sequence', 'slide_type', 'str')
        param_sequence = self.get_test_value('create_special_slide_animation_interactive_sequence', 'sequence', 'InteractiveSequence')
        param_password = self.get_test_value('create_special_slide_animation_interactive_sequence', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_animation_interactive_sequence', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_animation_interactive_sequence', 'storage', 'str')
        param_name = self.get_invalid_test_value('create_special_slide_animation_interactive_sequence', 'name', param_name, 'str')
        self.initialize('create_special_slide_animation_interactive_sequence', 'name', param_name)
        ok = False
        try:
            self.api.create_special_slide_animation_interactive_sequence(param_name, param_slide_index, param_slide_type, param_sequence, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_animation_interactive_sequence', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_animation_interactive_sequence', 'name', param_name)
        if ok:
            self.assert_no_exception('create_special_slide_animation_interactive_sequence', 'name')

    def test_create_special_slide_animation_interactive_sequence_invalid_slide_index(self):
        """Test case for create_special_slide_animation_interactive_sequence with invalid slide_index
        """
        param_name = self.get_test_value('create_special_slide_animation_interactive_sequence', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_animation_interactive_sequence', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_animation_interactive_sequence', 'slide_type', 'str')
        param_sequence = self.get_test_value('create_special_slide_animation_interactive_sequence', 'sequence', 'InteractiveSequence')
        param_password = self.get_test_value('create_special_slide_animation_interactive_sequence', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_animation_interactive_sequence', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_animation_interactive_sequence', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('create_special_slide_animation_interactive_sequence', 'slide_index', param_slide_index, 'int')
        self.initialize('create_special_slide_animation_interactive_sequence', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.create_special_slide_animation_interactive_sequence(param_name, param_slide_index, param_slide_type, param_sequence, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_animation_interactive_sequence', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_animation_interactive_sequence', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('create_special_slide_animation_interactive_sequence', 'slide_index')

    def test_create_special_slide_animation_interactive_sequence_invalid_slide_type(self):
        """Test case for create_special_slide_animation_interactive_sequence with invalid slide_type
        """
        param_name = self.get_test_value('create_special_slide_animation_interactive_sequence', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_animation_interactive_sequence', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_animation_interactive_sequence', 'slide_type', 'str')
        param_sequence = self.get_test_value('create_special_slide_animation_interactive_sequence', 'sequence', 'InteractiveSequence')
        param_password = self.get_test_value('create_special_slide_animation_interactive_sequence', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_animation_interactive_sequence', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_animation_interactive_sequence', 'storage', 'str')
        param_slide_type = self.get_invalid_test_value('create_special_slide_animation_interactive_sequence', 'slide_type', param_slide_type, 'str')
        self.initialize('create_special_slide_animation_interactive_sequence', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.create_special_slide_animation_interactive_sequence(param_name, param_slide_index, param_slide_type, param_sequence, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_animation_interactive_sequence', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_animation_interactive_sequence', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('create_special_slide_animation_interactive_sequence', 'slide_type')

    def test_create_special_slide_animation_interactive_sequence_invalid_sequence(self):
        """Test case for create_special_slide_animation_interactive_sequence with invalid sequence
        """
        param_name = self.get_test_value('create_special_slide_animation_interactive_sequence', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_animation_interactive_sequence', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_animation_interactive_sequence', 'slide_type', 'str')
        param_sequence = self.get_test_value('create_special_slide_animation_interactive_sequence', 'sequence', 'InteractiveSequence')
        param_password = self.get_test_value('create_special_slide_animation_interactive_sequence', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_animation_interactive_sequence', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_animation_interactive_sequence', 'storage', 'str')
        param_sequence = self.get_invalid_test_value('create_special_slide_animation_interactive_sequence', 'sequence', param_sequence, 'InteractiveSequence')
        self.initialize('create_special_slide_animation_interactive_sequence', 'sequence', param_sequence)
        ok = False
        try:
            self.api.create_special_slide_animation_interactive_sequence(param_name, param_slide_index, param_slide_type, param_sequence, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_animation_interactive_sequence', 'sequence', param_sequence)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_animation_interactive_sequence', 'sequence', param_sequence)
        if ok:
            self.assert_no_exception('create_special_slide_animation_interactive_sequence', 'sequence')

    def test_create_special_slide_animation_interactive_sequence_invalid_password(self):
        """Test case for create_special_slide_animation_interactive_sequence with invalid password
        """
        param_name = self.get_test_value('create_special_slide_animation_interactive_sequence', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_animation_interactive_sequence', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_animation_interactive_sequence', 'slide_type', 'str')
        param_sequence = self.get_test_value('create_special_slide_animation_interactive_sequence', 'sequence', 'InteractiveSequence')
        param_password = self.get_test_value('create_special_slide_animation_interactive_sequence', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_animation_interactive_sequence', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_animation_interactive_sequence', 'storage', 'str')
        param_password = self.get_invalid_test_value('create_special_slide_animation_interactive_sequence', 'password', param_password, 'str')
        self.initialize('create_special_slide_animation_interactive_sequence', 'password', param_password)
        ok = False
        try:
            self.api.create_special_slide_animation_interactive_sequence(param_name, param_slide_index, param_slide_type, param_sequence, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_animation_interactive_sequence', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_animation_interactive_sequence', 'password', param_password)
        if ok:
            self.assert_no_exception('create_special_slide_animation_interactive_sequence', 'password')

    def test_create_special_slide_animation_interactive_sequence_invalid_folder(self):
        """Test case for create_special_slide_animation_interactive_sequence with invalid folder
        """
        param_name = self.get_test_value('create_special_slide_animation_interactive_sequence', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_animation_interactive_sequence', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_animation_interactive_sequence', 'slide_type', 'str')
        param_sequence = self.get_test_value('create_special_slide_animation_interactive_sequence', 'sequence', 'InteractiveSequence')
        param_password = self.get_test_value('create_special_slide_animation_interactive_sequence', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_animation_interactive_sequence', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_animation_interactive_sequence', 'storage', 'str')
        param_folder = self.get_invalid_test_value('create_special_slide_animation_interactive_sequence', 'folder', param_folder, 'str')
        self.initialize('create_special_slide_animation_interactive_sequence', 'folder', param_folder)
        ok = False
        try:
            self.api.create_special_slide_animation_interactive_sequence(param_name, param_slide_index, param_slide_type, param_sequence, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_animation_interactive_sequence', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_animation_interactive_sequence', 'folder', param_folder)
        if ok:
            self.assert_no_exception('create_special_slide_animation_interactive_sequence', 'folder')

    def test_create_special_slide_animation_interactive_sequence_invalid_storage(self):
        """Test case for create_special_slide_animation_interactive_sequence with invalid storage
        """
        param_name = self.get_test_value('create_special_slide_animation_interactive_sequence', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_animation_interactive_sequence', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_animation_interactive_sequence', 'slide_type', 'str')
        param_sequence = self.get_test_value('create_special_slide_animation_interactive_sequence', 'sequence', 'InteractiveSequence')
        param_password = self.get_test_value('create_special_slide_animation_interactive_sequence', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_animation_interactive_sequence', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_animation_interactive_sequence', 'storage', 'str')
        param_storage = self.get_invalid_test_value('create_special_slide_animation_interactive_sequence', 'storage', param_storage, 'str')
        self.initialize('create_special_slide_animation_interactive_sequence', 'storage', param_storage)
        ok = False
        try:
            self.api.create_special_slide_animation_interactive_sequence(param_name, param_slide_index, param_slide_type, param_sequence, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_animation_interactive_sequence', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_animation_interactive_sequence', 'storage', param_storage)
        if ok:
            self.assert_no_exception('create_special_slide_animation_interactive_sequence', 'storage')

    def test_create_special_slide_animation_interactive_sequence_effect(self):
        """Test case for create_special_slide_animation_interactive_sequence_effect
        """
        param_name = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'slide_type', 'str')
        param_sequence_index = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect')
        param_password = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'storage', 'str')
        self.initialize('create_special_slide_animation_interactive_sequence_effect', None, None)
        response = self.api.create_special_slide_animation_interactive_sequence_effect(param_name, param_slide_index, param_slide_type, param_sequence_index, param_effect, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_create_special_slide_animation_interactive_sequence_effect_invalid_name(self):
        """Test case for create_special_slide_animation_interactive_sequence_effect with invalid name
        """
        param_name = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'slide_type', 'str')
        param_sequence_index = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect')
        param_password = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'storage', 'str')
        param_name = self.get_invalid_test_value('create_special_slide_animation_interactive_sequence_effect', 'name', param_name, 'str')
        self.initialize('create_special_slide_animation_interactive_sequence_effect', 'name', param_name)
        ok = False
        try:
            self.api.create_special_slide_animation_interactive_sequence_effect(param_name, param_slide_index, param_slide_type, param_sequence_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_animation_interactive_sequence_effect', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_animation_interactive_sequence_effect', 'name', param_name)
        if ok:
            self.assert_no_exception('create_special_slide_animation_interactive_sequence_effect', 'name')

    def test_create_special_slide_animation_interactive_sequence_effect_invalid_slide_index(self):
        """Test case for create_special_slide_animation_interactive_sequence_effect with invalid slide_index
        """
        param_name = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'slide_type', 'str')
        param_sequence_index = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect')
        param_password = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('create_special_slide_animation_interactive_sequence_effect', 'slide_index', param_slide_index, 'int')
        self.initialize('create_special_slide_animation_interactive_sequence_effect', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.create_special_slide_animation_interactive_sequence_effect(param_name, param_slide_index, param_slide_type, param_sequence_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_animation_interactive_sequence_effect', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_animation_interactive_sequence_effect', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('create_special_slide_animation_interactive_sequence_effect', 'slide_index')

    def test_create_special_slide_animation_interactive_sequence_effect_invalid_slide_type(self):
        """Test case for create_special_slide_animation_interactive_sequence_effect with invalid slide_type
        """
        param_name = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'slide_type', 'str')
        param_sequence_index = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect')
        param_password = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'storage', 'str')
        param_slide_type = self.get_invalid_test_value('create_special_slide_animation_interactive_sequence_effect', 'slide_type', param_slide_type, 'str')
        self.initialize('create_special_slide_animation_interactive_sequence_effect', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.create_special_slide_animation_interactive_sequence_effect(param_name, param_slide_index, param_slide_type, param_sequence_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_animation_interactive_sequence_effect', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_animation_interactive_sequence_effect', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('create_special_slide_animation_interactive_sequence_effect', 'slide_type')

    def test_create_special_slide_animation_interactive_sequence_effect_invalid_sequence_index(self):
        """Test case for create_special_slide_animation_interactive_sequence_effect with invalid sequence_index
        """
        param_name = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'slide_type', 'str')
        param_sequence_index = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect')
        param_password = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'storage', 'str')
        param_sequence_index = self.get_invalid_test_value('create_special_slide_animation_interactive_sequence_effect', 'sequence_index', param_sequence_index, 'int')
        self.initialize('create_special_slide_animation_interactive_sequence_effect', 'sequence_index', param_sequence_index)
        ok = False
        try:
            self.api.create_special_slide_animation_interactive_sequence_effect(param_name, param_slide_index, param_slide_type, param_sequence_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_animation_interactive_sequence_effect', 'sequence_index', param_sequence_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_animation_interactive_sequence_effect', 'sequence_index', param_sequence_index)
        if ok:
            self.assert_no_exception('create_special_slide_animation_interactive_sequence_effect', 'sequence_index')

    def test_create_special_slide_animation_interactive_sequence_effect_invalid_effect(self):
        """Test case for create_special_slide_animation_interactive_sequence_effect with invalid effect
        """
        param_name = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'slide_type', 'str')
        param_sequence_index = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect')
        param_password = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'storage', 'str')
        param_effect = self.get_invalid_test_value('create_special_slide_animation_interactive_sequence_effect', 'effect', param_effect, 'Effect')
        self.initialize('create_special_slide_animation_interactive_sequence_effect', 'effect', param_effect)
        ok = False
        try:
            self.api.create_special_slide_animation_interactive_sequence_effect(param_name, param_slide_index, param_slide_type, param_sequence_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_animation_interactive_sequence_effect', 'effect', param_effect)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_animation_interactive_sequence_effect', 'effect', param_effect)
        if ok:
            self.assert_no_exception('create_special_slide_animation_interactive_sequence_effect', 'effect')

    def test_create_special_slide_animation_interactive_sequence_effect_invalid_password(self):
        """Test case for create_special_slide_animation_interactive_sequence_effect with invalid password
        """
        param_name = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'slide_type', 'str')
        param_sequence_index = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect')
        param_password = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'storage', 'str')
        param_password = self.get_invalid_test_value('create_special_slide_animation_interactive_sequence_effect', 'password', param_password, 'str')
        self.initialize('create_special_slide_animation_interactive_sequence_effect', 'password', param_password)
        ok = False
        try:
            self.api.create_special_slide_animation_interactive_sequence_effect(param_name, param_slide_index, param_slide_type, param_sequence_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_animation_interactive_sequence_effect', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_animation_interactive_sequence_effect', 'password', param_password)
        if ok:
            self.assert_no_exception('create_special_slide_animation_interactive_sequence_effect', 'password')

    def test_create_special_slide_animation_interactive_sequence_effect_invalid_folder(self):
        """Test case for create_special_slide_animation_interactive_sequence_effect with invalid folder
        """
        param_name = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'slide_type', 'str')
        param_sequence_index = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect')
        param_password = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'storage', 'str')
        param_folder = self.get_invalid_test_value('create_special_slide_animation_interactive_sequence_effect', 'folder', param_folder, 'str')
        self.initialize('create_special_slide_animation_interactive_sequence_effect', 'folder', param_folder)
        ok = False
        try:
            self.api.create_special_slide_animation_interactive_sequence_effect(param_name, param_slide_index, param_slide_type, param_sequence_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_animation_interactive_sequence_effect', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_animation_interactive_sequence_effect', 'folder', param_folder)
        if ok:
            self.assert_no_exception('create_special_slide_animation_interactive_sequence_effect', 'folder')

    def test_create_special_slide_animation_interactive_sequence_effect_invalid_storage(self):
        """Test case for create_special_slide_animation_interactive_sequence_effect with invalid storage
        """
        param_name = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'slide_type', 'str')
        param_sequence_index = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect')
        param_password = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_animation_interactive_sequence_effect', 'storage', 'str')
        param_storage = self.get_invalid_test_value('create_special_slide_animation_interactive_sequence_effect', 'storage', param_storage, 'str')
        self.initialize('create_special_slide_animation_interactive_sequence_effect', 'storage', param_storage)
        ok = False
        try:
            self.api.create_special_slide_animation_interactive_sequence_effect(param_name, param_slide_index, param_slide_type, param_sequence_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_animation_interactive_sequence_effect', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_animation_interactive_sequence_effect', 'storage', param_storage)
        if ok:
            self.assert_no_exception('create_special_slide_animation_interactive_sequence_effect', 'storage')

    def test_create_special_slide_paragraph(self):
        """Test case for create_special_slide_paragraph
        """
        param_name = self.get_test_value('create_special_slide_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_paragraph', 'slide_type', 'str')
        param_shape_index = self.get_test_value('create_special_slide_paragraph', 'shape_index', 'int')
        param_dto = self.get_test_value('create_special_slide_paragraph', 'dto', 'Paragraph')
        param_position = self.get_test_value('create_special_slide_paragraph', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_paragraph', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_paragraph', 'storage', 'str')
        self.initialize('create_special_slide_paragraph', None, None)
        response = self.api.create_special_slide_paragraph(param_name, param_slide_index, param_slide_type, param_shape_index, param_dto, param_position, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_create_special_slide_paragraph_invalid_name(self):
        """Test case for create_special_slide_paragraph with invalid name
        """
        param_name = self.get_test_value('create_special_slide_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_paragraph', 'slide_type', 'str')
        param_shape_index = self.get_test_value('create_special_slide_paragraph', 'shape_index', 'int')
        param_dto = self.get_test_value('create_special_slide_paragraph', 'dto', 'Paragraph')
        param_position = self.get_test_value('create_special_slide_paragraph', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_paragraph', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_paragraph', 'storage', 'str')
        param_name = self.get_invalid_test_value('create_special_slide_paragraph', 'name', param_name, 'str')
        self.initialize('create_special_slide_paragraph', 'name', param_name)
        ok = False
        try:
            self.api.create_special_slide_paragraph(param_name, param_slide_index, param_slide_type, param_shape_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_paragraph', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_paragraph', 'name', param_name)
        if ok:
            self.assert_no_exception('create_special_slide_paragraph', 'name')

    def test_create_special_slide_paragraph_invalid_slide_index(self):
        """Test case for create_special_slide_paragraph with invalid slide_index
        """
        param_name = self.get_test_value('create_special_slide_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_paragraph', 'slide_type', 'str')
        param_shape_index = self.get_test_value('create_special_slide_paragraph', 'shape_index', 'int')
        param_dto = self.get_test_value('create_special_slide_paragraph', 'dto', 'Paragraph')
        param_position = self.get_test_value('create_special_slide_paragraph', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_paragraph', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_paragraph', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('create_special_slide_paragraph', 'slide_index', param_slide_index, 'int')
        self.initialize('create_special_slide_paragraph', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.create_special_slide_paragraph(param_name, param_slide_index, param_slide_type, param_shape_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_paragraph', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_paragraph', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('create_special_slide_paragraph', 'slide_index')

    def test_create_special_slide_paragraph_invalid_slide_type(self):
        """Test case for create_special_slide_paragraph with invalid slide_type
        """
        param_name = self.get_test_value('create_special_slide_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_paragraph', 'slide_type', 'str')
        param_shape_index = self.get_test_value('create_special_slide_paragraph', 'shape_index', 'int')
        param_dto = self.get_test_value('create_special_slide_paragraph', 'dto', 'Paragraph')
        param_position = self.get_test_value('create_special_slide_paragraph', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_paragraph', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_paragraph', 'storage', 'str')
        param_slide_type = self.get_invalid_test_value('create_special_slide_paragraph', 'slide_type', param_slide_type, 'str')
        self.initialize('create_special_slide_paragraph', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.create_special_slide_paragraph(param_name, param_slide_index, param_slide_type, param_shape_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_paragraph', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_paragraph', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('create_special_slide_paragraph', 'slide_type')

    def test_create_special_slide_paragraph_invalid_shape_index(self):
        """Test case for create_special_slide_paragraph with invalid shape_index
        """
        param_name = self.get_test_value('create_special_slide_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_paragraph', 'slide_type', 'str')
        param_shape_index = self.get_test_value('create_special_slide_paragraph', 'shape_index', 'int')
        param_dto = self.get_test_value('create_special_slide_paragraph', 'dto', 'Paragraph')
        param_position = self.get_test_value('create_special_slide_paragraph', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_paragraph', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_paragraph', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('create_special_slide_paragraph', 'shape_index', param_shape_index, 'int')
        self.initialize('create_special_slide_paragraph', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.create_special_slide_paragraph(param_name, param_slide_index, param_slide_type, param_shape_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_paragraph', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_paragraph', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('create_special_slide_paragraph', 'shape_index')

    def test_create_special_slide_paragraph_invalid_dto(self):
        """Test case for create_special_slide_paragraph with invalid dto
        """
        param_name = self.get_test_value('create_special_slide_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_paragraph', 'slide_type', 'str')
        param_shape_index = self.get_test_value('create_special_slide_paragraph', 'shape_index', 'int')
        param_dto = self.get_test_value('create_special_slide_paragraph', 'dto', 'Paragraph')
        param_position = self.get_test_value('create_special_slide_paragraph', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_paragraph', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_paragraph', 'storage', 'str')
        param_dto = self.get_invalid_test_value('create_special_slide_paragraph', 'dto', param_dto, 'Paragraph')
        self.initialize('create_special_slide_paragraph', 'dto', param_dto)
        ok = False
        try:
            self.api.create_special_slide_paragraph(param_name, param_slide_index, param_slide_type, param_shape_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_paragraph', 'dto', param_dto)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_paragraph', 'dto', param_dto)
        if ok:
            self.assert_no_exception('create_special_slide_paragraph', 'dto')

    def test_create_special_slide_paragraph_invalid_position(self):
        """Test case for create_special_slide_paragraph with invalid position
        """
        param_name = self.get_test_value('create_special_slide_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_paragraph', 'slide_type', 'str')
        param_shape_index = self.get_test_value('create_special_slide_paragraph', 'shape_index', 'int')
        param_dto = self.get_test_value('create_special_slide_paragraph', 'dto', 'Paragraph')
        param_position = self.get_test_value('create_special_slide_paragraph', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_paragraph', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_paragraph', 'storage', 'str')
        param_position = self.get_invalid_test_value('create_special_slide_paragraph', 'position', param_position, 'int')
        self.initialize('create_special_slide_paragraph', 'position', param_position)
        ok = False
        try:
            self.api.create_special_slide_paragraph(param_name, param_slide_index, param_slide_type, param_shape_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_paragraph', 'position', param_position)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_paragraph', 'position', param_position)
        if ok:
            self.assert_no_exception('create_special_slide_paragraph', 'position')

    def test_create_special_slide_paragraph_invalid_password(self):
        """Test case for create_special_slide_paragraph with invalid password
        """
        param_name = self.get_test_value('create_special_slide_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_paragraph', 'slide_type', 'str')
        param_shape_index = self.get_test_value('create_special_slide_paragraph', 'shape_index', 'int')
        param_dto = self.get_test_value('create_special_slide_paragraph', 'dto', 'Paragraph')
        param_position = self.get_test_value('create_special_slide_paragraph', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_paragraph', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_paragraph', 'storage', 'str')
        param_password = self.get_invalid_test_value('create_special_slide_paragraph', 'password', param_password, 'str')
        self.initialize('create_special_slide_paragraph', 'password', param_password)
        ok = False
        try:
            self.api.create_special_slide_paragraph(param_name, param_slide_index, param_slide_type, param_shape_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_paragraph', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_paragraph', 'password', param_password)
        if ok:
            self.assert_no_exception('create_special_slide_paragraph', 'password')

    def test_create_special_slide_paragraph_invalid_folder(self):
        """Test case for create_special_slide_paragraph with invalid folder
        """
        param_name = self.get_test_value('create_special_slide_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_paragraph', 'slide_type', 'str')
        param_shape_index = self.get_test_value('create_special_slide_paragraph', 'shape_index', 'int')
        param_dto = self.get_test_value('create_special_slide_paragraph', 'dto', 'Paragraph')
        param_position = self.get_test_value('create_special_slide_paragraph', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_paragraph', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_paragraph', 'storage', 'str')
        param_folder = self.get_invalid_test_value('create_special_slide_paragraph', 'folder', param_folder, 'str')
        self.initialize('create_special_slide_paragraph', 'folder', param_folder)
        ok = False
        try:
            self.api.create_special_slide_paragraph(param_name, param_slide_index, param_slide_type, param_shape_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_paragraph', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_paragraph', 'folder', param_folder)
        if ok:
            self.assert_no_exception('create_special_slide_paragraph', 'folder')

    def test_create_special_slide_paragraph_invalid_storage(self):
        """Test case for create_special_slide_paragraph with invalid storage
        """
        param_name = self.get_test_value('create_special_slide_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_paragraph', 'slide_type', 'str')
        param_shape_index = self.get_test_value('create_special_slide_paragraph', 'shape_index', 'int')
        param_dto = self.get_test_value('create_special_slide_paragraph', 'dto', 'Paragraph')
        param_position = self.get_test_value('create_special_slide_paragraph', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_paragraph', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_paragraph', 'storage', 'str')
        param_storage = self.get_invalid_test_value('create_special_slide_paragraph', 'storage', param_storage, 'str')
        self.initialize('create_special_slide_paragraph', 'storage', param_storage)
        ok = False
        try:
            self.api.create_special_slide_paragraph(param_name, param_slide_index, param_slide_type, param_shape_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_paragraph', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_paragraph', 'storage', param_storage)
        if ok:
            self.assert_no_exception('create_special_slide_paragraph', 'storage')

    def test_create_special_slide_portion(self):
        """Test case for create_special_slide_portion
        """
        param_name = self.get_test_value('create_special_slide_portion', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_portion', 'slide_type', 'str')
        param_shape_index = self.get_test_value('create_special_slide_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('create_special_slide_portion', 'paragraph_index', 'int')
        param_dto = self.get_test_value('create_special_slide_portion', 'dto', 'Portion')
        param_position = self.get_test_value('create_special_slide_portion', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_portion', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_portion', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_portion', 'storage', 'str')
        self.initialize('create_special_slide_portion', None, None)
        response = self.api.create_special_slide_portion(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_dto, param_position, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_create_special_slide_portion_invalid_name(self):
        """Test case for create_special_slide_portion with invalid name
        """
        param_name = self.get_test_value('create_special_slide_portion', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_portion', 'slide_type', 'str')
        param_shape_index = self.get_test_value('create_special_slide_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('create_special_slide_portion', 'paragraph_index', 'int')
        param_dto = self.get_test_value('create_special_slide_portion', 'dto', 'Portion')
        param_position = self.get_test_value('create_special_slide_portion', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_portion', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_portion', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_portion', 'storage', 'str')
        param_name = self.get_invalid_test_value('create_special_slide_portion', 'name', param_name, 'str')
        self.initialize('create_special_slide_portion', 'name', param_name)
        ok = False
        try:
            self.api.create_special_slide_portion(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_portion', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_portion', 'name', param_name)
        if ok:
            self.assert_no_exception('create_special_slide_portion', 'name')

    def test_create_special_slide_portion_invalid_slide_index(self):
        """Test case for create_special_slide_portion with invalid slide_index
        """
        param_name = self.get_test_value('create_special_slide_portion', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_portion', 'slide_type', 'str')
        param_shape_index = self.get_test_value('create_special_slide_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('create_special_slide_portion', 'paragraph_index', 'int')
        param_dto = self.get_test_value('create_special_slide_portion', 'dto', 'Portion')
        param_position = self.get_test_value('create_special_slide_portion', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_portion', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_portion', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_portion', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('create_special_slide_portion', 'slide_index', param_slide_index, 'int')
        self.initialize('create_special_slide_portion', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.create_special_slide_portion(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_portion', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_portion', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('create_special_slide_portion', 'slide_index')

    def test_create_special_slide_portion_invalid_slide_type(self):
        """Test case for create_special_slide_portion with invalid slide_type
        """
        param_name = self.get_test_value('create_special_slide_portion', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_portion', 'slide_type', 'str')
        param_shape_index = self.get_test_value('create_special_slide_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('create_special_slide_portion', 'paragraph_index', 'int')
        param_dto = self.get_test_value('create_special_slide_portion', 'dto', 'Portion')
        param_position = self.get_test_value('create_special_slide_portion', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_portion', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_portion', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_portion', 'storage', 'str')
        param_slide_type = self.get_invalid_test_value('create_special_slide_portion', 'slide_type', param_slide_type, 'str')
        self.initialize('create_special_slide_portion', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.create_special_slide_portion(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_portion', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_portion', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('create_special_slide_portion', 'slide_type')

    def test_create_special_slide_portion_invalid_shape_index(self):
        """Test case for create_special_slide_portion with invalid shape_index
        """
        param_name = self.get_test_value('create_special_slide_portion', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_portion', 'slide_type', 'str')
        param_shape_index = self.get_test_value('create_special_slide_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('create_special_slide_portion', 'paragraph_index', 'int')
        param_dto = self.get_test_value('create_special_slide_portion', 'dto', 'Portion')
        param_position = self.get_test_value('create_special_slide_portion', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_portion', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_portion', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_portion', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('create_special_slide_portion', 'shape_index', param_shape_index, 'int')
        self.initialize('create_special_slide_portion', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.create_special_slide_portion(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_portion', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_portion', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('create_special_slide_portion', 'shape_index')

    def test_create_special_slide_portion_invalid_paragraph_index(self):
        """Test case for create_special_slide_portion with invalid paragraph_index
        """
        param_name = self.get_test_value('create_special_slide_portion', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_portion', 'slide_type', 'str')
        param_shape_index = self.get_test_value('create_special_slide_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('create_special_slide_portion', 'paragraph_index', 'int')
        param_dto = self.get_test_value('create_special_slide_portion', 'dto', 'Portion')
        param_position = self.get_test_value('create_special_slide_portion', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_portion', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_portion', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_portion', 'storage', 'str')
        param_paragraph_index = self.get_invalid_test_value('create_special_slide_portion', 'paragraph_index', param_paragraph_index, 'int')
        self.initialize('create_special_slide_portion', 'paragraph_index', param_paragraph_index)
        ok = False
        try:
            self.api.create_special_slide_portion(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_portion', 'paragraph_index', param_paragraph_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_portion', 'paragraph_index', param_paragraph_index)
        if ok:
            self.assert_no_exception('create_special_slide_portion', 'paragraph_index')

    def test_create_special_slide_portion_invalid_dto(self):
        """Test case for create_special_slide_portion with invalid dto
        """
        param_name = self.get_test_value('create_special_slide_portion', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_portion', 'slide_type', 'str')
        param_shape_index = self.get_test_value('create_special_slide_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('create_special_slide_portion', 'paragraph_index', 'int')
        param_dto = self.get_test_value('create_special_slide_portion', 'dto', 'Portion')
        param_position = self.get_test_value('create_special_slide_portion', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_portion', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_portion', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_portion', 'storage', 'str')
        param_dto = self.get_invalid_test_value('create_special_slide_portion', 'dto', param_dto, 'Portion')
        self.initialize('create_special_slide_portion', 'dto', param_dto)
        ok = False
        try:
            self.api.create_special_slide_portion(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_portion', 'dto', param_dto)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_portion', 'dto', param_dto)
        if ok:
            self.assert_no_exception('create_special_slide_portion', 'dto')

    def test_create_special_slide_portion_invalid_position(self):
        """Test case for create_special_slide_portion with invalid position
        """
        param_name = self.get_test_value('create_special_slide_portion', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_portion', 'slide_type', 'str')
        param_shape_index = self.get_test_value('create_special_slide_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('create_special_slide_portion', 'paragraph_index', 'int')
        param_dto = self.get_test_value('create_special_slide_portion', 'dto', 'Portion')
        param_position = self.get_test_value('create_special_slide_portion', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_portion', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_portion', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_portion', 'storage', 'str')
        param_position = self.get_invalid_test_value('create_special_slide_portion', 'position', param_position, 'int')
        self.initialize('create_special_slide_portion', 'position', param_position)
        ok = False
        try:
            self.api.create_special_slide_portion(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_portion', 'position', param_position)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_portion', 'position', param_position)
        if ok:
            self.assert_no_exception('create_special_slide_portion', 'position')

    def test_create_special_slide_portion_invalid_password(self):
        """Test case for create_special_slide_portion with invalid password
        """
        param_name = self.get_test_value('create_special_slide_portion', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_portion', 'slide_type', 'str')
        param_shape_index = self.get_test_value('create_special_slide_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('create_special_slide_portion', 'paragraph_index', 'int')
        param_dto = self.get_test_value('create_special_slide_portion', 'dto', 'Portion')
        param_position = self.get_test_value('create_special_slide_portion', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_portion', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_portion', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_portion', 'storage', 'str')
        param_password = self.get_invalid_test_value('create_special_slide_portion', 'password', param_password, 'str')
        self.initialize('create_special_slide_portion', 'password', param_password)
        ok = False
        try:
            self.api.create_special_slide_portion(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_portion', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_portion', 'password', param_password)
        if ok:
            self.assert_no_exception('create_special_slide_portion', 'password')

    def test_create_special_slide_portion_invalid_folder(self):
        """Test case for create_special_slide_portion with invalid folder
        """
        param_name = self.get_test_value('create_special_slide_portion', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_portion', 'slide_type', 'str')
        param_shape_index = self.get_test_value('create_special_slide_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('create_special_slide_portion', 'paragraph_index', 'int')
        param_dto = self.get_test_value('create_special_slide_portion', 'dto', 'Portion')
        param_position = self.get_test_value('create_special_slide_portion', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_portion', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_portion', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_portion', 'storage', 'str')
        param_folder = self.get_invalid_test_value('create_special_slide_portion', 'folder', param_folder, 'str')
        self.initialize('create_special_slide_portion', 'folder', param_folder)
        ok = False
        try:
            self.api.create_special_slide_portion(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_portion', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_portion', 'folder', param_folder)
        if ok:
            self.assert_no_exception('create_special_slide_portion', 'folder')

    def test_create_special_slide_portion_invalid_storage(self):
        """Test case for create_special_slide_portion with invalid storage
        """
        param_name = self.get_test_value('create_special_slide_portion', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_portion', 'slide_type', 'str')
        param_shape_index = self.get_test_value('create_special_slide_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('create_special_slide_portion', 'paragraph_index', 'int')
        param_dto = self.get_test_value('create_special_slide_portion', 'dto', 'Portion')
        param_position = self.get_test_value('create_special_slide_portion', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_portion', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_portion', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_portion', 'storage', 'str')
        param_storage = self.get_invalid_test_value('create_special_slide_portion', 'storage', param_storage, 'str')
        self.initialize('create_special_slide_portion', 'storage', param_storage)
        ok = False
        try:
            self.api.create_special_slide_portion(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_portion', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_portion', 'storage', param_storage)
        if ok:
            self.assert_no_exception('create_special_slide_portion', 'storage')

    def test_create_special_slide_shape(self):
        """Test case for create_special_slide_shape
        """
        param_name = self.get_test_value('create_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_shape', 'slide_type', 'str')
        param_dto = self.get_test_value('create_special_slide_shape', 'dto', 'ShapeBase')
        param_shape_to_clone = self.get_test_value('create_special_slide_shape', 'shape_to_clone', 'int')
        param_position = self.get_test_value('create_special_slide_shape', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_shape', 'storage', 'str')
        self.initialize('create_special_slide_shape', None, None)
        response = self.api.create_special_slide_shape(param_name, param_slide_index, param_slide_type, param_dto, param_shape_to_clone, param_position, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_create_special_slide_shape_invalid_name(self):
        """Test case for create_special_slide_shape with invalid name
        """
        param_name = self.get_test_value('create_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_shape', 'slide_type', 'str')
        param_dto = self.get_test_value('create_special_slide_shape', 'dto', 'ShapeBase')
        param_shape_to_clone = self.get_test_value('create_special_slide_shape', 'shape_to_clone', 'int')
        param_position = self.get_test_value('create_special_slide_shape', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_shape', 'storage', 'str')
        param_name = self.get_invalid_test_value('create_special_slide_shape', 'name', param_name, 'str')
        self.initialize('create_special_slide_shape', 'name', param_name)
        ok = False
        try:
            self.api.create_special_slide_shape(param_name, param_slide_index, param_slide_type, param_dto, param_shape_to_clone, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_shape', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_shape', 'name', param_name)
        if ok:
            self.assert_no_exception('create_special_slide_shape', 'name')

    def test_create_special_slide_shape_invalid_slide_index(self):
        """Test case for create_special_slide_shape with invalid slide_index
        """
        param_name = self.get_test_value('create_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_shape', 'slide_type', 'str')
        param_dto = self.get_test_value('create_special_slide_shape', 'dto', 'ShapeBase')
        param_shape_to_clone = self.get_test_value('create_special_slide_shape', 'shape_to_clone', 'int')
        param_position = self.get_test_value('create_special_slide_shape', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_shape', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('create_special_slide_shape', 'slide_index', param_slide_index, 'int')
        self.initialize('create_special_slide_shape', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.create_special_slide_shape(param_name, param_slide_index, param_slide_type, param_dto, param_shape_to_clone, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_shape', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_shape', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('create_special_slide_shape', 'slide_index')

    def test_create_special_slide_shape_invalid_slide_type(self):
        """Test case for create_special_slide_shape with invalid slide_type
        """
        param_name = self.get_test_value('create_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_shape', 'slide_type', 'str')
        param_dto = self.get_test_value('create_special_slide_shape', 'dto', 'ShapeBase')
        param_shape_to_clone = self.get_test_value('create_special_slide_shape', 'shape_to_clone', 'int')
        param_position = self.get_test_value('create_special_slide_shape', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_shape', 'storage', 'str')
        param_slide_type = self.get_invalid_test_value('create_special_slide_shape', 'slide_type', param_slide_type, 'str')
        self.initialize('create_special_slide_shape', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.create_special_slide_shape(param_name, param_slide_index, param_slide_type, param_dto, param_shape_to_clone, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_shape', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_shape', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('create_special_slide_shape', 'slide_type')

    def test_create_special_slide_shape_invalid_dto(self):
        """Test case for create_special_slide_shape with invalid dto
        """
        param_name = self.get_test_value('create_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_shape', 'slide_type', 'str')
        param_dto = self.get_test_value('create_special_slide_shape', 'dto', 'ShapeBase')
        param_shape_to_clone = self.get_test_value('create_special_slide_shape', 'shape_to_clone', 'int')
        param_position = self.get_test_value('create_special_slide_shape', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_shape', 'storage', 'str')
        param_dto = self.get_invalid_test_value('create_special_slide_shape', 'dto', param_dto, 'ShapeBase')
        self.initialize('create_special_slide_shape', 'dto', param_dto)
        ok = False
        try:
            self.api.create_special_slide_shape(param_name, param_slide_index, param_slide_type, param_dto, param_shape_to_clone, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_shape', 'dto', param_dto)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_shape', 'dto', param_dto)
        if ok:
            self.assert_no_exception('create_special_slide_shape', 'dto')

    def test_create_special_slide_shape_invalid_shape_to_clone(self):
        """Test case for create_special_slide_shape with invalid shape_to_clone
        """
        param_name = self.get_test_value('create_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_shape', 'slide_type', 'str')
        param_dto = self.get_test_value('create_special_slide_shape', 'dto', 'ShapeBase')
        param_shape_to_clone = self.get_test_value('create_special_slide_shape', 'shape_to_clone', 'int')
        param_position = self.get_test_value('create_special_slide_shape', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_shape', 'storage', 'str')
        param_shape_to_clone = self.get_invalid_test_value('create_special_slide_shape', 'shape_to_clone', param_shape_to_clone, 'int')
        self.initialize('create_special_slide_shape', 'shape_to_clone', param_shape_to_clone)
        ok = False
        try:
            self.api.create_special_slide_shape(param_name, param_slide_index, param_slide_type, param_dto, param_shape_to_clone, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_shape', 'shape_to_clone', param_shape_to_clone)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_shape', 'shape_to_clone', param_shape_to_clone)
        if ok:
            self.assert_no_exception('create_special_slide_shape', 'shape_to_clone')

    def test_create_special_slide_shape_invalid_position(self):
        """Test case for create_special_slide_shape with invalid position
        """
        param_name = self.get_test_value('create_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_shape', 'slide_type', 'str')
        param_dto = self.get_test_value('create_special_slide_shape', 'dto', 'ShapeBase')
        param_shape_to_clone = self.get_test_value('create_special_slide_shape', 'shape_to_clone', 'int')
        param_position = self.get_test_value('create_special_slide_shape', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_shape', 'storage', 'str')
        param_position = self.get_invalid_test_value('create_special_slide_shape', 'position', param_position, 'int')
        self.initialize('create_special_slide_shape', 'position', param_position)
        ok = False
        try:
            self.api.create_special_slide_shape(param_name, param_slide_index, param_slide_type, param_dto, param_shape_to_clone, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_shape', 'position', param_position)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_shape', 'position', param_position)
        if ok:
            self.assert_no_exception('create_special_slide_shape', 'position')

    def test_create_special_slide_shape_invalid_password(self):
        """Test case for create_special_slide_shape with invalid password
        """
        param_name = self.get_test_value('create_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_shape', 'slide_type', 'str')
        param_dto = self.get_test_value('create_special_slide_shape', 'dto', 'ShapeBase')
        param_shape_to_clone = self.get_test_value('create_special_slide_shape', 'shape_to_clone', 'int')
        param_position = self.get_test_value('create_special_slide_shape', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_shape', 'storage', 'str')
        param_password = self.get_invalid_test_value('create_special_slide_shape', 'password', param_password, 'str')
        self.initialize('create_special_slide_shape', 'password', param_password)
        ok = False
        try:
            self.api.create_special_slide_shape(param_name, param_slide_index, param_slide_type, param_dto, param_shape_to_clone, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_shape', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_shape', 'password', param_password)
        if ok:
            self.assert_no_exception('create_special_slide_shape', 'password')

    def test_create_special_slide_shape_invalid_folder(self):
        """Test case for create_special_slide_shape with invalid folder
        """
        param_name = self.get_test_value('create_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_shape', 'slide_type', 'str')
        param_dto = self.get_test_value('create_special_slide_shape', 'dto', 'ShapeBase')
        param_shape_to_clone = self.get_test_value('create_special_slide_shape', 'shape_to_clone', 'int')
        param_position = self.get_test_value('create_special_slide_shape', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_shape', 'storage', 'str')
        param_folder = self.get_invalid_test_value('create_special_slide_shape', 'folder', param_folder, 'str')
        self.initialize('create_special_slide_shape', 'folder', param_folder)
        ok = False
        try:
            self.api.create_special_slide_shape(param_name, param_slide_index, param_slide_type, param_dto, param_shape_to_clone, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_shape', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_shape', 'folder', param_folder)
        if ok:
            self.assert_no_exception('create_special_slide_shape', 'folder')

    def test_create_special_slide_shape_invalid_storage(self):
        """Test case for create_special_slide_shape with invalid storage
        """
        param_name = self.get_test_value('create_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_shape', 'slide_type', 'str')
        param_dto = self.get_test_value('create_special_slide_shape', 'dto', 'ShapeBase')
        param_shape_to_clone = self.get_test_value('create_special_slide_shape', 'shape_to_clone', 'int')
        param_position = self.get_test_value('create_special_slide_shape', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_shape', 'storage', 'str')
        param_storage = self.get_invalid_test_value('create_special_slide_shape', 'storage', param_storage, 'str')
        self.initialize('create_special_slide_shape', 'storage', param_storage)
        ok = False
        try:
            self.api.create_special_slide_shape(param_name, param_slide_index, param_slide_type, param_dto, param_shape_to_clone, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_shape', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_shape', 'storage', param_storage)
        if ok:
            self.assert_no_exception('create_special_slide_shape', 'storage')

    def test_create_special_slide_subshape(self):
        """Test case for create_special_slide_subshape
        """
        param_name = self.get_test_value('create_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('create_special_slide_subshape', 'path', 'str')
        param_dto = self.get_test_value('create_special_slide_subshape', 'dto', 'ShapeBase')
        param_shape_to_clone = self.get_test_value('create_special_slide_subshape', 'shape_to_clone', 'int')
        param_position = self.get_test_value('create_special_slide_subshape', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_subshape', 'storage', 'str')
        self.initialize('create_special_slide_subshape', None, None)
        response = self.api.create_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_dto, param_shape_to_clone, param_position, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_create_special_slide_subshape_invalid_name(self):
        """Test case for create_special_slide_subshape with invalid name
        """
        param_name = self.get_test_value('create_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('create_special_slide_subshape', 'path', 'str')
        param_dto = self.get_test_value('create_special_slide_subshape', 'dto', 'ShapeBase')
        param_shape_to_clone = self.get_test_value('create_special_slide_subshape', 'shape_to_clone', 'int')
        param_position = self.get_test_value('create_special_slide_subshape', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_subshape', 'storage', 'str')
        param_name = self.get_invalid_test_value('create_special_slide_subshape', 'name', param_name, 'str')
        self.initialize('create_special_slide_subshape', 'name', param_name)
        ok = False
        try:
            self.api.create_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_dto, param_shape_to_clone, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_subshape', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_subshape', 'name', param_name)
        if ok:
            self.assert_no_exception('create_special_slide_subshape', 'name')

    def test_create_special_slide_subshape_invalid_slide_index(self):
        """Test case for create_special_slide_subshape with invalid slide_index
        """
        param_name = self.get_test_value('create_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('create_special_slide_subshape', 'path', 'str')
        param_dto = self.get_test_value('create_special_slide_subshape', 'dto', 'ShapeBase')
        param_shape_to_clone = self.get_test_value('create_special_slide_subshape', 'shape_to_clone', 'int')
        param_position = self.get_test_value('create_special_slide_subshape', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_subshape', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('create_special_slide_subshape', 'slide_index', param_slide_index, 'int')
        self.initialize('create_special_slide_subshape', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.create_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_dto, param_shape_to_clone, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_subshape', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_subshape', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('create_special_slide_subshape', 'slide_index')

    def test_create_special_slide_subshape_invalid_slide_type(self):
        """Test case for create_special_slide_subshape with invalid slide_type
        """
        param_name = self.get_test_value('create_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('create_special_slide_subshape', 'path', 'str')
        param_dto = self.get_test_value('create_special_slide_subshape', 'dto', 'ShapeBase')
        param_shape_to_clone = self.get_test_value('create_special_slide_subshape', 'shape_to_clone', 'int')
        param_position = self.get_test_value('create_special_slide_subshape', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_subshape', 'storage', 'str')
        param_slide_type = self.get_invalid_test_value('create_special_slide_subshape', 'slide_type', param_slide_type, 'str')
        self.initialize('create_special_slide_subshape', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.create_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_dto, param_shape_to_clone, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_subshape', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_subshape', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('create_special_slide_subshape', 'slide_type')

    def test_create_special_slide_subshape_invalid_path(self):
        """Test case for create_special_slide_subshape with invalid path
        """
        param_name = self.get_test_value('create_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('create_special_slide_subshape', 'path', 'str')
        param_dto = self.get_test_value('create_special_slide_subshape', 'dto', 'ShapeBase')
        param_shape_to_clone = self.get_test_value('create_special_slide_subshape', 'shape_to_clone', 'int')
        param_position = self.get_test_value('create_special_slide_subshape', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_subshape', 'storage', 'str')
        param_path = self.get_invalid_test_value('create_special_slide_subshape', 'path', param_path, 'str')
        self.initialize('create_special_slide_subshape', 'path', param_path)
        ok = False
        try:
            self.api.create_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_dto, param_shape_to_clone, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_subshape', 'path', param_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_subshape', 'path', param_path)
        if ok:
            self.assert_no_exception('create_special_slide_subshape', 'path')

    def test_create_special_slide_subshape_invalid_dto(self):
        """Test case for create_special_slide_subshape with invalid dto
        """
        param_name = self.get_test_value('create_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('create_special_slide_subshape', 'path', 'str')
        param_dto = self.get_test_value('create_special_slide_subshape', 'dto', 'ShapeBase')
        param_shape_to_clone = self.get_test_value('create_special_slide_subshape', 'shape_to_clone', 'int')
        param_position = self.get_test_value('create_special_slide_subshape', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_subshape', 'storage', 'str')
        param_dto = self.get_invalid_test_value('create_special_slide_subshape', 'dto', param_dto, 'ShapeBase')
        self.initialize('create_special_slide_subshape', 'dto', param_dto)
        ok = False
        try:
            self.api.create_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_dto, param_shape_to_clone, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_subshape', 'dto', param_dto)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_subshape', 'dto', param_dto)
        if ok:
            self.assert_no_exception('create_special_slide_subshape', 'dto')

    def test_create_special_slide_subshape_invalid_shape_to_clone(self):
        """Test case for create_special_slide_subshape with invalid shape_to_clone
        """
        param_name = self.get_test_value('create_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('create_special_slide_subshape', 'path', 'str')
        param_dto = self.get_test_value('create_special_slide_subshape', 'dto', 'ShapeBase')
        param_shape_to_clone = self.get_test_value('create_special_slide_subshape', 'shape_to_clone', 'int')
        param_position = self.get_test_value('create_special_slide_subshape', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_subshape', 'storage', 'str')
        param_shape_to_clone = self.get_invalid_test_value('create_special_slide_subshape', 'shape_to_clone', param_shape_to_clone, 'int')
        self.initialize('create_special_slide_subshape', 'shape_to_clone', param_shape_to_clone)
        ok = False
        try:
            self.api.create_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_dto, param_shape_to_clone, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_subshape', 'shape_to_clone', param_shape_to_clone)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_subshape', 'shape_to_clone', param_shape_to_clone)
        if ok:
            self.assert_no_exception('create_special_slide_subshape', 'shape_to_clone')

    def test_create_special_slide_subshape_invalid_position(self):
        """Test case for create_special_slide_subshape with invalid position
        """
        param_name = self.get_test_value('create_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('create_special_slide_subshape', 'path', 'str')
        param_dto = self.get_test_value('create_special_slide_subshape', 'dto', 'ShapeBase')
        param_shape_to_clone = self.get_test_value('create_special_slide_subshape', 'shape_to_clone', 'int')
        param_position = self.get_test_value('create_special_slide_subshape', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_subshape', 'storage', 'str')
        param_position = self.get_invalid_test_value('create_special_slide_subshape', 'position', param_position, 'int')
        self.initialize('create_special_slide_subshape', 'position', param_position)
        ok = False
        try:
            self.api.create_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_dto, param_shape_to_clone, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_subshape', 'position', param_position)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_subshape', 'position', param_position)
        if ok:
            self.assert_no_exception('create_special_slide_subshape', 'position')

    def test_create_special_slide_subshape_invalid_password(self):
        """Test case for create_special_slide_subshape with invalid password
        """
        param_name = self.get_test_value('create_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('create_special_slide_subshape', 'path', 'str')
        param_dto = self.get_test_value('create_special_slide_subshape', 'dto', 'ShapeBase')
        param_shape_to_clone = self.get_test_value('create_special_slide_subshape', 'shape_to_clone', 'int')
        param_position = self.get_test_value('create_special_slide_subshape', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_subshape', 'storage', 'str')
        param_password = self.get_invalid_test_value('create_special_slide_subshape', 'password', param_password, 'str')
        self.initialize('create_special_slide_subshape', 'password', param_password)
        ok = False
        try:
            self.api.create_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_dto, param_shape_to_clone, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_subshape', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_subshape', 'password', param_password)
        if ok:
            self.assert_no_exception('create_special_slide_subshape', 'password')

    def test_create_special_slide_subshape_invalid_folder(self):
        """Test case for create_special_slide_subshape with invalid folder
        """
        param_name = self.get_test_value('create_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('create_special_slide_subshape', 'path', 'str')
        param_dto = self.get_test_value('create_special_slide_subshape', 'dto', 'ShapeBase')
        param_shape_to_clone = self.get_test_value('create_special_slide_subshape', 'shape_to_clone', 'int')
        param_position = self.get_test_value('create_special_slide_subshape', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_subshape', 'storage', 'str')
        param_folder = self.get_invalid_test_value('create_special_slide_subshape', 'folder', param_folder, 'str')
        self.initialize('create_special_slide_subshape', 'folder', param_folder)
        ok = False
        try:
            self.api.create_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_dto, param_shape_to_clone, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_subshape', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_subshape', 'folder', param_folder)
        if ok:
            self.assert_no_exception('create_special_slide_subshape', 'folder')

    def test_create_special_slide_subshape_invalid_storage(self):
        """Test case for create_special_slide_subshape with invalid storage
        """
        param_name = self.get_test_value('create_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('create_special_slide_subshape', 'path', 'str')
        param_dto = self.get_test_value('create_special_slide_subshape', 'dto', 'ShapeBase')
        param_shape_to_clone = self.get_test_value('create_special_slide_subshape', 'shape_to_clone', 'int')
        param_position = self.get_test_value('create_special_slide_subshape', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_subshape', 'storage', 'str')
        param_storage = self.get_invalid_test_value('create_special_slide_subshape', 'storage', param_storage, 'str')
        self.initialize('create_special_slide_subshape', 'storage', param_storage)
        ok = False
        try:
            self.api.create_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_dto, param_shape_to_clone, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_subshape', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_subshape', 'storage', param_storage)
        if ok:
            self.assert_no_exception('create_special_slide_subshape', 'storage')

    def test_create_special_slide_subshape_paragraph(self):
        """Test case for create_special_slide_subshape_paragraph
        """
        param_name = self.get_test_value('create_special_slide_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_subshape_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_subshape_paragraph', 'slide_type', 'str')
        param_path = self.get_test_value('create_special_slide_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('create_special_slide_subshape_paragraph', 'shape_index', 'int')
        param_dto = self.get_test_value('create_special_slide_subshape_paragraph', 'dto', 'Paragraph')
        param_position = self.get_test_value('create_special_slide_subshape_paragraph', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_subshape_paragraph', 'storage', 'str')
        self.initialize('create_special_slide_subshape_paragraph', None, None)
        response = self.api.create_special_slide_subshape_paragraph(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_dto, param_position, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_create_special_slide_subshape_paragraph_invalid_name(self):
        """Test case for create_special_slide_subshape_paragraph with invalid name
        """
        param_name = self.get_test_value('create_special_slide_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_subshape_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_subshape_paragraph', 'slide_type', 'str')
        param_path = self.get_test_value('create_special_slide_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('create_special_slide_subshape_paragraph', 'shape_index', 'int')
        param_dto = self.get_test_value('create_special_slide_subshape_paragraph', 'dto', 'Paragraph')
        param_position = self.get_test_value('create_special_slide_subshape_paragraph', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_subshape_paragraph', 'storage', 'str')
        param_name = self.get_invalid_test_value('create_special_slide_subshape_paragraph', 'name', param_name, 'str')
        self.initialize('create_special_slide_subshape_paragraph', 'name', param_name)
        ok = False
        try:
            self.api.create_special_slide_subshape_paragraph(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_subshape_paragraph', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_subshape_paragraph', 'name', param_name)
        if ok:
            self.assert_no_exception('create_special_slide_subshape_paragraph', 'name')

    def test_create_special_slide_subshape_paragraph_invalid_slide_index(self):
        """Test case for create_special_slide_subshape_paragraph with invalid slide_index
        """
        param_name = self.get_test_value('create_special_slide_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_subshape_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_subshape_paragraph', 'slide_type', 'str')
        param_path = self.get_test_value('create_special_slide_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('create_special_slide_subshape_paragraph', 'shape_index', 'int')
        param_dto = self.get_test_value('create_special_slide_subshape_paragraph', 'dto', 'Paragraph')
        param_position = self.get_test_value('create_special_slide_subshape_paragraph', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_subshape_paragraph', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('create_special_slide_subshape_paragraph', 'slide_index', param_slide_index, 'int')
        self.initialize('create_special_slide_subshape_paragraph', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.create_special_slide_subshape_paragraph(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_subshape_paragraph', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_subshape_paragraph', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('create_special_slide_subshape_paragraph', 'slide_index')

    def test_create_special_slide_subshape_paragraph_invalid_slide_type(self):
        """Test case for create_special_slide_subshape_paragraph with invalid slide_type
        """
        param_name = self.get_test_value('create_special_slide_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_subshape_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_subshape_paragraph', 'slide_type', 'str')
        param_path = self.get_test_value('create_special_slide_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('create_special_slide_subshape_paragraph', 'shape_index', 'int')
        param_dto = self.get_test_value('create_special_slide_subshape_paragraph', 'dto', 'Paragraph')
        param_position = self.get_test_value('create_special_slide_subshape_paragraph', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_subshape_paragraph', 'storage', 'str')
        param_slide_type = self.get_invalid_test_value('create_special_slide_subshape_paragraph', 'slide_type', param_slide_type, 'str')
        self.initialize('create_special_slide_subshape_paragraph', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.create_special_slide_subshape_paragraph(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_subshape_paragraph', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_subshape_paragraph', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('create_special_slide_subshape_paragraph', 'slide_type')

    def test_create_special_slide_subshape_paragraph_invalid_path(self):
        """Test case for create_special_slide_subshape_paragraph with invalid path
        """
        param_name = self.get_test_value('create_special_slide_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_subshape_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_subshape_paragraph', 'slide_type', 'str')
        param_path = self.get_test_value('create_special_slide_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('create_special_slide_subshape_paragraph', 'shape_index', 'int')
        param_dto = self.get_test_value('create_special_slide_subshape_paragraph', 'dto', 'Paragraph')
        param_position = self.get_test_value('create_special_slide_subshape_paragraph', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_subshape_paragraph', 'storage', 'str')
        param_path = self.get_invalid_test_value('create_special_slide_subshape_paragraph', 'path', param_path, 'str')
        self.initialize('create_special_slide_subshape_paragraph', 'path', param_path)
        ok = False
        try:
            self.api.create_special_slide_subshape_paragraph(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_subshape_paragraph', 'path', param_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_subshape_paragraph', 'path', param_path)
        if ok:
            self.assert_no_exception('create_special_slide_subshape_paragraph', 'path')

    def test_create_special_slide_subshape_paragraph_invalid_shape_index(self):
        """Test case for create_special_slide_subshape_paragraph with invalid shape_index
        """
        param_name = self.get_test_value('create_special_slide_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_subshape_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_subshape_paragraph', 'slide_type', 'str')
        param_path = self.get_test_value('create_special_slide_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('create_special_slide_subshape_paragraph', 'shape_index', 'int')
        param_dto = self.get_test_value('create_special_slide_subshape_paragraph', 'dto', 'Paragraph')
        param_position = self.get_test_value('create_special_slide_subshape_paragraph', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_subshape_paragraph', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('create_special_slide_subshape_paragraph', 'shape_index', param_shape_index, 'int')
        self.initialize('create_special_slide_subshape_paragraph', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.create_special_slide_subshape_paragraph(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_subshape_paragraph', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_subshape_paragraph', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('create_special_slide_subshape_paragraph', 'shape_index')

    def test_create_special_slide_subshape_paragraph_invalid_dto(self):
        """Test case for create_special_slide_subshape_paragraph with invalid dto
        """
        param_name = self.get_test_value('create_special_slide_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_subshape_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_subshape_paragraph', 'slide_type', 'str')
        param_path = self.get_test_value('create_special_slide_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('create_special_slide_subshape_paragraph', 'shape_index', 'int')
        param_dto = self.get_test_value('create_special_slide_subshape_paragraph', 'dto', 'Paragraph')
        param_position = self.get_test_value('create_special_slide_subshape_paragraph', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_subshape_paragraph', 'storage', 'str')
        param_dto = self.get_invalid_test_value('create_special_slide_subshape_paragraph', 'dto', param_dto, 'Paragraph')
        self.initialize('create_special_slide_subshape_paragraph', 'dto', param_dto)
        ok = False
        try:
            self.api.create_special_slide_subshape_paragraph(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_subshape_paragraph', 'dto', param_dto)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_subshape_paragraph', 'dto', param_dto)
        if ok:
            self.assert_no_exception('create_special_slide_subshape_paragraph', 'dto')

    def test_create_special_slide_subshape_paragraph_invalid_position(self):
        """Test case for create_special_slide_subshape_paragraph with invalid position
        """
        param_name = self.get_test_value('create_special_slide_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_subshape_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_subshape_paragraph', 'slide_type', 'str')
        param_path = self.get_test_value('create_special_slide_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('create_special_slide_subshape_paragraph', 'shape_index', 'int')
        param_dto = self.get_test_value('create_special_slide_subshape_paragraph', 'dto', 'Paragraph')
        param_position = self.get_test_value('create_special_slide_subshape_paragraph', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_subshape_paragraph', 'storage', 'str')
        param_position = self.get_invalid_test_value('create_special_slide_subshape_paragraph', 'position', param_position, 'int')
        self.initialize('create_special_slide_subshape_paragraph', 'position', param_position)
        ok = False
        try:
            self.api.create_special_slide_subshape_paragraph(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_subshape_paragraph', 'position', param_position)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_subshape_paragraph', 'position', param_position)
        if ok:
            self.assert_no_exception('create_special_slide_subshape_paragraph', 'position')

    def test_create_special_slide_subshape_paragraph_invalid_password(self):
        """Test case for create_special_slide_subshape_paragraph with invalid password
        """
        param_name = self.get_test_value('create_special_slide_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_subshape_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_subshape_paragraph', 'slide_type', 'str')
        param_path = self.get_test_value('create_special_slide_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('create_special_slide_subshape_paragraph', 'shape_index', 'int')
        param_dto = self.get_test_value('create_special_slide_subshape_paragraph', 'dto', 'Paragraph')
        param_position = self.get_test_value('create_special_slide_subshape_paragraph', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_subshape_paragraph', 'storage', 'str')
        param_password = self.get_invalid_test_value('create_special_slide_subshape_paragraph', 'password', param_password, 'str')
        self.initialize('create_special_slide_subshape_paragraph', 'password', param_password)
        ok = False
        try:
            self.api.create_special_slide_subshape_paragraph(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_subshape_paragraph', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_subshape_paragraph', 'password', param_password)
        if ok:
            self.assert_no_exception('create_special_slide_subshape_paragraph', 'password')

    def test_create_special_slide_subshape_paragraph_invalid_folder(self):
        """Test case for create_special_slide_subshape_paragraph with invalid folder
        """
        param_name = self.get_test_value('create_special_slide_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_subshape_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_subshape_paragraph', 'slide_type', 'str')
        param_path = self.get_test_value('create_special_slide_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('create_special_slide_subshape_paragraph', 'shape_index', 'int')
        param_dto = self.get_test_value('create_special_slide_subshape_paragraph', 'dto', 'Paragraph')
        param_position = self.get_test_value('create_special_slide_subshape_paragraph', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_subshape_paragraph', 'storage', 'str')
        param_folder = self.get_invalid_test_value('create_special_slide_subshape_paragraph', 'folder', param_folder, 'str')
        self.initialize('create_special_slide_subshape_paragraph', 'folder', param_folder)
        ok = False
        try:
            self.api.create_special_slide_subshape_paragraph(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_subshape_paragraph', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_subshape_paragraph', 'folder', param_folder)
        if ok:
            self.assert_no_exception('create_special_slide_subshape_paragraph', 'folder')

    def test_create_special_slide_subshape_paragraph_invalid_storage(self):
        """Test case for create_special_slide_subshape_paragraph with invalid storage
        """
        param_name = self.get_test_value('create_special_slide_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_subshape_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_subshape_paragraph', 'slide_type', 'str')
        param_path = self.get_test_value('create_special_slide_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('create_special_slide_subshape_paragraph', 'shape_index', 'int')
        param_dto = self.get_test_value('create_special_slide_subshape_paragraph', 'dto', 'Paragraph')
        param_position = self.get_test_value('create_special_slide_subshape_paragraph', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_subshape_paragraph', 'storage', 'str')
        param_storage = self.get_invalid_test_value('create_special_slide_subshape_paragraph', 'storage', param_storage, 'str')
        self.initialize('create_special_slide_subshape_paragraph', 'storage', param_storage)
        ok = False
        try:
            self.api.create_special_slide_subshape_paragraph(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_subshape_paragraph', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_subshape_paragraph', 'storage', param_storage)
        if ok:
            self.assert_no_exception('create_special_slide_subshape_paragraph', 'storage')

    def test_create_special_slide_subshape_portion(self):
        """Test case for create_special_slide_subshape_portion
        """
        param_name = self.get_test_value('create_special_slide_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_subshape_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_subshape_portion', 'slide_type', 'str')
        param_path = self.get_test_value('create_special_slide_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('create_special_slide_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('create_special_slide_subshape_portion', 'paragraph_index', 'int')
        param_dto = self.get_test_value('create_special_slide_subshape_portion', 'dto', 'Portion')
        param_position = self.get_test_value('create_special_slide_subshape_portion', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_subshape_portion', 'storage', 'str')
        self.initialize('create_special_slide_subshape_portion', None, None)
        response = self.api.create_special_slide_subshape_portion(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_dto, param_position, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_create_special_slide_subshape_portion_invalid_name(self):
        """Test case for create_special_slide_subshape_portion with invalid name
        """
        param_name = self.get_test_value('create_special_slide_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_subshape_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_subshape_portion', 'slide_type', 'str')
        param_path = self.get_test_value('create_special_slide_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('create_special_slide_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('create_special_slide_subshape_portion', 'paragraph_index', 'int')
        param_dto = self.get_test_value('create_special_slide_subshape_portion', 'dto', 'Portion')
        param_position = self.get_test_value('create_special_slide_subshape_portion', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_subshape_portion', 'storage', 'str')
        param_name = self.get_invalid_test_value('create_special_slide_subshape_portion', 'name', param_name, 'str')
        self.initialize('create_special_slide_subshape_portion', 'name', param_name)
        ok = False
        try:
            self.api.create_special_slide_subshape_portion(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_subshape_portion', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_subshape_portion', 'name', param_name)
        if ok:
            self.assert_no_exception('create_special_slide_subshape_portion', 'name')

    def test_create_special_slide_subshape_portion_invalid_slide_index(self):
        """Test case for create_special_slide_subshape_portion with invalid slide_index
        """
        param_name = self.get_test_value('create_special_slide_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_subshape_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_subshape_portion', 'slide_type', 'str')
        param_path = self.get_test_value('create_special_slide_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('create_special_slide_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('create_special_slide_subshape_portion', 'paragraph_index', 'int')
        param_dto = self.get_test_value('create_special_slide_subshape_portion', 'dto', 'Portion')
        param_position = self.get_test_value('create_special_slide_subshape_portion', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_subshape_portion', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('create_special_slide_subshape_portion', 'slide_index', param_slide_index, 'int')
        self.initialize('create_special_slide_subshape_portion', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.create_special_slide_subshape_portion(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_subshape_portion', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_subshape_portion', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('create_special_slide_subshape_portion', 'slide_index')

    def test_create_special_slide_subshape_portion_invalid_slide_type(self):
        """Test case for create_special_slide_subshape_portion with invalid slide_type
        """
        param_name = self.get_test_value('create_special_slide_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_subshape_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_subshape_portion', 'slide_type', 'str')
        param_path = self.get_test_value('create_special_slide_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('create_special_slide_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('create_special_slide_subshape_portion', 'paragraph_index', 'int')
        param_dto = self.get_test_value('create_special_slide_subshape_portion', 'dto', 'Portion')
        param_position = self.get_test_value('create_special_slide_subshape_portion', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_subshape_portion', 'storage', 'str')
        param_slide_type = self.get_invalid_test_value('create_special_slide_subshape_portion', 'slide_type', param_slide_type, 'str')
        self.initialize('create_special_slide_subshape_portion', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.create_special_slide_subshape_portion(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_subshape_portion', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_subshape_portion', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('create_special_slide_subshape_portion', 'slide_type')

    def test_create_special_slide_subshape_portion_invalid_path(self):
        """Test case for create_special_slide_subshape_portion with invalid path
        """
        param_name = self.get_test_value('create_special_slide_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_subshape_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_subshape_portion', 'slide_type', 'str')
        param_path = self.get_test_value('create_special_slide_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('create_special_slide_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('create_special_slide_subshape_portion', 'paragraph_index', 'int')
        param_dto = self.get_test_value('create_special_slide_subshape_portion', 'dto', 'Portion')
        param_position = self.get_test_value('create_special_slide_subshape_portion', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_subshape_portion', 'storage', 'str')
        param_path = self.get_invalid_test_value('create_special_slide_subshape_portion', 'path', param_path, 'str')
        self.initialize('create_special_slide_subshape_portion', 'path', param_path)
        ok = False
        try:
            self.api.create_special_slide_subshape_portion(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_subshape_portion', 'path', param_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_subshape_portion', 'path', param_path)
        if ok:
            self.assert_no_exception('create_special_slide_subshape_portion', 'path')

    def test_create_special_slide_subshape_portion_invalid_shape_index(self):
        """Test case for create_special_slide_subshape_portion with invalid shape_index
        """
        param_name = self.get_test_value('create_special_slide_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_subshape_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_subshape_portion', 'slide_type', 'str')
        param_path = self.get_test_value('create_special_slide_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('create_special_slide_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('create_special_slide_subshape_portion', 'paragraph_index', 'int')
        param_dto = self.get_test_value('create_special_slide_subshape_portion', 'dto', 'Portion')
        param_position = self.get_test_value('create_special_slide_subshape_portion', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_subshape_portion', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('create_special_slide_subshape_portion', 'shape_index', param_shape_index, 'int')
        self.initialize('create_special_slide_subshape_portion', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.create_special_slide_subshape_portion(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_subshape_portion', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_subshape_portion', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('create_special_slide_subshape_portion', 'shape_index')

    def test_create_special_slide_subshape_portion_invalid_paragraph_index(self):
        """Test case for create_special_slide_subshape_portion with invalid paragraph_index
        """
        param_name = self.get_test_value('create_special_slide_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_subshape_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_subshape_portion', 'slide_type', 'str')
        param_path = self.get_test_value('create_special_slide_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('create_special_slide_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('create_special_slide_subshape_portion', 'paragraph_index', 'int')
        param_dto = self.get_test_value('create_special_slide_subshape_portion', 'dto', 'Portion')
        param_position = self.get_test_value('create_special_slide_subshape_portion', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_subshape_portion', 'storage', 'str')
        param_paragraph_index = self.get_invalid_test_value('create_special_slide_subshape_portion', 'paragraph_index', param_paragraph_index, 'int')
        self.initialize('create_special_slide_subshape_portion', 'paragraph_index', param_paragraph_index)
        ok = False
        try:
            self.api.create_special_slide_subshape_portion(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_subshape_portion', 'paragraph_index', param_paragraph_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_subshape_portion', 'paragraph_index', param_paragraph_index)
        if ok:
            self.assert_no_exception('create_special_slide_subshape_portion', 'paragraph_index')

    def test_create_special_slide_subshape_portion_invalid_dto(self):
        """Test case for create_special_slide_subshape_portion with invalid dto
        """
        param_name = self.get_test_value('create_special_slide_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_subshape_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_subshape_portion', 'slide_type', 'str')
        param_path = self.get_test_value('create_special_slide_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('create_special_slide_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('create_special_slide_subshape_portion', 'paragraph_index', 'int')
        param_dto = self.get_test_value('create_special_slide_subshape_portion', 'dto', 'Portion')
        param_position = self.get_test_value('create_special_slide_subshape_portion', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_subshape_portion', 'storage', 'str')
        param_dto = self.get_invalid_test_value('create_special_slide_subshape_portion', 'dto', param_dto, 'Portion')
        self.initialize('create_special_slide_subshape_portion', 'dto', param_dto)
        ok = False
        try:
            self.api.create_special_slide_subshape_portion(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_subshape_portion', 'dto', param_dto)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_subshape_portion', 'dto', param_dto)
        if ok:
            self.assert_no_exception('create_special_slide_subshape_portion', 'dto')

    def test_create_special_slide_subshape_portion_invalid_position(self):
        """Test case for create_special_slide_subshape_portion with invalid position
        """
        param_name = self.get_test_value('create_special_slide_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_subshape_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_subshape_portion', 'slide_type', 'str')
        param_path = self.get_test_value('create_special_slide_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('create_special_slide_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('create_special_slide_subshape_portion', 'paragraph_index', 'int')
        param_dto = self.get_test_value('create_special_slide_subshape_portion', 'dto', 'Portion')
        param_position = self.get_test_value('create_special_slide_subshape_portion', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_subshape_portion', 'storage', 'str')
        param_position = self.get_invalid_test_value('create_special_slide_subshape_portion', 'position', param_position, 'int')
        self.initialize('create_special_slide_subshape_portion', 'position', param_position)
        ok = False
        try:
            self.api.create_special_slide_subshape_portion(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_subshape_portion', 'position', param_position)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_subshape_portion', 'position', param_position)
        if ok:
            self.assert_no_exception('create_special_slide_subshape_portion', 'position')

    def test_create_special_slide_subshape_portion_invalid_password(self):
        """Test case for create_special_slide_subshape_portion with invalid password
        """
        param_name = self.get_test_value('create_special_slide_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_subshape_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_subshape_portion', 'slide_type', 'str')
        param_path = self.get_test_value('create_special_slide_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('create_special_slide_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('create_special_slide_subshape_portion', 'paragraph_index', 'int')
        param_dto = self.get_test_value('create_special_slide_subshape_portion', 'dto', 'Portion')
        param_position = self.get_test_value('create_special_slide_subshape_portion', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_subshape_portion', 'storage', 'str')
        param_password = self.get_invalid_test_value('create_special_slide_subshape_portion', 'password', param_password, 'str')
        self.initialize('create_special_slide_subshape_portion', 'password', param_password)
        ok = False
        try:
            self.api.create_special_slide_subshape_portion(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_subshape_portion', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_subshape_portion', 'password', param_password)
        if ok:
            self.assert_no_exception('create_special_slide_subshape_portion', 'password')

    def test_create_special_slide_subshape_portion_invalid_folder(self):
        """Test case for create_special_slide_subshape_portion with invalid folder
        """
        param_name = self.get_test_value('create_special_slide_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_subshape_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_subshape_portion', 'slide_type', 'str')
        param_path = self.get_test_value('create_special_slide_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('create_special_slide_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('create_special_slide_subshape_portion', 'paragraph_index', 'int')
        param_dto = self.get_test_value('create_special_slide_subshape_portion', 'dto', 'Portion')
        param_position = self.get_test_value('create_special_slide_subshape_portion', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_subshape_portion', 'storage', 'str')
        param_folder = self.get_invalid_test_value('create_special_slide_subshape_portion', 'folder', param_folder, 'str')
        self.initialize('create_special_slide_subshape_portion', 'folder', param_folder)
        ok = False
        try:
            self.api.create_special_slide_subshape_portion(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_subshape_portion', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_subshape_portion', 'folder', param_folder)
        if ok:
            self.assert_no_exception('create_special_slide_subshape_portion', 'folder')

    def test_create_special_slide_subshape_portion_invalid_storage(self):
        """Test case for create_special_slide_subshape_portion with invalid storage
        """
        param_name = self.get_test_value('create_special_slide_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('create_special_slide_subshape_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('create_special_slide_subshape_portion', 'slide_type', 'str')
        param_path = self.get_test_value('create_special_slide_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('create_special_slide_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('create_special_slide_subshape_portion', 'paragraph_index', 'int')
        param_dto = self.get_test_value('create_special_slide_subshape_portion', 'dto', 'Portion')
        param_position = self.get_test_value('create_special_slide_subshape_portion', 'position', 'int')
        param_password = self.get_test_value('create_special_slide_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('create_special_slide_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('create_special_slide_subshape_portion', 'storage', 'str')
        param_storage = self.get_invalid_test_value('create_special_slide_subshape_portion', 'storage', param_storage, 'str')
        self.initialize('create_special_slide_subshape_portion', 'storage', param_storage)
        ok = False
        try:
            self.api.create_special_slide_subshape_portion(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_special_slide_subshape_portion', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_special_slide_subshape_portion', 'storage', param_storage)
        if ok:
            self.assert_no_exception('create_special_slide_subshape_portion', 'storage')

    def test_create_subshape(self):
        """Test case for create_subshape
        """
        param_name = self.get_test_value('create_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('create_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('create_subshape', 'path', 'str')
        param_dto = self.get_test_value('create_subshape', 'dto', 'ShapeBase')
        param_shape_to_clone = self.get_test_value('create_subshape', 'shape_to_clone', 'int')
        param_position = self.get_test_value('create_subshape', 'position', 'int')
        param_password = self.get_test_value('create_subshape', 'password', 'str')
        param_folder = self.get_test_value('create_subshape', 'folder', 'str')
        param_storage = self.get_test_value('create_subshape', 'storage', 'str')
        self.initialize('create_subshape', None, None)
        response = self.api.create_subshape(param_name, param_slide_index, param_path, param_dto, param_shape_to_clone, param_position, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_create_subshape_invalid_name(self):
        """Test case for create_subshape with invalid name
        """
        param_name = self.get_test_value('create_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('create_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('create_subshape', 'path', 'str')
        param_dto = self.get_test_value('create_subshape', 'dto', 'ShapeBase')
        param_shape_to_clone = self.get_test_value('create_subshape', 'shape_to_clone', 'int')
        param_position = self.get_test_value('create_subshape', 'position', 'int')
        param_password = self.get_test_value('create_subshape', 'password', 'str')
        param_folder = self.get_test_value('create_subshape', 'folder', 'str')
        param_storage = self.get_test_value('create_subshape', 'storage', 'str')
        param_name = self.get_invalid_test_value('create_subshape', 'name', param_name, 'str')
        self.initialize('create_subshape', 'name', param_name)
        ok = False
        try:
            self.api.create_subshape(param_name, param_slide_index, param_path, param_dto, param_shape_to_clone, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_subshape', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_subshape', 'name', param_name)
        if ok:
            self.assert_no_exception('create_subshape', 'name')

    def test_create_subshape_invalid_slide_index(self):
        """Test case for create_subshape with invalid slide_index
        """
        param_name = self.get_test_value('create_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('create_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('create_subshape', 'path', 'str')
        param_dto = self.get_test_value('create_subshape', 'dto', 'ShapeBase')
        param_shape_to_clone = self.get_test_value('create_subshape', 'shape_to_clone', 'int')
        param_position = self.get_test_value('create_subshape', 'position', 'int')
        param_password = self.get_test_value('create_subshape', 'password', 'str')
        param_folder = self.get_test_value('create_subshape', 'folder', 'str')
        param_storage = self.get_test_value('create_subshape', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('create_subshape', 'slide_index', param_slide_index, 'int')
        self.initialize('create_subshape', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.create_subshape(param_name, param_slide_index, param_path, param_dto, param_shape_to_clone, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_subshape', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_subshape', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('create_subshape', 'slide_index')

    def test_create_subshape_invalid_path(self):
        """Test case for create_subshape with invalid path
        """
        param_name = self.get_test_value('create_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('create_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('create_subshape', 'path', 'str')
        param_dto = self.get_test_value('create_subshape', 'dto', 'ShapeBase')
        param_shape_to_clone = self.get_test_value('create_subshape', 'shape_to_clone', 'int')
        param_position = self.get_test_value('create_subshape', 'position', 'int')
        param_password = self.get_test_value('create_subshape', 'password', 'str')
        param_folder = self.get_test_value('create_subshape', 'folder', 'str')
        param_storage = self.get_test_value('create_subshape', 'storage', 'str')
        param_path = self.get_invalid_test_value('create_subshape', 'path', param_path, 'str')
        self.initialize('create_subshape', 'path', param_path)
        ok = False
        try:
            self.api.create_subshape(param_name, param_slide_index, param_path, param_dto, param_shape_to_clone, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_subshape', 'path', param_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_subshape', 'path', param_path)
        if ok:
            self.assert_no_exception('create_subshape', 'path')

    def test_create_subshape_invalid_dto(self):
        """Test case for create_subshape with invalid dto
        """
        param_name = self.get_test_value('create_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('create_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('create_subshape', 'path', 'str')
        param_dto = self.get_test_value('create_subshape', 'dto', 'ShapeBase')
        param_shape_to_clone = self.get_test_value('create_subshape', 'shape_to_clone', 'int')
        param_position = self.get_test_value('create_subshape', 'position', 'int')
        param_password = self.get_test_value('create_subshape', 'password', 'str')
        param_folder = self.get_test_value('create_subshape', 'folder', 'str')
        param_storage = self.get_test_value('create_subshape', 'storage', 'str')
        param_dto = self.get_invalid_test_value('create_subshape', 'dto', param_dto, 'ShapeBase')
        self.initialize('create_subshape', 'dto', param_dto)
        ok = False
        try:
            self.api.create_subshape(param_name, param_slide_index, param_path, param_dto, param_shape_to_clone, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_subshape', 'dto', param_dto)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_subshape', 'dto', param_dto)
        if ok:
            self.assert_no_exception('create_subshape', 'dto')

    def test_create_subshape_invalid_shape_to_clone(self):
        """Test case for create_subshape with invalid shape_to_clone
        """
        param_name = self.get_test_value('create_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('create_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('create_subshape', 'path', 'str')
        param_dto = self.get_test_value('create_subshape', 'dto', 'ShapeBase')
        param_shape_to_clone = self.get_test_value('create_subshape', 'shape_to_clone', 'int')
        param_position = self.get_test_value('create_subshape', 'position', 'int')
        param_password = self.get_test_value('create_subshape', 'password', 'str')
        param_folder = self.get_test_value('create_subshape', 'folder', 'str')
        param_storage = self.get_test_value('create_subshape', 'storage', 'str')
        param_shape_to_clone = self.get_invalid_test_value('create_subshape', 'shape_to_clone', param_shape_to_clone, 'int')
        self.initialize('create_subshape', 'shape_to_clone', param_shape_to_clone)
        ok = False
        try:
            self.api.create_subshape(param_name, param_slide_index, param_path, param_dto, param_shape_to_clone, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_subshape', 'shape_to_clone', param_shape_to_clone)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_subshape', 'shape_to_clone', param_shape_to_clone)
        if ok:
            self.assert_no_exception('create_subshape', 'shape_to_clone')

    def test_create_subshape_invalid_position(self):
        """Test case for create_subshape with invalid position
        """
        param_name = self.get_test_value('create_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('create_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('create_subshape', 'path', 'str')
        param_dto = self.get_test_value('create_subshape', 'dto', 'ShapeBase')
        param_shape_to_clone = self.get_test_value('create_subshape', 'shape_to_clone', 'int')
        param_position = self.get_test_value('create_subshape', 'position', 'int')
        param_password = self.get_test_value('create_subshape', 'password', 'str')
        param_folder = self.get_test_value('create_subshape', 'folder', 'str')
        param_storage = self.get_test_value('create_subshape', 'storage', 'str')
        param_position = self.get_invalid_test_value('create_subshape', 'position', param_position, 'int')
        self.initialize('create_subshape', 'position', param_position)
        ok = False
        try:
            self.api.create_subshape(param_name, param_slide_index, param_path, param_dto, param_shape_to_clone, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_subshape', 'position', param_position)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_subshape', 'position', param_position)
        if ok:
            self.assert_no_exception('create_subshape', 'position')

    def test_create_subshape_invalid_password(self):
        """Test case for create_subshape with invalid password
        """
        param_name = self.get_test_value('create_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('create_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('create_subshape', 'path', 'str')
        param_dto = self.get_test_value('create_subshape', 'dto', 'ShapeBase')
        param_shape_to_clone = self.get_test_value('create_subshape', 'shape_to_clone', 'int')
        param_position = self.get_test_value('create_subshape', 'position', 'int')
        param_password = self.get_test_value('create_subshape', 'password', 'str')
        param_folder = self.get_test_value('create_subshape', 'folder', 'str')
        param_storage = self.get_test_value('create_subshape', 'storage', 'str')
        param_password = self.get_invalid_test_value('create_subshape', 'password', param_password, 'str')
        self.initialize('create_subshape', 'password', param_password)
        ok = False
        try:
            self.api.create_subshape(param_name, param_slide_index, param_path, param_dto, param_shape_to_clone, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_subshape', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_subshape', 'password', param_password)
        if ok:
            self.assert_no_exception('create_subshape', 'password')

    def test_create_subshape_invalid_folder(self):
        """Test case for create_subshape with invalid folder
        """
        param_name = self.get_test_value('create_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('create_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('create_subshape', 'path', 'str')
        param_dto = self.get_test_value('create_subshape', 'dto', 'ShapeBase')
        param_shape_to_clone = self.get_test_value('create_subshape', 'shape_to_clone', 'int')
        param_position = self.get_test_value('create_subshape', 'position', 'int')
        param_password = self.get_test_value('create_subshape', 'password', 'str')
        param_folder = self.get_test_value('create_subshape', 'folder', 'str')
        param_storage = self.get_test_value('create_subshape', 'storage', 'str')
        param_folder = self.get_invalid_test_value('create_subshape', 'folder', param_folder, 'str')
        self.initialize('create_subshape', 'folder', param_folder)
        ok = False
        try:
            self.api.create_subshape(param_name, param_slide_index, param_path, param_dto, param_shape_to_clone, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_subshape', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_subshape', 'folder', param_folder)
        if ok:
            self.assert_no_exception('create_subshape', 'folder')

    def test_create_subshape_invalid_storage(self):
        """Test case for create_subshape with invalid storage
        """
        param_name = self.get_test_value('create_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('create_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('create_subshape', 'path', 'str')
        param_dto = self.get_test_value('create_subshape', 'dto', 'ShapeBase')
        param_shape_to_clone = self.get_test_value('create_subshape', 'shape_to_clone', 'int')
        param_position = self.get_test_value('create_subshape', 'position', 'int')
        param_password = self.get_test_value('create_subshape', 'password', 'str')
        param_folder = self.get_test_value('create_subshape', 'folder', 'str')
        param_storage = self.get_test_value('create_subshape', 'storage', 'str')
        param_storage = self.get_invalid_test_value('create_subshape', 'storage', param_storage, 'str')
        self.initialize('create_subshape', 'storage', param_storage)
        ok = False
        try:
            self.api.create_subshape(param_name, param_slide_index, param_path, param_dto, param_shape_to_clone, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_subshape', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_subshape', 'storage', param_storage)
        if ok:
            self.assert_no_exception('create_subshape', 'storage')

    def test_create_subshape_paragraph(self):
        """Test case for create_subshape_paragraph
        """
        param_name = self.get_test_value('create_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('create_subshape_paragraph', 'slide_index', 'int')
        param_path = self.get_test_value('create_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('create_subshape_paragraph', 'shape_index', 'int')
        param_dto = self.get_test_value('create_subshape_paragraph', 'dto', 'Paragraph')
        param_position = self.get_test_value('create_subshape_paragraph', 'position', 'int')
        param_password = self.get_test_value('create_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('create_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('create_subshape_paragraph', 'storage', 'str')
        self.initialize('create_subshape_paragraph', None, None)
        response = self.api.create_subshape_paragraph(param_name, param_slide_index, param_path, param_shape_index, param_dto, param_position, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_create_subshape_paragraph_invalid_name(self):
        """Test case for create_subshape_paragraph with invalid name
        """
        param_name = self.get_test_value('create_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('create_subshape_paragraph', 'slide_index', 'int')
        param_path = self.get_test_value('create_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('create_subshape_paragraph', 'shape_index', 'int')
        param_dto = self.get_test_value('create_subshape_paragraph', 'dto', 'Paragraph')
        param_position = self.get_test_value('create_subshape_paragraph', 'position', 'int')
        param_password = self.get_test_value('create_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('create_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('create_subshape_paragraph', 'storage', 'str')
        param_name = self.get_invalid_test_value('create_subshape_paragraph', 'name', param_name, 'str')
        self.initialize('create_subshape_paragraph', 'name', param_name)
        ok = False
        try:
            self.api.create_subshape_paragraph(param_name, param_slide_index, param_path, param_shape_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_subshape_paragraph', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_subshape_paragraph', 'name', param_name)
        if ok:
            self.assert_no_exception('create_subshape_paragraph', 'name')

    def test_create_subshape_paragraph_invalid_slide_index(self):
        """Test case for create_subshape_paragraph with invalid slide_index
        """
        param_name = self.get_test_value('create_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('create_subshape_paragraph', 'slide_index', 'int')
        param_path = self.get_test_value('create_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('create_subshape_paragraph', 'shape_index', 'int')
        param_dto = self.get_test_value('create_subshape_paragraph', 'dto', 'Paragraph')
        param_position = self.get_test_value('create_subshape_paragraph', 'position', 'int')
        param_password = self.get_test_value('create_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('create_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('create_subshape_paragraph', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('create_subshape_paragraph', 'slide_index', param_slide_index, 'int')
        self.initialize('create_subshape_paragraph', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.create_subshape_paragraph(param_name, param_slide_index, param_path, param_shape_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_subshape_paragraph', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_subshape_paragraph', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('create_subshape_paragraph', 'slide_index')

    def test_create_subshape_paragraph_invalid_path(self):
        """Test case for create_subshape_paragraph with invalid path
        """
        param_name = self.get_test_value('create_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('create_subshape_paragraph', 'slide_index', 'int')
        param_path = self.get_test_value('create_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('create_subshape_paragraph', 'shape_index', 'int')
        param_dto = self.get_test_value('create_subshape_paragraph', 'dto', 'Paragraph')
        param_position = self.get_test_value('create_subshape_paragraph', 'position', 'int')
        param_password = self.get_test_value('create_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('create_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('create_subshape_paragraph', 'storage', 'str')
        param_path = self.get_invalid_test_value('create_subshape_paragraph', 'path', param_path, 'str')
        self.initialize('create_subshape_paragraph', 'path', param_path)
        ok = False
        try:
            self.api.create_subshape_paragraph(param_name, param_slide_index, param_path, param_shape_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_subshape_paragraph', 'path', param_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_subshape_paragraph', 'path', param_path)
        if ok:
            self.assert_no_exception('create_subshape_paragraph', 'path')

    def test_create_subshape_paragraph_invalid_shape_index(self):
        """Test case for create_subshape_paragraph with invalid shape_index
        """
        param_name = self.get_test_value('create_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('create_subshape_paragraph', 'slide_index', 'int')
        param_path = self.get_test_value('create_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('create_subshape_paragraph', 'shape_index', 'int')
        param_dto = self.get_test_value('create_subshape_paragraph', 'dto', 'Paragraph')
        param_position = self.get_test_value('create_subshape_paragraph', 'position', 'int')
        param_password = self.get_test_value('create_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('create_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('create_subshape_paragraph', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('create_subshape_paragraph', 'shape_index', param_shape_index, 'int')
        self.initialize('create_subshape_paragraph', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.create_subshape_paragraph(param_name, param_slide_index, param_path, param_shape_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_subshape_paragraph', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_subshape_paragraph', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('create_subshape_paragraph', 'shape_index')

    def test_create_subshape_paragraph_invalid_dto(self):
        """Test case for create_subshape_paragraph with invalid dto
        """
        param_name = self.get_test_value('create_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('create_subshape_paragraph', 'slide_index', 'int')
        param_path = self.get_test_value('create_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('create_subshape_paragraph', 'shape_index', 'int')
        param_dto = self.get_test_value('create_subshape_paragraph', 'dto', 'Paragraph')
        param_position = self.get_test_value('create_subshape_paragraph', 'position', 'int')
        param_password = self.get_test_value('create_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('create_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('create_subshape_paragraph', 'storage', 'str')
        param_dto = self.get_invalid_test_value('create_subshape_paragraph', 'dto', param_dto, 'Paragraph')
        self.initialize('create_subshape_paragraph', 'dto', param_dto)
        ok = False
        try:
            self.api.create_subshape_paragraph(param_name, param_slide_index, param_path, param_shape_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_subshape_paragraph', 'dto', param_dto)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_subshape_paragraph', 'dto', param_dto)
        if ok:
            self.assert_no_exception('create_subshape_paragraph', 'dto')

    def test_create_subshape_paragraph_invalid_position(self):
        """Test case for create_subshape_paragraph with invalid position
        """
        param_name = self.get_test_value('create_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('create_subshape_paragraph', 'slide_index', 'int')
        param_path = self.get_test_value('create_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('create_subshape_paragraph', 'shape_index', 'int')
        param_dto = self.get_test_value('create_subshape_paragraph', 'dto', 'Paragraph')
        param_position = self.get_test_value('create_subshape_paragraph', 'position', 'int')
        param_password = self.get_test_value('create_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('create_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('create_subshape_paragraph', 'storage', 'str')
        param_position = self.get_invalid_test_value('create_subshape_paragraph', 'position', param_position, 'int')
        self.initialize('create_subshape_paragraph', 'position', param_position)
        ok = False
        try:
            self.api.create_subshape_paragraph(param_name, param_slide_index, param_path, param_shape_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_subshape_paragraph', 'position', param_position)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_subshape_paragraph', 'position', param_position)
        if ok:
            self.assert_no_exception('create_subshape_paragraph', 'position')

    def test_create_subshape_paragraph_invalid_password(self):
        """Test case for create_subshape_paragraph with invalid password
        """
        param_name = self.get_test_value('create_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('create_subshape_paragraph', 'slide_index', 'int')
        param_path = self.get_test_value('create_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('create_subshape_paragraph', 'shape_index', 'int')
        param_dto = self.get_test_value('create_subshape_paragraph', 'dto', 'Paragraph')
        param_position = self.get_test_value('create_subshape_paragraph', 'position', 'int')
        param_password = self.get_test_value('create_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('create_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('create_subshape_paragraph', 'storage', 'str')
        param_password = self.get_invalid_test_value('create_subshape_paragraph', 'password', param_password, 'str')
        self.initialize('create_subshape_paragraph', 'password', param_password)
        ok = False
        try:
            self.api.create_subshape_paragraph(param_name, param_slide_index, param_path, param_shape_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_subshape_paragraph', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_subshape_paragraph', 'password', param_password)
        if ok:
            self.assert_no_exception('create_subshape_paragraph', 'password')

    def test_create_subshape_paragraph_invalid_folder(self):
        """Test case for create_subshape_paragraph with invalid folder
        """
        param_name = self.get_test_value('create_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('create_subshape_paragraph', 'slide_index', 'int')
        param_path = self.get_test_value('create_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('create_subshape_paragraph', 'shape_index', 'int')
        param_dto = self.get_test_value('create_subshape_paragraph', 'dto', 'Paragraph')
        param_position = self.get_test_value('create_subshape_paragraph', 'position', 'int')
        param_password = self.get_test_value('create_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('create_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('create_subshape_paragraph', 'storage', 'str')
        param_folder = self.get_invalid_test_value('create_subshape_paragraph', 'folder', param_folder, 'str')
        self.initialize('create_subshape_paragraph', 'folder', param_folder)
        ok = False
        try:
            self.api.create_subshape_paragraph(param_name, param_slide_index, param_path, param_shape_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_subshape_paragraph', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_subshape_paragraph', 'folder', param_folder)
        if ok:
            self.assert_no_exception('create_subshape_paragraph', 'folder')

    def test_create_subshape_paragraph_invalid_storage(self):
        """Test case for create_subshape_paragraph with invalid storage
        """
        param_name = self.get_test_value('create_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('create_subshape_paragraph', 'slide_index', 'int')
        param_path = self.get_test_value('create_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('create_subshape_paragraph', 'shape_index', 'int')
        param_dto = self.get_test_value('create_subshape_paragraph', 'dto', 'Paragraph')
        param_position = self.get_test_value('create_subshape_paragraph', 'position', 'int')
        param_password = self.get_test_value('create_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('create_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('create_subshape_paragraph', 'storage', 'str')
        param_storage = self.get_invalid_test_value('create_subshape_paragraph', 'storage', param_storage, 'str')
        self.initialize('create_subshape_paragraph', 'storage', param_storage)
        ok = False
        try:
            self.api.create_subshape_paragraph(param_name, param_slide_index, param_path, param_shape_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_subshape_paragraph', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_subshape_paragraph', 'storage', param_storage)
        if ok:
            self.assert_no_exception('create_subshape_paragraph', 'storage')

    def test_create_subshape_portion(self):
        """Test case for create_subshape_portion
        """
        param_name = self.get_test_value('create_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('create_subshape_portion', 'slide_index', 'int')
        param_path = self.get_test_value('create_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('create_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('create_subshape_portion', 'paragraph_index', 'int')
        param_dto = self.get_test_value('create_subshape_portion', 'dto', 'Portion')
        param_position = self.get_test_value('create_subshape_portion', 'position', 'int')
        param_password = self.get_test_value('create_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('create_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('create_subshape_portion', 'storage', 'str')
        self.initialize('create_subshape_portion', None, None)
        response = self.api.create_subshape_portion(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_dto, param_position, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_create_subshape_portion_invalid_name(self):
        """Test case for create_subshape_portion with invalid name
        """
        param_name = self.get_test_value('create_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('create_subshape_portion', 'slide_index', 'int')
        param_path = self.get_test_value('create_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('create_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('create_subshape_portion', 'paragraph_index', 'int')
        param_dto = self.get_test_value('create_subshape_portion', 'dto', 'Portion')
        param_position = self.get_test_value('create_subshape_portion', 'position', 'int')
        param_password = self.get_test_value('create_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('create_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('create_subshape_portion', 'storage', 'str')
        param_name = self.get_invalid_test_value('create_subshape_portion', 'name', param_name, 'str')
        self.initialize('create_subshape_portion', 'name', param_name)
        ok = False
        try:
            self.api.create_subshape_portion(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_subshape_portion', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_subshape_portion', 'name', param_name)
        if ok:
            self.assert_no_exception('create_subshape_portion', 'name')

    def test_create_subshape_portion_invalid_slide_index(self):
        """Test case for create_subshape_portion with invalid slide_index
        """
        param_name = self.get_test_value('create_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('create_subshape_portion', 'slide_index', 'int')
        param_path = self.get_test_value('create_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('create_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('create_subshape_portion', 'paragraph_index', 'int')
        param_dto = self.get_test_value('create_subshape_portion', 'dto', 'Portion')
        param_position = self.get_test_value('create_subshape_portion', 'position', 'int')
        param_password = self.get_test_value('create_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('create_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('create_subshape_portion', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('create_subshape_portion', 'slide_index', param_slide_index, 'int')
        self.initialize('create_subshape_portion', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.create_subshape_portion(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_subshape_portion', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_subshape_portion', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('create_subshape_portion', 'slide_index')

    def test_create_subshape_portion_invalid_path(self):
        """Test case for create_subshape_portion with invalid path
        """
        param_name = self.get_test_value('create_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('create_subshape_portion', 'slide_index', 'int')
        param_path = self.get_test_value('create_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('create_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('create_subshape_portion', 'paragraph_index', 'int')
        param_dto = self.get_test_value('create_subshape_portion', 'dto', 'Portion')
        param_position = self.get_test_value('create_subshape_portion', 'position', 'int')
        param_password = self.get_test_value('create_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('create_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('create_subshape_portion', 'storage', 'str')
        param_path = self.get_invalid_test_value('create_subshape_portion', 'path', param_path, 'str')
        self.initialize('create_subshape_portion', 'path', param_path)
        ok = False
        try:
            self.api.create_subshape_portion(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_subshape_portion', 'path', param_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_subshape_portion', 'path', param_path)
        if ok:
            self.assert_no_exception('create_subshape_portion', 'path')

    def test_create_subshape_portion_invalid_shape_index(self):
        """Test case for create_subshape_portion with invalid shape_index
        """
        param_name = self.get_test_value('create_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('create_subshape_portion', 'slide_index', 'int')
        param_path = self.get_test_value('create_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('create_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('create_subshape_portion', 'paragraph_index', 'int')
        param_dto = self.get_test_value('create_subshape_portion', 'dto', 'Portion')
        param_position = self.get_test_value('create_subshape_portion', 'position', 'int')
        param_password = self.get_test_value('create_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('create_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('create_subshape_portion', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('create_subshape_portion', 'shape_index', param_shape_index, 'int')
        self.initialize('create_subshape_portion', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.create_subshape_portion(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_subshape_portion', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_subshape_portion', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('create_subshape_portion', 'shape_index')

    def test_create_subshape_portion_invalid_paragraph_index(self):
        """Test case for create_subshape_portion with invalid paragraph_index
        """
        param_name = self.get_test_value('create_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('create_subshape_portion', 'slide_index', 'int')
        param_path = self.get_test_value('create_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('create_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('create_subshape_portion', 'paragraph_index', 'int')
        param_dto = self.get_test_value('create_subshape_portion', 'dto', 'Portion')
        param_position = self.get_test_value('create_subshape_portion', 'position', 'int')
        param_password = self.get_test_value('create_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('create_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('create_subshape_portion', 'storage', 'str')
        param_paragraph_index = self.get_invalid_test_value('create_subshape_portion', 'paragraph_index', param_paragraph_index, 'int')
        self.initialize('create_subshape_portion', 'paragraph_index', param_paragraph_index)
        ok = False
        try:
            self.api.create_subshape_portion(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_subshape_portion', 'paragraph_index', param_paragraph_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_subshape_portion', 'paragraph_index', param_paragraph_index)
        if ok:
            self.assert_no_exception('create_subshape_portion', 'paragraph_index')

    def test_create_subshape_portion_invalid_dto(self):
        """Test case for create_subshape_portion with invalid dto
        """
        param_name = self.get_test_value('create_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('create_subshape_portion', 'slide_index', 'int')
        param_path = self.get_test_value('create_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('create_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('create_subshape_portion', 'paragraph_index', 'int')
        param_dto = self.get_test_value('create_subshape_portion', 'dto', 'Portion')
        param_position = self.get_test_value('create_subshape_portion', 'position', 'int')
        param_password = self.get_test_value('create_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('create_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('create_subshape_portion', 'storage', 'str')
        param_dto = self.get_invalid_test_value('create_subshape_portion', 'dto', param_dto, 'Portion')
        self.initialize('create_subshape_portion', 'dto', param_dto)
        ok = False
        try:
            self.api.create_subshape_portion(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_subshape_portion', 'dto', param_dto)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_subshape_portion', 'dto', param_dto)
        if ok:
            self.assert_no_exception('create_subshape_portion', 'dto')

    def test_create_subshape_portion_invalid_position(self):
        """Test case for create_subshape_portion with invalid position
        """
        param_name = self.get_test_value('create_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('create_subshape_portion', 'slide_index', 'int')
        param_path = self.get_test_value('create_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('create_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('create_subshape_portion', 'paragraph_index', 'int')
        param_dto = self.get_test_value('create_subshape_portion', 'dto', 'Portion')
        param_position = self.get_test_value('create_subshape_portion', 'position', 'int')
        param_password = self.get_test_value('create_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('create_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('create_subshape_portion', 'storage', 'str')
        param_position = self.get_invalid_test_value('create_subshape_portion', 'position', param_position, 'int')
        self.initialize('create_subshape_portion', 'position', param_position)
        ok = False
        try:
            self.api.create_subshape_portion(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_subshape_portion', 'position', param_position)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_subshape_portion', 'position', param_position)
        if ok:
            self.assert_no_exception('create_subshape_portion', 'position')

    def test_create_subshape_portion_invalid_password(self):
        """Test case for create_subshape_portion with invalid password
        """
        param_name = self.get_test_value('create_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('create_subshape_portion', 'slide_index', 'int')
        param_path = self.get_test_value('create_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('create_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('create_subshape_portion', 'paragraph_index', 'int')
        param_dto = self.get_test_value('create_subshape_portion', 'dto', 'Portion')
        param_position = self.get_test_value('create_subshape_portion', 'position', 'int')
        param_password = self.get_test_value('create_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('create_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('create_subshape_portion', 'storage', 'str')
        param_password = self.get_invalid_test_value('create_subshape_portion', 'password', param_password, 'str')
        self.initialize('create_subshape_portion', 'password', param_password)
        ok = False
        try:
            self.api.create_subshape_portion(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_subshape_portion', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_subshape_portion', 'password', param_password)
        if ok:
            self.assert_no_exception('create_subshape_portion', 'password')

    def test_create_subshape_portion_invalid_folder(self):
        """Test case for create_subshape_portion with invalid folder
        """
        param_name = self.get_test_value('create_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('create_subshape_portion', 'slide_index', 'int')
        param_path = self.get_test_value('create_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('create_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('create_subshape_portion', 'paragraph_index', 'int')
        param_dto = self.get_test_value('create_subshape_portion', 'dto', 'Portion')
        param_position = self.get_test_value('create_subshape_portion', 'position', 'int')
        param_password = self.get_test_value('create_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('create_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('create_subshape_portion', 'storage', 'str')
        param_folder = self.get_invalid_test_value('create_subshape_portion', 'folder', param_folder, 'str')
        self.initialize('create_subshape_portion', 'folder', param_folder)
        ok = False
        try:
            self.api.create_subshape_portion(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_subshape_portion', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_subshape_portion', 'folder', param_folder)
        if ok:
            self.assert_no_exception('create_subshape_portion', 'folder')

    def test_create_subshape_portion_invalid_storage(self):
        """Test case for create_subshape_portion with invalid storage
        """
        param_name = self.get_test_value('create_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('create_subshape_portion', 'slide_index', 'int')
        param_path = self.get_test_value('create_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('create_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('create_subshape_portion', 'paragraph_index', 'int')
        param_dto = self.get_test_value('create_subshape_portion', 'dto', 'Portion')
        param_position = self.get_test_value('create_subshape_portion', 'position', 'int')
        param_password = self.get_test_value('create_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('create_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('create_subshape_portion', 'storage', 'str')
        param_storage = self.get_invalid_test_value('create_subshape_portion', 'storage', param_storage, 'str')
        self.initialize('create_subshape_portion', 'storage', param_storage)
        ok = False
        try:
            self.api.create_subshape_portion(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_dto, param_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_subshape_portion', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_subshape_portion', 'storage', param_storage)
        if ok:
            self.assert_no_exception('create_subshape_portion', 'storage')

    def test_create_watermark(self):
        """Test case for create_watermark
        """
        param_name = self.get_test_value('create_watermark', 'name', 'str')
        param_shape = self.get_test_value('create_watermark', 'shape', 'Shape')
        param_font_height = self.get_test_value('create_watermark', 'font_height', 'float')
        param_text = self.get_test_value('create_watermark', 'text', 'str')
        param_font_name = self.get_test_value('create_watermark', 'font_name', 'str')
        param_font_color = self.get_test_value('create_watermark', 'font_color', 'str')
        param_password = self.get_test_value('create_watermark', 'password', 'str')
        param_folder = self.get_test_value('create_watermark', 'folder', 'str')
        param_storage = self.get_test_value('create_watermark', 'storage', 'str')
        self.initialize('create_watermark', None, None)
        response = self.api.create_watermark(param_name, param_shape, param_font_height, param_text, param_font_name, param_font_color, param_password, param_folder, param_storage)
        self.assertIsNone(response)

    def test_create_watermark_invalid_name(self):
        """Test case for create_watermark with invalid name
        """
        param_name = self.get_test_value('create_watermark', 'name', 'str')
        param_shape = self.get_test_value('create_watermark', 'shape', 'Shape')
        param_font_height = self.get_test_value('create_watermark', 'font_height', 'float')
        param_text = self.get_test_value('create_watermark', 'text', 'str')
        param_font_name = self.get_test_value('create_watermark', 'font_name', 'str')
        param_font_color = self.get_test_value('create_watermark', 'font_color', 'str')
        param_password = self.get_test_value('create_watermark', 'password', 'str')
        param_folder = self.get_test_value('create_watermark', 'folder', 'str')
        param_storage = self.get_test_value('create_watermark', 'storage', 'str')
        param_name = self.get_invalid_test_value('create_watermark', 'name', param_name, 'str')
        self.initialize('create_watermark', 'name', param_name)
        ok = False
        try:
            self.api.create_watermark(param_name, param_shape, param_font_height, param_text, param_font_name, param_font_color, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_watermark', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_watermark', 'name', param_name)
        if ok:
            self.assert_no_exception('create_watermark', 'name')

    def test_create_watermark_invalid_shape(self):
        """Test case for create_watermark with invalid shape
        """
        param_name = self.get_test_value('create_watermark', 'name', 'str')
        param_shape = self.get_test_value('create_watermark', 'shape', 'Shape')
        param_font_height = self.get_test_value('create_watermark', 'font_height', 'float')
        param_text = self.get_test_value('create_watermark', 'text', 'str')
        param_font_name = self.get_test_value('create_watermark', 'font_name', 'str')
        param_font_color = self.get_test_value('create_watermark', 'font_color', 'str')
        param_password = self.get_test_value('create_watermark', 'password', 'str')
        param_folder = self.get_test_value('create_watermark', 'folder', 'str')
        param_storage = self.get_test_value('create_watermark', 'storage', 'str')
        param_shape = self.get_invalid_test_value('create_watermark', 'shape', param_shape, 'Shape')
        self.initialize('create_watermark', 'shape', param_shape)
        ok = False
        try:
            self.api.create_watermark(param_name, param_shape, param_font_height, param_text, param_font_name, param_font_color, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_watermark', 'shape', param_shape)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_watermark', 'shape', param_shape)
        if ok:
            self.assert_no_exception('create_watermark', 'shape')

    def test_create_watermark_invalid_font_height(self):
        """Test case for create_watermark with invalid font_height
        """
        param_name = self.get_test_value('create_watermark', 'name', 'str')
        param_shape = self.get_test_value('create_watermark', 'shape', 'Shape')
        param_font_height = self.get_test_value('create_watermark', 'font_height', 'float')
        param_text = self.get_test_value('create_watermark', 'text', 'str')
        param_font_name = self.get_test_value('create_watermark', 'font_name', 'str')
        param_font_color = self.get_test_value('create_watermark', 'font_color', 'str')
        param_password = self.get_test_value('create_watermark', 'password', 'str')
        param_folder = self.get_test_value('create_watermark', 'folder', 'str')
        param_storage = self.get_test_value('create_watermark', 'storage', 'str')
        param_font_height = self.get_invalid_test_value('create_watermark', 'font_height', param_font_height, 'float')
        self.initialize('create_watermark', 'font_height', param_font_height)
        ok = False
        try:
            self.api.create_watermark(param_name, param_shape, param_font_height, param_text, param_font_name, param_font_color, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_watermark', 'font_height', param_font_height)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_watermark', 'font_height', param_font_height)
        if ok:
            self.assert_no_exception('create_watermark', 'font_height')

    def test_create_watermark_invalid_text(self):
        """Test case for create_watermark with invalid text
        """
        param_name = self.get_test_value('create_watermark', 'name', 'str')
        param_shape = self.get_test_value('create_watermark', 'shape', 'Shape')
        param_font_height = self.get_test_value('create_watermark', 'font_height', 'float')
        param_text = self.get_test_value('create_watermark', 'text', 'str')
        param_font_name = self.get_test_value('create_watermark', 'font_name', 'str')
        param_font_color = self.get_test_value('create_watermark', 'font_color', 'str')
        param_password = self.get_test_value('create_watermark', 'password', 'str')
        param_folder = self.get_test_value('create_watermark', 'folder', 'str')
        param_storage = self.get_test_value('create_watermark', 'storage', 'str')
        param_text = self.get_invalid_test_value('create_watermark', 'text', param_text, 'str')
        self.initialize('create_watermark', 'text', param_text)
        ok = False
        try:
            self.api.create_watermark(param_name, param_shape, param_font_height, param_text, param_font_name, param_font_color, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_watermark', 'text', param_text)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_watermark', 'text', param_text)
        if ok:
            self.assert_no_exception('create_watermark', 'text')

    def test_create_watermark_invalid_font_name(self):
        """Test case for create_watermark with invalid font_name
        """
        param_name = self.get_test_value('create_watermark', 'name', 'str')
        param_shape = self.get_test_value('create_watermark', 'shape', 'Shape')
        param_font_height = self.get_test_value('create_watermark', 'font_height', 'float')
        param_text = self.get_test_value('create_watermark', 'text', 'str')
        param_font_name = self.get_test_value('create_watermark', 'font_name', 'str')
        param_font_color = self.get_test_value('create_watermark', 'font_color', 'str')
        param_password = self.get_test_value('create_watermark', 'password', 'str')
        param_folder = self.get_test_value('create_watermark', 'folder', 'str')
        param_storage = self.get_test_value('create_watermark', 'storage', 'str')
        param_font_name = self.get_invalid_test_value('create_watermark', 'font_name', param_font_name, 'str')
        self.initialize('create_watermark', 'font_name', param_font_name)
        ok = False
        try:
            self.api.create_watermark(param_name, param_shape, param_font_height, param_text, param_font_name, param_font_color, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_watermark', 'font_name', param_font_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_watermark', 'font_name', param_font_name)
        if ok:
            self.assert_no_exception('create_watermark', 'font_name')

    def test_create_watermark_invalid_font_color(self):
        """Test case for create_watermark with invalid font_color
        """
        param_name = self.get_test_value('create_watermark', 'name', 'str')
        param_shape = self.get_test_value('create_watermark', 'shape', 'Shape')
        param_font_height = self.get_test_value('create_watermark', 'font_height', 'float')
        param_text = self.get_test_value('create_watermark', 'text', 'str')
        param_font_name = self.get_test_value('create_watermark', 'font_name', 'str')
        param_font_color = self.get_test_value('create_watermark', 'font_color', 'str')
        param_password = self.get_test_value('create_watermark', 'password', 'str')
        param_folder = self.get_test_value('create_watermark', 'folder', 'str')
        param_storage = self.get_test_value('create_watermark', 'storage', 'str')
        param_font_color = self.get_invalid_test_value('create_watermark', 'font_color', param_font_color, 'str')
        self.initialize('create_watermark', 'font_color', param_font_color)
        ok = False
        try:
            self.api.create_watermark(param_name, param_shape, param_font_height, param_text, param_font_name, param_font_color, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_watermark', 'font_color', param_font_color)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_watermark', 'font_color', param_font_color)
        if ok:
            self.assert_no_exception('create_watermark', 'font_color')

    def test_create_watermark_invalid_password(self):
        """Test case for create_watermark with invalid password
        """
        param_name = self.get_test_value('create_watermark', 'name', 'str')
        param_shape = self.get_test_value('create_watermark', 'shape', 'Shape')
        param_font_height = self.get_test_value('create_watermark', 'font_height', 'float')
        param_text = self.get_test_value('create_watermark', 'text', 'str')
        param_font_name = self.get_test_value('create_watermark', 'font_name', 'str')
        param_font_color = self.get_test_value('create_watermark', 'font_color', 'str')
        param_password = self.get_test_value('create_watermark', 'password', 'str')
        param_folder = self.get_test_value('create_watermark', 'folder', 'str')
        param_storage = self.get_test_value('create_watermark', 'storage', 'str')
        param_password = self.get_invalid_test_value('create_watermark', 'password', param_password, 'str')
        self.initialize('create_watermark', 'password', param_password)
        ok = False
        try:
            self.api.create_watermark(param_name, param_shape, param_font_height, param_text, param_font_name, param_font_color, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_watermark', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_watermark', 'password', param_password)
        if ok:
            self.assert_no_exception('create_watermark', 'password')

    def test_create_watermark_invalid_folder(self):
        """Test case for create_watermark with invalid folder
        """
        param_name = self.get_test_value('create_watermark', 'name', 'str')
        param_shape = self.get_test_value('create_watermark', 'shape', 'Shape')
        param_font_height = self.get_test_value('create_watermark', 'font_height', 'float')
        param_text = self.get_test_value('create_watermark', 'text', 'str')
        param_font_name = self.get_test_value('create_watermark', 'font_name', 'str')
        param_font_color = self.get_test_value('create_watermark', 'font_color', 'str')
        param_password = self.get_test_value('create_watermark', 'password', 'str')
        param_folder = self.get_test_value('create_watermark', 'folder', 'str')
        param_storage = self.get_test_value('create_watermark', 'storage', 'str')
        param_folder = self.get_invalid_test_value('create_watermark', 'folder', param_folder, 'str')
        self.initialize('create_watermark', 'folder', param_folder)
        ok = False
        try:
            self.api.create_watermark(param_name, param_shape, param_font_height, param_text, param_font_name, param_font_color, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_watermark', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_watermark', 'folder', param_folder)
        if ok:
            self.assert_no_exception('create_watermark', 'folder')

    def test_create_watermark_invalid_storage(self):
        """Test case for create_watermark with invalid storage
        """
        param_name = self.get_test_value('create_watermark', 'name', 'str')
        param_shape = self.get_test_value('create_watermark', 'shape', 'Shape')
        param_font_height = self.get_test_value('create_watermark', 'font_height', 'float')
        param_text = self.get_test_value('create_watermark', 'text', 'str')
        param_font_name = self.get_test_value('create_watermark', 'font_name', 'str')
        param_font_color = self.get_test_value('create_watermark', 'font_color', 'str')
        param_password = self.get_test_value('create_watermark', 'password', 'str')
        param_folder = self.get_test_value('create_watermark', 'folder', 'str')
        param_storage = self.get_test_value('create_watermark', 'storage', 'str')
        param_storage = self.get_invalid_test_value('create_watermark', 'storage', param_storage, 'str')
        self.initialize('create_watermark', 'storage', param_storage)
        ok = False
        try:
            self.api.create_watermark(param_name, param_shape, param_font_height, param_text, param_font_name, param_font_color, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_watermark', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_watermark', 'storage', param_storage)
        if ok:
            self.assert_no_exception('create_watermark', 'storage')

    def test_create_watermark_online(self):
        """Test case for create_watermark_online
        """
        param_document = self.get_test_value('create_watermark_online', 'document', 'file')
        param_shape = self.get_test_value('create_watermark_online', 'shape', 'Shape')
        param_font_height = self.get_test_value('create_watermark_online', 'font_height', 'float')
        param_text = self.get_test_value('create_watermark_online', 'text', 'str')
        param_font_name = self.get_test_value('create_watermark_online', 'font_name', 'str')
        param_font_color = self.get_test_value('create_watermark_online', 'font_color', 'str')
        param_password = self.get_test_value('create_watermark_online', 'password', 'str')
        self.initialize('create_watermark_online', None, None)
        response = self.api.create_watermark_online(param_document, param_shape, param_font_height, param_text, param_font_name, param_font_color, param_password)
        self.assertTrue(isinstance(response, str))
        self.assertTrue(len(response) > 0)

    def test_create_watermark_online_invalid_document(self):
        """Test case for create_watermark_online with invalid document
        """
        param_document = self.get_test_value('create_watermark_online', 'document', 'file')
        param_shape = self.get_test_value('create_watermark_online', 'shape', 'Shape')
        param_font_height = self.get_test_value('create_watermark_online', 'font_height', 'float')
        param_text = self.get_test_value('create_watermark_online', 'text', 'str')
        param_font_name = self.get_test_value('create_watermark_online', 'font_name', 'str')
        param_font_color = self.get_test_value('create_watermark_online', 'font_color', 'str')
        param_password = self.get_test_value('create_watermark_online', 'password', 'str')
        param_document = self.get_invalid_test_value('create_watermark_online', 'document', param_document, 'file')
        self.initialize('create_watermark_online', 'document', param_document)
        ok = False
        try:
            self.api.create_watermark_online(param_document, param_shape, param_font_height, param_text, param_font_name, param_font_color, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_watermark_online', 'document', param_document)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_watermark_online', 'document', param_document)
        if ok:
            self.assert_no_exception('create_watermark_online', 'document')

    def test_create_watermark_online_invalid_shape(self):
        """Test case for create_watermark_online with invalid shape
        """
        param_document = self.get_test_value('create_watermark_online', 'document', 'file')
        param_shape = self.get_test_value('create_watermark_online', 'shape', 'Shape')
        param_font_height = self.get_test_value('create_watermark_online', 'font_height', 'float')
        param_text = self.get_test_value('create_watermark_online', 'text', 'str')
        param_font_name = self.get_test_value('create_watermark_online', 'font_name', 'str')
        param_font_color = self.get_test_value('create_watermark_online', 'font_color', 'str')
        param_password = self.get_test_value('create_watermark_online', 'password', 'str')
        param_shape = self.get_invalid_test_value('create_watermark_online', 'shape', param_shape, 'Shape')
        self.initialize('create_watermark_online', 'shape', param_shape)
        ok = False
        try:
            self.api.create_watermark_online(param_document, param_shape, param_font_height, param_text, param_font_name, param_font_color, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_watermark_online', 'shape', param_shape)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_watermark_online', 'shape', param_shape)
        if ok:
            self.assert_no_exception('create_watermark_online', 'shape')

    def test_create_watermark_online_invalid_font_height(self):
        """Test case for create_watermark_online with invalid font_height
        """
        param_document = self.get_test_value('create_watermark_online', 'document', 'file')
        param_shape = self.get_test_value('create_watermark_online', 'shape', 'Shape')
        param_font_height = self.get_test_value('create_watermark_online', 'font_height', 'float')
        param_text = self.get_test_value('create_watermark_online', 'text', 'str')
        param_font_name = self.get_test_value('create_watermark_online', 'font_name', 'str')
        param_font_color = self.get_test_value('create_watermark_online', 'font_color', 'str')
        param_password = self.get_test_value('create_watermark_online', 'password', 'str')
        param_font_height = self.get_invalid_test_value('create_watermark_online', 'font_height', param_font_height, 'float')
        self.initialize('create_watermark_online', 'font_height', param_font_height)
        ok = False
        try:
            self.api.create_watermark_online(param_document, param_shape, param_font_height, param_text, param_font_name, param_font_color, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_watermark_online', 'font_height', param_font_height)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_watermark_online', 'font_height', param_font_height)
        if ok:
            self.assert_no_exception('create_watermark_online', 'font_height')

    def test_create_watermark_online_invalid_text(self):
        """Test case for create_watermark_online with invalid text
        """
        param_document = self.get_test_value('create_watermark_online', 'document', 'file')
        param_shape = self.get_test_value('create_watermark_online', 'shape', 'Shape')
        param_font_height = self.get_test_value('create_watermark_online', 'font_height', 'float')
        param_text = self.get_test_value('create_watermark_online', 'text', 'str')
        param_font_name = self.get_test_value('create_watermark_online', 'font_name', 'str')
        param_font_color = self.get_test_value('create_watermark_online', 'font_color', 'str')
        param_password = self.get_test_value('create_watermark_online', 'password', 'str')
        param_text = self.get_invalid_test_value('create_watermark_online', 'text', param_text, 'str')
        self.initialize('create_watermark_online', 'text', param_text)
        ok = False
        try:
            self.api.create_watermark_online(param_document, param_shape, param_font_height, param_text, param_font_name, param_font_color, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_watermark_online', 'text', param_text)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_watermark_online', 'text', param_text)
        if ok:
            self.assert_no_exception('create_watermark_online', 'text')

    def test_create_watermark_online_invalid_font_name(self):
        """Test case for create_watermark_online with invalid font_name
        """
        param_document = self.get_test_value('create_watermark_online', 'document', 'file')
        param_shape = self.get_test_value('create_watermark_online', 'shape', 'Shape')
        param_font_height = self.get_test_value('create_watermark_online', 'font_height', 'float')
        param_text = self.get_test_value('create_watermark_online', 'text', 'str')
        param_font_name = self.get_test_value('create_watermark_online', 'font_name', 'str')
        param_font_color = self.get_test_value('create_watermark_online', 'font_color', 'str')
        param_password = self.get_test_value('create_watermark_online', 'password', 'str')
        param_font_name = self.get_invalid_test_value('create_watermark_online', 'font_name', param_font_name, 'str')
        self.initialize('create_watermark_online', 'font_name', param_font_name)
        ok = False
        try:
            self.api.create_watermark_online(param_document, param_shape, param_font_height, param_text, param_font_name, param_font_color, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_watermark_online', 'font_name', param_font_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_watermark_online', 'font_name', param_font_name)
        if ok:
            self.assert_no_exception('create_watermark_online', 'font_name')

    def test_create_watermark_online_invalid_font_color(self):
        """Test case for create_watermark_online with invalid font_color
        """
        param_document = self.get_test_value('create_watermark_online', 'document', 'file')
        param_shape = self.get_test_value('create_watermark_online', 'shape', 'Shape')
        param_font_height = self.get_test_value('create_watermark_online', 'font_height', 'float')
        param_text = self.get_test_value('create_watermark_online', 'text', 'str')
        param_font_name = self.get_test_value('create_watermark_online', 'font_name', 'str')
        param_font_color = self.get_test_value('create_watermark_online', 'font_color', 'str')
        param_password = self.get_test_value('create_watermark_online', 'password', 'str')
        param_font_color = self.get_invalid_test_value('create_watermark_online', 'font_color', param_font_color, 'str')
        self.initialize('create_watermark_online', 'font_color', param_font_color)
        ok = False
        try:
            self.api.create_watermark_online(param_document, param_shape, param_font_height, param_text, param_font_name, param_font_color, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_watermark_online', 'font_color', param_font_color)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_watermark_online', 'font_color', param_font_color)
        if ok:
            self.assert_no_exception('create_watermark_online', 'font_color')

    def test_create_watermark_online_invalid_password(self):
        """Test case for create_watermark_online with invalid password
        """
        param_document = self.get_test_value('create_watermark_online', 'document', 'file')
        param_shape = self.get_test_value('create_watermark_online', 'shape', 'Shape')
        param_font_height = self.get_test_value('create_watermark_online', 'font_height', 'float')
        param_text = self.get_test_value('create_watermark_online', 'text', 'str')
        param_font_name = self.get_test_value('create_watermark_online', 'font_name', 'str')
        param_font_color = self.get_test_value('create_watermark_online', 'font_color', 'str')
        param_password = self.get_test_value('create_watermark_online', 'password', 'str')
        param_password = self.get_invalid_test_value('create_watermark_online', 'password', param_password, 'str')
        self.initialize('create_watermark_online', 'password', param_password)
        ok = False
        try:
            self.api.create_watermark_online(param_document, param_shape, param_font_height, param_text, param_font_name, param_font_color, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'create_watermark_online', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'create_watermark_online', 'password', param_password)
        if ok:
            self.assert_no_exception('create_watermark_online', 'password')

    def test_delete_animation(self):
        """Test case for delete_animation
        """
        param_name = self.get_test_value('delete_animation', 'name', 'str')
        param_slide_index = self.get_test_value('delete_animation', 'slide_index', 'int')
        param_password = self.get_test_value('delete_animation', 'password', 'str')
        param_folder = self.get_test_value('delete_animation', 'folder', 'str')
        param_storage = self.get_test_value('delete_animation', 'storage', 'str')
        self.initialize('delete_animation', None, None)
        response = self.api.delete_animation(param_name, param_slide_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_delete_animation_invalid_name(self):
        """Test case for delete_animation with invalid name
        """
        param_name = self.get_test_value('delete_animation', 'name', 'str')
        param_slide_index = self.get_test_value('delete_animation', 'slide_index', 'int')
        param_password = self.get_test_value('delete_animation', 'password', 'str')
        param_folder = self.get_test_value('delete_animation', 'folder', 'str')
        param_storage = self.get_test_value('delete_animation', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_animation', 'name', param_name, 'str')
        self.initialize('delete_animation', 'name', param_name)
        ok = False
        try:
            self.api.delete_animation(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_animation', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_animation', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_animation', 'name')

    def test_delete_animation_invalid_slide_index(self):
        """Test case for delete_animation with invalid slide_index
        """
        param_name = self.get_test_value('delete_animation', 'name', 'str')
        param_slide_index = self.get_test_value('delete_animation', 'slide_index', 'int')
        param_password = self.get_test_value('delete_animation', 'password', 'str')
        param_folder = self.get_test_value('delete_animation', 'folder', 'str')
        param_storage = self.get_test_value('delete_animation', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('delete_animation', 'slide_index', param_slide_index, 'int')
        self.initialize('delete_animation', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.delete_animation(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_animation', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_animation', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('delete_animation', 'slide_index')

    def test_delete_animation_invalid_password(self):
        """Test case for delete_animation with invalid password
        """
        param_name = self.get_test_value('delete_animation', 'name', 'str')
        param_slide_index = self.get_test_value('delete_animation', 'slide_index', 'int')
        param_password = self.get_test_value('delete_animation', 'password', 'str')
        param_folder = self.get_test_value('delete_animation', 'folder', 'str')
        param_storage = self.get_test_value('delete_animation', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_animation', 'password', param_password, 'str')
        self.initialize('delete_animation', 'password', param_password)
        ok = False
        try:
            self.api.delete_animation(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_animation', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_animation', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_animation', 'password')

    def test_delete_animation_invalid_folder(self):
        """Test case for delete_animation with invalid folder
        """
        param_name = self.get_test_value('delete_animation', 'name', 'str')
        param_slide_index = self.get_test_value('delete_animation', 'slide_index', 'int')
        param_password = self.get_test_value('delete_animation', 'password', 'str')
        param_folder = self.get_test_value('delete_animation', 'folder', 'str')
        param_storage = self.get_test_value('delete_animation', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_animation', 'folder', param_folder, 'str')
        self.initialize('delete_animation', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_animation(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_animation', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_animation', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_animation', 'folder')

    def test_delete_animation_invalid_storage(self):
        """Test case for delete_animation with invalid storage
        """
        param_name = self.get_test_value('delete_animation', 'name', 'str')
        param_slide_index = self.get_test_value('delete_animation', 'slide_index', 'int')
        param_password = self.get_test_value('delete_animation', 'password', 'str')
        param_folder = self.get_test_value('delete_animation', 'folder', 'str')
        param_storage = self.get_test_value('delete_animation', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_animation', 'storage', param_storage, 'str')
        self.initialize('delete_animation', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_animation(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_animation', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_animation', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_animation', 'storage')

    def test_delete_animation_effect(self):
        """Test case for delete_animation_effect
        """
        param_name = self.get_test_value('delete_animation_effect', 'name', 'str')
        param_slide_index = self.get_test_value('delete_animation_effect', 'slide_index', 'int')
        param_effect_index = self.get_test_value('delete_animation_effect', 'effect_index', 'int')
        param_password = self.get_test_value('delete_animation_effect', 'password', 'str')
        param_folder = self.get_test_value('delete_animation_effect', 'folder', 'str')
        param_storage = self.get_test_value('delete_animation_effect', 'storage', 'str')
        self.initialize('delete_animation_effect', None, None)
        response = self.api.delete_animation_effect(param_name, param_slide_index, param_effect_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_delete_animation_effect_invalid_name(self):
        """Test case for delete_animation_effect with invalid name
        """
        param_name = self.get_test_value('delete_animation_effect', 'name', 'str')
        param_slide_index = self.get_test_value('delete_animation_effect', 'slide_index', 'int')
        param_effect_index = self.get_test_value('delete_animation_effect', 'effect_index', 'int')
        param_password = self.get_test_value('delete_animation_effect', 'password', 'str')
        param_folder = self.get_test_value('delete_animation_effect', 'folder', 'str')
        param_storage = self.get_test_value('delete_animation_effect', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_animation_effect', 'name', param_name, 'str')
        self.initialize('delete_animation_effect', 'name', param_name)
        ok = False
        try:
            self.api.delete_animation_effect(param_name, param_slide_index, param_effect_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_animation_effect', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_animation_effect', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_animation_effect', 'name')

    def test_delete_animation_effect_invalid_slide_index(self):
        """Test case for delete_animation_effect with invalid slide_index
        """
        param_name = self.get_test_value('delete_animation_effect', 'name', 'str')
        param_slide_index = self.get_test_value('delete_animation_effect', 'slide_index', 'int')
        param_effect_index = self.get_test_value('delete_animation_effect', 'effect_index', 'int')
        param_password = self.get_test_value('delete_animation_effect', 'password', 'str')
        param_folder = self.get_test_value('delete_animation_effect', 'folder', 'str')
        param_storage = self.get_test_value('delete_animation_effect', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('delete_animation_effect', 'slide_index', param_slide_index, 'int')
        self.initialize('delete_animation_effect', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.delete_animation_effect(param_name, param_slide_index, param_effect_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_animation_effect', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_animation_effect', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('delete_animation_effect', 'slide_index')

    def test_delete_animation_effect_invalid_effect_index(self):
        """Test case for delete_animation_effect with invalid effect_index
        """
        param_name = self.get_test_value('delete_animation_effect', 'name', 'str')
        param_slide_index = self.get_test_value('delete_animation_effect', 'slide_index', 'int')
        param_effect_index = self.get_test_value('delete_animation_effect', 'effect_index', 'int')
        param_password = self.get_test_value('delete_animation_effect', 'password', 'str')
        param_folder = self.get_test_value('delete_animation_effect', 'folder', 'str')
        param_storage = self.get_test_value('delete_animation_effect', 'storage', 'str')
        param_effect_index = self.get_invalid_test_value('delete_animation_effect', 'effect_index', param_effect_index, 'int')
        self.initialize('delete_animation_effect', 'effect_index', param_effect_index)
        ok = False
        try:
            self.api.delete_animation_effect(param_name, param_slide_index, param_effect_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_animation_effect', 'effect_index', param_effect_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_animation_effect', 'effect_index', param_effect_index)
        if ok:
            self.assert_no_exception('delete_animation_effect', 'effect_index')

    def test_delete_animation_effect_invalid_password(self):
        """Test case for delete_animation_effect with invalid password
        """
        param_name = self.get_test_value('delete_animation_effect', 'name', 'str')
        param_slide_index = self.get_test_value('delete_animation_effect', 'slide_index', 'int')
        param_effect_index = self.get_test_value('delete_animation_effect', 'effect_index', 'int')
        param_password = self.get_test_value('delete_animation_effect', 'password', 'str')
        param_folder = self.get_test_value('delete_animation_effect', 'folder', 'str')
        param_storage = self.get_test_value('delete_animation_effect', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_animation_effect', 'password', param_password, 'str')
        self.initialize('delete_animation_effect', 'password', param_password)
        ok = False
        try:
            self.api.delete_animation_effect(param_name, param_slide_index, param_effect_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_animation_effect', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_animation_effect', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_animation_effect', 'password')

    def test_delete_animation_effect_invalid_folder(self):
        """Test case for delete_animation_effect with invalid folder
        """
        param_name = self.get_test_value('delete_animation_effect', 'name', 'str')
        param_slide_index = self.get_test_value('delete_animation_effect', 'slide_index', 'int')
        param_effect_index = self.get_test_value('delete_animation_effect', 'effect_index', 'int')
        param_password = self.get_test_value('delete_animation_effect', 'password', 'str')
        param_folder = self.get_test_value('delete_animation_effect', 'folder', 'str')
        param_storage = self.get_test_value('delete_animation_effect', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_animation_effect', 'folder', param_folder, 'str')
        self.initialize('delete_animation_effect', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_animation_effect(param_name, param_slide_index, param_effect_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_animation_effect', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_animation_effect', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_animation_effect', 'folder')

    def test_delete_animation_effect_invalid_storage(self):
        """Test case for delete_animation_effect with invalid storage
        """
        param_name = self.get_test_value('delete_animation_effect', 'name', 'str')
        param_slide_index = self.get_test_value('delete_animation_effect', 'slide_index', 'int')
        param_effect_index = self.get_test_value('delete_animation_effect', 'effect_index', 'int')
        param_password = self.get_test_value('delete_animation_effect', 'password', 'str')
        param_folder = self.get_test_value('delete_animation_effect', 'folder', 'str')
        param_storage = self.get_test_value('delete_animation_effect', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_animation_effect', 'storage', param_storage, 'str')
        self.initialize('delete_animation_effect', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_animation_effect(param_name, param_slide_index, param_effect_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_animation_effect', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_animation_effect', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_animation_effect', 'storage')

    def test_delete_animation_interactive_sequence(self):
        """Test case for delete_animation_interactive_sequence
        """
        param_name = self.get_test_value('delete_animation_interactive_sequence', 'name', 'str')
        param_slide_index = self.get_test_value('delete_animation_interactive_sequence', 'slide_index', 'int')
        param_sequence_index = self.get_test_value('delete_animation_interactive_sequence', 'sequence_index', 'int')
        param_password = self.get_test_value('delete_animation_interactive_sequence', 'password', 'str')
        param_folder = self.get_test_value('delete_animation_interactive_sequence', 'folder', 'str')
        param_storage = self.get_test_value('delete_animation_interactive_sequence', 'storage', 'str')
        self.initialize('delete_animation_interactive_sequence', None, None)
        response = self.api.delete_animation_interactive_sequence(param_name, param_slide_index, param_sequence_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_delete_animation_interactive_sequence_invalid_name(self):
        """Test case for delete_animation_interactive_sequence with invalid name
        """
        param_name = self.get_test_value('delete_animation_interactive_sequence', 'name', 'str')
        param_slide_index = self.get_test_value('delete_animation_interactive_sequence', 'slide_index', 'int')
        param_sequence_index = self.get_test_value('delete_animation_interactive_sequence', 'sequence_index', 'int')
        param_password = self.get_test_value('delete_animation_interactive_sequence', 'password', 'str')
        param_folder = self.get_test_value('delete_animation_interactive_sequence', 'folder', 'str')
        param_storage = self.get_test_value('delete_animation_interactive_sequence', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_animation_interactive_sequence', 'name', param_name, 'str')
        self.initialize('delete_animation_interactive_sequence', 'name', param_name)
        ok = False
        try:
            self.api.delete_animation_interactive_sequence(param_name, param_slide_index, param_sequence_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_animation_interactive_sequence', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_animation_interactive_sequence', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_animation_interactive_sequence', 'name')

    def test_delete_animation_interactive_sequence_invalid_slide_index(self):
        """Test case for delete_animation_interactive_sequence with invalid slide_index
        """
        param_name = self.get_test_value('delete_animation_interactive_sequence', 'name', 'str')
        param_slide_index = self.get_test_value('delete_animation_interactive_sequence', 'slide_index', 'int')
        param_sequence_index = self.get_test_value('delete_animation_interactive_sequence', 'sequence_index', 'int')
        param_password = self.get_test_value('delete_animation_interactive_sequence', 'password', 'str')
        param_folder = self.get_test_value('delete_animation_interactive_sequence', 'folder', 'str')
        param_storage = self.get_test_value('delete_animation_interactive_sequence', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('delete_animation_interactive_sequence', 'slide_index', param_slide_index, 'int')
        self.initialize('delete_animation_interactive_sequence', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.delete_animation_interactive_sequence(param_name, param_slide_index, param_sequence_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_animation_interactive_sequence', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_animation_interactive_sequence', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('delete_animation_interactive_sequence', 'slide_index')

    def test_delete_animation_interactive_sequence_invalid_sequence_index(self):
        """Test case for delete_animation_interactive_sequence with invalid sequence_index
        """
        param_name = self.get_test_value('delete_animation_interactive_sequence', 'name', 'str')
        param_slide_index = self.get_test_value('delete_animation_interactive_sequence', 'slide_index', 'int')
        param_sequence_index = self.get_test_value('delete_animation_interactive_sequence', 'sequence_index', 'int')
        param_password = self.get_test_value('delete_animation_interactive_sequence', 'password', 'str')
        param_folder = self.get_test_value('delete_animation_interactive_sequence', 'folder', 'str')
        param_storage = self.get_test_value('delete_animation_interactive_sequence', 'storage', 'str')
        param_sequence_index = self.get_invalid_test_value('delete_animation_interactive_sequence', 'sequence_index', param_sequence_index, 'int')
        self.initialize('delete_animation_interactive_sequence', 'sequence_index', param_sequence_index)
        ok = False
        try:
            self.api.delete_animation_interactive_sequence(param_name, param_slide_index, param_sequence_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_animation_interactive_sequence', 'sequence_index', param_sequence_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_animation_interactive_sequence', 'sequence_index', param_sequence_index)
        if ok:
            self.assert_no_exception('delete_animation_interactive_sequence', 'sequence_index')

    def test_delete_animation_interactive_sequence_invalid_password(self):
        """Test case for delete_animation_interactive_sequence with invalid password
        """
        param_name = self.get_test_value('delete_animation_interactive_sequence', 'name', 'str')
        param_slide_index = self.get_test_value('delete_animation_interactive_sequence', 'slide_index', 'int')
        param_sequence_index = self.get_test_value('delete_animation_interactive_sequence', 'sequence_index', 'int')
        param_password = self.get_test_value('delete_animation_interactive_sequence', 'password', 'str')
        param_folder = self.get_test_value('delete_animation_interactive_sequence', 'folder', 'str')
        param_storage = self.get_test_value('delete_animation_interactive_sequence', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_animation_interactive_sequence', 'password', param_password, 'str')
        self.initialize('delete_animation_interactive_sequence', 'password', param_password)
        ok = False
        try:
            self.api.delete_animation_interactive_sequence(param_name, param_slide_index, param_sequence_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_animation_interactive_sequence', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_animation_interactive_sequence', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_animation_interactive_sequence', 'password')

    def test_delete_animation_interactive_sequence_invalid_folder(self):
        """Test case for delete_animation_interactive_sequence with invalid folder
        """
        param_name = self.get_test_value('delete_animation_interactive_sequence', 'name', 'str')
        param_slide_index = self.get_test_value('delete_animation_interactive_sequence', 'slide_index', 'int')
        param_sequence_index = self.get_test_value('delete_animation_interactive_sequence', 'sequence_index', 'int')
        param_password = self.get_test_value('delete_animation_interactive_sequence', 'password', 'str')
        param_folder = self.get_test_value('delete_animation_interactive_sequence', 'folder', 'str')
        param_storage = self.get_test_value('delete_animation_interactive_sequence', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_animation_interactive_sequence', 'folder', param_folder, 'str')
        self.initialize('delete_animation_interactive_sequence', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_animation_interactive_sequence(param_name, param_slide_index, param_sequence_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_animation_interactive_sequence', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_animation_interactive_sequence', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_animation_interactive_sequence', 'folder')

    def test_delete_animation_interactive_sequence_invalid_storage(self):
        """Test case for delete_animation_interactive_sequence with invalid storage
        """
        param_name = self.get_test_value('delete_animation_interactive_sequence', 'name', 'str')
        param_slide_index = self.get_test_value('delete_animation_interactive_sequence', 'slide_index', 'int')
        param_sequence_index = self.get_test_value('delete_animation_interactive_sequence', 'sequence_index', 'int')
        param_password = self.get_test_value('delete_animation_interactive_sequence', 'password', 'str')
        param_folder = self.get_test_value('delete_animation_interactive_sequence', 'folder', 'str')
        param_storage = self.get_test_value('delete_animation_interactive_sequence', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_animation_interactive_sequence', 'storage', param_storage, 'str')
        self.initialize('delete_animation_interactive_sequence', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_animation_interactive_sequence(param_name, param_slide_index, param_sequence_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_animation_interactive_sequence', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_animation_interactive_sequence', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_animation_interactive_sequence', 'storage')

    def test_delete_animation_interactive_sequence_effect(self):
        """Test case for delete_animation_interactive_sequence_effect
        """
        param_name = self.get_test_value('delete_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('delete_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_sequence_index = self.get_test_value('delete_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect_index = self.get_test_value('delete_animation_interactive_sequence_effect', 'effect_index', 'int')
        param_password = self.get_test_value('delete_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('delete_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('delete_animation_interactive_sequence_effect', 'storage', 'str')
        self.initialize('delete_animation_interactive_sequence_effect', None, None)
        response = self.api.delete_animation_interactive_sequence_effect(param_name, param_slide_index, param_sequence_index, param_effect_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_delete_animation_interactive_sequence_effect_invalid_name(self):
        """Test case for delete_animation_interactive_sequence_effect with invalid name
        """
        param_name = self.get_test_value('delete_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('delete_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_sequence_index = self.get_test_value('delete_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect_index = self.get_test_value('delete_animation_interactive_sequence_effect', 'effect_index', 'int')
        param_password = self.get_test_value('delete_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('delete_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('delete_animation_interactive_sequence_effect', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_animation_interactive_sequence_effect', 'name', param_name, 'str')
        self.initialize('delete_animation_interactive_sequence_effect', 'name', param_name)
        ok = False
        try:
            self.api.delete_animation_interactive_sequence_effect(param_name, param_slide_index, param_sequence_index, param_effect_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_animation_interactive_sequence_effect', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_animation_interactive_sequence_effect', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_animation_interactive_sequence_effect', 'name')

    def test_delete_animation_interactive_sequence_effect_invalid_slide_index(self):
        """Test case for delete_animation_interactive_sequence_effect with invalid slide_index
        """
        param_name = self.get_test_value('delete_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('delete_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_sequence_index = self.get_test_value('delete_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect_index = self.get_test_value('delete_animation_interactive_sequence_effect', 'effect_index', 'int')
        param_password = self.get_test_value('delete_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('delete_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('delete_animation_interactive_sequence_effect', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('delete_animation_interactive_sequence_effect', 'slide_index', param_slide_index, 'int')
        self.initialize('delete_animation_interactive_sequence_effect', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.delete_animation_interactive_sequence_effect(param_name, param_slide_index, param_sequence_index, param_effect_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_animation_interactive_sequence_effect', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_animation_interactive_sequence_effect', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('delete_animation_interactive_sequence_effect', 'slide_index')

    def test_delete_animation_interactive_sequence_effect_invalid_sequence_index(self):
        """Test case for delete_animation_interactive_sequence_effect with invalid sequence_index
        """
        param_name = self.get_test_value('delete_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('delete_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_sequence_index = self.get_test_value('delete_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect_index = self.get_test_value('delete_animation_interactive_sequence_effect', 'effect_index', 'int')
        param_password = self.get_test_value('delete_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('delete_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('delete_animation_interactive_sequence_effect', 'storage', 'str')
        param_sequence_index = self.get_invalid_test_value('delete_animation_interactive_sequence_effect', 'sequence_index', param_sequence_index, 'int')
        self.initialize('delete_animation_interactive_sequence_effect', 'sequence_index', param_sequence_index)
        ok = False
        try:
            self.api.delete_animation_interactive_sequence_effect(param_name, param_slide_index, param_sequence_index, param_effect_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_animation_interactive_sequence_effect', 'sequence_index', param_sequence_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_animation_interactive_sequence_effect', 'sequence_index', param_sequence_index)
        if ok:
            self.assert_no_exception('delete_animation_interactive_sequence_effect', 'sequence_index')

    def test_delete_animation_interactive_sequence_effect_invalid_effect_index(self):
        """Test case for delete_animation_interactive_sequence_effect with invalid effect_index
        """
        param_name = self.get_test_value('delete_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('delete_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_sequence_index = self.get_test_value('delete_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect_index = self.get_test_value('delete_animation_interactive_sequence_effect', 'effect_index', 'int')
        param_password = self.get_test_value('delete_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('delete_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('delete_animation_interactive_sequence_effect', 'storage', 'str')
        param_effect_index = self.get_invalid_test_value('delete_animation_interactive_sequence_effect', 'effect_index', param_effect_index, 'int')
        self.initialize('delete_animation_interactive_sequence_effect', 'effect_index', param_effect_index)
        ok = False
        try:
            self.api.delete_animation_interactive_sequence_effect(param_name, param_slide_index, param_sequence_index, param_effect_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_animation_interactive_sequence_effect', 'effect_index', param_effect_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_animation_interactive_sequence_effect', 'effect_index', param_effect_index)
        if ok:
            self.assert_no_exception('delete_animation_interactive_sequence_effect', 'effect_index')

    def test_delete_animation_interactive_sequence_effect_invalid_password(self):
        """Test case for delete_animation_interactive_sequence_effect with invalid password
        """
        param_name = self.get_test_value('delete_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('delete_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_sequence_index = self.get_test_value('delete_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect_index = self.get_test_value('delete_animation_interactive_sequence_effect', 'effect_index', 'int')
        param_password = self.get_test_value('delete_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('delete_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('delete_animation_interactive_sequence_effect', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_animation_interactive_sequence_effect', 'password', param_password, 'str')
        self.initialize('delete_animation_interactive_sequence_effect', 'password', param_password)
        ok = False
        try:
            self.api.delete_animation_interactive_sequence_effect(param_name, param_slide_index, param_sequence_index, param_effect_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_animation_interactive_sequence_effect', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_animation_interactive_sequence_effect', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_animation_interactive_sequence_effect', 'password')

    def test_delete_animation_interactive_sequence_effect_invalid_folder(self):
        """Test case for delete_animation_interactive_sequence_effect with invalid folder
        """
        param_name = self.get_test_value('delete_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('delete_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_sequence_index = self.get_test_value('delete_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect_index = self.get_test_value('delete_animation_interactive_sequence_effect', 'effect_index', 'int')
        param_password = self.get_test_value('delete_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('delete_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('delete_animation_interactive_sequence_effect', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_animation_interactive_sequence_effect', 'folder', param_folder, 'str')
        self.initialize('delete_animation_interactive_sequence_effect', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_animation_interactive_sequence_effect(param_name, param_slide_index, param_sequence_index, param_effect_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_animation_interactive_sequence_effect', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_animation_interactive_sequence_effect', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_animation_interactive_sequence_effect', 'folder')

    def test_delete_animation_interactive_sequence_effect_invalid_storage(self):
        """Test case for delete_animation_interactive_sequence_effect with invalid storage
        """
        param_name = self.get_test_value('delete_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('delete_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_sequence_index = self.get_test_value('delete_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect_index = self.get_test_value('delete_animation_interactive_sequence_effect', 'effect_index', 'int')
        param_password = self.get_test_value('delete_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('delete_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('delete_animation_interactive_sequence_effect', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_animation_interactive_sequence_effect', 'storage', param_storage, 'str')
        self.initialize('delete_animation_interactive_sequence_effect', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_animation_interactive_sequence_effect(param_name, param_slide_index, param_sequence_index, param_effect_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_animation_interactive_sequence_effect', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_animation_interactive_sequence_effect', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_animation_interactive_sequence_effect', 'storage')

    def test_delete_animation_interactive_sequences(self):
        """Test case for delete_animation_interactive_sequences
        """
        param_name = self.get_test_value('delete_animation_interactive_sequences', 'name', 'str')
        param_slide_index = self.get_test_value('delete_animation_interactive_sequences', 'slide_index', 'int')
        param_password = self.get_test_value('delete_animation_interactive_sequences', 'password', 'str')
        param_folder = self.get_test_value('delete_animation_interactive_sequences', 'folder', 'str')
        param_storage = self.get_test_value('delete_animation_interactive_sequences', 'storage', 'str')
        self.initialize('delete_animation_interactive_sequences', None, None)
        response = self.api.delete_animation_interactive_sequences(param_name, param_slide_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_delete_animation_interactive_sequences_invalid_name(self):
        """Test case for delete_animation_interactive_sequences with invalid name
        """
        param_name = self.get_test_value('delete_animation_interactive_sequences', 'name', 'str')
        param_slide_index = self.get_test_value('delete_animation_interactive_sequences', 'slide_index', 'int')
        param_password = self.get_test_value('delete_animation_interactive_sequences', 'password', 'str')
        param_folder = self.get_test_value('delete_animation_interactive_sequences', 'folder', 'str')
        param_storage = self.get_test_value('delete_animation_interactive_sequences', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_animation_interactive_sequences', 'name', param_name, 'str')
        self.initialize('delete_animation_interactive_sequences', 'name', param_name)
        ok = False
        try:
            self.api.delete_animation_interactive_sequences(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_animation_interactive_sequences', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_animation_interactive_sequences', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_animation_interactive_sequences', 'name')

    def test_delete_animation_interactive_sequences_invalid_slide_index(self):
        """Test case for delete_animation_interactive_sequences with invalid slide_index
        """
        param_name = self.get_test_value('delete_animation_interactive_sequences', 'name', 'str')
        param_slide_index = self.get_test_value('delete_animation_interactive_sequences', 'slide_index', 'int')
        param_password = self.get_test_value('delete_animation_interactive_sequences', 'password', 'str')
        param_folder = self.get_test_value('delete_animation_interactive_sequences', 'folder', 'str')
        param_storage = self.get_test_value('delete_animation_interactive_sequences', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('delete_animation_interactive_sequences', 'slide_index', param_slide_index, 'int')
        self.initialize('delete_animation_interactive_sequences', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.delete_animation_interactive_sequences(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_animation_interactive_sequences', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_animation_interactive_sequences', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('delete_animation_interactive_sequences', 'slide_index')

    def test_delete_animation_interactive_sequences_invalid_password(self):
        """Test case for delete_animation_interactive_sequences with invalid password
        """
        param_name = self.get_test_value('delete_animation_interactive_sequences', 'name', 'str')
        param_slide_index = self.get_test_value('delete_animation_interactive_sequences', 'slide_index', 'int')
        param_password = self.get_test_value('delete_animation_interactive_sequences', 'password', 'str')
        param_folder = self.get_test_value('delete_animation_interactive_sequences', 'folder', 'str')
        param_storage = self.get_test_value('delete_animation_interactive_sequences', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_animation_interactive_sequences', 'password', param_password, 'str')
        self.initialize('delete_animation_interactive_sequences', 'password', param_password)
        ok = False
        try:
            self.api.delete_animation_interactive_sequences(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_animation_interactive_sequences', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_animation_interactive_sequences', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_animation_interactive_sequences', 'password')

    def test_delete_animation_interactive_sequences_invalid_folder(self):
        """Test case for delete_animation_interactive_sequences with invalid folder
        """
        param_name = self.get_test_value('delete_animation_interactive_sequences', 'name', 'str')
        param_slide_index = self.get_test_value('delete_animation_interactive_sequences', 'slide_index', 'int')
        param_password = self.get_test_value('delete_animation_interactive_sequences', 'password', 'str')
        param_folder = self.get_test_value('delete_animation_interactive_sequences', 'folder', 'str')
        param_storage = self.get_test_value('delete_animation_interactive_sequences', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_animation_interactive_sequences', 'folder', param_folder, 'str')
        self.initialize('delete_animation_interactive_sequences', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_animation_interactive_sequences(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_animation_interactive_sequences', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_animation_interactive_sequences', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_animation_interactive_sequences', 'folder')

    def test_delete_animation_interactive_sequences_invalid_storage(self):
        """Test case for delete_animation_interactive_sequences with invalid storage
        """
        param_name = self.get_test_value('delete_animation_interactive_sequences', 'name', 'str')
        param_slide_index = self.get_test_value('delete_animation_interactive_sequences', 'slide_index', 'int')
        param_password = self.get_test_value('delete_animation_interactive_sequences', 'password', 'str')
        param_folder = self.get_test_value('delete_animation_interactive_sequences', 'folder', 'str')
        param_storage = self.get_test_value('delete_animation_interactive_sequences', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_animation_interactive_sequences', 'storage', param_storage, 'str')
        self.initialize('delete_animation_interactive_sequences', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_animation_interactive_sequences(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_animation_interactive_sequences', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_animation_interactive_sequences', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_animation_interactive_sequences', 'storage')

    def test_delete_animation_main_sequence(self):
        """Test case for delete_animation_main_sequence
        """
        param_name = self.get_test_value('delete_animation_main_sequence', 'name', 'str')
        param_slide_index = self.get_test_value('delete_animation_main_sequence', 'slide_index', 'int')
        param_password = self.get_test_value('delete_animation_main_sequence', 'password', 'str')
        param_folder = self.get_test_value('delete_animation_main_sequence', 'folder', 'str')
        param_storage = self.get_test_value('delete_animation_main_sequence', 'storage', 'str')
        self.initialize('delete_animation_main_sequence', None, None)
        response = self.api.delete_animation_main_sequence(param_name, param_slide_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_delete_animation_main_sequence_invalid_name(self):
        """Test case for delete_animation_main_sequence with invalid name
        """
        param_name = self.get_test_value('delete_animation_main_sequence', 'name', 'str')
        param_slide_index = self.get_test_value('delete_animation_main_sequence', 'slide_index', 'int')
        param_password = self.get_test_value('delete_animation_main_sequence', 'password', 'str')
        param_folder = self.get_test_value('delete_animation_main_sequence', 'folder', 'str')
        param_storage = self.get_test_value('delete_animation_main_sequence', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_animation_main_sequence', 'name', param_name, 'str')
        self.initialize('delete_animation_main_sequence', 'name', param_name)
        ok = False
        try:
            self.api.delete_animation_main_sequence(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_animation_main_sequence', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_animation_main_sequence', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_animation_main_sequence', 'name')

    def test_delete_animation_main_sequence_invalid_slide_index(self):
        """Test case for delete_animation_main_sequence with invalid slide_index
        """
        param_name = self.get_test_value('delete_animation_main_sequence', 'name', 'str')
        param_slide_index = self.get_test_value('delete_animation_main_sequence', 'slide_index', 'int')
        param_password = self.get_test_value('delete_animation_main_sequence', 'password', 'str')
        param_folder = self.get_test_value('delete_animation_main_sequence', 'folder', 'str')
        param_storage = self.get_test_value('delete_animation_main_sequence', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('delete_animation_main_sequence', 'slide_index', param_slide_index, 'int')
        self.initialize('delete_animation_main_sequence', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.delete_animation_main_sequence(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_animation_main_sequence', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_animation_main_sequence', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('delete_animation_main_sequence', 'slide_index')

    def test_delete_animation_main_sequence_invalid_password(self):
        """Test case for delete_animation_main_sequence with invalid password
        """
        param_name = self.get_test_value('delete_animation_main_sequence', 'name', 'str')
        param_slide_index = self.get_test_value('delete_animation_main_sequence', 'slide_index', 'int')
        param_password = self.get_test_value('delete_animation_main_sequence', 'password', 'str')
        param_folder = self.get_test_value('delete_animation_main_sequence', 'folder', 'str')
        param_storage = self.get_test_value('delete_animation_main_sequence', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_animation_main_sequence', 'password', param_password, 'str')
        self.initialize('delete_animation_main_sequence', 'password', param_password)
        ok = False
        try:
            self.api.delete_animation_main_sequence(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_animation_main_sequence', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_animation_main_sequence', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_animation_main_sequence', 'password')

    def test_delete_animation_main_sequence_invalid_folder(self):
        """Test case for delete_animation_main_sequence with invalid folder
        """
        param_name = self.get_test_value('delete_animation_main_sequence', 'name', 'str')
        param_slide_index = self.get_test_value('delete_animation_main_sequence', 'slide_index', 'int')
        param_password = self.get_test_value('delete_animation_main_sequence', 'password', 'str')
        param_folder = self.get_test_value('delete_animation_main_sequence', 'folder', 'str')
        param_storage = self.get_test_value('delete_animation_main_sequence', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_animation_main_sequence', 'folder', param_folder, 'str')
        self.initialize('delete_animation_main_sequence', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_animation_main_sequence(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_animation_main_sequence', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_animation_main_sequence', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_animation_main_sequence', 'folder')

    def test_delete_animation_main_sequence_invalid_storage(self):
        """Test case for delete_animation_main_sequence with invalid storage
        """
        param_name = self.get_test_value('delete_animation_main_sequence', 'name', 'str')
        param_slide_index = self.get_test_value('delete_animation_main_sequence', 'slide_index', 'int')
        param_password = self.get_test_value('delete_animation_main_sequence', 'password', 'str')
        param_folder = self.get_test_value('delete_animation_main_sequence', 'folder', 'str')
        param_storage = self.get_test_value('delete_animation_main_sequence', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_animation_main_sequence', 'storage', param_storage, 'str')
        self.initialize('delete_animation_main_sequence', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_animation_main_sequence(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_animation_main_sequence', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_animation_main_sequence', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_animation_main_sequence', 'storage')

    def test_delete_background(self):
        """Test case for delete_background
        """
        param_name = self.get_test_value('delete_background', 'name', 'str')
        param_slide_index = self.get_test_value('delete_background', 'slide_index', 'int')
        param_password = self.get_test_value('delete_background', 'password', 'str')
        param_folder = self.get_test_value('delete_background', 'folder', 'str')
        param_storage = self.get_test_value('delete_background', 'storage', 'str')
        self.initialize('delete_background', None, None)
        response = self.api.delete_background(param_name, param_slide_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_delete_background_invalid_name(self):
        """Test case for delete_background with invalid name
        """
        param_name = self.get_test_value('delete_background', 'name', 'str')
        param_slide_index = self.get_test_value('delete_background', 'slide_index', 'int')
        param_password = self.get_test_value('delete_background', 'password', 'str')
        param_folder = self.get_test_value('delete_background', 'folder', 'str')
        param_storage = self.get_test_value('delete_background', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_background', 'name', param_name, 'str')
        self.initialize('delete_background', 'name', param_name)
        ok = False
        try:
            self.api.delete_background(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_background', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_background', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_background', 'name')

    def test_delete_background_invalid_slide_index(self):
        """Test case for delete_background with invalid slide_index
        """
        param_name = self.get_test_value('delete_background', 'name', 'str')
        param_slide_index = self.get_test_value('delete_background', 'slide_index', 'int')
        param_password = self.get_test_value('delete_background', 'password', 'str')
        param_folder = self.get_test_value('delete_background', 'folder', 'str')
        param_storage = self.get_test_value('delete_background', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('delete_background', 'slide_index', param_slide_index, 'int')
        self.initialize('delete_background', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.delete_background(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_background', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_background', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('delete_background', 'slide_index')

    def test_delete_background_invalid_password(self):
        """Test case for delete_background with invalid password
        """
        param_name = self.get_test_value('delete_background', 'name', 'str')
        param_slide_index = self.get_test_value('delete_background', 'slide_index', 'int')
        param_password = self.get_test_value('delete_background', 'password', 'str')
        param_folder = self.get_test_value('delete_background', 'folder', 'str')
        param_storage = self.get_test_value('delete_background', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_background', 'password', param_password, 'str')
        self.initialize('delete_background', 'password', param_password)
        ok = False
        try:
            self.api.delete_background(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_background', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_background', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_background', 'password')

    def test_delete_background_invalid_folder(self):
        """Test case for delete_background with invalid folder
        """
        param_name = self.get_test_value('delete_background', 'name', 'str')
        param_slide_index = self.get_test_value('delete_background', 'slide_index', 'int')
        param_password = self.get_test_value('delete_background', 'password', 'str')
        param_folder = self.get_test_value('delete_background', 'folder', 'str')
        param_storage = self.get_test_value('delete_background', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_background', 'folder', param_folder, 'str')
        self.initialize('delete_background', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_background(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_background', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_background', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_background', 'folder')

    def test_delete_background_invalid_storage(self):
        """Test case for delete_background with invalid storage
        """
        param_name = self.get_test_value('delete_background', 'name', 'str')
        param_slide_index = self.get_test_value('delete_background', 'slide_index', 'int')
        param_password = self.get_test_value('delete_background', 'password', 'str')
        param_folder = self.get_test_value('delete_background', 'folder', 'str')
        param_storage = self.get_test_value('delete_background', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_background', 'storage', param_storage, 'str')
        self.initialize('delete_background', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_background(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_background', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_background', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_background', 'storage')

    def test_delete_chart_category(self):
        """Test case for delete_chart_category
        """
        param_name = self.get_test_value('delete_chart_category', 'name', 'str')
        param_slide_index = self.get_test_value('delete_chart_category', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_chart_category', 'shape_index', 'int')
        param_category_index = self.get_test_value('delete_chart_category', 'category_index', 'int')
        param_password = self.get_test_value('delete_chart_category', 'password', 'str')
        param_folder = self.get_test_value('delete_chart_category', 'folder', 'str')
        param_storage = self.get_test_value('delete_chart_category', 'storage', 'str')
        self.initialize('delete_chart_category', None, None)
        response = self.api.delete_chart_category(param_name, param_slide_index, param_shape_index, param_category_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_delete_chart_category_invalid_name(self):
        """Test case for delete_chart_category with invalid name
        """
        param_name = self.get_test_value('delete_chart_category', 'name', 'str')
        param_slide_index = self.get_test_value('delete_chart_category', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_chart_category', 'shape_index', 'int')
        param_category_index = self.get_test_value('delete_chart_category', 'category_index', 'int')
        param_password = self.get_test_value('delete_chart_category', 'password', 'str')
        param_folder = self.get_test_value('delete_chart_category', 'folder', 'str')
        param_storage = self.get_test_value('delete_chart_category', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_chart_category', 'name', param_name, 'str')
        self.initialize('delete_chart_category', 'name', param_name)
        ok = False
        try:
            self.api.delete_chart_category(param_name, param_slide_index, param_shape_index, param_category_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_chart_category', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_chart_category', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_chart_category', 'name')

    def test_delete_chart_category_invalid_slide_index(self):
        """Test case for delete_chart_category with invalid slide_index
        """
        param_name = self.get_test_value('delete_chart_category', 'name', 'str')
        param_slide_index = self.get_test_value('delete_chart_category', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_chart_category', 'shape_index', 'int')
        param_category_index = self.get_test_value('delete_chart_category', 'category_index', 'int')
        param_password = self.get_test_value('delete_chart_category', 'password', 'str')
        param_folder = self.get_test_value('delete_chart_category', 'folder', 'str')
        param_storage = self.get_test_value('delete_chart_category', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('delete_chart_category', 'slide_index', param_slide_index, 'int')
        self.initialize('delete_chart_category', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.delete_chart_category(param_name, param_slide_index, param_shape_index, param_category_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_chart_category', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_chart_category', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('delete_chart_category', 'slide_index')

    def test_delete_chart_category_invalid_shape_index(self):
        """Test case for delete_chart_category with invalid shape_index
        """
        param_name = self.get_test_value('delete_chart_category', 'name', 'str')
        param_slide_index = self.get_test_value('delete_chart_category', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_chart_category', 'shape_index', 'int')
        param_category_index = self.get_test_value('delete_chart_category', 'category_index', 'int')
        param_password = self.get_test_value('delete_chart_category', 'password', 'str')
        param_folder = self.get_test_value('delete_chart_category', 'folder', 'str')
        param_storage = self.get_test_value('delete_chart_category', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('delete_chart_category', 'shape_index', param_shape_index, 'int')
        self.initialize('delete_chart_category', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.delete_chart_category(param_name, param_slide_index, param_shape_index, param_category_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_chart_category', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_chart_category', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('delete_chart_category', 'shape_index')

    def test_delete_chart_category_invalid_category_index(self):
        """Test case for delete_chart_category with invalid category_index
        """
        param_name = self.get_test_value('delete_chart_category', 'name', 'str')
        param_slide_index = self.get_test_value('delete_chart_category', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_chart_category', 'shape_index', 'int')
        param_category_index = self.get_test_value('delete_chart_category', 'category_index', 'int')
        param_password = self.get_test_value('delete_chart_category', 'password', 'str')
        param_folder = self.get_test_value('delete_chart_category', 'folder', 'str')
        param_storage = self.get_test_value('delete_chart_category', 'storage', 'str')
        param_category_index = self.get_invalid_test_value('delete_chart_category', 'category_index', param_category_index, 'int')
        self.initialize('delete_chart_category', 'category_index', param_category_index)
        ok = False
        try:
            self.api.delete_chart_category(param_name, param_slide_index, param_shape_index, param_category_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_chart_category', 'category_index', param_category_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_chart_category', 'category_index', param_category_index)
        if ok:
            self.assert_no_exception('delete_chart_category', 'category_index')

    def test_delete_chart_category_invalid_password(self):
        """Test case for delete_chart_category with invalid password
        """
        param_name = self.get_test_value('delete_chart_category', 'name', 'str')
        param_slide_index = self.get_test_value('delete_chart_category', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_chart_category', 'shape_index', 'int')
        param_category_index = self.get_test_value('delete_chart_category', 'category_index', 'int')
        param_password = self.get_test_value('delete_chart_category', 'password', 'str')
        param_folder = self.get_test_value('delete_chart_category', 'folder', 'str')
        param_storage = self.get_test_value('delete_chart_category', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_chart_category', 'password', param_password, 'str')
        self.initialize('delete_chart_category', 'password', param_password)
        ok = False
        try:
            self.api.delete_chart_category(param_name, param_slide_index, param_shape_index, param_category_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_chart_category', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_chart_category', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_chart_category', 'password')

    def test_delete_chart_category_invalid_folder(self):
        """Test case for delete_chart_category with invalid folder
        """
        param_name = self.get_test_value('delete_chart_category', 'name', 'str')
        param_slide_index = self.get_test_value('delete_chart_category', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_chart_category', 'shape_index', 'int')
        param_category_index = self.get_test_value('delete_chart_category', 'category_index', 'int')
        param_password = self.get_test_value('delete_chart_category', 'password', 'str')
        param_folder = self.get_test_value('delete_chart_category', 'folder', 'str')
        param_storage = self.get_test_value('delete_chart_category', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_chart_category', 'folder', param_folder, 'str')
        self.initialize('delete_chart_category', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_chart_category(param_name, param_slide_index, param_shape_index, param_category_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_chart_category', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_chart_category', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_chart_category', 'folder')

    def test_delete_chart_category_invalid_storage(self):
        """Test case for delete_chart_category with invalid storage
        """
        param_name = self.get_test_value('delete_chart_category', 'name', 'str')
        param_slide_index = self.get_test_value('delete_chart_category', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_chart_category', 'shape_index', 'int')
        param_category_index = self.get_test_value('delete_chart_category', 'category_index', 'int')
        param_password = self.get_test_value('delete_chart_category', 'password', 'str')
        param_folder = self.get_test_value('delete_chart_category', 'folder', 'str')
        param_storage = self.get_test_value('delete_chart_category', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_chart_category', 'storage', param_storage, 'str')
        self.initialize('delete_chart_category', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_chart_category(param_name, param_slide_index, param_shape_index, param_category_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_chart_category', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_chart_category', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_chart_category', 'storage')

    def test_delete_chart_data_point(self):
        """Test case for delete_chart_data_point
        """
        param_name = self.get_test_value('delete_chart_data_point', 'name', 'str')
        param_slide_index = self.get_test_value('delete_chart_data_point', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_chart_data_point', 'shape_index', 'int')
        param_series_index = self.get_test_value('delete_chart_data_point', 'series_index', 'int')
        param_point_index = self.get_test_value('delete_chart_data_point', 'point_index', 'int')
        param_password = self.get_test_value('delete_chart_data_point', 'password', 'str')
        param_folder = self.get_test_value('delete_chart_data_point', 'folder', 'str')
        param_storage = self.get_test_value('delete_chart_data_point', 'storage', 'str')
        self.initialize('delete_chart_data_point', None, None)
        response = self.api.delete_chart_data_point(param_name, param_slide_index, param_shape_index, param_series_index, param_point_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_delete_chart_data_point_invalid_name(self):
        """Test case for delete_chart_data_point with invalid name
        """
        param_name = self.get_test_value('delete_chart_data_point', 'name', 'str')
        param_slide_index = self.get_test_value('delete_chart_data_point', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_chart_data_point', 'shape_index', 'int')
        param_series_index = self.get_test_value('delete_chart_data_point', 'series_index', 'int')
        param_point_index = self.get_test_value('delete_chart_data_point', 'point_index', 'int')
        param_password = self.get_test_value('delete_chart_data_point', 'password', 'str')
        param_folder = self.get_test_value('delete_chart_data_point', 'folder', 'str')
        param_storage = self.get_test_value('delete_chart_data_point', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_chart_data_point', 'name', param_name, 'str')
        self.initialize('delete_chart_data_point', 'name', param_name)
        ok = False
        try:
            self.api.delete_chart_data_point(param_name, param_slide_index, param_shape_index, param_series_index, param_point_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_chart_data_point', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_chart_data_point', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_chart_data_point', 'name')

    def test_delete_chart_data_point_invalid_slide_index(self):
        """Test case for delete_chart_data_point with invalid slide_index
        """
        param_name = self.get_test_value('delete_chart_data_point', 'name', 'str')
        param_slide_index = self.get_test_value('delete_chart_data_point', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_chart_data_point', 'shape_index', 'int')
        param_series_index = self.get_test_value('delete_chart_data_point', 'series_index', 'int')
        param_point_index = self.get_test_value('delete_chart_data_point', 'point_index', 'int')
        param_password = self.get_test_value('delete_chart_data_point', 'password', 'str')
        param_folder = self.get_test_value('delete_chart_data_point', 'folder', 'str')
        param_storage = self.get_test_value('delete_chart_data_point', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('delete_chart_data_point', 'slide_index', param_slide_index, 'int')
        self.initialize('delete_chart_data_point', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.delete_chart_data_point(param_name, param_slide_index, param_shape_index, param_series_index, param_point_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_chart_data_point', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_chart_data_point', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('delete_chart_data_point', 'slide_index')

    def test_delete_chart_data_point_invalid_shape_index(self):
        """Test case for delete_chart_data_point with invalid shape_index
        """
        param_name = self.get_test_value('delete_chart_data_point', 'name', 'str')
        param_slide_index = self.get_test_value('delete_chart_data_point', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_chart_data_point', 'shape_index', 'int')
        param_series_index = self.get_test_value('delete_chart_data_point', 'series_index', 'int')
        param_point_index = self.get_test_value('delete_chart_data_point', 'point_index', 'int')
        param_password = self.get_test_value('delete_chart_data_point', 'password', 'str')
        param_folder = self.get_test_value('delete_chart_data_point', 'folder', 'str')
        param_storage = self.get_test_value('delete_chart_data_point', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('delete_chart_data_point', 'shape_index', param_shape_index, 'int')
        self.initialize('delete_chart_data_point', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.delete_chart_data_point(param_name, param_slide_index, param_shape_index, param_series_index, param_point_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_chart_data_point', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_chart_data_point', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('delete_chart_data_point', 'shape_index')

    def test_delete_chart_data_point_invalid_series_index(self):
        """Test case for delete_chart_data_point with invalid series_index
        """
        param_name = self.get_test_value('delete_chart_data_point', 'name', 'str')
        param_slide_index = self.get_test_value('delete_chart_data_point', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_chart_data_point', 'shape_index', 'int')
        param_series_index = self.get_test_value('delete_chart_data_point', 'series_index', 'int')
        param_point_index = self.get_test_value('delete_chart_data_point', 'point_index', 'int')
        param_password = self.get_test_value('delete_chart_data_point', 'password', 'str')
        param_folder = self.get_test_value('delete_chart_data_point', 'folder', 'str')
        param_storage = self.get_test_value('delete_chart_data_point', 'storage', 'str')
        param_series_index = self.get_invalid_test_value('delete_chart_data_point', 'series_index', param_series_index, 'int')
        self.initialize('delete_chart_data_point', 'series_index', param_series_index)
        ok = False
        try:
            self.api.delete_chart_data_point(param_name, param_slide_index, param_shape_index, param_series_index, param_point_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_chart_data_point', 'series_index', param_series_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_chart_data_point', 'series_index', param_series_index)
        if ok:
            self.assert_no_exception('delete_chart_data_point', 'series_index')

    def test_delete_chart_data_point_invalid_point_index(self):
        """Test case for delete_chart_data_point with invalid point_index
        """
        param_name = self.get_test_value('delete_chart_data_point', 'name', 'str')
        param_slide_index = self.get_test_value('delete_chart_data_point', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_chart_data_point', 'shape_index', 'int')
        param_series_index = self.get_test_value('delete_chart_data_point', 'series_index', 'int')
        param_point_index = self.get_test_value('delete_chart_data_point', 'point_index', 'int')
        param_password = self.get_test_value('delete_chart_data_point', 'password', 'str')
        param_folder = self.get_test_value('delete_chart_data_point', 'folder', 'str')
        param_storage = self.get_test_value('delete_chart_data_point', 'storage', 'str')
        param_point_index = self.get_invalid_test_value('delete_chart_data_point', 'point_index', param_point_index, 'int')
        self.initialize('delete_chart_data_point', 'point_index', param_point_index)
        ok = False
        try:
            self.api.delete_chart_data_point(param_name, param_slide_index, param_shape_index, param_series_index, param_point_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_chart_data_point', 'point_index', param_point_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_chart_data_point', 'point_index', param_point_index)
        if ok:
            self.assert_no_exception('delete_chart_data_point', 'point_index')

    def test_delete_chart_data_point_invalid_password(self):
        """Test case for delete_chart_data_point with invalid password
        """
        param_name = self.get_test_value('delete_chart_data_point', 'name', 'str')
        param_slide_index = self.get_test_value('delete_chart_data_point', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_chart_data_point', 'shape_index', 'int')
        param_series_index = self.get_test_value('delete_chart_data_point', 'series_index', 'int')
        param_point_index = self.get_test_value('delete_chart_data_point', 'point_index', 'int')
        param_password = self.get_test_value('delete_chart_data_point', 'password', 'str')
        param_folder = self.get_test_value('delete_chart_data_point', 'folder', 'str')
        param_storage = self.get_test_value('delete_chart_data_point', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_chart_data_point', 'password', param_password, 'str')
        self.initialize('delete_chart_data_point', 'password', param_password)
        ok = False
        try:
            self.api.delete_chart_data_point(param_name, param_slide_index, param_shape_index, param_series_index, param_point_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_chart_data_point', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_chart_data_point', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_chart_data_point', 'password')

    def test_delete_chart_data_point_invalid_folder(self):
        """Test case for delete_chart_data_point with invalid folder
        """
        param_name = self.get_test_value('delete_chart_data_point', 'name', 'str')
        param_slide_index = self.get_test_value('delete_chart_data_point', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_chart_data_point', 'shape_index', 'int')
        param_series_index = self.get_test_value('delete_chart_data_point', 'series_index', 'int')
        param_point_index = self.get_test_value('delete_chart_data_point', 'point_index', 'int')
        param_password = self.get_test_value('delete_chart_data_point', 'password', 'str')
        param_folder = self.get_test_value('delete_chart_data_point', 'folder', 'str')
        param_storage = self.get_test_value('delete_chart_data_point', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_chart_data_point', 'folder', param_folder, 'str')
        self.initialize('delete_chart_data_point', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_chart_data_point(param_name, param_slide_index, param_shape_index, param_series_index, param_point_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_chart_data_point', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_chart_data_point', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_chart_data_point', 'folder')

    def test_delete_chart_data_point_invalid_storage(self):
        """Test case for delete_chart_data_point with invalid storage
        """
        param_name = self.get_test_value('delete_chart_data_point', 'name', 'str')
        param_slide_index = self.get_test_value('delete_chart_data_point', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_chart_data_point', 'shape_index', 'int')
        param_series_index = self.get_test_value('delete_chart_data_point', 'series_index', 'int')
        param_point_index = self.get_test_value('delete_chart_data_point', 'point_index', 'int')
        param_password = self.get_test_value('delete_chart_data_point', 'password', 'str')
        param_folder = self.get_test_value('delete_chart_data_point', 'folder', 'str')
        param_storage = self.get_test_value('delete_chart_data_point', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_chart_data_point', 'storage', param_storage, 'str')
        self.initialize('delete_chart_data_point', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_chart_data_point(param_name, param_slide_index, param_shape_index, param_series_index, param_point_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_chart_data_point', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_chart_data_point', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_chart_data_point', 'storage')

    def test_delete_chart_series(self):
        """Test case for delete_chart_series
        """
        param_name = self.get_test_value('delete_chart_series', 'name', 'str')
        param_slide_index = self.get_test_value('delete_chart_series', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_chart_series', 'shape_index', 'int')
        param_series_index = self.get_test_value('delete_chart_series', 'series_index', 'int')
        param_password = self.get_test_value('delete_chart_series', 'password', 'str')
        param_folder = self.get_test_value('delete_chart_series', 'folder', 'str')
        param_storage = self.get_test_value('delete_chart_series', 'storage', 'str')
        self.initialize('delete_chart_series', None, None)
        response = self.api.delete_chart_series(param_name, param_slide_index, param_shape_index, param_series_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_delete_chart_series_invalid_name(self):
        """Test case for delete_chart_series with invalid name
        """
        param_name = self.get_test_value('delete_chart_series', 'name', 'str')
        param_slide_index = self.get_test_value('delete_chart_series', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_chart_series', 'shape_index', 'int')
        param_series_index = self.get_test_value('delete_chart_series', 'series_index', 'int')
        param_password = self.get_test_value('delete_chart_series', 'password', 'str')
        param_folder = self.get_test_value('delete_chart_series', 'folder', 'str')
        param_storage = self.get_test_value('delete_chart_series', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_chart_series', 'name', param_name, 'str')
        self.initialize('delete_chart_series', 'name', param_name)
        ok = False
        try:
            self.api.delete_chart_series(param_name, param_slide_index, param_shape_index, param_series_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_chart_series', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_chart_series', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_chart_series', 'name')

    def test_delete_chart_series_invalid_slide_index(self):
        """Test case for delete_chart_series with invalid slide_index
        """
        param_name = self.get_test_value('delete_chart_series', 'name', 'str')
        param_slide_index = self.get_test_value('delete_chart_series', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_chart_series', 'shape_index', 'int')
        param_series_index = self.get_test_value('delete_chart_series', 'series_index', 'int')
        param_password = self.get_test_value('delete_chart_series', 'password', 'str')
        param_folder = self.get_test_value('delete_chart_series', 'folder', 'str')
        param_storage = self.get_test_value('delete_chart_series', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('delete_chart_series', 'slide_index', param_slide_index, 'int')
        self.initialize('delete_chart_series', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.delete_chart_series(param_name, param_slide_index, param_shape_index, param_series_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_chart_series', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_chart_series', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('delete_chart_series', 'slide_index')

    def test_delete_chart_series_invalid_shape_index(self):
        """Test case for delete_chart_series with invalid shape_index
        """
        param_name = self.get_test_value('delete_chart_series', 'name', 'str')
        param_slide_index = self.get_test_value('delete_chart_series', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_chart_series', 'shape_index', 'int')
        param_series_index = self.get_test_value('delete_chart_series', 'series_index', 'int')
        param_password = self.get_test_value('delete_chart_series', 'password', 'str')
        param_folder = self.get_test_value('delete_chart_series', 'folder', 'str')
        param_storage = self.get_test_value('delete_chart_series', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('delete_chart_series', 'shape_index', param_shape_index, 'int')
        self.initialize('delete_chart_series', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.delete_chart_series(param_name, param_slide_index, param_shape_index, param_series_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_chart_series', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_chart_series', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('delete_chart_series', 'shape_index')

    def test_delete_chart_series_invalid_series_index(self):
        """Test case for delete_chart_series with invalid series_index
        """
        param_name = self.get_test_value('delete_chart_series', 'name', 'str')
        param_slide_index = self.get_test_value('delete_chart_series', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_chart_series', 'shape_index', 'int')
        param_series_index = self.get_test_value('delete_chart_series', 'series_index', 'int')
        param_password = self.get_test_value('delete_chart_series', 'password', 'str')
        param_folder = self.get_test_value('delete_chart_series', 'folder', 'str')
        param_storage = self.get_test_value('delete_chart_series', 'storage', 'str')
        param_series_index = self.get_invalid_test_value('delete_chart_series', 'series_index', param_series_index, 'int')
        self.initialize('delete_chart_series', 'series_index', param_series_index)
        ok = False
        try:
            self.api.delete_chart_series(param_name, param_slide_index, param_shape_index, param_series_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_chart_series', 'series_index', param_series_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_chart_series', 'series_index', param_series_index)
        if ok:
            self.assert_no_exception('delete_chart_series', 'series_index')

    def test_delete_chart_series_invalid_password(self):
        """Test case for delete_chart_series with invalid password
        """
        param_name = self.get_test_value('delete_chart_series', 'name', 'str')
        param_slide_index = self.get_test_value('delete_chart_series', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_chart_series', 'shape_index', 'int')
        param_series_index = self.get_test_value('delete_chart_series', 'series_index', 'int')
        param_password = self.get_test_value('delete_chart_series', 'password', 'str')
        param_folder = self.get_test_value('delete_chart_series', 'folder', 'str')
        param_storage = self.get_test_value('delete_chart_series', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_chart_series', 'password', param_password, 'str')
        self.initialize('delete_chart_series', 'password', param_password)
        ok = False
        try:
            self.api.delete_chart_series(param_name, param_slide_index, param_shape_index, param_series_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_chart_series', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_chart_series', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_chart_series', 'password')

    def test_delete_chart_series_invalid_folder(self):
        """Test case for delete_chart_series with invalid folder
        """
        param_name = self.get_test_value('delete_chart_series', 'name', 'str')
        param_slide_index = self.get_test_value('delete_chart_series', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_chart_series', 'shape_index', 'int')
        param_series_index = self.get_test_value('delete_chart_series', 'series_index', 'int')
        param_password = self.get_test_value('delete_chart_series', 'password', 'str')
        param_folder = self.get_test_value('delete_chart_series', 'folder', 'str')
        param_storage = self.get_test_value('delete_chart_series', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_chart_series', 'folder', param_folder, 'str')
        self.initialize('delete_chart_series', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_chart_series(param_name, param_slide_index, param_shape_index, param_series_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_chart_series', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_chart_series', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_chart_series', 'folder')

    def test_delete_chart_series_invalid_storage(self):
        """Test case for delete_chart_series with invalid storage
        """
        param_name = self.get_test_value('delete_chart_series', 'name', 'str')
        param_slide_index = self.get_test_value('delete_chart_series', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_chart_series', 'shape_index', 'int')
        param_series_index = self.get_test_value('delete_chart_series', 'series_index', 'int')
        param_password = self.get_test_value('delete_chart_series', 'password', 'str')
        param_folder = self.get_test_value('delete_chart_series', 'folder', 'str')
        param_storage = self.get_test_value('delete_chart_series', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_chart_series', 'storage', param_storage, 'str')
        self.initialize('delete_chart_series', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_chart_series(param_name, param_slide_index, param_shape_index, param_series_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_chart_series', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_chart_series', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_chart_series', 'storage')

    def test_delete_comments(self):
        """Test case for delete_comments
        """
        param_name = self.get_test_value('delete_comments', 'name', 'str')
        param_author = self.get_test_value('delete_comments', 'author', 'str')
        param_password = self.get_test_value('delete_comments', 'password', 'str')
        param_folder = self.get_test_value('delete_comments', 'folder', 'str')
        param_storage = self.get_test_value('delete_comments', 'storage', 'str')
        self.initialize('delete_comments', None, None)
        response = self.api.delete_comments(param_name, param_author, param_password, param_folder, param_storage)
        self.assertIsNone(response)

    def test_delete_comments_invalid_name(self):
        """Test case for delete_comments with invalid name
        """
        param_name = self.get_test_value('delete_comments', 'name', 'str')
        param_author = self.get_test_value('delete_comments', 'author', 'str')
        param_password = self.get_test_value('delete_comments', 'password', 'str')
        param_folder = self.get_test_value('delete_comments', 'folder', 'str')
        param_storage = self.get_test_value('delete_comments', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_comments', 'name', param_name, 'str')
        self.initialize('delete_comments', 'name', param_name)
        ok = False
        try:
            self.api.delete_comments(param_name, param_author, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_comments', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_comments', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_comments', 'name')

    def test_delete_comments_invalid_author(self):
        """Test case for delete_comments with invalid author
        """
        param_name = self.get_test_value('delete_comments', 'name', 'str')
        param_author = self.get_test_value('delete_comments', 'author', 'str')
        param_password = self.get_test_value('delete_comments', 'password', 'str')
        param_folder = self.get_test_value('delete_comments', 'folder', 'str')
        param_storage = self.get_test_value('delete_comments', 'storage', 'str')
        param_author = self.get_invalid_test_value('delete_comments', 'author', param_author, 'str')
        self.initialize('delete_comments', 'author', param_author)
        ok = False
        try:
            self.api.delete_comments(param_name, param_author, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_comments', 'author', param_author)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_comments', 'author', param_author)
        if ok:
            self.assert_no_exception('delete_comments', 'author')

    def test_delete_comments_invalid_password(self):
        """Test case for delete_comments with invalid password
        """
        param_name = self.get_test_value('delete_comments', 'name', 'str')
        param_author = self.get_test_value('delete_comments', 'author', 'str')
        param_password = self.get_test_value('delete_comments', 'password', 'str')
        param_folder = self.get_test_value('delete_comments', 'folder', 'str')
        param_storage = self.get_test_value('delete_comments', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_comments', 'password', param_password, 'str')
        self.initialize('delete_comments', 'password', param_password)
        ok = False
        try:
            self.api.delete_comments(param_name, param_author, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_comments', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_comments', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_comments', 'password')

    def test_delete_comments_invalid_folder(self):
        """Test case for delete_comments with invalid folder
        """
        param_name = self.get_test_value('delete_comments', 'name', 'str')
        param_author = self.get_test_value('delete_comments', 'author', 'str')
        param_password = self.get_test_value('delete_comments', 'password', 'str')
        param_folder = self.get_test_value('delete_comments', 'folder', 'str')
        param_storage = self.get_test_value('delete_comments', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_comments', 'folder', param_folder, 'str')
        self.initialize('delete_comments', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_comments(param_name, param_author, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_comments', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_comments', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_comments', 'folder')

    def test_delete_comments_invalid_storage(self):
        """Test case for delete_comments with invalid storage
        """
        param_name = self.get_test_value('delete_comments', 'name', 'str')
        param_author = self.get_test_value('delete_comments', 'author', 'str')
        param_password = self.get_test_value('delete_comments', 'password', 'str')
        param_folder = self.get_test_value('delete_comments', 'folder', 'str')
        param_storage = self.get_test_value('delete_comments', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_comments', 'storage', param_storage, 'str')
        self.initialize('delete_comments', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_comments(param_name, param_author, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_comments', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_comments', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_comments', 'storage')

    def test_delete_comments_online(self):
        """Test case for delete_comments_online
        """
        param_document = self.get_test_value('delete_comments_online', 'document', 'file')
        param_author = self.get_test_value('delete_comments_online', 'author', 'str')
        param_password = self.get_test_value('delete_comments_online', 'password', 'str')
        self.initialize('delete_comments_online', None, None)
        response = self.api.delete_comments_online(param_document, param_author, param_password)
        self.assertTrue(isinstance(response, str))
        self.assertTrue(len(response) > 0)

    def test_delete_comments_online_invalid_document(self):
        """Test case for delete_comments_online with invalid document
        """
        param_document = self.get_test_value('delete_comments_online', 'document', 'file')
        param_author = self.get_test_value('delete_comments_online', 'author', 'str')
        param_password = self.get_test_value('delete_comments_online', 'password', 'str')
        param_document = self.get_invalid_test_value('delete_comments_online', 'document', param_document, 'file')
        self.initialize('delete_comments_online', 'document', param_document)
        ok = False
        try:
            self.api.delete_comments_online(param_document, param_author, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_comments_online', 'document', param_document)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_comments_online', 'document', param_document)
        if ok:
            self.assert_no_exception('delete_comments_online', 'document')

    def test_delete_comments_online_invalid_author(self):
        """Test case for delete_comments_online with invalid author
        """
        param_document = self.get_test_value('delete_comments_online', 'document', 'file')
        param_author = self.get_test_value('delete_comments_online', 'author', 'str')
        param_password = self.get_test_value('delete_comments_online', 'password', 'str')
        param_author = self.get_invalid_test_value('delete_comments_online', 'author', param_author, 'str')
        self.initialize('delete_comments_online', 'author', param_author)
        ok = False
        try:
            self.api.delete_comments_online(param_document, param_author, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_comments_online', 'author', param_author)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_comments_online', 'author', param_author)
        if ok:
            self.assert_no_exception('delete_comments_online', 'author')

    def test_delete_comments_online_invalid_password(self):
        """Test case for delete_comments_online with invalid password
        """
        param_document = self.get_test_value('delete_comments_online', 'document', 'file')
        param_author = self.get_test_value('delete_comments_online', 'author', 'str')
        param_password = self.get_test_value('delete_comments_online', 'password', 'str')
        param_password = self.get_invalid_test_value('delete_comments_online', 'password', param_password, 'str')
        self.initialize('delete_comments_online', 'password', param_password)
        ok = False
        try:
            self.api.delete_comments_online(param_document, param_author, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_comments_online', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_comments_online', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_comments_online', 'password')

    def test_delete_document_properties(self):
        """Test case for delete_document_properties
        """
        param_name = self.get_test_value('delete_document_properties', 'name', 'str')
        param_password = self.get_test_value('delete_document_properties', 'password', 'str')
        param_folder = self.get_test_value('delete_document_properties', 'folder', 'str')
        param_storage = self.get_test_value('delete_document_properties', 'storage', 'str')
        self.initialize('delete_document_properties', None, None)
        response = self.api.delete_document_properties(param_name, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_delete_document_properties_invalid_name(self):
        """Test case for delete_document_properties with invalid name
        """
        param_name = self.get_test_value('delete_document_properties', 'name', 'str')
        param_password = self.get_test_value('delete_document_properties', 'password', 'str')
        param_folder = self.get_test_value('delete_document_properties', 'folder', 'str')
        param_storage = self.get_test_value('delete_document_properties', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_document_properties', 'name', param_name, 'str')
        self.initialize('delete_document_properties', 'name', param_name)
        ok = False
        try:
            self.api.delete_document_properties(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_document_properties', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_document_properties', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_document_properties', 'name')

    def test_delete_document_properties_invalid_password(self):
        """Test case for delete_document_properties with invalid password
        """
        param_name = self.get_test_value('delete_document_properties', 'name', 'str')
        param_password = self.get_test_value('delete_document_properties', 'password', 'str')
        param_folder = self.get_test_value('delete_document_properties', 'folder', 'str')
        param_storage = self.get_test_value('delete_document_properties', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_document_properties', 'password', param_password, 'str')
        self.initialize('delete_document_properties', 'password', param_password)
        ok = False
        try:
            self.api.delete_document_properties(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_document_properties', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_document_properties', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_document_properties', 'password')

    def test_delete_document_properties_invalid_folder(self):
        """Test case for delete_document_properties with invalid folder
        """
        param_name = self.get_test_value('delete_document_properties', 'name', 'str')
        param_password = self.get_test_value('delete_document_properties', 'password', 'str')
        param_folder = self.get_test_value('delete_document_properties', 'folder', 'str')
        param_storage = self.get_test_value('delete_document_properties', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_document_properties', 'folder', param_folder, 'str')
        self.initialize('delete_document_properties', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_document_properties(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_document_properties', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_document_properties', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_document_properties', 'folder')

    def test_delete_document_properties_invalid_storage(self):
        """Test case for delete_document_properties with invalid storage
        """
        param_name = self.get_test_value('delete_document_properties', 'name', 'str')
        param_password = self.get_test_value('delete_document_properties', 'password', 'str')
        param_folder = self.get_test_value('delete_document_properties', 'folder', 'str')
        param_storage = self.get_test_value('delete_document_properties', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_document_properties', 'storage', param_storage, 'str')
        self.initialize('delete_document_properties', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_document_properties(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_document_properties', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_document_properties', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_document_properties', 'storage')

    def test_delete_document_property(self):
        """Test case for delete_document_property
        """
        param_name = self.get_test_value('delete_document_property', 'name', 'str')
        param_property_name = self.get_test_value('delete_document_property', 'property_name', 'str')
        param_password = self.get_test_value('delete_document_property', 'password', 'str')
        param_folder = self.get_test_value('delete_document_property', 'folder', 'str')
        param_storage = self.get_test_value('delete_document_property', 'storage', 'str')
        self.initialize('delete_document_property', None, None)
        response = self.api.delete_document_property(param_name, param_property_name, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_delete_document_property_invalid_name(self):
        """Test case for delete_document_property with invalid name
        """
        param_name = self.get_test_value('delete_document_property', 'name', 'str')
        param_property_name = self.get_test_value('delete_document_property', 'property_name', 'str')
        param_password = self.get_test_value('delete_document_property', 'password', 'str')
        param_folder = self.get_test_value('delete_document_property', 'folder', 'str')
        param_storage = self.get_test_value('delete_document_property', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_document_property', 'name', param_name, 'str')
        self.initialize('delete_document_property', 'name', param_name)
        ok = False
        try:
            self.api.delete_document_property(param_name, param_property_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_document_property', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_document_property', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_document_property', 'name')

    def test_delete_document_property_invalid_property_name(self):
        """Test case for delete_document_property with invalid property_name
        """
        param_name = self.get_test_value('delete_document_property', 'name', 'str')
        param_property_name = self.get_test_value('delete_document_property', 'property_name', 'str')
        param_password = self.get_test_value('delete_document_property', 'password', 'str')
        param_folder = self.get_test_value('delete_document_property', 'folder', 'str')
        param_storage = self.get_test_value('delete_document_property', 'storage', 'str')
        param_property_name = self.get_invalid_test_value('delete_document_property', 'property_name', param_property_name, 'str')
        self.initialize('delete_document_property', 'property_name', param_property_name)
        ok = False
        try:
            self.api.delete_document_property(param_name, param_property_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_document_property', 'property_name', param_property_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_document_property', 'property_name', param_property_name)
        if ok:
            self.assert_no_exception('delete_document_property', 'property_name')

    def test_delete_document_property_invalid_password(self):
        """Test case for delete_document_property with invalid password
        """
        param_name = self.get_test_value('delete_document_property', 'name', 'str')
        param_property_name = self.get_test_value('delete_document_property', 'property_name', 'str')
        param_password = self.get_test_value('delete_document_property', 'password', 'str')
        param_folder = self.get_test_value('delete_document_property', 'folder', 'str')
        param_storage = self.get_test_value('delete_document_property', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_document_property', 'password', param_password, 'str')
        self.initialize('delete_document_property', 'password', param_password)
        ok = False
        try:
            self.api.delete_document_property(param_name, param_property_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_document_property', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_document_property', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_document_property', 'password')

    def test_delete_document_property_invalid_folder(self):
        """Test case for delete_document_property with invalid folder
        """
        param_name = self.get_test_value('delete_document_property', 'name', 'str')
        param_property_name = self.get_test_value('delete_document_property', 'property_name', 'str')
        param_password = self.get_test_value('delete_document_property', 'password', 'str')
        param_folder = self.get_test_value('delete_document_property', 'folder', 'str')
        param_storage = self.get_test_value('delete_document_property', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_document_property', 'folder', param_folder, 'str')
        self.initialize('delete_document_property', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_document_property(param_name, param_property_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_document_property', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_document_property', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_document_property', 'folder')

    def test_delete_document_property_invalid_storage(self):
        """Test case for delete_document_property with invalid storage
        """
        param_name = self.get_test_value('delete_document_property', 'name', 'str')
        param_property_name = self.get_test_value('delete_document_property', 'property_name', 'str')
        param_password = self.get_test_value('delete_document_property', 'password', 'str')
        param_folder = self.get_test_value('delete_document_property', 'folder', 'str')
        param_storage = self.get_test_value('delete_document_property', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_document_property', 'storage', param_storage, 'str')
        self.initialize('delete_document_property', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_document_property(param_name, param_property_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_document_property', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_document_property', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_document_property', 'storage')

    def test_delete_file(self):
        """Test case for delete_file
        """
        param_path = self.get_test_value('delete_file', 'path', 'str')
        param_storage_name = self.get_test_value('delete_file', 'storage_name', 'str')
        param_version_id = self.get_test_value('delete_file', 'version_id', 'str')
        self.initialize('delete_file', None, None)
        response = self.api.delete_file(param_path, param_storage_name, param_version_id)
        self.assertIsNone(response)

    def test_delete_file_invalid_path(self):
        """Test case for delete_file with invalid path
        """
        param_path = self.get_test_value('delete_file', 'path', 'str')
        param_storage_name = self.get_test_value('delete_file', 'storage_name', 'str')
        param_version_id = self.get_test_value('delete_file', 'version_id', 'str')
        param_path = self.get_invalid_test_value('delete_file', 'path', param_path, 'str')
        self.initialize('delete_file', 'path', param_path)
        ok = False
        try:
            self.api.delete_file(param_path, param_storage_name, param_version_id)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_file', 'path', param_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_file', 'path', param_path)
        if ok:
            self.assert_no_exception('delete_file', 'path')

    def test_delete_file_invalid_storage_name(self):
        """Test case for delete_file with invalid storage_name
        """
        param_path = self.get_test_value('delete_file', 'path', 'str')
        param_storage_name = self.get_test_value('delete_file', 'storage_name', 'str')
        param_version_id = self.get_test_value('delete_file', 'version_id', 'str')
        param_storage_name = self.get_invalid_test_value('delete_file', 'storage_name', param_storage_name, 'str')
        self.initialize('delete_file', 'storage_name', param_storage_name)
        ok = False
        try:
            self.api.delete_file(param_path, param_storage_name, param_version_id)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_file', 'storage_name', param_storage_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_file', 'storage_name', param_storage_name)
        if ok:
            self.assert_no_exception('delete_file', 'storage_name')

    def test_delete_file_invalid_version_id(self):
        """Test case for delete_file with invalid version_id
        """
        param_path = self.get_test_value('delete_file', 'path', 'str')
        param_storage_name = self.get_test_value('delete_file', 'storage_name', 'str')
        param_version_id = self.get_test_value('delete_file', 'version_id', 'str')
        param_version_id = self.get_invalid_test_value('delete_file', 'version_id', param_version_id, 'str')
        self.initialize('delete_file', 'version_id', param_version_id)
        ok = False
        try:
            self.api.delete_file(param_path, param_storage_name, param_version_id)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_file', 'version_id', param_version_id)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_file', 'version_id', param_version_id)
        if ok:
            self.assert_no_exception('delete_file', 'version_id')

    def test_delete_folder(self):
        """Test case for delete_folder
        """
        param_path = self.get_test_value('delete_folder', 'path', 'str')
        param_storage_name = self.get_test_value('delete_folder', 'storage_name', 'str')
        param_recursive = self.get_test_value('delete_folder', 'recursive', 'bool')
        self.initialize('delete_folder', None, None)
        response = self.api.delete_folder(param_path, param_storage_name, param_recursive)
        self.assertIsNone(response)

    def test_delete_folder_invalid_path(self):
        """Test case for delete_folder with invalid path
        """
        param_path = self.get_test_value('delete_folder', 'path', 'str')
        param_storage_name = self.get_test_value('delete_folder', 'storage_name', 'str')
        param_recursive = self.get_test_value('delete_folder', 'recursive', 'bool')
        param_path = self.get_invalid_test_value('delete_folder', 'path', param_path, 'str')
        self.initialize('delete_folder', 'path', param_path)
        ok = False
        try:
            self.api.delete_folder(param_path, param_storage_name, param_recursive)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_folder', 'path', param_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_folder', 'path', param_path)
        if ok:
            self.assert_no_exception('delete_folder', 'path')

    def test_delete_folder_invalid_storage_name(self):
        """Test case for delete_folder with invalid storage_name
        """
        param_path = self.get_test_value('delete_folder', 'path', 'str')
        param_storage_name = self.get_test_value('delete_folder', 'storage_name', 'str')
        param_recursive = self.get_test_value('delete_folder', 'recursive', 'bool')
        param_storage_name = self.get_invalid_test_value('delete_folder', 'storage_name', param_storage_name, 'str')
        self.initialize('delete_folder', 'storage_name', param_storage_name)
        ok = False
        try:
            self.api.delete_folder(param_path, param_storage_name, param_recursive)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_folder', 'storage_name', param_storage_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_folder', 'storage_name', param_storage_name)
        if ok:
            self.assert_no_exception('delete_folder', 'storage_name')

    def test_delete_folder_invalid_recursive(self):
        """Test case for delete_folder with invalid recursive
        """
        param_path = self.get_test_value('delete_folder', 'path', 'str')
        param_storage_name = self.get_test_value('delete_folder', 'storage_name', 'str')
        param_recursive = self.get_test_value('delete_folder', 'recursive', 'bool')
        param_recursive = self.get_invalid_test_value('delete_folder', 'recursive', param_recursive, 'bool')
        self.initialize('delete_folder', 'recursive', param_recursive)
        ok = False
        try:
            self.api.delete_folder(param_path, param_storage_name, param_recursive)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_folder', 'recursive', param_recursive)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_folder', 'recursive', param_recursive)
        if ok:
            self.assert_no_exception('delete_folder', 'recursive')

    def test_delete_notes_slide(self):
        """Test case for delete_notes_slide
        """
        param_name = self.get_test_value('delete_notes_slide', 'name', 'str')
        param_slide_index = self.get_test_value('delete_notes_slide', 'slide_index', 'int')
        param_password = self.get_test_value('delete_notes_slide', 'password', 'str')
        param_folder = self.get_test_value('delete_notes_slide', 'folder', 'str')
        param_storage = self.get_test_value('delete_notes_slide', 'storage', 'str')
        self.initialize('delete_notes_slide', None, None)
        response = self.api.delete_notes_slide(param_name, param_slide_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_delete_notes_slide_invalid_name(self):
        """Test case for delete_notes_slide with invalid name
        """
        param_name = self.get_test_value('delete_notes_slide', 'name', 'str')
        param_slide_index = self.get_test_value('delete_notes_slide', 'slide_index', 'int')
        param_password = self.get_test_value('delete_notes_slide', 'password', 'str')
        param_folder = self.get_test_value('delete_notes_slide', 'folder', 'str')
        param_storage = self.get_test_value('delete_notes_slide', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_notes_slide', 'name', param_name, 'str')
        self.initialize('delete_notes_slide', 'name', param_name)
        ok = False
        try:
            self.api.delete_notes_slide(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_notes_slide', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_notes_slide', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_notes_slide', 'name')

    def test_delete_notes_slide_invalid_slide_index(self):
        """Test case for delete_notes_slide with invalid slide_index
        """
        param_name = self.get_test_value('delete_notes_slide', 'name', 'str')
        param_slide_index = self.get_test_value('delete_notes_slide', 'slide_index', 'int')
        param_password = self.get_test_value('delete_notes_slide', 'password', 'str')
        param_folder = self.get_test_value('delete_notes_slide', 'folder', 'str')
        param_storage = self.get_test_value('delete_notes_slide', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('delete_notes_slide', 'slide_index', param_slide_index, 'int')
        self.initialize('delete_notes_slide', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.delete_notes_slide(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_notes_slide', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_notes_slide', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('delete_notes_slide', 'slide_index')

    def test_delete_notes_slide_invalid_password(self):
        """Test case for delete_notes_slide with invalid password
        """
        param_name = self.get_test_value('delete_notes_slide', 'name', 'str')
        param_slide_index = self.get_test_value('delete_notes_slide', 'slide_index', 'int')
        param_password = self.get_test_value('delete_notes_slide', 'password', 'str')
        param_folder = self.get_test_value('delete_notes_slide', 'folder', 'str')
        param_storage = self.get_test_value('delete_notes_slide', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_notes_slide', 'password', param_password, 'str')
        self.initialize('delete_notes_slide', 'password', param_password)
        ok = False
        try:
            self.api.delete_notes_slide(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_notes_slide', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_notes_slide', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_notes_slide', 'password')

    def test_delete_notes_slide_invalid_folder(self):
        """Test case for delete_notes_slide with invalid folder
        """
        param_name = self.get_test_value('delete_notes_slide', 'name', 'str')
        param_slide_index = self.get_test_value('delete_notes_slide', 'slide_index', 'int')
        param_password = self.get_test_value('delete_notes_slide', 'password', 'str')
        param_folder = self.get_test_value('delete_notes_slide', 'folder', 'str')
        param_storage = self.get_test_value('delete_notes_slide', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_notes_slide', 'folder', param_folder, 'str')
        self.initialize('delete_notes_slide', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_notes_slide(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_notes_slide', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_notes_slide', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_notes_slide', 'folder')

    def test_delete_notes_slide_invalid_storage(self):
        """Test case for delete_notes_slide with invalid storage
        """
        param_name = self.get_test_value('delete_notes_slide', 'name', 'str')
        param_slide_index = self.get_test_value('delete_notes_slide', 'slide_index', 'int')
        param_password = self.get_test_value('delete_notes_slide', 'password', 'str')
        param_folder = self.get_test_value('delete_notes_slide', 'folder', 'str')
        param_storage = self.get_test_value('delete_notes_slide', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_notes_slide', 'storage', param_storage, 'str')
        self.initialize('delete_notes_slide', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_notes_slide(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_notes_slide', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_notes_slide', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_notes_slide', 'storage')

    def test_delete_paragraph(self):
        """Test case for delete_paragraph
        """
        param_name = self.get_test_value('delete_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('delete_paragraph', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('delete_paragraph', 'password', 'str')
        param_folder = self.get_test_value('delete_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('delete_paragraph', 'storage', 'str')
        self.initialize('delete_paragraph', None, None)
        response = self.api.delete_paragraph(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_delete_paragraph_invalid_name(self):
        """Test case for delete_paragraph with invalid name
        """
        param_name = self.get_test_value('delete_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('delete_paragraph', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('delete_paragraph', 'password', 'str')
        param_folder = self.get_test_value('delete_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('delete_paragraph', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_paragraph', 'name', param_name, 'str')
        self.initialize('delete_paragraph', 'name', param_name)
        ok = False
        try:
            self.api.delete_paragraph(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_paragraph', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_paragraph', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_paragraph', 'name')

    def test_delete_paragraph_invalid_slide_index(self):
        """Test case for delete_paragraph with invalid slide_index
        """
        param_name = self.get_test_value('delete_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('delete_paragraph', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('delete_paragraph', 'password', 'str')
        param_folder = self.get_test_value('delete_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('delete_paragraph', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('delete_paragraph', 'slide_index', param_slide_index, 'int')
        self.initialize('delete_paragraph', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.delete_paragraph(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_paragraph', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_paragraph', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('delete_paragraph', 'slide_index')

    def test_delete_paragraph_invalid_shape_index(self):
        """Test case for delete_paragraph with invalid shape_index
        """
        param_name = self.get_test_value('delete_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('delete_paragraph', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('delete_paragraph', 'password', 'str')
        param_folder = self.get_test_value('delete_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('delete_paragraph', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('delete_paragraph', 'shape_index', param_shape_index, 'int')
        self.initialize('delete_paragraph', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.delete_paragraph(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_paragraph', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_paragraph', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('delete_paragraph', 'shape_index')

    def test_delete_paragraph_invalid_paragraph_index(self):
        """Test case for delete_paragraph with invalid paragraph_index
        """
        param_name = self.get_test_value('delete_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('delete_paragraph', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('delete_paragraph', 'password', 'str')
        param_folder = self.get_test_value('delete_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('delete_paragraph', 'storage', 'str')
        param_paragraph_index = self.get_invalid_test_value('delete_paragraph', 'paragraph_index', param_paragraph_index, 'int')
        self.initialize('delete_paragraph', 'paragraph_index', param_paragraph_index)
        ok = False
        try:
            self.api.delete_paragraph(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_paragraph', 'paragraph_index', param_paragraph_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_paragraph', 'paragraph_index', param_paragraph_index)
        if ok:
            self.assert_no_exception('delete_paragraph', 'paragraph_index')

    def test_delete_paragraph_invalid_password(self):
        """Test case for delete_paragraph with invalid password
        """
        param_name = self.get_test_value('delete_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('delete_paragraph', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('delete_paragraph', 'password', 'str')
        param_folder = self.get_test_value('delete_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('delete_paragraph', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_paragraph', 'password', param_password, 'str')
        self.initialize('delete_paragraph', 'password', param_password)
        ok = False
        try:
            self.api.delete_paragraph(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_paragraph', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_paragraph', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_paragraph', 'password')

    def test_delete_paragraph_invalid_folder(self):
        """Test case for delete_paragraph with invalid folder
        """
        param_name = self.get_test_value('delete_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('delete_paragraph', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('delete_paragraph', 'password', 'str')
        param_folder = self.get_test_value('delete_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('delete_paragraph', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_paragraph', 'folder', param_folder, 'str')
        self.initialize('delete_paragraph', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_paragraph(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_paragraph', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_paragraph', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_paragraph', 'folder')

    def test_delete_paragraph_invalid_storage(self):
        """Test case for delete_paragraph with invalid storage
        """
        param_name = self.get_test_value('delete_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('delete_paragraph', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('delete_paragraph', 'password', 'str')
        param_folder = self.get_test_value('delete_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('delete_paragraph', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_paragraph', 'storage', param_storage, 'str')
        self.initialize('delete_paragraph', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_paragraph(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_paragraph', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_paragraph', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_paragraph', 'storage')

    def test_delete_paragraphs(self):
        """Test case for delete_paragraphs
        """
        param_name = self.get_test_value('delete_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('delete_paragraphs', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_paragraphs', 'shape_index', 'int')
        param_paragraphs = self.get_test_value('delete_paragraphs', 'paragraphs', 'list[int]')
        param_password = self.get_test_value('delete_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('delete_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('delete_paragraphs', 'storage', 'str')
        self.initialize('delete_paragraphs', None, None)
        response = self.api.delete_paragraphs(param_name, param_slide_index, param_shape_index, param_paragraphs, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_delete_paragraphs_invalid_name(self):
        """Test case for delete_paragraphs with invalid name
        """
        param_name = self.get_test_value('delete_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('delete_paragraphs', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_paragraphs', 'shape_index', 'int')
        param_paragraphs = self.get_test_value('delete_paragraphs', 'paragraphs', 'list[int]')
        param_password = self.get_test_value('delete_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('delete_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('delete_paragraphs', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_paragraphs', 'name', param_name, 'str')
        self.initialize('delete_paragraphs', 'name', param_name)
        ok = False
        try:
            self.api.delete_paragraphs(param_name, param_slide_index, param_shape_index, param_paragraphs, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_paragraphs', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_paragraphs', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_paragraphs', 'name')

    def test_delete_paragraphs_invalid_slide_index(self):
        """Test case for delete_paragraphs with invalid slide_index
        """
        param_name = self.get_test_value('delete_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('delete_paragraphs', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_paragraphs', 'shape_index', 'int')
        param_paragraphs = self.get_test_value('delete_paragraphs', 'paragraphs', 'list[int]')
        param_password = self.get_test_value('delete_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('delete_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('delete_paragraphs', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('delete_paragraphs', 'slide_index', param_slide_index, 'int')
        self.initialize('delete_paragraphs', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.delete_paragraphs(param_name, param_slide_index, param_shape_index, param_paragraphs, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_paragraphs', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_paragraphs', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('delete_paragraphs', 'slide_index')

    def test_delete_paragraphs_invalid_shape_index(self):
        """Test case for delete_paragraphs with invalid shape_index
        """
        param_name = self.get_test_value('delete_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('delete_paragraphs', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_paragraphs', 'shape_index', 'int')
        param_paragraphs = self.get_test_value('delete_paragraphs', 'paragraphs', 'list[int]')
        param_password = self.get_test_value('delete_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('delete_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('delete_paragraphs', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('delete_paragraphs', 'shape_index', param_shape_index, 'int')
        self.initialize('delete_paragraphs', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.delete_paragraphs(param_name, param_slide_index, param_shape_index, param_paragraphs, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_paragraphs', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_paragraphs', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('delete_paragraphs', 'shape_index')

    def test_delete_paragraphs_invalid_paragraphs(self):
        """Test case for delete_paragraphs with invalid paragraphs
        """
        param_name = self.get_test_value('delete_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('delete_paragraphs', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_paragraphs', 'shape_index', 'int')
        param_paragraphs = self.get_test_value('delete_paragraphs', 'paragraphs', 'list[int]')
        param_password = self.get_test_value('delete_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('delete_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('delete_paragraphs', 'storage', 'str')
        param_paragraphs = self.get_invalid_test_value('delete_paragraphs', 'paragraphs', param_paragraphs, 'list[int]')
        self.initialize('delete_paragraphs', 'paragraphs', param_paragraphs)
        ok = False
        try:
            self.api.delete_paragraphs(param_name, param_slide_index, param_shape_index, param_paragraphs, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_paragraphs', 'paragraphs', param_paragraphs)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_paragraphs', 'paragraphs', param_paragraphs)
        if ok:
            self.assert_no_exception('delete_paragraphs', 'paragraphs')

    def test_delete_paragraphs_invalid_password(self):
        """Test case for delete_paragraphs with invalid password
        """
        param_name = self.get_test_value('delete_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('delete_paragraphs', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_paragraphs', 'shape_index', 'int')
        param_paragraphs = self.get_test_value('delete_paragraphs', 'paragraphs', 'list[int]')
        param_password = self.get_test_value('delete_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('delete_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('delete_paragraphs', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_paragraphs', 'password', param_password, 'str')
        self.initialize('delete_paragraphs', 'password', param_password)
        ok = False
        try:
            self.api.delete_paragraphs(param_name, param_slide_index, param_shape_index, param_paragraphs, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_paragraphs', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_paragraphs', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_paragraphs', 'password')

    def test_delete_paragraphs_invalid_folder(self):
        """Test case for delete_paragraphs with invalid folder
        """
        param_name = self.get_test_value('delete_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('delete_paragraphs', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_paragraphs', 'shape_index', 'int')
        param_paragraphs = self.get_test_value('delete_paragraphs', 'paragraphs', 'list[int]')
        param_password = self.get_test_value('delete_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('delete_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('delete_paragraphs', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_paragraphs', 'folder', param_folder, 'str')
        self.initialize('delete_paragraphs', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_paragraphs(param_name, param_slide_index, param_shape_index, param_paragraphs, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_paragraphs', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_paragraphs', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_paragraphs', 'folder')

    def test_delete_paragraphs_invalid_storage(self):
        """Test case for delete_paragraphs with invalid storage
        """
        param_name = self.get_test_value('delete_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('delete_paragraphs', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_paragraphs', 'shape_index', 'int')
        param_paragraphs = self.get_test_value('delete_paragraphs', 'paragraphs', 'list[int]')
        param_password = self.get_test_value('delete_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('delete_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('delete_paragraphs', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_paragraphs', 'storage', param_storage, 'str')
        self.initialize('delete_paragraphs', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_paragraphs(param_name, param_slide_index, param_shape_index, param_paragraphs, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_paragraphs', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_paragraphs', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_paragraphs', 'storage')

    def test_delete_portion(self):
        """Test case for delete_portion
        """
        param_name = self.get_test_value('delete_portion', 'name', 'str')
        param_slide_index = self.get_test_value('delete_portion', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('delete_portion', 'portion_index', 'int')
        param_password = self.get_test_value('delete_portion', 'password', 'str')
        param_folder = self.get_test_value('delete_portion', 'folder', 'str')
        param_storage = self.get_test_value('delete_portion', 'storage', 'str')
        self.initialize('delete_portion', None, None)
        response = self.api.delete_portion(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_delete_portion_invalid_name(self):
        """Test case for delete_portion with invalid name
        """
        param_name = self.get_test_value('delete_portion', 'name', 'str')
        param_slide_index = self.get_test_value('delete_portion', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('delete_portion', 'portion_index', 'int')
        param_password = self.get_test_value('delete_portion', 'password', 'str')
        param_folder = self.get_test_value('delete_portion', 'folder', 'str')
        param_storage = self.get_test_value('delete_portion', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_portion', 'name', param_name, 'str')
        self.initialize('delete_portion', 'name', param_name)
        ok = False
        try:
            self.api.delete_portion(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_portion', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_portion', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_portion', 'name')

    def test_delete_portion_invalid_slide_index(self):
        """Test case for delete_portion with invalid slide_index
        """
        param_name = self.get_test_value('delete_portion', 'name', 'str')
        param_slide_index = self.get_test_value('delete_portion', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('delete_portion', 'portion_index', 'int')
        param_password = self.get_test_value('delete_portion', 'password', 'str')
        param_folder = self.get_test_value('delete_portion', 'folder', 'str')
        param_storage = self.get_test_value('delete_portion', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('delete_portion', 'slide_index', param_slide_index, 'int')
        self.initialize('delete_portion', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.delete_portion(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_portion', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_portion', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('delete_portion', 'slide_index')

    def test_delete_portion_invalid_shape_index(self):
        """Test case for delete_portion with invalid shape_index
        """
        param_name = self.get_test_value('delete_portion', 'name', 'str')
        param_slide_index = self.get_test_value('delete_portion', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('delete_portion', 'portion_index', 'int')
        param_password = self.get_test_value('delete_portion', 'password', 'str')
        param_folder = self.get_test_value('delete_portion', 'folder', 'str')
        param_storage = self.get_test_value('delete_portion', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('delete_portion', 'shape_index', param_shape_index, 'int')
        self.initialize('delete_portion', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.delete_portion(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_portion', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_portion', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('delete_portion', 'shape_index')

    def test_delete_portion_invalid_paragraph_index(self):
        """Test case for delete_portion with invalid paragraph_index
        """
        param_name = self.get_test_value('delete_portion', 'name', 'str')
        param_slide_index = self.get_test_value('delete_portion', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('delete_portion', 'portion_index', 'int')
        param_password = self.get_test_value('delete_portion', 'password', 'str')
        param_folder = self.get_test_value('delete_portion', 'folder', 'str')
        param_storage = self.get_test_value('delete_portion', 'storage', 'str')
        param_paragraph_index = self.get_invalid_test_value('delete_portion', 'paragraph_index', param_paragraph_index, 'int')
        self.initialize('delete_portion', 'paragraph_index', param_paragraph_index)
        ok = False
        try:
            self.api.delete_portion(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_portion', 'paragraph_index', param_paragraph_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_portion', 'paragraph_index', param_paragraph_index)
        if ok:
            self.assert_no_exception('delete_portion', 'paragraph_index')

    def test_delete_portion_invalid_portion_index(self):
        """Test case for delete_portion with invalid portion_index
        """
        param_name = self.get_test_value('delete_portion', 'name', 'str')
        param_slide_index = self.get_test_value('delete_portion', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('delete_portion', 'portion_index', 'int')
        param_password = self.get_test_value('delete_portion', 'password', 'str')
        param_folder = self.get_test_value('delete_portion', 'folder', 'str')
        param_storage = self.get_test_value('delete_portion', 'storage', 'str')
        param_portion_index = self.get_invalid_test_value('delete_portion', 'portion_index', param_portion_index, 'int')
        self.initialize('delete_portion', 'portion_index', param_portion_index)
        ok = False
        try:
            self.api.delete_portion(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_portion', 'portion_index', param_portion_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_portion', 'portion_index', param_portion_index)
        if ok:
            self.assert_no_exception('delete_portion', 'portion_index')

    def test_delete_portion_invalid_password(self):
        """Test case for delete_portion with invalid password
        """
        param_name = self.get_test_value('delete_portion', 'name', 'str')
        param_slide_index = self.get_test_value('delete_portion', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('delete_portion', 'portion_index', 'int')
        param_password = self.get_test_value('delete_portion', 'password', 'str')
        param_folder = self.get_test_value('delete_portion', 'folder', 'str')
        param_storage = self.get_test_value('delete_portion', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_portion', 'password', param_password, 'str')
        self.initialize('delete_portion', 'password', param_password)
        ok = False
        try:
            self.api.delete_portion(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_portion', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_portion', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_portion', 'password')

    def test_delete_portion_invalid_folder(self):
        """Test case for delete_portion with invalid folder
        """
        param_name = self.get_test_value('delete_portion', 'name', 'str')
        param_slide_index = self.get_test_value('delete_portion', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('delete_portion', 'portion_index', 'int')
        param_password = self.get_test_value('delete_portion', 'password', 'str')
        param_folder = self.get_test_value('delete_portion', 'folder', 'str')
        param_storage = self.get_test_value('delete_portion', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_portion', 'folder', param_folder, 'str')
        self.initialize('delete_portion', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_portion(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_portion', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_portion', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_portion', 'folder')

    def test_delete_portion_invalid_storage(self):
        """Test case for delete_portion with invalid storage
        """
        param_name = self.get_test_value('delete_portion', 'name', 'str')
        param_slide_index = self.get_test_value('delete_portion', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('delete_portion', 'portion_index', 'int')
        param_password = self.get_test_value('delete_portion', 'password', 'str')
        param_folder = self.get_test_value('delete_portion', 'folder', 'str')
        param_storage = self.get_test_value('delete_portion', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_portion', 'storage', param_storage, 'str')
        self.initialize('delete_portion', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_portion(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_portion', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_portion', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_portion', 'storage')

    def test_delete_portions(self):
        """Test case for delete_portions
        """
        param_name = self.get_test_value('delete_portions', 'name', 'str')
        param_slide_index = self.get_test_value('delete_portions', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_portions', 'paragraph_index', 'int')
        param_portions = self.get_test_value('delete_portions', 'portions', 'list[int]')
        param_password = self.get_test_value('delete_portions', 'password', 'str')
        param_folder = self.get_test_value('delete_portions', 'folder', 'str')
        param_storage = self.get_test_value('delete_portions', 'storage', 'str')
        self.initialize('delete_portions', None, None)
        response = self.api.delete_portions(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portions, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_delete_portions_invalid_name(self):
        """Test case for delete_portions with invalid name
        """
        param_name = self.get_test_value('delete_portions', 'name', 'str')
        param_slide_index = self.get_test_value('delete_portions', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_portions', 'paragraph_index', 'int')
        param_portions = self.get_test_value('delete_portions', 'portions', 'list[int]')
        param_password = self.get_test_value('delete_portions', 'password', 'str')
        param_folder = self.get_test_value('delete_portions', 'folder', 'str')
        param_storage = self.get_test_value('delete_portions', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_portions', 'name', param_name, 'str')
        self.initialize('delete_portions', 'name', param_name)
        ok = False
        try:
            self.api.delete_portions(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portions, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_portions', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_portions', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_portions', 'name')

    def test_delete_portions_invalid_slide_index(self):
        """Test case for delete_portions with invalid slide_index
        """
        param_name = self.get_test_value('delete_portions', 'name', 'str')
        param_slide_index = self.get_test_value('delete_portions', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_portions', 'paragraph_index', 'int')
        param_portions = self.get_test_value('delete_portions', 'portions', 'list[int]')
        param_password = self.get_test_value('delete_portions', 'password', 'str')
        param_folder = self.get_test_value('delete_portions', 'folder', 'str')
        param_storage = self.get_test_value('delete_portions', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('delete_portions', 'slide_index', param_slide_index, 'int')
        self.initialize('delete_portions', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.delete_portions(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portions, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_portions', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_portions', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('delete_portions', 'slide_index')

    def test_delete_portions_invalid_shape_index(self):
        """Test case for delete_portions with invalid shape_index
        """
        param_name = self.get_test_value('delete_portions', 'name', 'str')
        param_slide_index = self.get_test_value('delete_portions', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_portions', 'paragraph_index', 'int')
        param_portions = self.get_test_value('delete_portions', 'portions', 'list[int]')
        param_password = self.get_test_value('delete_portions', 'password', 'str')
        param_folder = self.get_test_value('delete_portions', 'folder', 'str')
        param_storage = self.get_test_value('delete_portions', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('delete_portions', 'shape_index', param_shape_index, 'int')
        self.initialize('delete_portions', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.delete_portions(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portions, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_portions', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_portions', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('delete_portions', 'shape_index')

    def test_delete_portions_invalid_paragraph_index(self):
        """Test case for delete_portions with invalid paragraph_index
        """
        param_name = self.get_test_value('delete_portions', 'name', 'str')
        param_slide_index = self.get_test_value('delete_portions', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_portions', 'paragraph_index', 'int')
        param_portions = self.get_test_value('delete_portions', 'portions', 'list[int]')
        param_password = self.get_test_value('delete_portions', 'password', 'str')
        param_folder = self.get_test_value('delete_portions', 'folder', 'str')
        param_storage = self.get_test_value('delete_portions', 'storage', 'str')
        param_paragraph_index = self.get_invalid_test_value('delete_portions', 'paragraph_index', param_paragraph_index, 'int')
        self.initialize('delete_portions', 'paragraph_index', param_paragraph_index)
        ok = False
        try:
            self.api.delete_portions(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portions, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_portions', 'paragraph_index', param_paragraph_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_portions', 'paragraph_index', param_paragraph_index)
        if ok:
            self.assert_no_exception('delete_portions', 'paragraph_index')

    def test_delete_portions_invalid_portions(self):
        """Test case for delete_portions with invalid portions
        """
        param_name = self.get_test_value('delete_portions', 'name', 'str')
        param_slide_index = self.get_test_value('delete_portions', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_portions', 'paragraph_index', 'int')
        param_portions = self.get_test_value('delete_portions', 'portions', 'list[int]')
        param_password = self.get_test_value('delete_portions', 'password', 'str')
        param_folder = self.get_test_value('delete_portions', 'folder', 'str')
        param_storage = self.get_test_value('delete_portions', 'storage', 'str')
        param_portions = self.get_invalid_test_value('delete_portions', 'portions', param_portions, 'list[int]')
        self.initialize('delete_portions', 'portions', param_portions)
        ok = False
        try:
            self.api.delete_portions(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portions, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_portions', 'portions', param_portions)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_portions', 'portions', param_portions)
        if ok:
            self.assert_no_exception('delete_portions', 'portions')

    def test_delete_portions_invalid_password(self):
        """Test case for delete_portions with invalid password
        """
        param_name = self.get_test_value('delete_portions', 'name', 'str')
        param_slide_index = self.get_test_value('delete_portions', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_portions', 'paragraph_index', 'int')
        param_portions = self.get_test_value('delete_portions', 'portions', 'list[int]')
        param_password = self.get_test_value('delete_portions', 'password', 'str')
        param_folder = self.get_test_value('delete_portions', 'folder', 'str')
        param_storage = self.get_test_value('delete_portions', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_portions', 'password', param_password, 'str')
        self.initialize('delete_portions', 'password', param_password)
        ok = False
        try:
            self.api.delete_portions(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portions, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_portions', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_portions', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_portions', 'password')

    def test_delete_portions_invalid_folder(self):
        """Test case for delete_portions with invalid folder
        """
        param_name = self.get_test_value('delete_portions', 'name', 'str')
        param_slide_index = self.get_test_value('delete_portions', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_portions', 'paragraph_index', 'int')
        param_portions = self.get_test_value('delete_portions', 'portions', 'list[int]')
        param_password = self.get_test_value('delete_portions', 'password', 'str')
        param_folder = self.get_test_value('delete_portions', 'folder', 'str')
        param_storage = self.get_test_value('delete_portions', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_portions', 'folder', param_folder, 'str')
        self.initialize('delete_portions', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_portions(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portions, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_portions', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_portions', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_portions', 'folder')

    def test_delete_portions_invalid_storage(self):
        """Test case for delete_portions with invalid storage
        """
        param_name = self.get_test_value('delete_portions', 'name', 'str')
        param_slide_index = self.get_test_value('delete_portions', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_portions', 'paragraph_index', 'int')
        param_portions = self.get_test_value('delete_portions', 'portions', 'list[int]')
        param_password = self.get_test_value('delete_portions', 'password', 'str')
        param_folder = self.get_test_value('delete_portions', 'folder', 'str')
        param_storage = self.get_test_value('delete_portions', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_portions', 'storage', param_storage, 'str')
        self.initialize('delete_portions', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_portions(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portions, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_portions', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_portions', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_portions', 'storage')

    def test_delete_protection(self):
        """Test case for delete_protection
        """
        param_name = self.get_test_value('delete_protection', 'name', 'str')
        param_password = self.get_test_value('delete_protection', 'password', 'str')
        param_folder = self.get_test_value('delete_protection', 'folder', 'str')
        param_storage = self.get_test_value('delete_protection', 'storage', 'str')
        self.initialize('delete_protection', None, None)
        response = self.api.delete_protection(param_name, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_delete_protection_invalid_name(self):
        """Test case for delete_protection with invalid name
        """
        param_name = self.get_test_value('delete_protection', 'name', 'str')
        param_password = self.get_test_value('delete_protection', 'password', 'str')
        param_folder = self.get_test_value('delete_protection', 'folder', 'str')
        param_storage = self.get_test_value('delete_protection', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_protection', 'name', param_name, 'str')
        self.initialize('delete_protection', 'name', param_name)
        ok = False
        try:
            self.api.delete_protection(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_protection', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_protection', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_protection', 'name')

    def test_delete_protection_invalid_password(self):
        """Test case for delete_protection with invalid password
        """
        param_name = self.get_test_value('delete_protection', 'name', 'str')
        param_password = self.get_test_value('delete_protection', 'password', 'str')
        param_folder = self.get_test_value('delete_protection', 'folder', 'str')
        param_storage = self.get_test_value('delete_protection', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_protection', 'password', param_password, 'str')
        self.initialize('delete_protection', 'password', param_password)
        ok = False
        try:
            self.api.delete_protection(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_protection', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_protection', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_protection', 'password')

    def test_delete_protection_invalid_folder(self):
        """Test case for delete_protection with invalid folder
        """
        param_name = self.get_test_value('delete_protection', 'name', 'str')
        param_password = self.get_test_value('delete_protection', 'password', 'str')
        param_folder = self.get_test_value('delete_protection', 'folder', 'str')
        param_storage = self.get_test_value('delete_protection', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_protection', 'folder', param_folder, 'str')
        self.initialize('delete_protection', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_protection(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_protection', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_protection', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_protection', 'folder')

    def test_delete_protection_invalid_storage(self):
        """Test case for delete_protection with invalid storage
        """
        param_name = self.get_test_value('delete_protection', 'name', 'str')
        param_password = self.get_test_value('delete_protection', 'password', 'str')
        param_folder = self.get_test_value('delete_protection', 'folder', 'str')
        param_storage = self.get_test_value('delete_protection', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_protection', 'storage', param_storage, 'str')
        self.initialize('delete_protection', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_protection(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_protection', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_protection', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_protection', 'storage')

    def test_delete_protection_online(self):
        """Test case for delete_protection_online
        """
        param_document = self.get_test_value('delete_protection_online', 'document', 'file')
        param_password = self.get_test_value('delete_protection_online', 'password', 'str')
        self.initialize('delete_protection_online', None, None)
        response = self.api.delete_protection_online(param_document, param_password)
        self.assertTrue(isinstance(response, str))
        self.assertTrue(len(response) > 0)

    def test_delete_protection_online_invalid_document(self):
        """Test case for delete_protection_online with invalid document
        """
        param_document = self.get_test_value('delete_protection_online', 'document', 'file')
        param_password = self.get_test_value('delete_protection_online', 'password', 'str')
        param_document = self.get_invalid_test_value('delete_protection_online', 'document', param_document, 'file')
        self.initialize('delete_protection_online', 'document', param_document)
        ok = False
        try:
            self.api.delete_protection_online(param_document, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_protection_online', 'document', param_document)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_protection_online', 'document', param_document)
        if ok:
            self.assert_no_exception('delete_protection_online', 'document')

    def test_delete_protection_online_invalid_password(self):
        """Test case for delete_protection_online with invalid password
        """
        param_document = self.get_test_value('delete_protection_online', 'document', 'file')
        param_password = self.get_test_value('delete_protection_online', 'password', 'str')
        param_password = self.get_invalid_test_value('delete_protection_online', 'password', param_password, 'str')
        self.initialize('delete_protection_online', 'password', param_password)
        ok = False
        try:
            self.api.delete_protection_online(param_document, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_protection_online', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_protection_online', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_protection_online', 'password')

    def test_delete_section(self):
        """Test case for delete_section
        """
        param_name = self.get_test_value('delete_section', 'name', 'str')
        param_section_index = self.get_test_value('delete_section', 'section_index', 'int')
        param_with_slides = self.get_test_value('delete_section', 'with_slides', 'bool')
        param_password = self.get_test_value('delete_section', 'password', 'str')
        param_folder = self.get_test_value('delete_section', 'folder', 'str')
        param_storage = self.get_test_value('delete_section', 'storage', 'str')
        self.initialize('delete_section', None, None)
        response = self.api.delete_section(param_name, param_section_index, param_with_slides, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_delete_section_invalid_name(self):
        """Test case for delete_section with invalid name
        """
        param_name = self.get_test_value('delete_section', 'name', 'str')
        param_section_index = self.get_test_value('delete_section', 'section_index', 'int')
        param_with_slides = self.get_test_value('delete_section', 'with_slides', 'bool')
        param_password = self.get_test_value('delete_section', 'password', 'str')
        param_folder = self.get_test_value('delete_section', 'folder', 'str')
        param_storage = self.get_test_value('delete_section', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_section', 'name', param_name, 'str')
        self.initialize('delete_section', 'name', param_name)
        ok = False
        try:
            self.api.delete_section(param_name, param_section_index, param_with_slides, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_section', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_section', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_section', 'name')

    def test_delete_section_invalid_section_index(self):
        """Test case for delete_section with invalid section_index
        """
        param_name = self.get_test_value('delete_section', 'name', 'str')
        param_section_index = self.get_test_value('delete_section', 'section_index', 'int')
        param_with_slides = self.get_test_value('delete_section', 'with_slides', 'bool')
        param_password = self.get_test_value('delete_section', 'password', 'str')
        param_folder = self.get_test_value('delete_section', 'folder', 'str')
        param_storage = self.get_test_value('delete_section', 'storage', 'str')
        param_section_index = self.get_invalid_test_value('delete_section', 'section_index', param_section_index, 'int')
        self.initialize('delete_section', 'section_index', param_section_index)
        ok = False
        try:
            self.api.delete_section(param_name, param_section_index, param_with_slides, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_section', 'section_index', param_section_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_section', 'section_index', param_section_index)
        if ok:
            self.assert_no_exception('delete_section', 'section_index')

    def test_delete_section_invalid_with_slides(self):
        """Test case for delete_section with invalid with_slides
        """
        param_name = self.get_test_value('delete_section', 'name', 'str')
        param_section_index = self.get_test_value('delete_section', 'section_index', 'int')
        param_with_slides = self.get_test_value('delete_section', 'with_slides', 'bool')
        param_password = self.get_test_value('delete_section', 'password', 'str')
        param_folder = self.get_test_value('delete_section', 'folder', 'str')
        param_storage = self.get_test_value('delete_section', 'storage', 'str')
        param_with_slides = self.get_invalid_test_value('delete_section', 'with_slides', param_with_slides, 'bool')
        self.initialize('delete_section', 'with_slides', param_with_slides)
        ok = False
        try:
            self.api.delete_section(param_name, param_section_index, param_with_slides, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_section', 'with_slides', param_with_slides)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_section', 'with_slides', param_with_slides)
        if ok:
            self.assert_no_exception('delete_section', 'with_slides')

    def test_delete_section_invalid_password(self):
        """Test case for delete_section with invalid password
        """
        param_name = self.get_test_value('delete_section', 'name', 'str')
        param_section_index = self.get_test_value('delete_section', 'section_index', 'int')
        param_with_slides = self.get_test_value('delete_section', 'with_slides', 'bool')
        param_password = self.get_test_value('delete_section', 'password', 'str')
        param_folder = self.get_test_value('delete_section', 'folder', 'str')
        param_storage = self.get_test_value('delete_section', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_section', 'password', param_password, 'str')
        self.initialize('delete_section', 'password', param_password)
        ok = False
        try:
            self.api.delete_section(param_name, param_section_index, param_with_slides, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_section', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_section', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_section', 'password')

    def test_delete_section_invalid_folder(self):
        """Test case for delete_section with invalid folder
        """
        param_name = self.get_test_value('delete_section', 'name', 'str')
        param_section_index = self.get_test_value('delete_section', 'section_index', 'int')
        param_with_slides = self.get_test_value('delete_section', 'with_slides', 'bool')
        param_password = self.get_test_value('delete_section', 'password', 'str')
        param_folder = self.get_test_value('delete_section', 'folder', 'str')
        param_storage = self.get_test_value('delete_section', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_section', 'folder', param_folder, 'str')
        self.initialize('delete_section', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_section(param_name, param_section_index, param_with_slides, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_section', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_section', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_section', 'folder')

    def test_delete_section_invalid_storage(self):
        """Test case for delete_section with invalid storage
        """
        param_name = self.get_test_value('delete_section', 'name', 'str')
        param_section_index = self.get_test_value('delete_section', 'section_index', 'int')
        param_with_slides = self.get_test_value('delete_section', 'with_slides', 'bool')
        param_password = self.get_test_value('delete_section', 'password', 'str')
        param_folder = self.get_test_value('delete_section', 'folder', 'str')
        param_storage = self.get_test_value('delete_section', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_section', 'storage', param_storage, 'str')
        self.initialize('delete_section', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_section(param_name, param_section_index, param_with_slides, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_section', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_section', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_section', 'storage')

    def test_delete_sections(self):
        """Test case for delete_sections
        """
        param_name = self.get_test_value('delete_sections', 'name', 'str')
        param_sections = self.get_test_value('delete_sections', 'sections', 'list[int]')
        param_with_slides = self.get_test_value('delete_sections', 'with_slides', 'bool')
        param_password = self.get_test_value('delete_sections', 'password', 'str')
        param_folder = self.get_test_value('delete_sections', 'folder', 'str')
        param_storage = self.get_test_value('delete_sections', 'storage', 'str')
        self.initialize('delete_sections', None, None)
        response = self.api.delete_sections(param_name, param_sections, param_with_slides, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_delete_sections_invalid_name(self):
        """Test case for delete_sections with invalid name
        """
        param_name = self.get_test_value('delete_sections', 'name', 'str')
        param_sections = self.get_test_value('delete_sections', 'sections', 'list[int]')
        param_with_slides = self.get_test_value('delete_sections', 'with_slides', 'bool')
        param_password = self.get_test_value('delete_sections', 'password', 'str')
        param_folder = self.get_test_value('delete_sections', 'folder', 'str')
        param_storage = self.get_test_value('delete_sections', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_sections', 'name', param_name, 'str')
        self.initialize('delete_sections', 'name', param_name)
        ok = False
        try:
            self.api.delete_sections(param_name, param_sections, param_with_slides, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_sections', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_sections', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_sections', 'name')

    def test_delete_sections_invalid_sections(self):
        """Test case for delete_sections with invalid sections
        """
        param_name = self.get_test_value('delete_sections', 'name', 'str')
        param_sections = self.get_test_value('delete_sections', 'sections', 'list[int]')
        param_with_slides = self.get_test_value('delete_sections', 'with_slides', 'bool')
        param_password = self.get_test_value('delete_sections', 'password', 'str')
        param_folder = self.get_test_value('delete_sections', 'folder', 'str')
        param_storage = self.get_test_value('delete_sections', 'storage', 'str')
        param_sections = self.get_invalid_test_value('delete_sections', 'sections', param_sections, 'list[int]')
        self.initialize('delete_sections', 'sections', param_sections)
        ok = False
        try:
            self.api.delete_sections(param_name, param_sections, param_with_slides, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_sections', 'sections', param_sections)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_sections', 'sections', param_sections)
        if ok:
            self.assert_no_exception('delete_sections', 'sections')

    def test_delete_sections_invalid_with_slides(self):
        """Test case for delete_sections with invalid with_slides
        """
        param_name = self.get_test_value('delete_sections', 'name', 'str')
        param_sections = self.get_test_value('delete_sections', 'sections', 'list[int]')
        param_with_slides = self.get_test_value('delete_sections', 'with_slides', 'bool')
        param_password = self.get_test_value('delete_sections', 'password', 'str')
        param_folder = self.get_test_value('delete_sections', 'folder', 'str')
        param_storage = self.get_test_value('delete_sections', 'storage', 'str')
        param_with_slides = self.get_invalid_test_value('delete_sections', 'with_slides', param_with_slides, 'bool')
        self.initialize('delete_sections', 'with_slides', param_with_slides)
        ok = False
        try:
            self.api.delete_sections(param_name, param_sections, param_with_slides, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_sections', 'with_slides', param_with_slides)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_sections', 'with_slides', param_with_slides)
        if ok:
            self.assert_no_exception('delete_sections', 'with_slides')

    def test_delete_sections_invalid_password(self):
        """Test case for delete_sections with invalid password
        """
        param_name = self.get_test_value('delete_sections', 'name', 'str')
        param_sections = self.get_test_value('delete_sections', 'sections', 'list[int]')
        param_with_slides = self.get_test_value('delete_sections', 'with_slides', 'bool')
        param_password = self.get_test_value('delete_sections', 'password', 'str')
        param_folder = self.get_test_value('delete_sections', 'folder', 'str')
        param_storage = self.get_test_value('delete_sections', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_sections', 'password', param_password, 'str')
        self.initialize('delete_sections', 'password', param_password)
        ok = False
        try:
            self.api.delete_sections(param_name, param_sections, param_with_slides, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_sections', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_sections', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_sections', 'password')

    def test_delete_sections_invalid_folder(self):
        """Test case for delete_sections with invalid folder
        """
        param_name = self.get_test_value('delete_sections', 'name', 'str')
        param_sections = self.get_test_value('delete_sections', 'sections', 'list[int]')
        param_with_slides = self.get_test_value('delete_sections', 'with_slides', 'bool')
        param_password = self.get_test_value('delete_sections', 'password', 'str')
        param_folder = self.get_test_value('delete_sections', 'folder', 'str')
        param_storage = self.get_test_value('delete_sections', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_sections', 'folder', param_folder, 'str')
        self.initialize('delete_sections', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_sections(param_name, param_sections, param_with_slides, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_sections', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_sections', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_sections', 'folder')

    def test_delete_sections_invalid_storage(self):
        """Test case for delete_sections with invalid storage
        """
        param_name = self.get_test_value('delete_sections', 'name', 'str')
        param_sections = self.get_test_value('delete_sections', 'sections', 'list[int]')
        param_with_slides = self.get_test_value('delete_sections', 'with_slides', 'bool')
        param_password = self.get_test_value('delete_sections', 'password', 'str')
        param_folder = self.get_test_value('delete_sections', 'folder', 'str')
        param_storage = self.get_test_value('delete_sections', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_sections', 'storage', param_storage, 'str')
        self.initialize('delete_sections', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_sections(param_name, param_sections, param_with_slides, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_sections', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_sections', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_sections', 'storage')

    def test_delete_shape(self):
        """Test case for delete_shape
        """
        param_name = self.get_test_value('delete_shape', 'name', 'str')
        param_slide_index = self.get_test_value('delete_shape', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_shape', 'shape_index', 'int')
        param_password = self.get_test_value('delete_shape', 'password', 'str')
        param_folder = self.get_test_value('delete_shape', 'folder', 'str')
        param_storage = self.get_test_value('delete_shape', 'storage', 'str')
        self.initialize('delete_shape', None, None)
        response = self.api.delete_shape(param_name, param_slide_index, param_shape_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_delete_shape_invalid_name(self):
        """Test case for delete_shape with invalid name
        """
        param_name = self.get_test_value('delete_shape', 'name', 'str')
        param_slide_index = self.get_test_value('delete_shape', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_shape', 'shape_index', 'int')
        param_password = self.get_test_value('delete_shape', 'password', 'str')
        param_folder = self.get_test_value('delete_shape', 'folder', 'str')
        param_storage = self.get_test_value('delete_shape', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_shape', 'name', param_name, 'str')
        self.initialize('delete_shape', 'name', param_name)
        ok = False
        try:
            self.api.delete_shape(param_name, param_slide_index, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_shape', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_shape', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_shape', 'name')

    def test_delete_shape_invalid_slide_index(self):
        """Test case for delete_shape with invalid slide_index
        """
        param_name = self.get_test_value('delete_shape', 'name', 'str')
        param_slide_index = self.get_test_value('delete_shape', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_shape', 'shape_index', 'int')
        param_password = self.get_test_value('delete_shape', 'password', 'str')
        param_folder = self.get_test_value('delete_shape', 'folder', 'str')
        param_storage = self.get_test_value('delete_shape', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('delete_shape', 'slide_index', param_slide_index, 'int')
        self.initialize('delete_shape', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.delete_shape(param_name, param_slide_index, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_shape', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_shape', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('delete_shape', 'slide_index')

    def test_delete_shape_invalid_shape_index(self):
        """Test case for delete_shape with invalid shape_index
        """
        param_name = self.get_test_value('delete_shape', 'name', 'str')
        param_slide_index = self.get_test_value('delete_shape', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_shape', 'shape_index', 'int')
        param_password = self.get_test_value('delete_shape', 'password', 'str')
        param_folder = self.get_test_value('delete_shape', 'folder', 'str')
        param_storage = self.get_test_value('delete_shape', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('delete_shape', 'shape_index', param_shape_index, 'int')
        self.initialize('delete_shape', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.delete_shape(param_name, param_slide_index, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_shape', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_shape', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('delete_shape', 'shape_index')

    def test_delete_shape_invalid_password(self):
        """Test case for delete_shape with invalid password
        """
        param_name = self.get_test_value('delete_shape', 'name', 'str')
        param_slide_index = self.get_test_value('delete_shape', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_shape', 'shape_index', 'int')
        param_password = self.get_test_value('delete_shape', 'password', 'str')
        param_folder = self.get_test_value('delete_shape', 'folder', 'str')
        param_storage = self.get_test_value('delete_shape', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_shape', 'password', param_password, 'str')
        self.initialize('delete_shape', 'password', param_password)
        ok = False
        try:
            self.api.delete_shape(param_name, param_slide_index, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_shape', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_shape', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_shape', 'password')

    def test_delete_shape_invalid_folder(self):
        """Test case for delete_shape with invalid folder
        """
        param_name = self.get_test_value('delete_shape', 'name', 'str')
        param_slide_index = self.get_test_value('delete_shape', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_shape', 'shape_index', 'int')
        param_password = self.get_test_value('delete_shape', 'password', 'str')
        param_folder = self.get_test_value('delete_shape', 'folder', 'str')
        param_storage = self.get_test_value('delete_shape', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_shape', 'folder', param_folder, 'str')
        self.initialize('delete_shape', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_shape(param_name, param_slide_index, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_shape', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_shape', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_shape', 'folder')

    def test_delete_shape_invalid_storage(self):
        """Test case for delete_shape with invalid storage
        """
        param_name = self.get_test_value('delete_shape', 'name', 'str')
        param_slide_index = self.get_test_value('delete_shape', 'slide_index', 'int')
        param_shape_index = self.get_test_value('delete_shape', 'shape_index', 'int')
        param_password = self.get_test_value('delete_shape', 'password', 'str')
        param_folder = self.get_test_value('delete_shape', 'folder', 'str')
        param_storage = self.get_test_value('delete_shape', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_shape', 'storage', param_storage, 'str')
        self.initialize('delete_shape', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_shape(param_name, param_slide_index, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_shape', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_shape', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_shape', 'storage')

    def test_delete_shapes(self):
        """Test case for delete_shapes
        """
        param_name = self.get_test_value('delete_shapes', 'name', 'str')
        param_slide_index = self.get_test_value('delete_shapes', 'slide_index', 'int')
        param_shapes = self.get_test_value('delete_shapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('delete_shapes', 'password', 'str')
        param_folder = self.get_test_value('delete_shapes', 'folder', 'str')
        param_storage = self.get_test_value('delete_shapes', 'storage', 'str')
        self.initialize('delete_shapes', None, None)
        response = self.api.delete_shapes(param_name, param_slide_index, param_shapes, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_delete_shapes_invalid_name(self):
        """Test case for delete_shapes with invalid name
        """
        param_name = self.get_test_value('delete_shapes', 'name', 'str')
        param_slide_index = self.get_test_value('delete_shapes', 'slide_index', 'int')
        param_shapes = self.get_test_value('delete_shapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('delete_shapes', 'password', 'str')
        param_folder = self.get_test_value('delete_shapes', 'folder', 'str')
        param_storage = self.get_test_value('delete_shapes', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_shapes', 'name', param_name, 'str')
        self.initialize('delete_shapes', 'name', param_name)
        ok = False
        try:
            self.api.delete_shapes(param_name, param_slide_index, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_shapes', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_shapes', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_shapes', 'name')

    def test_delete_shapes_invalid_slide_index(self):
        """Test case for delete_shapes with invalid slide_index
        """
        param_name = self.get_test_value('delete_shapes', 'name', 'str')
        param_slide_index = self.get_test_value('delete_shapes', 'slide_index', 'int')
        param_shapes = self.get_test_value('delete_shapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('delete_shapes', 'password', 'str')
        param_folder = self.get_test_value('delete_shapes', 'folder', 'str')
        param_storage = self.get_test_value('delete_shapes', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('delete_shapes', 'slide_index', param_slide_index, 'int')
        self.initialize('delete_shapes', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.delete_shapes(param_name, param_slide_index, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_shapes', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_shapes', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('delete_shapes', 'slide_index')

    def test_delete_shapes_invalid_shapes(self):
        """Test case for delete_shapes with invalid shapes
        """
        param_name = self.get_test_value('delete_shapes', 'name', 'str')
        param_slide_index = self.get_test_value('delete_shapes', 'slide_index', 'int')
        param_shapes = self.get_test_value('delete_shapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('delete_shapes', 'password', 'str')
        param_folder = self.get_test_value('delete_shapes', 'folder', 'str')
        param_storage = self.get_test_value('delete_shapes', 'storage', 'str')
        param_shapes = self.get_invalid_test_value('delete_shapes', 'shapes', param_shapes, 'list[int]')
        self.initialize('delete_shapes', 'shapes', param_shapes)
        ok = False
        try:
            self.api.delete_shapes(param_name, param_slide_index, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_shapes', 'shapes', param_shapes)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_shapes', 'shapes', param_shapes)
        if ok:
            self.assert_no_exception('delete_shapes', 'shapes')

    def test_delete_shapes_invalid_password(self):
        """Test case for delete_shapes with invalid password
        """
        param_name = self.get_test_value('delete_shapes', 'name', 'str')
        param_slide_index = self.get_test_value('delete_shapes', 'slide_index', 'int')
        param_shapes = self.get_test_value('delete_shapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('delete_shapes', 'password', 'str')
        param_folder = self.get_test_value('delete_shapes', 'folder', 'str')
        param_storage = self.get_test_value('delete_shapes', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_shapes', 'password', param_password, 'str')
        self.initialize('delete_shapes', 'password', param_password)
        ok = False
        try:
            self.api.delete_shapes(param_name, param_slide_index, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_shapes', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_shapes', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_shapes', 'password')

    def test_delete_shapes_invalid_folder(self):
        """Test case for delete_shapes with invalid folder
        """
        param_name = self.get_test_value('delete_shapes', 'name', 'str')
        param_slide_index = self.get_test_value('delete_shapes', 'slide_index', 'int')
        param_shapes = self.get_test_value('delete_shapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('delete_shapes', 'password', 'str')
        param_folder = self.get_test_value('delete_shapes', 'folder', 'str')
        param_storage = self.get_test_value('delete_shapes', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_shapes', 'folder', param_folder, 'str')
        self.initialize('delete_shapes', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_shapes(param_name, param_slide_index, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_shapes', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_shapes', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_shapes', 'folder')

    def test_delete_shapes_invalid_storage(self):
        """Test case for delete_shapes with invalid storage
        """
        param_name = self.get_test_value('delete_shapes', 'name', 'str')
        param_slide_index = self.get_test_value('delete_shapes', 'slide_index', 'int')
        param_shapes = self.get_test_value('delete_shapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('delete_shapes', 'password', 'str')
        param_folder = self.get_test_value('delete_shapes', 'folder', 'str')
        param_storage = self.get_test_value('delete_shapes', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_shapes', 'storage', param_storage, 'str')
        self.initialize('delete_shapes', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_shapes(param_name, param_slide_index, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_shapes', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_shapes', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_shapes', 'storage')

    def test_delete_slide(self):
        """Test case for delete_slide
        """
        param_name = self.get_test_value('delete_slide', 'name', 'str')
        param_slide_index = self.get_test_value('delete_slide', 'slide_index', 'int')
        param_password = self.get_test_value('delete_slide', 'password', 'str')
        param_folder = self.get_test_value('delete_slide', 'folder', 'str')
        param_storage = self.get_test_value('delete_slide', 'storage', 'str')
        self.initialize('delete_slide', None, None)
        response = self.api.delete_slide(param_name, param_slide_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_delete_slide_invalid_name(self):
        """Test case for delete_slide with invalid name
        """
        param_name = self.get_test_value('delete_slide', 'name', 'str')
        param_slide_index = self.get_test_value('delete_slide', 'slide_index', 'int')
        param_password = self.get_test_value('delete_slide', 'password', 'str')
        param_folder = self.get_test_value('delete_slide', 'folder', 'str')
        param_storage = self.get_test_value('delete_slide', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_slide', 'name', param_name, 'str')
        self.initialize('delete_slide', 'name', param_name)
        ok = False
        try:
            self.api.delete_slide(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_slide', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_slide', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_slide', 'name')

    def test_delete_slide_invalid_slide_index(self):
        """Test case for delete_slide with invalid slide_index
        """
        param_name = self.get_test_value('delete_slide', 'name', 'str')
        param_slide_index = self.get_test_value('delete_slide', 'slide_index', 'int')
        param_password = self.get_test_value('delete_slide', 'password', 'str')
        param_folder = self.get_test_value('delete_slide', 'folder', 'str')
        param_storage = self.get_test_value('delete_slide', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('delete_slide', 'slide_index', param_slide_index, 'int')
        self.initialize('delete_slide', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.delete_slide(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_slide', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_slide', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('delete_slide', 'slide_index')

    def test_delete_slide_invalid_password(self):
        """Test case for delete_slide with invalid password
        """
        param_name = self.get_test_value('delete_slide', 'name', 'str')
        param_slide_index = self.get_test_value('delete_slide', 'slide_index', 'int')
        param_password = self.get_test_value('delete_slide', 'password', 'str')
        param_folder = self.get_test_value('delete_slide', 'folder', 'str')
        param_storage = self.get_test_value('delete_slide', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_slide', 'password', param_password, 'str')
        self.initialize('delete_slide', 'password', param_password)
        ok = False
        try:
            self.api.delete_slide(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_slide', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_slide', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_slide', 'password')

    def test_delete_slide_invalid_folder(self):
        """Test case for delete_slide with invalid folder
        """
        param_name = self.get_test_value('delete_slide', 'name', 'str')
        param_slide_index = self.get_test_value('delete_slide', 'slide_index', 'int')
        param_password = self.get_test_value('delete_slide', 'password', 'str')
        param_folder = self.get_test_value('delete_slide', 'folder', 'str')
        param_storage = self.get_test_value('delete_slide', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_slide', 'folder', param_folder, 'str')
        self.initialize('delete_slide', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_slide(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_slide', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_slide', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_slide', 'folder')

    def test_delete_slide_invalid_storage(self):
        """Test case for delete_slide with invalid storage
        """
        param_name = self.get_test_value('delete_slide', 'name', 'str')
        param_slide_index = self.get_test_value('delete_slide', 'slide_index', 'int')
        param_password = self.get_test_value('delete_slide', 'password', 'str')
        param_folder = self.get_test_value('delete_slide', 'folder', 'str')
        param_storage = self.get_test_value('delete_slide', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_slide', 'storage', param_storage, 'str')
        self.initialize('delete_slide', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_slide(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_slide', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_slide', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_slide', 'storage')

    def test_delete_slide_comments(self):
        """Test case for delete_slide_comments
        """
        param_name = self.get_test_value('delete_slide_comments', 'name', 'str')
        param_slide_index = self.get_test_value('delete_slide_comments', 'slide_index', 'int')
        param_author = self.get_test_value('delete_slide_comments', 'author', 'str')
        param_password = self.get_test_value('delete_slide_comments', 'password', 'str')
        param_folder = self.get_test_value('delete_slide_comments', 'folder', 'str')
        param_storage = self.get_test_value('delete_slide_comments', 'storage', 'str')
        self.initialize('delete_slide_comments', None, None)
        response = self.api.delete_slide_comments(param_name, param_slide_index, param_author, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_delete_slide_comments_invalid_name(self):
        """Test case for delete_slide_comments with invalid name
        """
        param_name = self.get_test_value('delete_slide_comments', 'name', 'str')
        param_slide_index = self.get_test_value('delete_slide_comments', 'slide_index', 'int')
        param_author = self.get_test_value('delete_slide_comments', 'author', 'str')
        param_password = self.get_test_value('delete_slide_comments', 'password', 'str')
        param_folder = self.get_test_value('delete_slide_comments', 'folder', 'str')
        param_storage = self.get_test_value('delete_slide_comments', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_slide_comments', 'name', param_name, 'str')
        self.initialize('delete_slide_comments', 'name', param_name)
        ok = False
        try:
            self.api.delete_slide_comments(param_name, param_slide_index, param_author, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_slide_comments', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_slide_comments', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_slide_comments', 'name')

    def test_delete_slide_comments_invalid_slide_index(self):
        """Test case for delete_slide_comments with invalid slide_index
        """
        param_name = self.get_test_value('delete_slide_comments', 'name', 'str')
        param_slide_index = self.get_test_value('delete_slide_comments', 'slide_index', 'int')
        param_author = self.get_test_value('delete_slide_comments', 'author', 'str')
        param_password = self.get_test_value('delete_slide_comments', 'password', 'str')
        param_folder = self.get_test_value('delete_slide_comments', 'folder', 'str')
        param_storage = self.get_test_value('delete_slide_comments', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('delete_slide_comments', 'slide_index', param_slide_index, 'int')
        self.initialize('delete_slide_comments', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.delete_slide_comments(param_name, param_slide_index, param_author, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_slide_comments', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_slide_comments', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('delete_slide_comments', 'slide_index')

    def test_delete_slide_comments_invalid_author(self):
        """Test case for delete_slide_comments with invalid author
        """
        param_name = self.get_test_value('delete_slide_comments', 'name', 'str')
        param_slide_index = self.get_test_value('delete_slide_comments', 'slide_index', 'int')
        param_author = self.get_test_value('delete_slide_comments', 'author', 'str')
        param_password = self.get_test_value('delete_slide_comments', 'password', 'str')
        param_folder = self.get_test_value('delete_slide_comments', 'folder', 'str')
        param_storage = self.get_test_value('delete_slide_comments', 'storage', 'str')
        param_author = self.get_invalid_test_value('delete_slide_comments', 'author', param_author, 'str')
        self.initialize('delete_slide_comments', 'author', param_author)
        ok = False
        try:
            self.api.delete_slide_comments(param_name, param_slide_index, param_author, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_slide_comments', 'author', param_author)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_slide_comments', 'author', param_author)
        if ok:
            self.assert_no_exception('delete_slide_comments', 'author')

    def test_delete_slide_comments_invalid_password(self):
        """Test case for delete_slide_comments with invalid password
        """
        param_name = self.get_test_value('delete_slide_comments', 'name', 'str')
        param_slide_index = self.get_test_value('delete_slide_comments', 'slide_index', 'int')
        param_author = self.get_test_value('delete_slide_comments', 'author', 'str')
        param_password = self.get_test_value('delete_slide_comments', 'password', 'str')
        param_folder = self.get_test_value('delete_slide_comments', 'folder', 'str')
        param_storage = self.get_test_value('delete_slide_comments', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_slide_comments', 'password', param_password, 'str')
        self.initialize('delete_slide_comments', 'password', param_password)
        ok = False
        try:
            self.api.delete_slide_comments(param_name, param_slide_index, param_author, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_slide_comments', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_slide_comments', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_slide_comments', 'password')

    def test_delete_slide_comments_invalid_folder(self):
        """Test case for delete_slide_comments with invalid folder
        """
        param_name = self.get_test_value('delete_slide_comments', 'name', 'str')
        param_slide_index = self.get_test_value('delete_slide_comments', 'slide_index', 'int')
        param_author = self.get_test_value('delete_slide_comments', 'author', 'str')
        param_password = self.get_test_value('delete_slide_comments', 'password', 'str')
        param_folder = self.get_test_value('delete_slide_comments', 'folder', 'str')
        param_storage = self.get_test_value('delete_slide_comments', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_slide_comments', 'folder', param_folder, 'str')
        self.initialize('delete_slide_comments', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_slide_comments(param_name, param_slide_index, param_author, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_slide_comments', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_slide_comments', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_slide_comments', 'folder')

    def test_delete_slide_comments_invalid_storage(self):
        """Test case for delete_slide_comments with invalid storage
        """
        param_name = self.get_test_value('delete_slide_comments', 'name', 'str')
        param_slide_index = self.get_test_value('delete_slide_comments', 'slide_index', 'int')
        param_author = self.get_test_value('delete_slide_comments', 'author', 'str')
        param_password = self.get_test_value('delete_slide_comments', 'password', 'str')
        param_folder = self.get_test_value('delete_slide_comments', 'folder', 'str')
        param_storage = self.get_test_value('delete_slide_comments', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_slide_comments', 'storage', param_storage, 'str')
        self.initialize('delete_slide_comments', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_slide_comments(param_name, param_slide_index, param_author, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_slide_comments', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_slide_comments', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_slide_comments', 'storage')

    def test_delete_slide_comments_online(self):
        """Test case for delete_slide_comments_online
        """
        param_document = self.get_test_value('delete_slide_comments_online', 'document', 'file')
        param_slide_index = self.get_test_value('delete_slide_comments_online', 'slide_index', 'int')
        param_author = self.get_test_value('delete_slide_comments_online', 'author', 'str')
        param_password = self.get_test_value('delete_slide_comments_online', 'password', 'str')
        self.initialize('delete_slide_comments_online', None, None)
        response = self.api.delete_slide_comments_online(param_document, param_slide_index, param_author, param_password)
        self.assertTrue(isinstance(response, str))
        self.assertTrue(len(response) > 0)

    def test_delete_slide_comments_online_invalid_document(self):
        """Test case for delete_slide_comments_online with invalid document
        """
        param_document = self.get_test_value('delete_slide_comments_online', 'document', 'file')
        param_slide_index = self.get_test_value('delete_slide_comments_online', 'slide_index', 'int')
        param_author = self.get_test_value('delete_slide_comments_online', 'author', 'str')
        param_password = self.get_test_value('delete_slide_comments_online', 'password', 'str')
        param_document = self.get_invalid_test_value('delete_slide_comments_online', 'document', param_document, 'file')
        self.initialize('delete_slide_comments_online', 'document', param_document)
        ok = False
        try:
            self.api.delete_slide_comments_online(param_document, param_slide_index, param_author, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_slide_comments_online', 'document', param_document)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_slide_comments_online', 'document', param_document)
        if ok:
            self.assert_no_exception('delete_slide_comments_online', 'document')

    def test_delete_slide_comments_online_invalid_slide_index(self):
        """Test case for delete_slide_comments_online with invalid slide_index
        """
        param_document = self.get_test_value('delete_slide_comments_online', 'document', 'file')
        param_slide_index = self.get_test_value('delete_slide_comments_online', 'slide_index', 'int')
        param_author = self.get_test_value('delete_slide_comments_online', 'author', 'str')
        param_password = self.get_test_value('delete_slide_comments_online', 'password', 'str')
        param_slide_index = self.get_invalid_test_value('delete_slide_comments_online', 'slide_index', param_slide_index, 'int')
        self.initialize('delete_slide_comments_online', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.delete_slide_comments_online(param_document, param_slide_index, param_author, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_slide_comments_online', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_slide_comments_online', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('delete_slide_comments_online', 'slide_index')

    def test_delete_slide_comments_online_invalid_author(self):
        """Test case for delete_slide_comments_online with invalid author
        """
        param_document = self.get_test_value('delete_slide_comments_online', 'document', 'file')
        param_slide_index = self.get_test_value('delete_slide_comments_online', 'slide_index', 'int')
        param_author = self.get_test_value('delete_slide_comments_online', 'author', 'str')
        param_password = self.get_test_value('delete_slide_comments_online', 'password', 'str')
        param_author = self.get_invalid_test_value('delete_slide_comments_online', 'author', param_author, 'str')
        self.initialize('delete_slide_comments_online', 'author', param_author)
        ok = False
        try:
            self.api.delete_slide_comments_online(param_document, param_slide_index, param_author, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_slide_comments_online', 'author', param_author)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_slide_comments_online', 'author', param_author)
        if ok:
            self.assert_no_exception('delete_slide_comments_online', 'author')

    def test_delete_slide_comments_online_invalid_password(self):
        """Test case for delete_slide_comments_online with invalid password
        """
        param_document = self.get_test_value('delete_slide_comments_online', 'document', 'file')
        param_slide_index = self.get_test_value('delete_slide_comments_online', 'slide_index', 'int')
        param_author = self.get_test_value('delete_slide_comments_online', 'author', 'str')
        param_password = self.get_test_value('delete_slide_comments_online', 'password', 'str')
        param_password = self.get_invalid_test_value('delete_slide_comments_online', 'password', param_password, 'str')
        self.initialize('delete_slide_comments_online', 'password', param_password)
        ok = False
        try:
            self.api.delete_slide_comments_online(param_document, param_slide_index, param_author, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_slide_comments_online', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_slide_comments_online', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_slide_comments_online', 'password')

    def test_delete_slides(self):
        """Test case for delete_slides
        """
        param_name = self.get_test_value('delete_slides', 'name', 'str')
        param_slides = self.get_test_value('delete_slides', 'slides', 'list[int]')
        param_password = self.get_test_value('delete_slides', 'password', 'str')
        param_folder = self.get_test_value('delete_slides', 'folder', 'str')
        param_storage = self.get_test_value('delete_slides', 'storage', 'str')
        self.initialize('delete_slides', None, None)
        response = self.api.delete_slides(param_name, param_slides, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_delete_slides_invalid_name(self):
        """Test case for delete_slides with invalid name
        """
        param_name = self.get_test_value('delete_slides', 'name', 'str')
        param_slides = self.get_test_value('delete_slides', 'slides', 'list[int]')
        param_password = self.get_test_value('delete_slides', 'password', 'str')
        param_folder = self.get_test_value('delete_slides', 'folder', 'str')
        param_storage = self.get_test_value('delete_slides', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_slides', 'name', param_name, 'str')
        self.initialize('delete_slides', 'name', param_name)
        ok = False
        try:
            self.api.delete_slides(param_name, param_slides, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_slides', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_slides', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_slides', 'name')

    def test_delete_slides_invalid_slides(self):
        """Test case for delete_slides with invalid slides
        """
        param_name = self.get_test_value('delete_slides', 'name', 'str')
        param_slides = self.get_test_value('delete_slides', 'slides', 'list[int]')
        param_password = self.get_test_value('delete_slides', 'password', 'str')
        param_folder = self.get_test_value('delete_slides', 'folder', 'str')
        param_storage = self.get_test_value('delete_slides', 'storage', 'str')
        param_slides = self.get_invalid_test_value('delete_slides', 'slides', param_slides, 'list[int]')
        self.initialize('delete_slides', 'slides', param_slides)
        ok = False
        try:
            self.api.delete_slides(param_name, param_slides, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_slides', 'slides', param_slides)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_slides', 'slides', param_slides)
        if ok:
            self.assert_no_exception('delete_slides', 'slides')

    def test_delete_slides_invalid_password(self):
        """Test case for delete_slides with invalid password
        """
        param_name = self.get_test_value('delete_slides', 'name', 'str')
        param_slides = self.get_test_value('delete_slides', 'slides', 'list[int]')
        param_password = self.get_test_value('delete_slides', 'password', 'str')
        param_folder = self.get_test_value('delete_slides', 'folder', 'str')
        param_storage = self.get_test_value('delete_slides', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_slides', 'password', param_password, 'str')
        self.initialize('delete_slides', 'password', param_password)
        ok = False
        try:
            self.api.delete_slides(param_name, param_slides, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_slides', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_slides', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_slides', 'password')

    def test_delete_slides_invalid_folder(self):
        """Test case for delete_slides with invalid folder
        """
        param_name = self.get_test_value('delete_slides', 'name', 'str')
        param_slides = self.get_test_value('delete_slides', 'slides', 'list[int]')
        param_password = self.get_test_value('delete_slides', 'password', 'str')
        param_folder = self.get_test_value('delete_slides', 'folder', 'str')
        param_storage = self.get_test_value('delete_slides', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_slides', 'folder', param_folder, 'str')
        self.initialize('delete_slides', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_slides(param_name, param_slides, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_slides', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_slides', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_slides', 'folder')

    def test_delete_slides_invalid_storage(self):
        """Test case for delete_slides with invalid storage
        """
        param_name = self.get_test_value('delete_slides', 'name', 'str')
        param_slides = self.get_test_value('delete_slides', 'slides', 'list[int]')
        param_password = self.get_test_value('delete_slides', 'password', 'str')
        param_folder = self.get_test_value('delete_slides', 'folder', 'str')
        param_storage = self.get_test_value('delete_slides', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_slides', 'storage', param_storage, 'str')
        self.initialize('delete_slides', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_slides(param_name, param_slides, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_slides', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_slides', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_slides', 'storage')

    def test_delete_special_slide_animation(self):
        """Test case for delete_special_slide_animation
        """
        param_name = self.get_test_value('delete_special_slide_animation', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_animation', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_animation', 'slide_type', 'str')
        param_password = self.get_test_value('delete_special_slide_animation', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_animation', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_animation', 'storage', 'str')
        self.initialize('delete_special_slide_animation', None, None)
        response = self.api.delete_special_slide_animation(param_name, param_slide_index, param_slide_type, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_delete_special_slide_animation_invalid_name(self):
        """Test case for delete_special_slide_animation with invalid name
        """
        param_name = self.get_test_value('delete_special_slide_animation', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_animation', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_animation', 'slide_type', 'str')
        param_password = self.get_test_value('delete_special_slide_animation', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_animation', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_animation', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_special_slide_animation', 'name', param_name, 'str')
        self.initialize('delete_special_slide_animation', 'name', param_name)
        ok = False
        try:
            self.api.delete_special_slide_animation(param_name, param_slide_index, param_slide_type, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_animation', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_animation', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_special_slide_animation', 'name')

    def test_delete_special_slide_animation_invalid_slide_index(self):
        """Test case for delete_special_slide_animation with invalid slide_index
        """
        param_name = self.get_test_value('delete_special_slide_animation', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_animation', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_animation', 'slide_type', 'str')
        param_password = self.get_test_value('delete_special_slide_animation', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_animation', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_animation', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('delete_special_slide_animation', 'slide_index', param_slide_index, 'int')
        self.initialize('delete_special_slide_animation', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.delete_special_slide_animation(param_name, param_slide_index, param_slide_type, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_animation', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_animation', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('delete_special_slide_animation', 'slide_index')

    def test_delete_special_slide_animation_invalid_slide_type(self):
        """Test case for delete_special_slide_animation with invalid slide_type
        """
        param_name = self.get_test_value('delete_special_slide_animation', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_animation', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_animation', 'slide_type', 'str')
        param_password = self.get_test_value('delete_special_slide_animation', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_animation', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_animation', 'storage', 'str')
        param_slide_type = self.get_invalid_test_value('delete_special_slide_animation', 'slide_type', param_slide_type, 'str')
        self.initialize('delete_special_slide_animation', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.delete_special_slide_animation(param_name, param_slide_index, param_slide_type, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_animation', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_animation', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('delete_special_slide_animation', 'slide_type')

    def test_delete_special_slide_animation_invalid_password(self):
        """Test case for delete_special_slide_animation with invalid password
        """
        param_name = self.get_test_value('delete_special_slide_animation', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_animation', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_animation', 'slide_type', 'str')
        param_password = self.get_test_value('delete_special_slide_animation', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_animation', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_animation', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_special_slide_animation', 'password', param_password, 'str')
        self.initialize('delete_special_slide_animation', 'password', param_password)
        ok = False
        try:
            self.api.delete_special_slide_animation(param_name, param_slide_index, param_slide_type, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_animation', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_animation', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_special_slide_animation', 'password')

    def test_delete_special_slide_animation_invalid_folder(self):
        """Test case for delete_special_slide_animation with invalid folder
        """
        param_name = self.get_test_value('delete_special_slide_animation', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_animation', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_animation', 'slide_type', 'str')
        param_password = self.get_test_value('delete_special_slide_animation', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_animation', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_animation', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_special_slide_animation', 'folder', param_folder, 'str')
        self.initialize('delete_special_slide_animation', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_special_slide_animation(param_name, param_slide_index, param_slide_type, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_animation', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_animation', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_special_slide_animation', 'folder')

    def test_delete_special_slide_animation_invalid_storage(self):
        """Test case for delete_special_slide_animation with invalid storage
        """
        param_name = self.get_test_value('delete_special_slide_animation', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_animation', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_animation', 'slide_type', 'str')
        param_password = self.get_test_value('delete_special_slide_animation', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_animation', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_animation', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_special_slide_animation', 'storage', param_storage, 'str')
        self.initialize('delete_special_slide_animation', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_special_slide_animation(param_name, param_slide_index, param_slide_type, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_animation', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_animation', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_special_slide_animation', 'storage')

    def test_delete_special_slide_animation_effect(self):
        """Test case for delete_special_slide_animation_effect
        """
        param_name = self.get_test_value('delete_special_slide_animation_effect', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_animation_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_animation_effect', 'slide_type', 'str')
        param_effect_index = self.get_test_value('delete_special_slide_animation_effect', 'effect_index', 'int')
        param_password = self.get_test_value('delete_special_slide_animation_effect', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_animation_effect', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_animation_effect', 'storage', 'str')
        self.initialize('delete_special_slide_animation_effect', None, None)
        response = self.api.delete_special_slide_animation_effect(param_name, param_slide_index, param_slide_type, param_effect_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_delete_special_slide_animation_effect_invalid_name(self):
        """Test case for delete_special_slide_animation_effect with invalid name
        """
        param_name = self.get_test_value('delete_special_slide_animation_effect', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_animation_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_animation_effect', 'slide_type', 'str')
        param_effect_index = self.get_test_value('delete_special_slide_animation_effect', 'effect_index', 'int')
        param_password = self.get_test_value('delete_special_slide_animation_effect', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_animation_effect', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_animation_effect', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_special_slide_animation_effect', 'name', param_name, 'str')
        self.initialize('delete_special_slide_animation_effect', 'name', param_name)
        ok = False
        try:
            self.api.delete_special_slide_animation_effect(param_name, param_slide_index, param_slide_type, param_effect_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_animation_effect', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_animation_effect', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_special_slide_animation_effect', 'name')

    def test_delete_special_slide_animation_effect_invalid_slide_index(self):
        """Test case for delete_special_slide_animation_effect with invalid slide_index
        """
        param_name = self.get_test_value('delete_special_slide_animation_effect', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_animation_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_animation_effect', 'slide_type', 'str')
        param_effect_index = self.get_test_value('delete_special_slide_animation_effect', 'effect_index', 'int')
        param_password = self.get_test_value('delete_special_slide_animation_effect', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_animation_effect', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_animation_effect', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('delete_special_slide_animation_effect', 'slide_index', param_slide_index, 'int')
        self.initialize('delete_special_slide_animation_effect', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.delete_special_slide_animation_effect(param_name, param_slide_index, param_slide_type, param_effect_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_animation_effect', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_animation_effect', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('delete_special_slide_animation_effect', 'slide_index')

    def test_delete_special_slide_animation_effect_invalid_slide_type(self):
        """Test case for delete_special_slide_animation_effect with invalid slide_type
        """
        param_name = self.get_test_value('delete_special_slide_animation_effect', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_animation_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_animation_effect', 'slide_type', 'str')
        param_effect_index = self.get_test_value('delete_special_slide_animation_effect', 'effect_index', 'int')
        param_password = self.get_test_value('delete_special_slide_animation_effect', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_animation_effect', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_animation_effect', 'storage', 'str')
        param_slide_type = self.get_invalid_test_value('delete_special_slide_animation_effect', 'slide_type', param_slide_type, 'str')
        self.initialize('delete_special_slide_animation_effect', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.delete_special_slide_animation_effect(param_name, param_slide_index, param_slide_type, param_effect_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_animation_effect', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_animation_effect', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('delete_special_slide_animation_effect', 'slide_type')

    def test_delete_special_slide_animation_effect_invalid_effect_index(self):
        """Test case for delete_special_slide_animation_effect with invalid effect_index
        """
        param_name = self.get_test_value('delete_special_slide_animation_effect', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_animation_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_animation_effect', 'slide_type', 'str')
        param_effect_index = self.get_test_value('delete_special_slide_animation_effect', 'effect_index', 'int')
        param_password = self.get_test_value('delete_special_slide_animation_effect', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_animation_effect', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_animation_effect', 'storage', 'str')
        param_effect_index = self.get_invalid_test_value('delete_special_slide_animation_effect', 'effect_index', param_effect_index, 'int')
        self.initialize('delete_special_slide_animation_effect', 'effect_index', param_effect_index)
        ok = False
        try:
            self.api.delete_special_slide_animation_effect(param_name, param_slide_index, param_slide_type, param_effect_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_animation_effect', 'effect_index', param_effect_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_animation_effect', 'effect_index', param_effect_index)
        if ok:
            self.assert_no_exception('delete_special_slide_animation_effect', 'effect_index')

    def test_delete_special_slide_animation_effect_invalid_password(self):
        """Test case for delete_special_slide_animation_effect with invalid password
        """
        param_name = self.get_test_value('delete_special_slide_animation_effect', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_animation_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_animation_effect', 'slide_type', 'str')
        param_effect_index = self.get_test_value('delete_special_slide_animation_effect', 'effect_index', 'int')
        param_password = self.get_test_value('delete_special_slide_animation_effect', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_animation_effect', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_animation_effect', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_special_slide_animation_effect', 'password', param_password, 'str')
        self.initialize('delete_special_slide_animation_effect', 'password', param_password)
        ok = False
        try:
            self.api.delete_special_slide_animation_effect(param_name, param_slide_index, param_slide_type, param_effect_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_animation_effect', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_animation_effect', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_special_slide_animation_effect', 'password')

    def test_delete_special_slide_animation_effect_invalid_folder(self):
        """Test case for delete_special_slide_animation_effect with invalid folder
        """
        param_name = self.get_test_value('delete_special_slide_animation_effect', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_animation_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_animation_effect', 'slide_type', 'str')
        param_effect_index = self.get_test_value('delete_special_slide_animation_effect', 'effect_index', 'int')
        param_password = self.get_test_value('delete_special_slide_animation_effect', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_animation_effect', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_animation_effect', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_special_slide_animation_effect', 'folder', param_folder, 'str')
        self.initialize('delete_special_slide_animation_effect', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_special_slide_animation_effect(param_name, param_slide_index, param_slide_type, param_effect_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_animation_effect', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_animation_effect', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_special_slide_animation_effect', 'folder')

    def test_delete_special_slide_animation_effect_invalid_storage(self):
        """Test case for delete_special_slide_animation_effect with invalid storage
        """
        param_name = self.get_test_value('delete_special_slide_animation_effect', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_animation_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_animation_effect', 'slide_type', 'str')
        param_effect_index = self.get_test_value('delete_special_slide_animation_effect', 'effect_index', 'int')
        param_password = self.get_test_value('delete_special_slide_animation_effect', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_animation_effect', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_animation_effect', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_special_slide_animation_effect', 'storage', param_storage, 'str')
        self.initialize('delete_special_slide_animation_effect', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_special_slide_animation_effect(param_name, param_slide_index, param_slide_type, param_effect_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_animation_effect', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_animation_effect', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_special_slide_animation_effect', 'storage')

    def test_delete_special_slide_animation_interactive_sequence(self):
        """Test case for delete_special_slide_animation_interactive_sequence
        """
        param_name = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'slide_type', 'str')
        param_sequence_index = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'sequence_index', 'int')
        param_password = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'storage', 'str')
        self.initialize('delete_special_slide_animation_interactive_sequence', None, None)
        response = self.api.delete_special_slide_animation_interactive_sequence(param_name, param_slide_index, param_slide_type, param_sequence_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_delete_special_slide_animation_interactive_sequence_invalid_name(self):
        """Test case for delete_special_slide_animation_interactive_sequence with invalid name
        """
        param_name = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'slide_type', 'str')
        param_sequence_index = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'sequence_index', 'int')
        param_password = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_special_slide_animation_interactive_sequence', 'name', param_name, 'str')
        self.initialize('delete_special_slide_animation_interactive_sequence', 'name', param_name)
        ok = False
        try:
            self.api.delete_special_slide_animation_interactive_sequence(param_name, param_slide_index, param_slide_type, param_sequence_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_animation_interactive_sequence', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_animation_interactive_sequence', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_special_slide_animation_interactive_sequence', 'name')

    def test_delete_special_slide_animation_interactive_sequence_invalid_slide_index(self):
        """Test case for delete_special_slide_animation_interactive_sequence with invalid slide_index
        """
        param_name = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'slide_type', 'str')
        param_sequence_index = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'sequence_index', 'int')
        param_password = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('delete_special_slide_animation_interactive_sequence', 'slide_index', param_slide_index, 'int')
        self.initialize('delete_special_slide_animation_interactive_sequence', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.delete_special_slide_animation_interactive_sequence(param_name, param_slide_index, param_slide_type, param_sequence_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_animation_interactive_sequence', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_animation_interactive_sequence', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('delete_special_slide_animation_interactive_sequence', 'slide_index')

    def test_delete_special_slide_animation_interactive_sequence_invalid_slide_type(self):
        """Test case for delete_special_slide_animation_interactive_sequence with invalid slide_type
        """
        param_name = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'slide_type', 'str')
        param_sequence_index = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'sequence_index', 'int')
        param_password = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'storage', 'str')
        param_slide_type = self.get_invalid_test_value('delete_special_slide_animation_interactive_sequence', 'slide_type', param_slide_type, 'str')
        self.initialize('delete_special_slide_animation_interactive_sequence', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.delete_special_slide_animation_interactive_sequence(param_name, param_slide_index, param_slide_type, param_sequence_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_animation_interactive_sequence', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_animation_interactive_sequence', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('delete_special_slide_animation_interactive_sequence', 'slide_type')

    def test_delete_special_slide_animation_interactive_sequence_invalid_sequence_index(self):
        """Test case for delete_special_slide_animation_interactive_sequence with invalid sequence_index
        """
        param_name = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'slide_type', 'str')
        param_sequence_index = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'sequence_index', 'int')
        param_password = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'storage', 'str')
        param_sequence_index = self.get_invalid_test_value('delete_special_slide_animation_interactive_sequence', 'sequence_index', param_sequence_index, 'int')
        self.initialize('delete_special_slide_animation_interactive_sequence', 'sequence_index', param_sequence_index)
        ok = False
        try:
            self.api.delete_special_slide_animation_interactive_sequence(param_name, param_slide_index, param_slide_type, param_sequence_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_animation_interactive_sequence', 'sequence_index', param_sequence_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_animation_interactive_sequence', 'sequence_index', param_sequence_index)
        if ok:
            self.assert_no_exception('delete_special_slide_animation_interactive_sequence', 'sequence_index')

    def test_delete_special_slide_animation_interactive_sequence_invalid_password(self):
        """Test case for delete_special_slide_animation_interactive_sequence with invalid password
        """
        param_name = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'slide_type', 'str')
        param_sequence_index = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'sequence_index', 'int')
        param_password = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_special_slide_animation_interactive_sequence', 'password', param_password, 'str')
        self.initialize('delete_special_slide_animation_interactive_sequence', 'password', param_password)
        ok = False
        try:
            self.api.delete_special_slide_animation_interactive_sequence(param_name, param_slide_index, param_slide_type, param_sequence_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_animation_interactive_sequence', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_animation_interactive_sequence', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_special_slide_animation_interactive_sequence', 'password')

    def test_delete_special_slide_animation_interactive_sequence_invalid_folder(self):
        """Test case for delete_special_slide_animation_interactive_sequence with invalid folder
        """
        param_name = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'slide_type', 'str')
        param_sequence_index = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'sequence_index', 'int')
        param_password = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_special_slide_animation_interactive_sequence', 'folder', param_folder, 'str')
        self.initialize('delete_special_slide_animation_interactive_sequence', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_special_slide_animation_interactive_sequence(param_name, param_slide_index, param_slide_type, param_sequence_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_animation_interactive_sequence', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_animation_interactive_sequence', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_special_slide_animation_interactive_sequence', 'folder')

    def test_delete_special_slide_animation_interactive_sequence_invalid_storage(self):
        """Test case for delete_special_slide_animation_interactive_sequence with invalid storage
        """
        param_name = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'slide_type', 'str')
        param_sequence_index = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'sequence_index', 'int')
        param_password = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_animation_interactive_sequence', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_special_slide_animation_interactive_sequence', 'storage', param_storage, 'str')
        self.initialize('delete_special_slide_animation_interactive_sequence', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_special_slide_animation_interactive_sequence(param_name, param_slide_index, param_slide_type, param_sequence_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_animation_interactive_sequence', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_animation_interactive_sequence', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_special_slide_animation_interactive_sequence', 'storage')

    def test_delete_special_slide_animation_interactive_sequence_effect(self):
        """Test case for delete_special_slide_animation_interactive_sequence_effect
        """
        param_name = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_type', 'str')
        param_sequence_index = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect_index = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int')
        param_password = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'storage', 'str')
        self.initialize('delete_special_slide_animation_interactive_sequence_effect', None, None)
        response = self.api.delete_special_slide_animation_interactive_sequence_effect(param_name, param_slide_index, param_slide_type, param_sequence_index, param_effect_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_delete_special_slide_animation_interactive_sequence_effect_invalid_name(self):
        """Test case for delete_special_slide_animation_interactive_sequence_effect with invalid name
        """
        param_name = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_type', 'str')
        param_sequence_index = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect_index = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int')
        param_password = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_special_slide_animation_interactive_sequence_effect', 'name', param_name, 'str')
        self.initialize('delete_special_slide_animation_interactive_sequence_effect', 'name', param_name)
        ok = False
        try:
            self.api.delete_special_slide_animation_interactive_sequence_effect(param_name, param_slide_index, param_slide_type, param_sequence_index, param_effect_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_animation_interactive_sequence_effect', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_animation_interactive_sequence_effect', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_special_slide_animation_interactive_sequence_effect', 'name')

    def test_delete_special_slide_animation_interactive_sequence_effect_invalid_slide_index(self):
        """Test case for delete_special_slide_animation_interactive_sequence_effect with invalid slide_index
        """
        param_name = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_type', 'str')
        param_sequence_index = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect_index = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int')
        param_password = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_index', param_slide_index, 'int')
        self.initialize('delete_special_slide_animation_interactive_sequence_effect', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.delete_special_slide_animation_interactive_sequence_effect(param_name, param_slide_index, param_slide_type, param_sequence_index, param_effect_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_animation_interactive_sequence_effect', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_animation_interactive_sequence_effect', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('delete_special_slide_animation_interactive_sequence_effect', 'slide_index')

    def test_delete_special_slide_animation_interactive_sequence_effect_invalid_slide_type(self):
        """Test case for delete_special_slide_animation_interactive_sequence_effect with invalid slide_type
        """
        param_name = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_type', 'str')
        param_sequence_index = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect_index = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int')
        param_password = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'storage', 'str')
        param_slide_type = self.get_invalid_test_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_type', param_slide_type, 'str')
        self.initialize('delete_special_slide_animation_interactive_sequence_effect', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.delete_special_slide_animation_interactive_sequence_effect(param_name, param_slide_index, param_slide_type, param_sequence_index, param_effect_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_animation_interactive_sequence_effect', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_animation_interactive_sequence_effect', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('delete_special_slide_animation_interactive_sequence_effect', 'slide_type')

    def test_delete_special_slide_animation_interactive_sequence_effect_invalid_sequence_index(self):
        """Test case for delete_special_slide_animation_interactive_sequence_effect with invalid sequence_index
        """
        param_name = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_type', 'str')
        param_sequence_index = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect_index = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int')
        param_password = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'storage', 'str')
        param_sequence_index = self.get_invalid_test_value('delete_special_slide_animation_interactive_sequence_effect', 'sequence_index', param_sequence_index, 'int')
        self.initialize('delete_special_slide_animation_interactive_sequence_effect', 'sequence_index', param_sequence_index)
        ok = False
        try:
            self.api.delete_special_slide_animation_interactive_sequence_effect(param_name, param_slide_index, param_slide_type, param_sequence_index, param_effect_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_animation_interactive_sequence_effect', 'sequence_index', param_sequence_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_animation_interactive_sequence_effect', 'sequence_index', param_sequence_index)
        if ok:
            self.assert_no_exception('delete_special_slide_animation_interactive_sequence_effect', 'sequence_index')

    def test_delete_special_slide_animation_interactive_sequence_effect_invalid_effect_index(self):
        """Test case for delete_special_slide_animation_interactive_sequence_effect with invalid effect_index
        """
        param_name = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_type', 'str')
        param_sequence_index = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect_index = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int')
        param_password = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'storage', 'str')
        param_effect_index = self.get_invalid_test_value('delete_special_slide_animation_interactive_sequence_effect', 'effect_index', param_effect_index, 'int')
        self.initialize('delete_special_slide_animation_interactive_sequence_effect', 'effect_index', param_effect_index)
        ok = False
        try:
            self.api.delete_special_slide_animation_interactive_sequence_effect(param_name, param_slide_index, param_slide_type, param_sequence_index, param_effect_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_animation_interactive_sequence_effect', 'effect_index', param_effect_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_animation_interactive_sequence_effect', 'effect_index', param_effect_index)
        if ok:
            self.assert_no_exception('delete_special_slide_animation_interactive_sequence_effect', 'effect_index')

    def test_delete_special_slide_animation_interactive_sequence_effect_invalid_password(self):
        """Test case for delete_special_slide_animation_interactive_sequence_effect with invalid password
        """
        param_name = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_type', 'str')
        param_sequence_index = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect_index = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int')
        param_password = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_special_slide_animation_interactive_sequence_effect', 'password', param_password, 'str')
        self.initialize('delete_special_slide_animation_interactive_sequence_effect', 'password', param_password)
        ok = False
        try:
            self.api.delete_special_slide_animation_interactive_sequence_effect(param_name, param_slide_index, param_slide_type, param_sequence_index, param_effect_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_animation_interactive_sequence_effect', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_animation_interactive_sequence_effect', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_special_slide_animation_interactive_sequence_effect', 'password')

    def test_delete_special_slide_animation_interactive_sequence_effect_invalid_folder(self):
        """Test case for delete_special_slide_animation_interactive_sequence_effect with invalid folder
        """
        param_name = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_type', 'str')
        param_sequence_index = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect_index = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int')
        param_password = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_special_slide_animation_interactive_sequence_effect', 'folder', param_folder, 'str')
        self.initialize('delete_special_slide_animation_interactive_sequence_effect', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_special_slide_animation_interactive_sequence_effect(param_name, param_slide_index, param_slide_type, param_sequence_index, param_effect_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_animation_interactive_sequence_effect', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_animation_interactive_sequence_effect', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_special_slide_animation_interactive_sequence_effect', 'folder')

    def test_delete_special_slide_animation_interactive_sequence_effect_invalid_storage(self):
        """Test case for delete_special_slide_animation_interactive_sequence_effect with invalid storage
        """
        param_name = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'slide_type', 'str')
        param_sequence_index = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect_index = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int')
        param_password = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_animation_interactive_sequence_effect', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_special_slide_animation_interactive_sequence_effect', 'storage', param_storage, 'str')
        self.initialize('delete_special_slide_animation_interactive_sequence_effect', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_special_slide_animation_interactive_sequence_effect(param_name, param_slide_index, param_slide_type, param_sequence_index, param_effect_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_animation_interactive_sequence_effect', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_animation_interactive_sequence_effect', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_special_slide_animation_interactive_sequence_effect', 'storage')

    def test_delete_special_slide_animation_interactive_sequences(self):
        """Test case for delete_special_slide_animation_interactive_sequences
        """
        param_name = self.get_test_value('delete_special_slide_animation_interactive_sequences', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_animation_interactive_sequences', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_animation_interactive_sequences', 'slide_type', 'str')
        param_password = self.get_test_value('delete_special_slide_animation_interactive_sequences', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_animation_interactive_sequences', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_animation_interactive_sequences', 'storage', 'str')
        self.initialize('delete_special_slide_animation_interactive_sequences', None, None)
        response = self.api.delete_special_slide_animation_interactive_sequences(param_name, param_slide_index, param_slide_type, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_delete_special_slide_animation_interactive_sequences_invalid_name(self):
        """Test case for delete_special_slide_animation_interactive_sequences with invalid name
        """
        param_name = self.get_test_value('delete_special_slide_animation_interactive_sequences', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_animation_interactive_sequences', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_animation_interactive_sequences', 'slide_type', 'str')
        param_password = self.get_test_value('delete_special_slide_animation_interactive_sequences', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_animation_interactive_sequences', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_animation_interactive_sequences', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_special_slide_animation_interactive_sequences', 'name', param_name, 'str')
        self.initialize('delete_special_slide_animation_interactive_sequences', 'name', param_name)
        ok = False
        try:
            self.api.delete_special_slide_animation_interactive_sequences(param_name, param_slide_index, param_slide_type, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_animation_interactive_sequences', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_animation_interactive_sequences', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_special_slide_animation_interactive_sequences', 'name')

    def test_delete_special_slide_animation_interactive_sequences_invalid_slide_index(self):
        """Test case for delete_special_slide_animation_interactive_sequences with invalid slide_index
        """
        param_name = self.get_test_value('delete_special_slide_animation_interactive_sequences', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_animation_interactive_sequences', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_animation_interactive_sequences', 'slide_type', 'str')
        param_password = self.get_test_value('delete_special_slide_animation_interactive_sequences', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_animation_interactive_sequences', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_animation_interactive_sequences', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('delete_special_slide_animation_interactive_sequences', 'slide_index', param_slide_index, 'int')
        self.initialize('delete_special_slide_animation_interactive_sequences', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.delete_special_slide_animation_interactive_sequences(param_name, param_slide_index, param_slide_type, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_animation_interactive_sequences', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_animation_interactive_sequences', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('delete_special_slide_animation_interactive_sequences', 'slide_index')

    def test_delete_special_slide_animation_interactive_sequences_invalid_slide_type(self):
        """Test case for delete_special_slide_animation_interactive_sequences with invalid slide_type
        """
        param_name = self.get_test_value('delete_special_slide_animation_interactive_sequences', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_animation_interactive_sequences', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_animation_interactive_sequences', 'slide_type', 'str')
        param_password = self.get_test_value('delete_special_slide_animation_interactive_sequences', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_animation_interactive_sequences', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_animation_interactive_sequences', 'storage', 'str')
        param_slide_type = self.get_invalid_test_value('delete_special_slide_animation_interactive_sequences', 'slide_type', param_slide_type, 'str')
        self.initialize('delete_special_slide_animation_interactive_sequences', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.delete_special_slide_animation_interactive_sequences(param_name, param_slide_index, param_slide_type, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_animation_interactive_sequences', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_animation_interactive_sequences', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('delete_special_slide_animation_interactive_sequences', 'slide_type')

    def test_delete_special_slide_animation_interactive_sequences_invalid_password(self):
        """Test case for delete_special_slide_animation_interactive_sequences with invalid password
        """
        param_name = self.get_test_value('delete_special_slide_animation_interactive_sequences', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_animation_interactive_sequences', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_animation_interactive_sequences', 'slide_type', 'str')
        param_password = self.get_test_value('delete_special_slide_animation_interactive_sequences', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_animation_interactive_sequences', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_animation_interactive_sequences', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_special_slide_animation_interactive_sequences', 'password', param_password, 'str')
        self.initialize('delete_special_slide_animation_interactive_sequences', 'password', param_password)
        ok = False
        try:
            self.api.delete_special_slide_animation_interactive_sequences(param_name, param_slide_index, param_slide_type, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_animation_interactive_sequences', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_animation_interactive_sequences', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_special_slide_animation_interactive_sequences', 'password')

    def test_delete_special_slide_animation_interactive_sequences_invalid_folder(self):
        """Test case for delete_special_slide_animation_interactive_sequences with invalid folder
        """
        param_name = self.get_test_value('delete_special_slide_animation_interactive_sequences', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_animation_interactive_sequences', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_animation_interactive_sequences', 'slide_type', 'str')
        param_password = self.get_test_value('delete_special_slide_animation_interactive_sequences', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_animation_interactive_sequences', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_animation_interactive_sequences', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_special_slide_animation_interactive_sequences', 'folder', param_folder, 'str')
        self.initialize('delete_special_slide_animation_interactive_sequences', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_special_slide_animation_interactive_sequences(param_name, param_slide_index, param_slide_type, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_animation_interactive_sequences', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_animation_interactive_sequences', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_special_slide_animation_interactive_sequences', 'folder')

    def test_delete_special_slide_animation_interactive_sequences_invalid_storage(self):
        """Test case for delete_special_slide_animation_interactive_sequences with invalid storage
        """
        param_name = self.get_test_value('delete_special_slide_animation_interactive_sequences', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_animation_interactive_sequences', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_animation_interactive_sequences', 'slide_type', 'str')
        param_password = self.get_test_value('delete_special_slide_animation_interactive_sequences', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_animation_interactive_sequences', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_animation_interactive_sequences', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_special_slide_animation_interactive_sequences', 'storage', param_storage, 'str')
        self.initialize('delete_special_slide_animation_interactive_sequences', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_special_slide_animation_interactive_sequences(param_name, param_slide_index, param_slide_type, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_animation_interactive_sequences', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_animation_interactive_sequences', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_special_slide_animation_interactive_sequences', 'storage')

    def test_delete_special_slide_animation_main_sequence(self):
        """Test case for delete_special_slide_animation_main_sequence
        """
        param_name = self.get_test_value('delete_special_slide_animation_main_sequence', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_animation_main_sequence', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_animation_main_sequence', 'slide_type', 'str')
        param_password = self.get_test_value('delete_special_slide_animation_main_sequence', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_animation_main_sequence', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_animation_main_sequence', 'storage', 'str')
        self.initialize('delete_special_slide_animation_main_sequence', None, None)
        response = self.api.delete_special_slide_animation_main_sequence(param_name, param_slide_index, param_slide_type, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_delete_special_slide_animation_main_sequence_invalid_name(self):
        """Test case for delete_special_slide_animation_main_sequence with invalid name
        """
        param_name = self.get_test_value('delete_special_slide_animation_main_sequence', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_animation_main_sequence', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_animation_main_sequence', 'slide_type', 'str')
        param_password = self.get_test_value('delete_special_slide_animation_main_sequence', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_animation_main_sequence', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_animation_main_sequence', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_special_slide_animation_main_sequence', 'name', param_name, 'str')
        self.initialize('delete_special_slide_animation_main_sequence', 'name', param_name)
        ok = False
        try:
            self.api.delete_special_slide_animation_main_sequence(param_name, param_slide_index, param_slide_type, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_animation_main_sequence', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_animation_main_sequence', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_special_slide_animation_main_sequence', 'name')

    def test_delete_special_slide_animation_main_sequence_invalid_slide_index(self):
        """Test case for delete_special_slide_animation_main_sequence with invalid slide_index
        """
        param_name = self.get_test_value('delete_special_slide_animation_main_sequence', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_animation_main_sequence', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_animation_main_sequence', 'slide_type', 'str')
        param_password = self.get_test_value('delete_special_slide_animation_main_sequence', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_animation_main_sequence', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_animation_main_sequence', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('delete_special_slide_animation_main_sequence', 'slide_index', param_slide_index, 'int')
        self.initialize('delete_special_slide_animation_main_sequence', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.delete_special_slide_animation_main_sequence(param_name, param_slide_index, param_slide_type, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_animation_main_sequence', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_animation_main_sequence', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('delete_special_slide_animation_main_sequence', 'slide_index')

    def test_delete_special_slide_animation_main_sequence_invalid_slide_type(self):
        """Test case for delete_special_slide_animation_main_sequence with invalid slide_type
        """
        param_name = self.get_test_value('delete_special_slide_animation_main_sequence', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_animation_main_sequence', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_animation_main_sequence', 'slide_type', 'str')
        param_password = self.get_test_value('delete_special_slide_animation_main_sequence', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_animation_main_sequence', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_animation_main_sequence', 'storage', 'str')
        param_slide_type = self.get_invalid_test_value('delete_special_slide_animation_main_sequence', 'slide_type', param_slide_type, 'str')
        self.initialize('delete_special_slide_animation_main_sequence', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.delete_special_slide_animation_main_sequence(param_name, param_slide_index, param_slide_type, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_animation_main_sequence', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_animation_main_sequence', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('delete_special_slide_animation_main_sequence', 'slide_type')

    def test_delete_special_slide_animation_main_sequence_invalid_password(self):
        """Test case for delete_special_slide_animation_main_sequence with invalid password
        """
        param_name = self.get_test_value('delete_special_slide_animation_main_sequence', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_animation_main_sequence', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_animation_main_sequence', 'slide_type', 'str')
        param_password = self.get_test_value('delete_special_slide_animation_main_sequence', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_animation_main_sequence', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_animation_main_sequence', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_special_slide_animation_main_sequence', 'password', param_password, 'str')
        self.initialize('delete_special_slide_animation_main_sequence', 'password', param_password)
        ok = False
        try:
            self.api.delete_special_slide_animation_main_sequence(param_name, param_slide_index, param_slide_type, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_animation_main_sequence', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_animation_main_sequence', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_special_slide_animation_main_sequence', 'password')

    def test_delete_special_slide_animation_main_sequence_invalid_folder(self):
        """Test case for delete_special_slide_animation_main_sequence with invalid folder
        """
        param_name = self.get_test_value('delete_special_slide_animation_main_sequence', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_animation_main_sequence', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_animation_main_sequence', 'slide_type', 'str')
        param_password = self.get_test_value('delete_special_slide_animation_main_sequence', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_animation_main_sequence', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_animation_main_sequence', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_special_slide_animation_main_sequence', 'folder', param_folder, 'str')
        self.initialize('delete_special_slide_animation_main_sequence', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_special_slide_animation_main_sequence(param_name, param_slide_index, param_slide_type, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_animation_main_sequence', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_animation_main_sequence', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_special_slide_animation_main_sequence', 'folder')

    def test_delete_special_slide_animation_main_sequence_invalid_storage(self):
        """Test case for delete_special_slide_animation_main_sequence with invalid storage
        """
        param_name = self.get_test_value('delete_special_slide_animation_main_sequence', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_animation_main_sequence', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_animation_main_sequence', 'slide_type', 'str')
        param_password = self.get_test_value('delete_special_slide_animation_main_sequence', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_animation_main_sequence', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_animation_main_sequence', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_special_slide_animation_main_sequence', 'storage', param_storage, 'str')
        self.initialize('delete_special_slide_animation_main_sequence', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_special_slide_animation_main_sequence(param_name, param_slide_index, param_slide_type, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_animation_main_sequence', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_animation_main_sequence', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_special_slide_animation_main_sequence', 'storage')

    def test_delete_special_slide_paragraph(self):
        """Test case for delete_special_slide_paragraph
        """
        param_name = self.get_test_value('delete_special_slide_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_paragraph', 'slide_type', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('delete_special_slide_paragraph', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_paragraph', 'storage', 'str')
        self.initialize('delete_special_slide_paragraph', None, None)
        response = self.api.delete_special_slide_paragraph(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_delete_special_slide_paragraph_invalid_name(self):
        """Test case for delete_special_slide_paragraph with invalid name
        """
        param_name = self.get_test_value('delete_special_slide_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_paragraph', 'slide_type', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('delete_special_slide_paragraph', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_paragraph', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_special_slide_paragraph', 'name', param_name, 'str')
        self.initialize('delete_special_slide_paragraph', 'name', param_name)
        ok = False
        try:
            self.api.delete_special_slide_paragraph(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_paragraph', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_paragraph', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_special_slide_paragraph', 'name')

    def test_delete_special_slide_paragraph_invalid_slide_index(self):
        """Test case for delete_special_slide_paragraph with invalid slide_index
        """
        param_name = self.get_test_value('delete_special_slide_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_paragraph', 'slide_type', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('delete_special_slide_paragraph', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_paragraph', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('delete_special_slide_paragraph', 'slide_index', param_slide_index, 'int')
        self.initialize('delete_special_slide_paragraph', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.delete_special_slide_paragraph(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_paragraph', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_paragraph', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('delete_special_slide_paragraph', 'slide_index')

    def test_delete_special_slide_paragraph_invalid_slide_type(self):
        """Test case for delete_special_slide_paragraph with invalid slide_type
        """
        param_name = self.get_test_value('delete_special_slide_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_paragraph', 'slide_type', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('delete_special_slide_paragraph', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_paragraph', 'storage', 'str')
        param_slide_type = self.get_invalid_test_value('delete_special_slide_paragraph', 'slide_type', param_slide_type, 'str')
        self.initialize('delete_special_slide_paragraph', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.delete_special_slide_paragraph(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_paragraph', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_paragraph', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('delete_special_slide_paragraph', 'slide_type')

    def test_delete_special_slide_paragraph_invalid_shape_index(self):
        """Test case for delete_special_slide_paragraph with invalid shape_index
        """
        param_name = self.get_test_value('delete_special_slide_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_paragraph', 'slide_type', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('delete_special_slide_paragraph', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_paragraph', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('delete_special_slide_paragraph', 'shape_index', param_shape_index, 'int')
        self.initialize('delete_special_slide_paragraph', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.delete_special_slide_paragraph(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_paragraph', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_paragraph', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('delete_special_slide_paragraph', 'shape_index')

    def test_delete_special_slide_paragraph_invalid_paragraph_index(self):
        """Test case for delete_special_slide_paragraph with invalid paragraph_index
        """
        param_name = self.get_test_value('delete_special_slide_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_paragraph', 'slide_type', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('delete_special_slide_paragraph', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_paragraph', 'storage', 'str')
        param_paragraph_index = self.get_invalid_test_value('delete_special_slide_paragraph', 'paragraph_index', param_paragraph_index, 'int')
        self.initialize('delete_special_slide_paragraph', 'paragraph_index', param_paragraph_index)
        ok = False
        try:
            self.api.delete_special_slide_paragraph(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_paragraph', 'paragraph_index', param_paragraph_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_paragraph', 'paragraph_index', param_paragraph_index)
        if ok:
            self.assert_no_exception('delete_special_slide_paragraph', 'paragraph_index')

    def test_delete_special_slide_paragraph_invalid_password(self):
        """Test case for delete_special_slide_paragraph with invalid password
        """
        param_name = self.get_test_value('delete_special_slide_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_paragraph', 'slide_type', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('delete_special_slide_paragraph', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_paragraph', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_special_slide_paragraph', 'password', param_password, 'str')
        self.initialize('delete_special_slide_paragraph', 'password', param_password)
        ok = False
        try:
            self.api.delete_special_slide_paragraph(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_paragraph', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_paragraph', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_special_slide_paragraph', 'password')

    def test_delete_special_slide_paragraph_invalid_folder(self):
        """Test case for delete_special_slide_paragraph with invalid folder
        """
        param_name = self.get_test_value('delete_special_slide_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_paragraph', 'slide_type', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('delete_special_slide_paragraph', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_paragraph', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_special_slide_paragraph', 'folder', param_folder, 'str')
        self.initialize('delete_special_slide_paragraph', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_special_slide_paragraph(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_paragraph', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_paragraph', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_special_slide_paragraph', 'folder')

    def test_delete_special_slide_paragraph_invalid_storage(self):
        """Test case for delete_special_slide_paragraph with invalid storage
        """
        param_name = self.get_test_value('delete_special_slide_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_paragraph', 'slide_type', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('delete_special_slide_paragraph', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_paragraph', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_special_slide_paragraph', 'storage', param_storage, 'str')
        self.initialize('delete_special_slide_paragraph', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_special_slide_paragraph(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_paragraph', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_paragraph', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_special_slide_paragraph', 'storage')

    def test_delete_special_slide_paragraphs(self):
        """Test case for delete_special_slide_paragraphs
        """
        param_name = self.get_test_value('delete_special_slide_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_paragraphs', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_paragraphs', 'slide_type', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_paragraphs', 'shape_index', 'int')
        param_paragraphs = self.get_test_value('delete_special_slide_paragraphs', 'paragraphs', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_paragraphs', 'storage', 'str')
        self.initialize('delete_special_slide_paragraphs', None, None)
        response = self.api.delete_special_slide_paragraphs(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraphs, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_delete_special_slide_paragraphs_invalid_name(self):
        """Test case for delete_special_slide_paragraphs with invalid name
        """
        param_name = self.get_test_value('delete_special_slide_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_paragraphs', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_paragraphs', 'slide_type', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_paragraphs', 'shape_index', 'int')
        param_paragraphs = self.get_test_value('delete_special_slide_paragraphs', 'paragraphs', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_paragraphs', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_special_slide_paragraphs', 'name', param_name, 'str')
        self.initialize('delete_special_slide_paragraphs', 'name', param_name)
        ok = False
        try:
            self.api.delete_special_slide_paragraphs(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraphs, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_paragraphs', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_paragraphs', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_special_slide_paragraphs', 'name')

    def test_delete_special_slide_paragraphs_invalid_slide_index(self):
        """Test case for delete_special_slide_paragraphs with invalid slide_index
        """
        param_name = self.get_test_value('delete_special_slide_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_paragraphs', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_paragraphs', 'slide_type', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_paragraphs', 'shape_index', 'int')
        param_paragraphs = self.get_test_value('delete_special_slide_paragraphs', 'paragraphs', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_paragraphs', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('delete_special_slide_paragraphs', 'slide_index', param_slide_index, 'int')
        self.initialize('delete_special_slide_paragraphs', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.delete_special_slide_paragraphs(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraphs, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_paragraphs', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_paragraphs', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('delete_special_slide_paragraphs', 'slide_index')

    def test_delete_special_slide_paragraphs_invalid_slide_type(self):
        """Test case for delete_special_slide_paragraphs with invalid slide_type
        """
        param_name = self.get_test_value('delete_special_slide_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_paragraphs', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_paragraphs', 'slide_type', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_paragraphs', 'shape_index', 'int')
        param_paragraphs = self.get_test_value('delete_special_slide_paragraphs', 'paragraphs', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_paragraphs', 'storage', 'str')
        param_slide_type = self.get_invalid_test_value('delete_special_slide_paragraphs', 'slide_type', param_slide_type, 'str')
        self.initialize('delete_special_slide_paragraphs', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.delete_special_slide_paragraphs(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraphs, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_paragraphs', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_paragraphs', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('delete_special_slide_paragraphs', 'slide_type')

    def test_delete_special_slide_paragraphs_invalid_shape_index(self):
        """Test case for delete_special_slide_paragraphs with invalid shape_index
        """
        param_name = self.get_test_value('delete_special_slide_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_paragraphs', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_paragraphs', 'slide_type', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_paragraphs', 'shape_index', 'int')
        param_paragraphs = self.get_test_value('delete_special_slide_paragraphs', 'paragraphs', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_paragraphs', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('delete_special_slide_paragraphs', 'shape_index', param_shape_index, 'int')
        self.initialize('delete_special_slide_paragraphs', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.delete_special_slide_paragraphs(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraphs, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_paragraphs', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_paragraphs', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('delete_special_slide_paragraphs', 'shape_index')

    def test_delete_special_slide_paragraphs_invalid_paragraphs(self):
        """Test case for delete_special_slide_paragraphs with invalid paragraphs
        """
        param_name = self.get_test_value('delete_special_slide_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_paragraphs', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_paragraphs', 'slide_type', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_paragraphs', 'shape_index', 'int')
        param_paragraphs = self.get_test_value('delete_special_slide_paragraphs', 'paragraphs', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_paragraphs', 'storage', 'str')
        param_paragraphs = self.get_invalid_test_value('delete_special_slide_paragraphs', 'paragraphs', param_paragraphs, 'list[int]')
        self.initialize('delete_special_slide_paragraphs', 'paragraphs', param_paragraphs)
        ok = False
        try:
            self.api.delete_special_slide_paragraphs(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraphs, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_paragraphs', 'paragraphs', param_paragraphs)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_paragraphs', 'paragraphs', param_paragraphs)
        if ok:
            self.assert_no_exception('delete_special_slide_paragraphs', 'paragraphs')

    def test_delete_special_slide_paragraphs_invalid_password(self):
        """Test case for delete_special_slide_paragraphs with invalid password
        """
        param_name = self.get_test_value('delete_special_slide_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_paragraphs', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_paragraphs', 'slide_type', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_paragraphs', 'shape_index', 'int')
        param_paragraphs = self.get_test_value('delete_special_slide_paragraphs', 'paragraphs', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_paragraphs', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_special_slide_paragraphs', 'password', param_password, 'str')
        self.initialize('delete_special_slide_paragraphs', 'password', param_password)
        ok = False
        try:
            self.api.delete_special_slide_paragraphs(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraphs, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_paragraphs', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_paragraphs', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_special_slide_paragraphs', 'password')

    def test_delete_special_slide_paragraphs_invalid_folder(self):
        """Test case for delete_special_slide_paragraphs with invalid folder
        """
        param_name = self.get_test_value('delete_special_slide_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_paragraphs', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_paragraphs', 'slide_type', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_paragraphs', 'shape_index', 'int')
        param_paragraphs = self.get_test_value('delete_special_slide_paragraphs', 'paragraphs', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_paragraphs', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_special_slide_paragraphs', 'folder', param_folder, 'str')
        self.initialize('delete_special_slide_paragraphs', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_special_slide_paragraphs(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraphs, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_paragraphs', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_paragraphs', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_special_slide_paragraphs', 'folder')

    def test_delete_special_slide_paragraphs_invalid_storage(self):
        """Test case for delete_special_slide_paragraphs with invalid storage
        """
        param_name = self.get_test_value('delete_special_slide_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_paragraphs', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_paragraphs', 'slide_type', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_paragraphs', 'shape_index', 'int')
        param_paragraphs = self.get_test_value('delete_special_slide_paragraphs', 'paragraphs', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_paragraphs', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_special_slide_paragraphs', 'storage', param_storage, 'str')
        self.initialize('delete_special_slide_paragraphs', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_special_slide_paragraphs(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraphs, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_paragraphs', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_paragraphs', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_special_slide_paragraphs', 'storage')

    def test_delete_special_slide_portion(self):
        """Test case for delete_special_slide_portion
        """
        param_name = self.get_test_value('delete_special_slide_portion', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_portion', 'slide_type', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('delete_special_slide_portion', 'portion_index', 'int')
        param_password = self.get_test_value('delete_special_slide_portion', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_portion', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_portion', 'storage', 'str')
        self.initialize('delete_special_slide_portion', None, None)
        response = self.api.delete_special_slide_portion(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_delete_special_slide_portion_invalid_name(self):
        """Test case for delete_special_slide_portion with invalid name
        """
        param_name = self.get_test_value('delete_special_slide_portion', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_portion', 'slide_type', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('delete_special_slide_portion', 'portion_index', 'int')
        param_password = self.get_test_value('delete_special_slide_portion', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_portion', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_portion', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_special_slide_portion', 'name', param_name, 'str')
        self.initialize('delete_special_slide_portion', 'name', param_name)
        ok = False
        try:
            self.api.delete_special_slide_portion(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_portion', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_portion', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_special_slide_portion', 'name')

    def test_delete_special_slide_portion_invalid_slide_index(self):
        """Test case for delete_special_slide_portion with invalid slide_index
        """
        param_name = self.get_test_value('delete_special_slide_portion', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_portion', 'slide_type', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('delete_special_slide_portion', 'portion_index', 'int')
        param_password = self.get_test_value('delete_special_slide_portion', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_portion', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_portion', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('delete_special_slide_portion', 'slide_index', param_slide_index, 'int')
        self.initialize('delete_special_slide_portion', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.delete_special_slide_portion(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_portion', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_portion', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('delete_special_slide_portion', 'slide_index')

    def test_delete_special_slide_portion_invalid_slide_type(self):
        """Test case for delete_special_slide_portion with invalid slide_type
        """
        param_name = self.get_test_value('delete_special_slide_portion', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_portion', 'slide_type', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('delete_special_slide_portion', 'portion_index', 'int')
        param_password = self.get_test_value('delete_special_slide_portion', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_portion', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_portion', 'storage', 'str')
        param_slide_type = self.get_invalid_test_value('delete_special_slide_portion', 'slide_type', param_slide_type, 'str')
        self.initialize('delete_special_slide_portion', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.delete_special_slide_portion(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_portion', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_portion', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('delete_special_slide_portion', 'slide_type')

    def test_delete_special_slide_portion_invalid_shape_index(self):
        """Test case for delete_special_slide_portion with invalid shape_index
        """
        param_name = self.get_test_value('delete_special_slide_portion', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_portion', 'slide_type', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('delete_special_slide_portion', 'portion_index', 'int')
        param_password = self.get_test_value('delete_special_slide_portion', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_portion', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_portion', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('delete_special_slide_portion', 'shape_index', param_shape_index, 'int')
        self.initialize('delete_special_slide_portion', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.delete_special_slide_portion(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_portion', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_portion', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('delete_special_slide_portion', 'shape_index')

    def test_delete_special_slide_portion_invalid_paragraph_index(self):
        """Test case for delete_special_slide_portion with invalid paragraph_index
        """
        param_name = self.get_test_value('delete_special_slide_portion', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_portion', 'slide_type', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('delete_special_slide_portion', 'portion_index', 'int')
        param_password = self.get_test_value('delete_special_slide_portion', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_portion', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_portion', 'storage', 'str')
        param_paragraph_index = self.get_invalid_test_value('delete_special_slide_portion', 'paragraph_index', param_paragraph_index, 'int')
        self.initialize('delete_special_slide_portion', 'paragraph_index', param_paragraph_index)
        ok = False
        try:
            self.api.delete_special_slide_portion(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_portion', 'paragraph_index', param_paragraph_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_portion', 'paragraph_index', param_paragraph_index)
        if ok:
            self.assert_no_exception('delete_special_slide_portion', 'paragraph_index')

    def test_delete_special_slide_portion_invalid_portion_index(self):
        """Test case for delete_special_slide_portion with invalid portion_index
        """
        param_name = self.get_test_value('delete_special_slide_portion', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_portion', 'slide_type', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('delete_special_slide_portion', 'portion_index', 'int')
        param_password = self.get_test_value('delete_special_slide_portion', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_portion', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_portion', 'storage', 'str')
        param_portion_index = self.get_invalid_test_value('delete_special_slide_portion', 'portion_index', param_portion_index, 'int')
        self.initialize('delete_special_slide_portion', 'portion_index', param_portion_index)
        ok = False
        try:
            self.api.delete_special_slide_portion(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_portion', 'portion_index', param_portion_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_portion', 'portion_index', param_portion_index)
        if ok:
            self.assert_no_exception('delete_special_slide_portion', 'portion_index')

    def test_delete_special_slide_portion_invalid_password(self):
        """Test case for delete_special_slide_portion with invalid password
        """
        param_name = self.get_test_value('delete_special_slide_portion', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_portion', 'slide_type', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('delete_special_slide_portion', 'portion_index', 'int')
        param_password = self.get_test_value('delete_special_slide_portion', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_portion', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_portion', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_special_slide_portion', 'password', param_password, 'str')
        self.initialize('delete_special_slide_portion', 'password', param_password)
        ok = False
        try:
            self.api.delete_special_slide_portion(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_portion', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_portion', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_special_slide_portion', 'password')

    def test_delete_special_slide_portion_invalid_folder(self):
        """Test case for delete_special_slide_portion with invalid folder
        """
        param_name = self.get_test_value('delete_special_slide_portion', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_portion', 'slide_type', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('delete_special_slide_portion', 'portion_index', 'int')
        param_password = self.get_test_value('delete_special_slide_portion', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_portion', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_portion', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_special_slide_portion', 'folder', param_folder, 'str')
        self.initialize('delete_special_slide_portion', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_special_slide_portion(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_portion', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_portion', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_special_slide_portion', 'folder')

    def test_delete_special_slide_portion_invalid_storage(self):
        """Test case for delete_special_slide_portion with invalid storage
        """
        param_name = self.get_test_value('delete_special_slide_portion', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_portion', 'slide_type', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('delete_special_slide_portion', 'portion_index', 'int')
        param_password = self.get_test_value('delete_special_slide_portion', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_portion', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_portion', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_special_slide_portion', 'storage', param_storage, 'str')
        self.initialize('delete_special_slide_portion', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_special_slide_portion(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_portion', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_portion', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_special_slide_portion', 'storage')

    def test_delete_special_slide_portions(self):
        """Test case for delete_special_slide_portions
        """
        param_name = self.get_test_value('delete_special_slide_portions', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_portions', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_portions', 'slide_type', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_portions', 'paragraph_index', 'int')
        param_portions = self.get_test_value('delete_special_slide_portions', 'portions', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_portions', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_portions', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_portions', 'storage', 'str')
        self.initialize('delete_special_slide_portions', None, None)
        response = self.api.delete_special_slide_portions(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_portions, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_delete_special_slide_portions_invalid_name(self):
        """Test case for delete_special_slide_portions with invalid name
        """
        param_name = self.get_test_value('delete_special_slide_portions', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_portions', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_portions', 'slide_type', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_portions', 'paragraph_index', 'int')
        param_portions = self.get_test_value('delete_special_slide_portions', 'portions', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_portions', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_portions', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_portions', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_special_slide_portions', 'name', param_name, 'str')
        self.initialize('delete_special_slide_portions', 'name', param_name)
        ok = False
        try:
            self.api.delete_special_slide_portions(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_portions, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_portions', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_portions', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_special_slide_portions', 'name')

    def test_delete_special_slide_portions_invalid_slide_index(self):
        """Test case for delete_special_slide_portions with invalid slide_index
        """
        param_name = self.get_test_value('delete_special_slide_portions', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_portions', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_portions', 'slide_type', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_portions', 'paragraph_index', 'int')
        param_portions = self.get_test_value('delete_special_slide_portions', 'portions', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_portions', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_portions', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_portions', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('delete_special_slide_portions', 'slide_index', param_slide_index, 'int')
        self.initialize('delete_special_slide_portions', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.delete_special_slide_portions(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_portions, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_portions', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_portions', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('delete_special_slide_portions', 'slide_index')

    def test_delete_special_slide_portions_invalid_slide_type(self):
        """Test case for delete_special_slide_portions with invalid slide_type
        """
        param_name = self.get_test_value('delete_special_slide_portions', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_portions', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_portions', 'slide_type', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_portions', 'paragraph_index', 'int')
        param_portions = self.get_test_value('delete_special_slide_portions', 'portions', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_portions', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_portions', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_portions', 'storage', 'str')
        param_slide_type = self.get_invalid_test_value('delete_special_slide_portions', 'slide_type', param_slide_type, 'str')
        self.initialize('delete_special_slide_portions', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.delete_special_slide_portions(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_portions, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_portions', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_portions', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('delete_special_slide_portions', 'slide_type')

    def test_delete_special_slide_portions_invalid_shape_index(self):
        """Test case for delete_special_slide_portions with invalid shape_index
        """
        param_name = self.get_test_value('delete_special_slide_portions', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_portions', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_portions', 'slide_type', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_portions', 'paragraph_index', 'int')
        param_portions = self.get_test_value('delete_special_slide_portions', 'portions', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_portions', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_portions', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_portions', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('delete_special_slide_portions', 'shape_index', param_shape_index, 'int')
        self.initialize('delete_special_slide_portions', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.delete_special_slide_portions(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_portions, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_portions', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_portions', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('delete_special_slide_portions', 'shape_index')

    def test_delete_special_slide_portions_invalid_paragraph_index(self):
        """Test case for delete_special_slide_portions with invalid paragraph_index
        """
        param_name = self.get_test_value('delete_special_slide_portions', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_portions', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_portions', 'slide_type', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_portions', 'paragraph_index', 'int')
        param_portions = self.get_test_value('delete_special_slide_portions', 'portions', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_portions', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_portions', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_portions', 'storage', 'str')
        param_paragraph_index = self.get_invalid_test_value('delete_special_slide_portions', 'paragraph_index', param_paragraph_index, 'int')
        self.initialize('delete_special_slide_portions', 'paragraph_index', param_paragraph_index)
        ok = False
        try:
            self.api.delete_special_slide_portions(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_portions, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_portions', 'paragraph_index', param_paragraph_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_portions', 'paragraph_index', param_paragraph_index)
        if ok:
            self.assert_no_exception('delete_special_slide_portions', 'paragraph_index')

    def test_delete_special_slide_portions_invalid_portions(self):
        """Test case for delete_special_slide_portions with invalid portions
        """
        param_name = self.get_test_value('delete_special_slide_portions', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_portions', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_portions', 'slide_type', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_portions', 'paragraph_index', 'int')
        param_portions = self.get_test_value('delete_special_slide_portions', 'portions', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_portions', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_portions', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_portions', 'storage', 'str')
        param_portions = self.get_invalid_test_value('delete_special_slide_portions', 'portions', param_portions, 'list[int]')
        self.initialize('delete_special_slide_portions', 'portions', param_portions)
        ok = False
        try:
            self.api.delete_special_slide_portions(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_portions, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_portions', 'portions', param_portions)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_portions', 'portions', param_portions)
        if ok:
            self.assert_no_exception('delete_special_slide_portions', 'portions')

    def test_delete_special_slide_portions_invalid_password(self):
        """Test case for delete_special_slide_portions with invalid password
        """
        param_name = self.get_test_value('delete_special_slide_portions', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_portions', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_portions', 'slide_type', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_portions', 'paragraph_index', 'int')
        param_portions = self.get_test_value('delete_special_slide_portions', 'portions', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_portions', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_portions', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_portions', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_special_slide_portions', 'password', param_password, 'str')
        self.initialize('delete_special_slide_portions', 'password', param_password)
        ok = False
        try:
            self.api.delete_special_slide_portions(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_portions, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_portions', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_portions', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_special_slide_portions', 'password')

    def test_delete_special_slide_portions_invalid_folder(self):
        """Test case for delete_special_slide_portions with invalid folder
        """
        param_name = self.get_test_value('delete_special_slide_portions', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_portions', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_portions', 'slide_type', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_portions', 'paragraph_index', 'int')
        param_portions = self.get_test_value('delete_special_slide_portions', 'portions', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_portions', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_portions', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_portions', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_special_slide_portions', 'folder', param_folder, 'str')
        self.initialize('delete_special_slide_portions', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_special_slide_portions(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_portions, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_portions', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_portions', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_special_slide_portions', 'folder')

    def test_delete_special_slide_portions_invalid_storage(self):
        """Test case for delete_special_slide_portions with invalid storage
        """
        param_name = self.get_test_value('delete_special_slide_portions', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_portions', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_portions', 'slide_type', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_portions', 'paragraph_index', 'int')
        param_portions = self.get_test_value('delete_special_slide_portions', 'portions', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_portions', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_portions', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_portions', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_special_slide_portions', 'storage', param_storage, 'str')
        self.initialize('delete_special_slide_portions', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_special_slide_portions(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_portions, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_portions', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_portions', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_special_slide_portions', 'storage')

    def test_delete_special_slide_shape(self):
        """Test case for delete_special_slide_shape
        """
        param_name = self.get_test_value('delete_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_shape', 'shape_index', 'int')
        param_password = self.get_test_value('delete_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_shape', 'storage', 'str')
        self.initialize('delete_special_slide_shape', None, None)
        response = self.api.delete_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_delete_special_slide_shape_invalid_name(self):
        """Test case for delete_special_slide_shape with invalid name
        """
        param_name = self.get_test_value('delete_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_shape', 'shape_index', 'int')
        param_password = self.get_test_value('delete_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_shape', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_special_slide_shape', 'name', param_name, 'str')
        self.initialize('delete_special_slide_shape', 'name', param_name)
        ok = False
        try:
            self.api.delete_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_shape', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_shape', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_special_slide_shape', 'name')

    def test_delete_special_slide_shape_invalid_slide_index(self):
        """Test case for delete_special_slide_shape with invalid slide_index
        """
        param_name = self.get_test_value('delete_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_shape', 'shape_index', 'int')
        param_password = self.get_test_value('delete_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_shape', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('delete_special_slide_shape', 'slide_index', param_slide_index, 'int')
        self.initialize('delete_special_slide_shape', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.delete_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_shape', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_shape', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('delete_special_slide_shape', 'slide_index')

    def test_delete_special_slide_shape_invalid_slide_type(self):
        """Test case for delete_special_slide_shape with invalid slide_type
        """
        param_name = self.get_test_value('delete_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_shape', 'shape_index', 'int')
        param_password = self.get_test_value('delete_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_shape', 'storage', 'str')
        param_slide_type = self.get_invalid_test_value('delete_special_slide_shape', 'slide_type', param_slide_type, 'str')
        self.initialize('delete_special_slide_shape', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.delete_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_shape', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_shape', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('delete_special_slide_shape', 'slide_type')

    def test_delete_special_slide_shape_invalid_shape_index(self):
        """Test case for delete_special_slide_shape with invalid shape_index
        """
        param_name = self.get_test_value('delete_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_shape', 'shape_index', 'int')
        param_password = self.get_test_value('delete_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_shape', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('delete_special_slide_shape', 'shape_index', param_shape_index, 'int')
        self.initialize('delete_special_slide_shape', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.delete_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_shape', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_shape', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('delete_special_slide_shape', 'shape_index')

    def test_delete_special_slide_shape_invalid_password(self):
        """Test case for delete_special_slide_shape with invalid password
        """
        param_name = self.get_test_value('delete_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_shape', 'shape_index', 'int')
        param_password = self.get_test_value('delete_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_shape', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_special_slide_shape', 'password', param_password, 'str')
        self.initialize('delete_special_slide_shape', 'password', param_password)
        ok = False
        try:
            self.api.delete_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_shape', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_shape', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_special_slide_shape', 'password')

    def test_delete_special_slide_shape_invalid_folder(self):
        """Test case for delete_special_slide_shape with invalid folder
        """
        param_name = self.get_test_value('delete_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_shape', 'shape_index', 'int')
        param_password = self.get_test_value('delete_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_shape', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_special_slide_shape', 'folder', param_folder, 'str')
        self.initialize('delete_special_slide_shape', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_shape', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_shape', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_special_slide_shape', 'folder')

    def test_delete_special_slide_shape_invalid_storage(self):
        """Test case for delete_special_slide_shape with invalid storage
        """
        param_name = self.get_test_value('delete_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_shape', 'shape_index', 'int')
        param_password = self.get_test_value('delete_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_shape', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_special_slide_shape', 'storage', param_storage, 'str')
        self.initialize('delete_special_slide_shape', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_shape', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_shape', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_special_slide_shape', 'storage')

    def test_delete_special_slide_shapes(self):
        """Test case for delete_special_slide_shapes
        """
        param_name = self.get_test_value('delete_special_slide_shapes', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_shapes', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_shapes', 'slide_type', 'str')
        param_shapes = self.get_test_value('delete_special_slide_shapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_shapes', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_shapes', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_shapes', 'storage', 'str')
        self.initialize('delete_special_slide_shapes', None, None)
        response = self.api.delete_special_slide_shapes(param_name, param_slide_index, param_slide_type, param_shapes, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_delete_special_slide_shapes_invalid_name(self):
        """Test case for delete_special_slide_shapes with invalid name
        """
        param_name = self.get_test_value('delete_special_slide_shapes', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_shapes', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_shapes', 'slide_type', 'str')
        param_shapes = self.get_test_value('delete_special_slide_shapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_shapes', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_shapes', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_shapes', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_special_slide_shapes', 'name', param_name, 'str')
        self.initialize('delete_special_slide_shapes', 'name', param_name)
        ok = False
        try:
            self.api.delete_special_slide_shapes(param_name, param_slide_index, param_slide_type, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_shapes', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_shapes', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_special_slide_shapes', 'name')

    def test_delete_special_slide_shapes_invalid_slide_index(self):
        """Test case for delete_special_slide_shapes with invalid slide_index
        """
        param_name = self.get_test_value('delete_special_slide_shapes', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_shapes', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_shapes', 'slide_type', 'str')
        param_shapes = self.get_test_value('delete_special_slide_shapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_shapes', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_shapes', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_shapes', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('delete_special_slide_shapes', 'slide_index', param_slide_index, 'int')
        self.initialize('delete_special_slide_shapes', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.delete_special_slide_shapes(param_name, param_slide_index, param_slide_type, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_shapes', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_shapes', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('delete_special_slide_shapes', 'slide_index')

    def test_delete_special_slide_shapes_invalid_slide_type(self):
        """Test case for delete_special_slide_shapes with invalid slide_type
        """
        param_name = self.get_test_value('delete_special_slide_shapes', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_shapes', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_shapes', 'slide_type', 'str')
        param_shapes = self.get_test_value('delete_special_slide_shapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_shapes', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_shapes', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_shapes', 'storage', 'str')
        param_slide_type = self.get_invalid_test_value('delete_special_slide_shapes', 'slide_type', param_slide_type, 'str')
        self.initialize('delete_special_slide_shapes', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.delete_special_slide_shapes(param_name, param_slide_index, param_slide_type, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_shapes', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_shapes', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('delete_special_slide_shapes', 'slide_type')

    def test_delete_special_slide_shapes_invalid_shapes(self):
        """Test case for delete_special_slide_shapes with invalid shapes
        """
        param_name = self.get_test_value('delete_special_slide_shapes', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_shapes', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_shapes', 'slide_type', 'str')
        param_shapes = self.get_test_value('delete_special_slide_shapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_shapes', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_shapes', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_shapes', 'storage', 'str')
        param_shapes = self.get_invalid_test_value('delete_special_slide_shapes', 'shapes', param_shapes, 'list[int]')
        self.initialize('delete_special_slide_shapes', 'shapes', param_shapes)
        ok = False
        try:
            self.api.delete_special_slide_shapes(param_name, param_slide_index, param_slide_type, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_shapes', 'shapes', param_shapes)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_shapes', 'shapes', param_shapes)
        if ok:
            self.assert_no_exception('delete_special_slide_shapes', 'shapes')

    def test_delete_special_slide_shapes_invalid_password(self):
        """Test case for delete_special_slide_shapes with invalid password
        """
        param_name = self.get_test_value('delete_special_slide_shapes', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_shapes', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_shapes', 'slide_type', 'str')
        param_shapes = self.get_test_value('delete_special_slide_shapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_shapes', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_shapes', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_shapes', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_special_slide_shapes', 'password', param_password, 'str')
        self.initialize('delete_special_slide_shapes', 'password', param_password)
        ok = False
        try:
            self.api.delete_special_slide_shapes(param_name, param_slide_index, param_slide_type, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_shapes', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_shapes', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_special_slide_shapes', 'password')

    def test_delete_special_slide_shapes_invalid_folder(self):
        """Test case for delete_special_slide_shapes with invalid folder
        """
        param_name = self.get_test_value('delete_special_slide_shapes', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_shapes', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_shapes', 'slide_type', 'str')
        param_shapes = self.get_test_value('delete_special_slide_shapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_shapes', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_shapes', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_shapes', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_special_slide_shapes', 'folder', param_folder, 'str')
        self.initialize('delete_special_slide_shapes', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_special_slide_shapes(param_name, param_slide_index, param_slide_type, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_shapes', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_shapes', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_special_slide_shapes', 'folder')

    def test_delete_special_slide_shapes_invalid_storage(self):
        """Test case for delete_special_slide_shapes with invalid storage
        """
        param_name = self.get_test_value('delete_special_slide_shapes', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_shapes', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_shapes', 'slide_type', 'str')
        param_shapes = self.get_test_value('delete_special_slide_shapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_shapes', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_shapes', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_shapes', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_special_slide_shapes', 'storage', param_storage, 'str')
        self.initialize('delete_special_slide_shapes', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_special_slide_shapes(param_name, param_slide_index, param_slide_type, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_shapes', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_shapes', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_special_slide_shapes', 'storage')

    def test_delete_special_slide_subshape(self):
        """Test case for delete_special_slide_subshape
        """
        param_name = self.get_test_value('delete_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape', 'shape_index', 'int')
        param_password = self.get_test_value('delete_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape', 'storage', 'str')
        self.initialize('delete_special_slide_subshape', None, None)
        response = self.api.delete_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_delete_special_slide_subshape_invalid_name(self):
        """Test case for delete_special_slide_subshape with invalid name
        """
        param_name = self.get_test_value('delete_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape', 'shape_index', 'int')
        param_password = self.get_test_value('delete_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_special_slide_subshape', 'name', param_name, 'str')
        self.initialize('delete_special_slide_subshape', 'name', param_name)
        ok = False
        try:
            self.api.delete_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshape', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshape', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_special_slide_subshape', 'name')

    def test_delete_special_slide_subshape_invalid_slide_index(self):
        """Test case for delete_special_slide_subshape with invalid slide_index
        """
        param_name = self.get_test_value('delete_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape', 'shape_index', 'int')
        param_password = self.get_test_value('delete_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('delete_special_slide_subshape', 'slide_index', param_slide_index, 'int')
        self.initialize('delete_special_slide_subshape', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.delete_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshape', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshape', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('delete_special_slide_subshape', 'slide_index')

    def test_delete_special_slide_subshape_invalid_slide_type(self):
        """Test case for delete_special_slide_subshape with invalid slide_type
        """
        param_name = self.get_test_value('delete_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape', 'shape_index', 'int')
        param_password = self.get_test_value('delete_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape', 'storage', 'str')
        param_slide_type = self.get_invalid_test_value('delete_special_slide_subshape', 'slide_type', param_slide_type, 'str')
        self.initialize('delete_special_slide_subshape', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.delete_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshape', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshape', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('delete_special_slide_subshape', 'slide_type')

    def test_delete_special_slide_subshape_invalid_path(self):
        """Test case for delete_special_slide_subshape with invalid path
        """
        param_name = self.get_test_value('delete_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape', 'shape_index', 'int')
        param_password = self.get_test_value('delete_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape', 'storage', 'str')
        param_path = self.get_invalid_test_value('delete_special_slide_subshape', 'path', param_path, 'str')
        self.initialize('delete_special_slide_subshape', 'path', param_path)
        ok = False
        try:
            self.api.delete_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshape', 'path', param_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshape', 'path', param_path)
        if ok:
            self.assert_no_exception('delete_special_slide_subshape', 'path')

    def test_delete_special_slide_subshape_invalid_shape_index(self):
        """Test case for delete_special_slide_subshape with invalid shape_index
        """
        param_name = self.get_test_value('delete_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape', 'shape_index', 'int')
        param_password = self.get_test_value('delete_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('delete_special_slide_subshape', 'shape_index', param_shape_index, 'int')
        self.initialize('delete_special_slide_subshape', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.delete_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshape', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshape', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('delete_special_slide_subshape', 'shape_index')

    def test_delete_special_slide_subshape_invalid_password(self):
        """Test case for delete_special_slide_subshape with invalid password
        """
        param_name = self.get_test_value('delete_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape', 'shape_index', 'int')
        param_password = self.get_test_value('delete_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_special_slide_subshape', 'password', param_password, 'str')
        self.initialize('delete_special_slide_subshape', 'password', param_password)
        ok = False
        try:
            self.api.delete_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshape', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshape', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_special_slide_subshape', 'password')

    def test_delete_special_slide_subshape_invalid_folder(self):
        """Test case for delete_special_slide_subshape with invalid folder
        """
        param_name = self.get_test_value('delete_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape', 'shape_index', 'int')
        param_password = self.get_test_value('delete_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_special_slide_subshape', 'folder', param_folder, 'str')
        self.initialize('delete_special_slide_subshape', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshape', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshape', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_special_slide_subshape', 'folder')

    def test_delete_special_slide_subshape_invalid_storage(self):
        """Test case for delete_special_slide_subshape with invalid storage
        """
        param_name = self.get_test_value('delete_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape', 'shape_index', 'int')
        param_password = self.get_test_value('delete_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_special_slide_subshape', 'storage', param_storage, 'str')
        self.initialize('delete_special_slide_subshape', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshape', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshape', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_special_slide_subshape', 'storage')

    def test_delete_special_slide_subshape_paragraph(self):
        """Test case for delete_special_slide_subshape_paragraph
        """
        param_name = self.get_test_value('delete_special_slide_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape_paragraph', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_subshape_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('delete_special_slide_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape_paragraph', 'storage', 'str')
        self.initialize('delete_special_slide_subshape_paragraph', None, None)
        response = self.api.delete_special_slide_subshape_paragraph(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_delete_special_slide_subshape_paragraph_invalid_name(self):
        """Test case for delete_special_slide_subshape_paragraph with invalid name
        """
        param_name = self.get_test_value('delete_special_slide_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape_paragraph', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_subshape_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('delete_special_slide_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape_paragraph', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_special_slide_subshape_paragraph', 'name', param_name, 'str')
        self.initialize('delete_special_slide_subshape_paragraph', 'name', param_name)
        ok = False
        try:
            self.api.delete_special_slide_subshape_paragraph(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshape_paragraph', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshape_paragraph', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_special_slide_subshape_paragraph', 'name')

    def test_delete_special_slide_subshape_paragraph_invalid_slide_index(self):
        """Test case for delete_special_slide_subshape_paragraph with invalid slide_index
        """
        param_name = self.get_test_value('delete_special_slide_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape_paragraph', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_subshape_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('delete_special_slide_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape_paragraph', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('delete_special_slide_subshape_paragraph', 'slide_index', param_slide_index, 'int')
        self.initialize('delete_special_slide_subshape_paragraph', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.delete_special_slide_subshape_paragraph(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshape_paragraph', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshape_paragraph', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('delete_special_slide_subshape_paragraph', 'slide_index')

    def test_delete_special_slide_subshape_paragraph_invalid_slide_type(self):
        """Test case for delete_special_slide_subshape_paragraph with invalid slide_type
        """
        param_name = self.get_test_value('delete_special_slide_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape_paragraph', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_subshape_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('delete_special_slide_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape_paragraph', 'storage', 'str')
        param_slide_type = self.get_invalid_test_value('delete_special_slide_subshape_paragraph', 'slide_type', param_slide_type, 'str')
        self.initialize('delete_special_slide_subshape_paragraph', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.delete_special_slide_subshape_paragraph(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshape_paragraph', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshape_paragraph', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('delete_special_slide_subshape_paragraph', 'slide_type')

    def test_delete_special_slide_subshape_paragraph_invalid_path(self):
        """Test case for delete_special_slide_subshape_paragraph with invalid path
        """
        param_name = self.get_test_value('delete_special_slide_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape_paragraph', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_subshape_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('delete_special_slide_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape_paragraph', 'storage', 'str')
        param_path = self.get_invalid_test_value('delete_special_slide_subshape_paragraph', 'path', param_path, 'str')
        self.initialize('delete_special_slide_subshape_paragraph', 'path', param_path)
        ok = False
        try:
            self.api.delete_special_slide_subshape_paragraph(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshape_paragraph', 'path', param_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshape_paragraph', 'path', param_path)
        if ok:
            self.assert_no_exception('delete_special_slide_subshape_paragraph', 'path')

    def test_delete_special_slide_subshape_paragraph_invalid_shape_index(self):
        """Test case for delete_special_slide_subshape_paragraph with invalid shape_index
        """
        param_name = self.get_test_value('delete_special_slide_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape_paragraph', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_subshape_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('delete_special_slide_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape_paragraph', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('delete_special_slide_subshape_paragraph', 'shape_index', param_shape_index, 'int')
        self.initialize('delete_special_slide_subshape_paragraph', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.delete_special_slide_subshape_paragraph(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshape_paragraph', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshape_paragraph', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('delete_special_slide_subshape_paragraph', 'shape_index')

    def test_delete_special_slide_subshape_paragraph_invalid_paragraph_index(self):
        """Test case for delete_special_slide_subshape_paragraph with invalid paragraph_index
        """
        param_name = self.get_test_value('delete_special_slide_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape_paragraph', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_subshape_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('delete_special_slide_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape_paragraph', 'storage', 'str')
        param_paragraph_index = self.get_invalid_test_value('delete_special_slide_subshape_paragraph', 'paragraph_index', param_paragraph_index, 'int')
        self.initialize('delete_special_slide_subshape_paragraph', 'paragraph_index', param_paragraph_index)
        ok = False
        try:
            self.api.delete_special_slide_subshape_paragraph(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshape_paragraph', 'paragraph_index', param_paragraph_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshape_paragraph', 'paragraph_index', param_paragraph_index)
        if ok:
            self.assert_no_exception('delete_special_slide_subshape_paragraph', 'paragraph_index')

    def test_delete_special_slide_subshape_paragraph_invalid_password(self):
        """Test case for delete_special_slide_subshape_paragraph with invalid password
        """
        param_name = self.get_test_value('delete_special_slide_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape_paragraph', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_subshape_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('delete_special_slide_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape_paragraph', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_special_slide_subshape_paragraph', 'password', param_password, 'str')
        self.initialize('delete_special_slide_subshape_paragraph', 'password', param_password)
        ok = False
        try:
            self.api.delete_special_slide_subshape_paragraph(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshape_paragraph', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshape_paragraph', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_special_slide_subshape_paragraph', 'password')

    def test_delete_special_slide_subshape_paragraph_invalid_folder(self):
        """Test case for delete_special_slide_subshape_paragraph with invalid folder
        """
        param_name = self.get_test_value('delete_special_slide_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape_paragraph', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_subshape_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('delete_special_slide_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape_paragraph', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_special_slide_subshape_paragraph', 'folder', param_folder, 'str')
        self.initialize('delete_special_slide_subshape_paragraph', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_special_slide_subshape_paragraph(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshape_paragraph', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshape_paragraph', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_special_slide_subshape_paragraph', 'folder')

    def test_delete_special_slide_subshape_paragraph_invalid_storage(self):
        """Test case for delete_special_slide_subshape_paragraph with invalid storage
        """
        param_name = self.get_test_value('delete_special_slide_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape_paragraph', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_subshape_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('delete_special_slide_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape_paragraph', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_special_slide_subshape_paragraph', 'storage', param_storage, 'str')
        self.initialize('delete_special_slide_subshape_paragraph', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_special_slide_subshape_paragraph(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshape_paragraph', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshape_paragraph', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_special_slide_subshape_paragraph', 'storage')

    def test_delete_special_slide_subshape_paragraphs(self):
        """Test case for delete_special_slide_subshape_paragraphs
        """
        param_name = self.get_test_value('delete_special_slide_subshape_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape_paragraphs', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape_paragraphs', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape_paragraphs', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape_paragraphs', 'shape_index', 'int')
        param_paragraphs = self.get_test_value('delete_special_slide_subshape_paragraphs', 'paragraphs', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_subshape_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape_paragraphs', 'storage', 'str')
        self.initialize('delete_special_slide_subshape_paragraphs', None, None)
        response = self.api.delete_special_slide_subshape_paragraphs(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraphs, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_delete_special_slide_subshape_paragraphs_invalid_name(self):
        """Test case for delete_special_slide_subshape_paragraphs with invalid name
        """
        param_name = self.get_test_value('delete_special_slide_subshape_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape_paragraphs', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape_paragraphs', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape_paragraphs', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape_paragraphs', 'shape_index', 'int')
        param_paragraphs = self.get_test_value('delete_special_slide_subshape_paragraphs', 'paragraphs', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_subshape_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape_paragraphs', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_special_slide_subshape_paragraphs', 'name', param_name, 'str')
        self.initialize('delete_special_slide_subshape_paragraphs', 'name', param_name)
        ok = False
        try:
            self.api.delete_special_slide_subshape_paragraphs(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraphs, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshape_paragraphs', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshape_paragraphs', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_special_slide_subshape_paragraphs', 'name')

    def test_delete_special_slide_subshape_paragraphs_invalid_slide_index(self):
        """Test case for delete_special_slide_subshape_paragraphs with invalid slide_index
        """
        param_name = self.get_test_value('delete_special_slide_subshape_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape_paragraphs', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape_paragraphs', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape_paragraphs', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape_paragraphs', 'shape_index', 'int')
        param_paragraphs = self.get_test_value('delete_special_slide_subshape_paragraphs', 'paragraphs', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_subshape_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape_paragraphs', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('delete_special_slide_subshape_paragraphs', 'slide_index', param_slide_index, 'int')
        self.initialize('delete_special_slide_subshape_paragraphs', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.delete_special_slide_subshape_paragraphs(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraphs, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshape_paragraphs', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshape_paragraphs', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('delete_special_slide_subshape_paragraphs', 'slide_index')

    def test_delete_special_slide_subshape_paragraphs_invalid_slide_type(self):
        """Test case for delete_special_slide_subshape_paragraphs with invalid slide_type
        """
        param_name = self.get_test_value('delete_special_slide_subshape_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape_paragraphs', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape_paragraphs', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape_paragraphs', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape_paragraphs', 'shape_index', 'int')
        param_paragraphs = self.get_test_value('delete_special_slide_subshape_paragraphs', 'paragraphs', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_subshape_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape_paragraphs', 'storage', 'str')
        param_slide_type = self.get_invalid_test_value('delete_special_slide_subshape_paragraphs', 'slide_type', param_slide_type, 'str')
        self.initialize('delete_special_slide_subshape_paragraphs', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.delete_special_slide_subshape_paragraphs(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraphs, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshape_paragraphs', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshape_paragraphs', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('delete_special_slide_subshape_paragraphs', 'slide_type')

    def test_delete_special_slide_subshape_paragraphs_invalid_path(self):
        """Test case for delete_special_slide_subshape_paragraphs with invalid path
        """
        param_name = self.get_test_value('delete_special_slide_subshape_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape_paragraphs', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape_paragraphs', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape_paragraphs', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape_paragraphs', 'shape_index', 'int')
        param_paragraphs = self.get_test_value('delete_special_slide_subshape_paragraphs', 'paragraphs', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_subshape_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape_paragraphs', 'storage', 'str')
        param_path = self.get_invalid_test_value('delete_special_slide_subshape_paragraphs', 'path', param_path, 'str')
        self.initialize('delete_special_slide_subshape_paragraphs', 'path', param_path)
        ok = False
        try:
            self.api.delete_special_slide_subshape_paragraphs(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraphs, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshape_paragraphs', 'path', param_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshape_paragraphs', 'path', param_path)
        if ok:
            self.assert_no_exception('delete_special_slide_subshape_paragraphs', 'path')

    def test_delete_special_slide_subshape_paragraphs_invalid_shape_index(self):
        """Test case for delete_special_slide_subshape_paragraphs with invalid shape_index
        """
        param_name = self.get_test_value('delete_special_slide_subshape_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape_paragraphs', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape_paragraphs', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape_paragraphs', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape_paragraphs', 'shape_index', 'int')
        param_paragraphs = self.get_test_value('delete_special_slide_subshape_paragraphs', 'paragraphs', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_subshape_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape_paragraphs', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('delete_special_slide_subshape_paragraphs', 'shape_index', param_shape_index, 'int')
        self.initialize('delete_special_slide_subshape_paragraphs', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.delete_special_slide_subshape_paragraphs(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraphs, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshape_paragraphs', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshape_paragraphs', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('delete_special_slide_subshape_paragraphs', 'shape_index')

    def test_delete_special_slide_subshape_paragraphs_invalid_paragraphs(self):
        """Test case for delete_special_slide_subshape_paragraphs with invalid paragraphs
        """
        param_name = self.get_test_value('delete_special_slide_subshape_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape_paragraphs', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape_paragraphs', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape_paragraphs', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape_paragraphs', 'shape_index', 'int')
        param_paragraphs = self.get_test_value('delete_special_slide_subshape_paragraphs', 'paragraphs', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_subshape_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape_paragraphs', 'storage', 'str')
        param_paragraphs = self.get_invalid_test_value('delete_special_slide_subshape_paragraphs', 'paragraphs', param_paragraphs, 'list[int]')
        self.initialize('delete_special_slide_subshape_paragraphs', 'paragraphs', param_paragraphs)
        ok = False
        try:
            self.api.delete_special_slide_subshape_paragraphs(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraphs, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshape_paragraphs', 'paragraphs', param_paragraphs)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshape_paragraphs', 'paragraphs', param_paragraphs)
        if ok:
            self.assert_no_exception('delete_special_slide_subshape_paragraphs', 'paragraphs')

    def test_delete_special_slide_subshape_paragraphs_invalid_password(self):
        """Test case for delete_special_slide_subshape_paragraphs with invalid password
        """
        param_name = self.get_test_value('delete_special_slide_subshape_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape_paragraphs', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape_paragraphs', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape_paragraphs', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape_paragraphs', 'shape_index', 'int')
        param_paragraphs = self.get_test_value('delete_special_slide_subshape_paragraphs', 'paragraphs', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_subshape_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape_paragraphs', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_special_slide_subshape_paragraphs', 'password', param_password, 'str')
        self.initialize('delete_special_slide_subshape_paragraphs', 'password', param_password)
        ok = False
        try:
            self.api.delete_special_slide_subshape_paragraphs(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraphs, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshape_paragraphs', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshape_paragraphs', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_special_slide_subshape_paragraphs', 'password')

    def test_delete_special_slide_subshape_paragraphs_invalid_folder(self):
        """Test case for delete_special_slide_subshape_paragraphs with invalid folder
        """
        param_name = self.get_test_value('delete_special_slide_subshape_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape_paragraphs', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape_paragraphs', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape_paragraphs', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape_paragraphs', 'shape_index', 'int')
        param_paragraphs = self.get_test_value('delete_special_slide_subshape_paragraphs', 'paragraphs', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_subshape_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape_paragraphs', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_special_slide_subshape_paragraphs', 'folder', param_folder, 'str')
        self.initialize('delete_special_slide_subshape_paragraphs', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_special_slide_subshape_paragraphs(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraphs, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshape_paragraphs', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshape_paragraphs', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_special_slide_subshape_paragraphs', 'folder')

    def test_delete_special_slide_subshape_paragraphs_invalid_storage(self):
        """Test case for delete_special_slide_subshape_paragraphs with invalid storage
        """
        param_name = self.get_test_value('delete_special_slide_subshape_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape_paragraphs', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape_paragraphs', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape_paragraphs', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape_paragraphs', 'shape_index', 'int')
        param_paragraphs = self.get_test_value('delete_special_slide_subshape_paragraphs', 'paragraphs', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_subshape_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape_paragraphs', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_special_slide_subshape_paragraphs', 'storage', param_storage, 'str')
        self.initialize('delete_special_slide_subshape_paragraphs', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_special_slide_subshape_paragraphs(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraphs, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshape_paragraphs', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshape_paragraphs', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_special_slide_subshape_paragraphs', 'storage')

    def test_delete_special_slide_subshape_portion(self):
        """Test case for delete_special_slide_subshape_portion
        """
        param_name = self.get_test_value('delete_special_slide_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape_portion', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('delete_special_slide_subshape_portion', 'portion_index', 'int')
        param_password = self.get_test_value('delete_special_slide_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape_portion', 'storage', 'str')
        self.initialize('delete_special_slide_subshape_portion', None, None)
        response = self.api.delete_special_slide_subshape_portion(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_delete_special_slide_subshape_portion_invalid_name(self):
        """Test case for delete_special_slide_subshape_portion with invalid name
        """
        param_name = self.get_test_value('delete_special_slide_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape_portion', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('delete_special_slide_subshape_portion', 'portion_index', 'int')
        param_password = self.get_test_value('delete_special_slide_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape_portion', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_special_slide_subshape_portion', 'name', param_name, 'str')
        self.initialize('delete_special_slide_subshape_portion', 'name', param_name)
        ok = False
        try:
            self.api.delete_special_slide_subshape_portion(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshape_portion', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshape_portion', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_special_slide_subshape_portion', 'name')

    def test_delete_special_slide_subshape_portion_invalid_slide_index(self):
        """Test case for delete_special_slide_subshape_portion with invalid slide_index
        """
        param_name = self.get_test_value('delete_special_slide_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape_portion', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('delete_special_slide_subshape_portion', 'portion_index', 'int')
        param_password = self.get_test_value('delete_special_slide_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape_portion', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('delete_special_slide_subshape_portion', 'slide_index', param_slide_index, 'int')
        self.initialize('delete_special_slide_subshape_portion', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.delete_special_slide_subshape_portion(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshape_portion', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshape_portion', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('delete_special_slide_subshape_portion', 'slide_index')

    def test_delete_special_slide_subshape_portion_invalid_slide_type(self):
        """Test case for delete_special_slide_subshape_portion with invalid slide_type
        """
        param_name = self.get_test_value('delete_special_slide_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape_portion', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('delete_special_slide_subshape_portion', 'portion_index', 'int')
        param_password = self.get_test_value('delete_special_slide_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape_portion', 'storage', 'str')
        param_slide_type = self.get_invalid_test_value('delete_special_slide_subshape_portion', 'slide_type', param_slide_type, 'str')
        self.initialize('delete_special_slide_subshape_portion', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.delete_special_slide_subshape_portion(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshape_portion', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshape_portion', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('delete_special_slide_subshape_portion', 'slide_type')

    def test_delete_special_slide_subshape_portion_invalid_path(self):
        """Test case for delete_special_slide_subshape_portion with invalid path
        """
        param_name = self.get_test_value('delete_special_slide_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape_portion', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('delete_special_slide_subshape_portion', 'portion_index', 'int')
        param_password = self.get_test_value('delete_special_slide_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape_portion', 'storage', 'str')
        param_path = self.get_invalid_test_value('delete_special_slide_subshape_portion', 'path', param_path, 'str')
        self.initialize('delete_special_slide_subshape_portion', 'path', param_path)
        ok = False
        try:
            self.api.delete_special_slide_subshape_portion(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshape_portion', 'path', param_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshape_portion', 'path', param_path)
        if ok:
            self.assert_no_exception('delete_special_slide_subshape_portion', 'path')

    def test_delete_special_slide_subshape_portion_invalid_shape_index(self):
        """Test case for delete_special_slide_subshape_portion with invalid shape_index
        """
        param_name = self.get_test_value('delete_special_slide_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape_portion', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('delete_special_slide_subshape_portion', 'portion_index', 'int')
        param_password = self.get_test_value('delete_special_slide_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape_portion', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('delete_special_slide_subshape_portion', 'shape_index', param_shape_index, 'int')
        self.initialize('delete_special_slide_subshape_portion', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.delete_special_slide_subshape_portion(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshape_portion', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshape_portion', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('delete_special_slide_subshape_portion', 'shape_index')

    def test_delete_special_slide_subshape_portion_invalid_paragraph_index(self):
        """Test case for delete_special_slide_subshape_portion with invalid paragraph_index
        """
        param_name = self.get_test_value('delete_special_slide_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape_portion', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('delete_special_slide_subshape_portion', 'portion_index', 'int')
        param_password = self.get_test_value('delete_special_slide_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape_portion', 'storage', 'str')
        param_paragraph_index = self.get_invalid_test_value('delete_special_slide_subshape_portion', 'paragraph_index', param_paragraph_index, 'int')
        self.initialize('delete_special_slide_subshape_portion', 'paragraph_index', param_paragraph_index)
        ok = False
        try:
            self.api.delete_special_slide_subshape_portion(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshape_portion', 'paragraph_index', param_paragraph_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshape_portion', 'paragraph_index', param_paragraph_index)
        if ok:
            self.assert_no_exception('delete_special_slide_subshape_portion', 'paragraph_index')

    def test_delete_special_slide_subshape_portion_invalid_portion_index(self):
        """Test case for delete_special_slide_subshape_portion with invalid portion_index
        """
        param_name = self.get_test_value('delete_special_slide_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape_portion', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('delete_special_slide_subshape_portion', 'portion_index', 'int')
        param_password = self.get_test_value('delete_special_slide_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape_portion', 'storage', 'str')
        param_portion_index = self.get_invalid_test_value('delete_special_slide_subshape_portion', 'portion_index', param_portion_index, 'int')
        self.initialize('delete_special_slide_subshape_portion', 'portion_index', param_portion_index)
        ok = False
        try:
            self.api.delete_special_slide_subshape_portion(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshape_portion', 'portion_index', param_portion_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshape_portion', 'portion_index', param_portion_index)
        if ok:
            self.assert_no_exception('delete_special_slide_subshape_portion', 'portion_index')

    def test_delete_special_slide_subshape_portion_invalid_password(self):
        """Test case for delete_special_slide_subshape_portion with invalid password
        """
        param_name = self.get_test_value('delete_special_slide_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape_portion', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('delete_special_slide_subshape_portion', 'portion_index', 'int')
        param_password = self.get_test_value('delete_special_slide_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape_portion', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_special_slide_subshape_portion', 'password', param_password, 'str')
        self.initialize('delete_special_slide_subshape_portion', 'password', param_password)
        ok = False
        try:
            self.api.delete_special_slide_subshape_portion(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshape_portion', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshape_portion', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_special_slide_subshape_portion', 'password')

    def test_delete_special_slide_subshape_portion_invalid_folder(self):
        """Test case for delete_special_slide_subshape_portion with invalid folder
        """
        param_name = self.get_test_value('delete_special_slide_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape_portion', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('delete_special_slide_subshape_portion', 'portion_index', 'int')
        param_password = self.get_test_value('delete_special_slide_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape_portion', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_special_slide_subshape_portion', 'folder', param_folder, 'str')
        self.initialize('delete_special_slide_subshape_portion', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_special_slide_subshape_portion(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshape_portion', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshape_portion', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_special_slide_subshape_portion', 'folder')

    def test_delete_special_slide_subshape_portion_invalid_storage(self):
        """Test case for delete_special_slide_subshape_portion with invalid storage
        """
        param_name = self.get_test_value('delete_special_slide_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape_portion', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('delete_special_slide_subshape_portion', 'portion_index', 'int')
        param_password = self.get_test_value('delete_special_slide_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape_portion', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_special_slide_subshape_portion', 'storage', param_storage, 'str')
        self.initialize('delete_special_slide_subshape_portion', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_special_slide_subshape_portion(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshape_portion', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshape_portion', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_special_slide_subshape_portion', 'storage')

    def test_delete_special_slide_subshape_portions(self):
        """Test case for delete_special_slide_subshape_portions
        """
        param_name = self.get_test_value('delete_special_slide_subshape_portions', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape_portions', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape_portions', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape_portions', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_subshape_portions', 'paragraph_index', 'int')
        param_portions = self.get_test_value('delete_special_slide_subshape_portions', 'portions', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_subshape_portions', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape_portions', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape_portions', 'storage', 'str')
        self.initialize('delete_special_slide_subshape_portions', None, None)
        response = self.api.delete_special_slide_subshape_portions(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_portions, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_delete_special_slide_subshape_portions_invalid_name(self):
        """Test case for delete_special_slide_subshape_portions with invalid name
        """
        param_name = self.get_test_value('delete_special_slide_subshape_portions', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape_portions', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape_portions', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape_portions', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_subshape_portions', 'paragraph_index', 'int')
        param_portions = self.get_test_value('delete_special_slide_subshape_portions', 'portions', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_subshape_portions', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape_portions', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape_portions', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_special_slide_subshape_portions', 'name', param_name, 'str')
        self.initialize('delete_special_slide_subshape_portions', 'name', param_name)
        ok = False
        try:
            self.api.delete_special_slide_subshape_portions(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_portions, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshape_portions', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshape_portions', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_special_slide_subshape_portions', 'name')

    def test_delete_special_slide_subshape_portions_invalid_slide_index(self):
        """Test case for delete_special_slide_subshape_portions with invalid slide_index
        """
        param_name = self.get_test_value('delete_special_slide_subshape_portions', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape_portions', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape_portions', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape_portions', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_subshape_portions', 'paragraph_index', 'int')
        param_portions = self.get_test_value('delete_special_slide_subshape_portions', 'portions', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_subshape_portions', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape_portions', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape_portions', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('delete_special_slide_subshape_portions', 'slide_index', param_slide_index, 'int')
        self.initialize('delete_special_slide_subshape_portions', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.delete_special_slide_subshape_portions(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_portions, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshape_portions', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshape_portions', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('delete_special_slide_subshape_portions', 'slide_index')

    def test_delete_special_slide_subshape_portions_invalid_slide_type(self):
        """Test case for delete_special_slide_subshape_portions with invalid slide_type
        """
        param_name = self.get_test_value('delete_special_slide_subshape_portions', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape_portions', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape_portions', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape_portions', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_subshape_portions', 'paragraph_index', 'int')
        param_portions = self.get_test_value('delete_special_slide_subshape_portions', 'portions', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_subshape_portions', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape_portions', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape_portions', 'storage', 'str')
        param_slide_type = self.get_invalid_test_value('delete_special_slide_subshape_portions', 'slide_type', param_slide_type, 'str')
        self.initialize('delete_special_slide_subshape_portions', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.delete_special_slide_subshape_portions(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_portions, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshape_portions', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshape_portions', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('delete_special_slide_subshape_portions', 'slide_type')

    def test_delete_special_slide_subshape_portions_invalid_path(self):
        """Test case for delete_special_slide_subshape_portions with invalid path
        """
        param_name = self.get_test_value('delete_special_slide_subshape_portions', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape_portions', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape_portions', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape_portions', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_subshape_portions', 'paragraph_index', 'int')
        param_portions = self.get_test_value('delete_special_slide_subshape_portions', 'portions', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_subshape_portions', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape_portions', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape_portions', 'storage', 'str')
        param_path = self.get_invalid_test_value('delete_special_slide_subshape_portions', 'path', param_path, 'str')
        self.initialize('delete_special_slide_subshape_portions', 'path', param_path)
        ok = False
        try:
            self.api.delete_special_slide_subshape_portions(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_portions, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshape_portions', 'path', param_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshape_portions', 'path', param_path)
        if ok:
            self.assert_no_exception('delete_special_slide_subshape_portions', 'path')

    def test_delete_special_slide_subshape_portions_invalid_shape_index(self):
        """Test case for delete_special_slide_subshape_portions with invalid shape_index
        """
        param_name = self.get_test_value('delete_special_slide_subshape_portions', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape_portions', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape_portions', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape_portions', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_subshape_portions', 'paragraph_index', 'int')
        param_portions = self.get_test_value('delete_special_slide_subshape_portions', 'portions', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_subshape_portions', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape_portions', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape_portions', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('delete_special_slide_subshape_portions', 'shape_index', param_shape_index, 'int')
        self.initialize('delete_special_slide_subshape_portions', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.delete_special_slide_subshape_portions(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_portions, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshape_portions', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshape_portions', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('delete_special_slide_subshape_portions', 'shape_index')

    def test_delete_special_slide_subshape_portions_invalid_paragraph_index(self):
        """Test case for delete_special_slide_subshape_portions with invalid paragraph_index
        """
        param_name = self.get_test_value('delete_special_slide_subshape_portions', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape_portions', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape_portions', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape_portions', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_subshape_portions', 'paragraph_index', 'int')
        param_portions = self.get_test_value('delete_special_slide_subshape_portions', 'portions', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_subshape_portions', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape_portions', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape_portions', 'storage', 'str')
        param_paragraph_index = self.get_invalid_test_value('delete_special_slide_subshape_portions', 'paragraph_index', param_paragraph_index, 'int')
        self.initialize('delete_special_slide_subshape_portions', 'paragraph_index', param_paragraph_index)
        ok = False
        try:
            self.api.delete_special_slide_subshape_portions(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_portions, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshape_portions', 'paragraph_index', param_paragraph_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshape_portions', 'paragraph_index', param_paragraph_index)
        if ok:
            self.assert_no_exception('delete_special_slide_subshape_portions', 'paragraph_index')

    def test_delete_special_slide_subshape_portions_invalid_portions(self):
        """Test case for delete_special_slide_subshape_portions with invalid portions
        """
        param_name = self.get_test_value('delete_special_slide_subshape_portions', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape_portions', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape_portions', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape_portions', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_subshape_portions', 'paragraph_index', 'int')
        param_portions = self.get_test_value('delete_special_slide_subshape_portions', 'portions', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_subshape_portions', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape_portions', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape_portions', 'storage', 'str')
        param_portions = self.get_invalid_test_value('delete_special_slide_subshape_portions', 'portions', param_portions, 'list[int]')
        self.initialize('delete_special_slide_subshape_portions', 'portions', param_portions)
        ok = False
        try:
            self.api.delete_special_slide_subshape_portions(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_portions, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshape_portions', 'portions', param_portions)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshape_portions', 'portions', param_portions)
        if ok:
            self.assert_no_exception('delete_special_slide_subshape_portions', 'portions')

    def test_delete_special_slide_subshape_portions_invalid_password(self):
        """Test case for delete_special_slide_subshape_portions with invalid password
        """
        param_name = self.get_test_value('delete_special_slide_subshape_portions', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape_portions', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape_portions', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape_portions', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_subshape_portions', 'paragraph_index', 'int')
        param_portions = self.get_test_value('delete_special_slide_subshape_portions', 'portions', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_subshape_portions', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape_portions', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape_portions', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_special_slide_subshape_portions', 'password', param_password, 'str')
        self.initialize('delete_special_slide_subshape_portions', 'password', param_password)
        ok = False
        try:
            self.api.delete_special_slide_subshape_portions(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_portions, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshape_portions', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshape_portions', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_special_slide_subshape_portions', 'password')

    def test_delete_special_slide_subshape_portions_invalid_folder(self):
        """Test case for delete_special_slide_subshape_portions with invalid folder
        """
        param_name = self.get_test_value('delete_special_slide_subshape_portions', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape_portions', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape_portions', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape_portions', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_subshape_portions', 'paragraph_index', 'int')
        param_portions = self.get_test_value('delete_special_slide_subshape_portions', 'portions', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_subshape_portions', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape_portions', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape_portions', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_special_slide_subshape_portions', 'folder', param_folder, 'str')
        self.initialize('delete_special_slide_subshape_portions', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_special_slide_subshape_portions(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_portions, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshape_portions', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshape_portions', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_special_slide_subshape_portions', 'folder')

    def test_delete_special_slide_subshape_portions_invalid_storage(self):
        """Test case for delete_special_slide_subshape_portions with invalid storage
        """
        param_name = self.get_test_value('delete_special_slide_subshape_portions', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshape_portions', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshape_portions', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshape_portions', 'path', 'str')
        param_shape_index = self.get_test_value('delete_special_slide_subshape_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_special_slide_subshape_portions', 'paragraph_index', 'int')
        param_portions = self.get_test_value('delete_special_slide_subshape_portions', 'portions', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_subshape_portions', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshape_portions', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshape_portions', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_special_slide_subshape_portions', 'storage', param_storage, 'str')
        self.initialize('delete_special_slide_subshape_portions', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_special_slide_subshape_portions(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_portions, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshape_portions', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshape_portions', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_special_slide_subshape_portions', 'storage')

    def test_delete_special_slide_subshapes(self):
        """Test case for delete_special_slide_subshapes
        """
        param_name = self.get_test_value('delete_special_slide_subshapes', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshapes', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshapes', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshapes', 'path', 'str')
        param_shapes = self.get_test_value('delete_special_slide_subshapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_subshapes', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshapes', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshapes', 'storage', 'str')
        self.initialize('delete_special_slide_subshapes', None, None)
        response = self.api.delete_special_slide_subshapes(param_name, param_slide_index, param_slide_type, param_path, param_shapes, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_delete_special_slide_subshapes_invalid_name(self):
        """Test case for delete_special_slide_subshapes with invalid name
        """
        param_name = self.get_test_value('delete_special_slide_subshapes', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshapes', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshapes', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshapes', 'path', 'str')
        param_shapes = self.get_test_value('delete_special_slide_subshapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_subshapes', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshapes', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshapes', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_special_slide_subshapes', 'name', param_name, 'str')
        self.initialize('delete_special_slide_subshapes', 'name', param_name)
        ok = False
        try:
            self.api.delete_special_slide_subshapes(param_name, param_slide_index, param_slide_type, param_path, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshapes', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshapes', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_special_slide_subshapes', 'name')

    def test_delete_special_slide_subshapes_invalid_slide_index(self):
        """Test case for delete_special_slide_subshapes with invalid slide_index
        """
        param_name = self.get_test_value('delete_special_slide_subshapes', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshapes', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshapes', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshapes', 'path', 'str')
        param_shapes = self.get_test_value('delete_special_slide_subshapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_subshapes', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshapes', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshapes', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('delete_special_slide_subshapes', 'slide_index', param_slide_index, 'int')
        self.initialize('delete_special_slide_subshapes', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.delete_special_slide_subshapes(param_name, param_slide_index, param_slide_type, param_path, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshapes', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshapes', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('delete_special_slide_subshapes', 'slide_index')

    def test_delete_special_slide_subshapes_invalid_slide_type(self):
        """Test case for delete_special_slide_subshapes with invalid slide_type
        """
        param_name = self.get_test_value('delete_special_slide_subshapes', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshapes', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshapes', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshapes', 'path', 'str')
        param_shapes = self.get_test_value('delete_special_slide_subshapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_subshapes', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshapes', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshapes', 'storage', 'str')
        param_slide_type = self.get_invalid_test_value('delete_special_slide_subshapes', 'slide_type', param_slide_type, 'str')
        self.initialize('delete_special_slide_subshapes', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.delete_special_slide_subshapes(param_name, param_slide_index, param_slide_type, param_path, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshapes', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshapes', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('delete_special_slide_subshapes', 'slide_type')

    def test_delete_special_slide_subshapes_invalid_path(self):
        """Test case for delete_special_slide_subshapes with invalid path
        """
        param_name = self.get_test_value('delete_special_slide_subshapes', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshapes', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshapes', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshapes', 'path', 'str')
        param_shapes = self.get_test_value('delete_special_slide_subshapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_subshapes', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshapes', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshapes', 'storage', 'str')
        param_path = self.get_invalid_test_value('delete_special_slide_subshapes', 'path', param_path, 'str')
        self.initialize('delete_special_slide_subshapes', 'path', param_path)
        ok = False
        try:
            self.api.delete_special_slide_subshapes(param_name, param_slide_index, param_slide_type, param_path, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshapes', 'path', param_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshapes', 'path', param_path)
        if ok:
            self.assert_no_exception('delete_special_slide_subshapes', 'path')

    def test_delete_special_slide_subshapes_invalid_shapes(self):
        """Test case for delete_special_slide_subshapes with invalid shapes
        """
        param_name = self.get_test_value('delete_special_slide_subshapes', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshapes', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshapes', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshapes', 'path', 'str')
        param_shapes = self.get_test_value('delete_special_slide_subshapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_subshapes', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshapes', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshapes', 'storage', 'str')
        param_shapes = self.get_invalid_test_value('delete_special_slide_subshapes', 'shapes', param_shapes, 'list[int]')
        self.initialize('delete_special_slide_subshapes', 'shapes', param_shapes)
        ok = False
        try:
            self.api.delete_special_slide_subshapes(param_name, param_slide_index, param_slide_type, param_path, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshapes', 'shapes', param_shapes)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshapes', 'shapes', param_shapes)
        if ok:
            self.assert_no_exception('delete_special_slide_subshapes', 'shapes')

    def test_delete_special_slide_subshapes_invalid_password(self):
        """Test case for delete_special_slide_subshapes with invalid password
        """
        param_name = self.get_test_value('delete_special_slide_subshapes', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshapes', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshapes', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshapes', 'path', 'str')
        param_shapes = self.get_test_value('delete_special_slide_subshapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_subshapes', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshapes', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshapes', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_special_slide_subshapes', 'password', param_password, 'str')
        self.initialize('delete_special_slide_subshapes', 'password', param_password)
        ok = False
        try:
            self.api.delete_special_slide_subshapes(param_name, param_slide_index, param_slide_type, param_path, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshapes', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshapes', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_special_slide_subshapes', 'password')

    def test_delete_special_slide_subshapes_invalid_folder(self):
        """Test case for delete_special_slide_subshapes with invalid folder
        """
        param_name = self.get_test_value('delete_special_slide_subshapes', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshapes', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshapes', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshapes', 'path', 'str')
        param_shapes = self.get_test_value('delete_special_slide_subshapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_subshapes', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshapes', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshapes', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_special_slide_subshapes', 'folder', param_folder, 'str')
        self.initialize('delete_special_slide_subshapes', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_special_slide_subshapes(param_name, param_slide_index, param_slide_type, param_path, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshapes', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshapes', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_special_slide_subshapes', 'folder')

    def test_delete_special_slide_subshapes_invalid_storage(self):
        """Test case for delete_special_slide_subshapes with invalid storage
        """
        param_name = self.get_test_value('delete_special_slide_subshapes', 'name', 'str')
        param_slide_index = self.get_test_value('delete_special_slide_subshapes', 'slide_index', 'int')
        param_slide_type = self.get_test_value('delete_special_slide_subshapes', 'slide_type', 'str')
        param_path = self.get_test_value('delete_special_slide_subshapes', 'path', 'str')
        param_shapes = self.get_test_value('delete_special_slide_subshapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('delete_special_slide_subshapes', 'password', 'str')
        param_folder = self.get_test_value('delete_special_slide_subshapes', 'folder', 'str')
        param_storage = self.get_test_value('delete_special_slide_subshapes', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_special_slide_subshapes', 'storage', param_storage, 'str')
        self.initialize('delete_special_slide_subshapes', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_special_slide_subshapes(param_name, param_slide_index, param_slide_type, param_path, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_special_slide_subshapes', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_special_slide_subshapes', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_special_slide_subshapes', 'storage')

    def test_delete_subshape(self):
        """Test case for delete_subshape
        """
        param_name = self.get_test_value('delete_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('delete_subshape', 'shape_index', 'int')
        param_password = self.get_test_value('delete_subshape', 'password', 'str')
        param_folder = self.get_test_value('delete_subshape', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshape', 'storage', 'str')
        self.initialize('delete_subshape', None, None)
        response = self.api.delete_subshape(param_name, param_slide_index, param_path, param_shape_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_delete_subshape_invalid_name(self):
        """Test case for delete_subshape with invalid name
        """
        param_name = self.get_test_value('delete_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('delete_subshape', 'shape_index', 'int')
        param_password = self.get_test_value('delete_subshape', 'password', 'str')
        param_folder = self.get_test_value('delete_subshape', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshape', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_subshape', 'name', param_name, 'str')
        self.initialize('delete_subshape', 'name', param_name)
        ok = False
        try:
            self.api.delete_subshape(param_name, param_slide_index, param_path, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_subshape', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_subshape', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_subshape', 'name')

    def test_delete_subshape_invalid_slide_index(self):
        """Test case for delete_subshape with invalid slide_index
        """
        param_name = self.get_test_value('delete_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('delete_subshape', 'shape_index', 'int')
        param_password = self.get_test_value('delete_subshape', 'password', 'str')
        param_folder = self.get_test_value('delete_subshape', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshape', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('delete_subshape', 'slide_index', param_slide_index, 'int')
        self.initialize('delete_subshape', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.delete_subshape(param_name, param_slide_index, param_path, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_subshape', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_subshape', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('delete_subshape', 'slide_index')

    def test_delete_subshape_invalid_path(self):
        """Test case for delete_subshape with invalid path
        """
        param_name = self.get_test_value('delete_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('delete_subshape', 'shape_index', 'int')
        param_password = self.get_test_value('delete_subshape', 'password', 'str')
        param_folder = self.get_test_value('delete_subshape', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshape', 'storage', 'str')
        param_path = self.get_invalid_test_value('delete_subshape', 'path', param_path, 'str')
        self.initialize('delete_subshape', 'path', param_path)
        ok = False
        try:
            self.api.delete_subshape(param_name, param_slide_index, param_path, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_subshape', 'path', param_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_subshape', 'path', param_path)
        if ok:
            self.assert_no_exception('delete_subshape', 'path')

    def test_delete_subshape_invalid_shape_index(self):
        """Test case for delete_subshape with invalid shape_index
        """
        param_name = self.get_test_value('delete_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('delete_subshape', 'shape_index', 'int')
        param_password = self.get_test_value('delete_subshape', 'password', 'str')
        param_folder = self.get_test_value('delete_subshape', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshape', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('delete_subshape', 'shape_index', param_shape_index, 'int')
        self.initialize('delete_subshape', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.delete_subshape(param_name, param_slide_index, param_path, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_subshape', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_subshape', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('delete_subshape', 'shape_index')

    def test_delete_subshape_invalid_password(self):
        """Test case for delete_subshape with invalid password
        """
        param_name = self.get_test_value('delete_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('delete_subshape', 'shape_index', 'int')
        param_password = self.get_test_value('delete_subshape', 'password', 'str')
        param_folder = self.get_test_value('delete_subshape', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshape', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_subshape', 'password', param_password, 'str')
        self.initialize('delete_subshape', 'password', param_password)
        ok = False
        try:
            self.api.delete_subshape(param_name, param_slide_index, param_path, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_subshape', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_subshape', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_subshape', 'password')

    def test_delete_subshape_invalid_folder(self):
        """Test case for delete_subshape with invalid folder
        """
        param_name = self.get_test_value('delete_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('delete_subshape', 'shape_index', 'int')
        param_password = self.get_test_value('delete_subshape', 'password', 'str')
        param_folder = self.get_test_value('delete_subshape', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshape', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_subshape', 'folder', param_folder, 'str')
        self.initialize('delete_subshape', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_subshape(param_name, param_slide_index, param_path, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_subshape', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_subshape', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_subshape', 'folder')

    def test_delete_subshape_invalid_storage(self):
        """Test case for delete_subshape with invalid storage
        """
        param_name = self.get_test_value('delete_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('delete_subshape', 'shape_index', 'int')
        param_password = self.get_test_value('delete_subshape', 'password', 'str')
        param_folder = self.get_test_value('delete_subshape', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshape', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_subshape', 'storage', param_storage, 'str')
        self.initialize('delete_subshape', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_subshape(param_name, param_slide_index, param_path, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_subshape', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_subshape', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_subshape', 'storage')

    def test_delete_subshape_paragraph(self):
        """Test case for delete_subshape_paragraph
        """
        param_name = self.get_test_value('delete_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshape_paragraph', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('delete_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_subshape_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('delete_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('delete_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshape_paragraph', 'storage', 'str')
        self.initialize('delete_subshape_paragraph', None, None)
        response = self.api.delete_subshape_paragraph(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_delete_subshape_paragraph_invalid_name(self):
        """Test case for delete_subshape_paragraph with invalid name
        """
        param_name = self.get_test_value('delete_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshape_paragraph', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('delete_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_subshape_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('delete_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('delete_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshape_paragraph', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_subshape_paragraph', 'name', param_name, 'str')
        self.initialize('delete_subshape_paragraph', 'name', param_name)
        ok = False
        try:
            self.api.delete_subshape_paragraph(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_subshape_paragraph', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_subshape_paragraph', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_subshape_paragraph', 'name')

    def test_delete_subshape_paragraph_invalid_slide_index(self):
        """Test case for delete_subshape_paragraph with invalid slide_index
        """
        param_name = self.get_test_value('delete_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshape_paragraph', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('delete_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_subshape_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('delete_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('delete_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshape_paragraph', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('delete_subshape_paragraph', 'slide_index', param_slide_index, 'int')
        self.initialize('delete_subshape_paragraph', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.delete_subshape_paragraph(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_subshape_paragraph', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_subshape_paragraph', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('delete_subshape_paragraph', 'slide_index')

    def test_delete_subshape_paragraph_invalid_path(self):
        """Test case for delete_subshape_paragraph with invalid path
        """
        param_name = self.get_test_value('delete_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshape_paragraph', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('delete_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_subshape_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('delete_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('delete_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshape_paragraph', 'storage', 'str')
        param_path = self.get_invalid_test_value('delete_subshape_paragraph', 'path', param_path, 'str')
        self.initialize('delete_subshape_paragraph', 'path', param_path)
        ok = False
        try:
            self.api.delete_subshape_paragraph(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_subshape_paragraph', 'path', param_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_subshape_paragraph', 'path', param_path)
        if ok:
            self.assert_no_exception('delete_subshape_paragraph', 'path')

    def test_delete_subshape_paragraph_invalid_shape_index(self):
        """Test case for delete_subshape_paragraph with invalid shape_index
        """
        param_name = self.get_test_value('delete_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshape_paragraph', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('delete_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_subshape_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('delete_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('delete_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshape_paragraph', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('delete_subshape_paragraph', 'shape_index', param_shape_index, 'int')
        self.initialize('delete_subshape_paragraph', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.delete_subshape_paragraph(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_subshape_paragraph', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_subshape_paragraph', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('delete_subshape_paragraph', 'shape_index')

    def test_delete_subshape_paragraph_invalid_paragraph_index(self):
        """Test case for delete_subshape_paragraph with invalid paragraph_index
        """
        param_name = self.get_test_value('delete_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshape_paragraph', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('delete_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_subshape_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('delete_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('delete_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshape_paragraph', 'storage', 'str')
        param_paragraph_index = self.get_invalid_test_value('delete_subshape_paragraph', 'paragraph_index', param_paragraph_index, 'int')
        self.initialize('delete_subshape_paragraph', 'paragraph_index', param_paragraph_index)
        ok = False
        try:
            self.api.delete_subshape_paragraph(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_subshape_paragraph', 'paragraph_index', param_paragraph_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_subshape_paragraph', 'paragraph_index', param_paragraph_index)
        if ok:
            self.assert_no_exception('delete_subshape_paragraph', 'paragraph_index')

    def test_delete_subshape_paragraph_invalid_password(self):
        """Test case for delete_subshape_paragraph with invalid password
        """
        param_name = self.get_test_value('delete_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshape_paragraph', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('delete_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_subshape_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('delete_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('delete_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshape_paragraph', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_subshape_paragraph', 'password', param_password, 'str')
        self.initialize('delete_subshape_paragraph', 'password', param_password)
        ok = False
        try:
            self.api.delete_subshape_paragraph(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_subshape_paragraph', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_subshape_paragraph', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_subshape_paragraph', 'password')

    def test_delete_subshape_paragraph_invalid_folder(self):
        """Test case for delete_subshape_paragraph with invalid folder
        """
        param_name = self.get_test_value('delete_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshape_paragraph', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('delete_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_subshape_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('delete_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('delete_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshape_paragraph', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_subshape_paragraph', 'folder', param_folder, 'str')
        self.initialize('delete_subshape_paragraph', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_subshape_paragraph(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_subshape_paragraph', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_subshape_paragraph', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_subshape_paragraph', 'folder')

    def test_delete_subshape_paragraph_invalid_storage(self):
        """Test case for delete_subshape_paragraph with invalid storage
        """
        param_name = self.get_test_value('delete_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshape_paragraph', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('delete_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_subshape_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('delete_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('delete_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshape_paragraph', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_subshape_paragraph', 'storage', param_storage, 'str')
        self.initialize('delete_subshape_paragraph', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_subshape_paragraph(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_subshape_paragraph', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_subshape_paragraph', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_subshape_paragraph', 'storage')

    def test_delete_subshape_paragraphs(self):
        """Test case for delete_subshape_paragraphs
        """
        param_name = self.get_test_value('delete_subshape_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshape_paragraphs', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshape_paragraphs', 'path', 'str')
        param_shape_index = self.get_test_value('delete_subshape_paragraphs', 'shape_index', 'int')
        param_paragraphs = self.get_test_value('delete_subshape_paragraphs', 'paragraphs', 'list[int]')
        param_password = self.get_test_value('delete_subshape_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('delete_subshape_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshape_paragraphs', 'storage', 'str')
        self.initialize('delete_subshape_paragraphs', None, None)
        response = self.api.delete_subshape_paragraphs(param_name, param_slide_index, param_path, param_shape_index, param_paragraphs, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_delete_subshape_paragraphs_invalid_name(self):
        """Test case for delete_subshape_paragraphs with invalid name
        """
        param_name = self.get_test_value('delete_subshape_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshape_paragraphs', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshape_paragraphs', 'path', 'str')
        param_shape_index = self.get_test_value('delete_subshape_paragraphs', 'shape_index', 'int')
        param_paragraphs = self.get_test_value('delete_subshape_paragraphs', 'paragraphs', 'list[int]')
        param_password = self.get_test_value('delete_subshape_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('delete_subshape_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshape_paragraphs', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_subshape_paragraphs', 'name', param_name, 'str')
        self.initialize('delete_subshape_paragraphs', 'name', param_name)
        ok = False
        try:
            self.api.delete_subshape_paragraphs(param_name, param_slide_index, param_path, param_shape_index, param_paragraphs, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_subshape_paragraphs', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_subshape_paragraphs', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_subshape_paragraphs', 'name')

    def test_delete_subshape_paragraphs_invalid_slide_index(self):
        """Test case for delete_subshape_paragraphs with invalid slide_index
        """
        param_name = self.get_test_value('delete_subshape_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshape_paragraphs', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshape_paragraphs', 'path', 'str')
        param_shape_index = self.get_test_value('delete_subshape_paragraphs', 'shape_index', 'int')
        param_paragraphs = self.get_test_value('delete_subshape_paragraphs', 'paragraphs', 'list[int]')
        param_password = self.get_test_value('delete_subshape_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('delete_subshape_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshape_paragraphs', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('delete_subshape_paragraphs', 'slide_index', param_slide_index, 'int')
        self.initialize('delete_subshape_paragraphs', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.delete_subshape_paragraphs(param_name, param_slide_index, param_path, param_shape_index, param_paragraphs, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_subshape_paragraphs', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_subshape_paragraphs', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('delete_subshape_paragraphs', 'slide_index')

    def test_delete_subshape_paragraphs_invalid_path(self):
        """Test case for delete_subshape_paragraphs with invalid path
        """
        param_name = self.get_test_value('delete_subshape_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshape_paragraphs', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshape_paragraphs', 'path', 'str')
        param_shape_index = self.get_test_value('delete_subshape_paragraphs', 'shape_index', 'int')
        param_paragraphs = self.get_test_value('delete_subshape_paragraphs', 'paragraphs', 'list[int]')
        param_password = self.get_test_value('delete_subshape_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('delete_subshape_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshape_paragraphs', 'storage', 'str')
        param_path = self.get_invalid_test_value('delete_subshape_paragraphs', 'path', param_path, 'str')
        self.initialize('delete_subshape_paragraphs', 'path', param_path)
        ok = False
        try:
            self.api.delete_subshape_paragraphs(param_name, param_slide_index, param_path, param_shape_index, param_paragraphs, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_subshape_paragraphs', 'path', param_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_subshape_paragraphs', 'path', param_path)
        if ok:
            self.assert_no_exception('delete_subshape_paragraphs', 'path')

    def test_delete_subshape_paragraphs_invalid_shape_index(self):
        """Test case for delete_subshape_paragraphs with invalid shape_index
        """
        param_name = self.get_test_value('delete_subshape_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshape_paragraphs', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshape_paragraphs', 'path', 'str')
        param_shape_index = self.get_test_value('delete_subshape_paragraphs', 'shape_index', 'int')
        param_paragraphs = self.get_test_value('delete_subshape_paragraphs', 'paragraphs', 'list[int]')
        param_password = self.get_test_value('delete_subshape_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('delete_subshape_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshape_paragraphs', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('delete_subshape_paragraphs', 'shape_index', param_shape_index, 'int')
        self.initialize('delete_subshape_paragraphs', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.delete_subshape_paragraphs(param_name, param_slide_index, param_path, param_shape_index, param_paragraphs, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_subshape_paragraphs', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_subshape_paragraphs', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('delete_subshape_paragraphs', 'shape_index')

    def test_delete_subshape_paragraphs_invalid_paragraphs(self):
        """Test case for delete_subshape_paragraphs with invalid paragraphs
        """
        param_name = self.get_test_value('delete_subshape_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshape_paragraphs', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshape_paragraphs', 'path', 'str')
        param_shape_index = self.get_test_value('delete_subshape_paragraphs', 'shape_index', 'int')
        param_paragraphs = self.get_test_value('delete_subshape_paragraphs', 'paragraphs', 'list[int]')
        param_password = self.get_test_value('delete_subshape_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('delete_subshape_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshape_paragraphs', 'storage', 'str')
        param_paragraphs = self.get_invalid_test_value('delete_subshape_paragraphs', 'paragraphs', param_paragraphs, 'list[int]')
        self.initialize('delete_subshape_paragraphs', 'paragraphs', param_paragraphs)
        ok = False
        try:
            self.api.delete_subshape_paragraphs(param_name, param_slide_index, param_path, param_shape_index, param_paragraphs, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_subshape_paragraphs', 'paragraphs', param_paragraphs)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_subshape_paragraphs', 'paragraphs', param_paragraphs)
        if ok:
            self.assert_no_exception('delete_subshape_paragraphs', 'paragraphs')

    def test_delete_subshape_paragraphs_invalid_password(self):
        """Test case for delete_subshape_paragraphs with invalid password
        """
        param_name = self.get_test_value('delete_subshape_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshape_paragraphs', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshape_paragraphs', 'path', 'str')
        param_shape_index = self.get_test_value('delete_subshape_paragraphs', 'shape_index', 'int')
        param_paragraphs = self.get_test_value('delete_subshape_paragraphs', 'paragraphs', 'list[int]')
        param_password = self.get_test_value('delete_subshape_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('delete_subshape_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshape_paragraphs', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_subshape_paragraphs', 'password', param_password, 'str')
        self.initialize('delete_subshape_paragraphs', 'password', param_password)
        ok = False
        try:
            self.api.delete_subshape_paragraphs(param_name, param_slide_index, param_path, param_shape_index, param_paragraphs, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_subshape_paragraphs', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_subshape_paragraphs', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_subshape_paragraphs', 'password')

    def test_delete_subshape_paragraphs_invalid_folder(self):
        """Test case for delete_subshape_paragraphs with invalid folder
        """
        param_name = self.get_test_value('delete_subshape_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshape_paragraphs', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshape_paragraphs', 'path', 'str')
        param_shape_index = self.get_test_value('delete_subshape_paragraphs', 'shape_index', 'int')
        param_paragraphs = self.get_test_value('delete_subshape_paragraphs', 'paragraphs', 'list[int]')
        param_password = self.get_test_value('delete_subshape_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('delete_subshape_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshape_paragraphs', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_subshape_paragraphs', 'folder', param_folder, 'str')
        self.initialize('delete_subshape_paragraphs', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_subshape_paragraphs(param_name, param_slide_index, param_path, param_shape_index, param_paragraphs, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_subshape_paragraphs', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_subshape_paragraphs', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_subshape_paragraphs', 'folder')

    def test_delete_subshape_paragraphs_invalid_storage(self):
        """Test case for delete_subshape_paragraphs with invalid storage
        """
        param_name = self.get_test_value('delete_subshape_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshape_paragraphs', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshape_paragraphs', 'path', 'str')
        param_shape_index = self.get_test_value('delete_subshape_paragraphs', 'shape_index', 'int')
        param_paragraphs = self.get_test_value('delete_subshape_paragraphs', 'paragraphs', 'list[int]')
        param_password = self.get_test_value('delete_subshape_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('delete_subshape_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshape_paragraphs', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_subshape_paragraphs', 'storage', param_storage, 'str')
        self.initialize('delete_subshape_paragraphs', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_subshape_paragraphs(param_name, param_slide_index, param_path, param_shape_index, param_paragraphs, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_subshape_paragraphs', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_subshape_paragraphs', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_subshape_paragraphs', 'storage')

    def test_delete_subshape_portion(self):
        """Test case for delete_subshape_portion
        """
        param_name = self.get_test_value('delete_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshape_portion', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('delete_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('delete_subshape_portion', 'portion_index', 'int')
        param_password = self.get_test_value('delete_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('delete_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshape_portion', 'storage', 'str')
        self.initialize('delete_subshape_portion', None, None)
        response = self.api.delete_subshape_portion(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_delete_subshape_portion_invalid_name(self):
        """Test case for delete_subshape_portion with invalid name
        """
        param_name = self.get_test_value('delete_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshape_portion', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('delete_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('delete_subshape_portion', 'portion_index', 'int')
        param_password = self.get_test_value('delete_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('delete_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshape_portion', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_subshape_portion', 'name', param_name, 'str')
        self.initialize('delete_subshape_portion', 'name', param_name)
        ok = False
        try:
            self.api.delete_subshape_portion(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_subshape_portion', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_subshape_portion', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_subshape_portion', 'name')

    def test_delete_subshape_portion_invalid_slide_index(self):
        """Test case for delete_subshape_portion with invalid slide_index
        """
        param_name = self.get_test_value('delete_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshape_portion', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('delete_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('delete_subshape_portion', 'portion_index', 'int')
        param_password = self.get_test_value('delete_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('delete_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshape_portion', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('delete_subshape_portion', 'slide_index', param_slide_index, 'int')
        self.initialize('delete_subshape_portion', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.delete_subshape_portion(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_subshape_portion', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_subshape_portion', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('delete_subshape_portion', 'slide_index')

    def test_delete_subshape_portion_invalid_path(self):
        """Test case for delete_subshape_portion with invalid path
        """
        param_name = self.get_test_value('delete_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshape_portion', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('delete_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('delete_subshape_portion', 'portion_index', 'int')
        param_password = self.get_test_value('delete_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('delete_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshape_portion', 'storage', 'str')
        param_path = self.get_invalid_test_value('delete_subshape_portion', 'path', param_path, 'str')
        self.initialize('delete_subshape_portion', 'path', param_path)
        ok = False
        try:
            self.api.delete_subshape_portion(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_subshape_portion', 'path', param_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_subshape_portion', 'path', param_path)
        if ok:
            self.assert_no_exception('delete_subshape_portion', 'path')

    def test_delete_subshape_portion_invalid_shape_index(self):
        """Test case for delete_subshape_portion with invalid shape_index
        """
        param_name = self.get_test_value('delete_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshape_portion', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('delete_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('delete_subshape_portion', 'portion_index', 'int')
        param_password = self.get_test_value('delete_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('delete_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshape_portion', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('delete_subshape_portion', 'shape_index', param_shape_index, 'int')
        self.initialize('delete_subshape_portion', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.delete_subshape_portion(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_subshape_portion', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_subshape_portion', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('delete_subshape_portion', 'shape_index')

    def test_delete_subshape_portion_invalid_paragraph_index(self):
        """Test case for delete_subshape_portion with invalid paragraph_index
        """
        param_name = self.get_test_value('delete_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshape_portion', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('delete_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('delete_subshape_portion', 'portion_index', 'int')
        param_password = self.get_test_value('delete_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('delete_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshape_portion', 'storage', 'str')
        param_paragraph_index = self.get_invalid_test_value('delete_subshape_portion', 'paragraph_index', param_paragraph_index, 'int')
        self.initialize('delete_subshape_portion', 'paragraph_index', param_paragraph_index)
        ok = False
        try:
            self.api.delete_subshape_portion(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_subshape_portion', 'paragraph_index', param_paragraph_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_subshape_portion', 'paragraph_index', param_paragraph_index)
        if ok:
            self.assert_no_exception('delete_subshape_portion', 'paragraph_index')

    def test_delete_subshape_portion_invalid_portion_index(self):
        """Test case for delete_subshape_portion with invalid portion_index
        """
        param_name = self.get_test_value('delete_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshape_portion', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('delete_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('delete_subshape_portion', 'portion_index', 'int')
        param_password = self.get_test_value('delete_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('delete_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshape_portion', 'storage', 'str')
        param_portion_index = self.get_invalid_test_value('delete_subshape_portion', 'portion_index', param_portion_index, 'int')
        self.initialize('delete_subshape_portion', 'portion_index', param_portion_index)
        ok = False
        try:
            self.api.delete_subshape_portion(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_subshape_portion', 'portion_index', param_portion_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_subshape_portion', 'portion_index', param_portion_index)
        if ok:
            self.assert_no_exception('delete_subshape_portion', 'portion_index')

    def test_delete_subshape_portion_invalid_password(self):
        """Test case for delete_subshape_portion with invalid password
        """
        param_name = self.get_test_value('delete_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshape_portion', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('delete_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('delete_subshape_portion', 'portion_index', 'int')
        param_password = self.get_test_value('delete_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('delete_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshape_portion', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_subshape_portion', 'password', param_password, 'str')
        self.initialize('delete_subshape_portion', 'password', param_password)
        ok = False
        try:
            self.api.delete_subshape_portion(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_subshape_portion', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_subshape_portion', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_subshape_portion', 'password')

    def test_delete_subshape_portion_invalid_folder(self):
        """Test case for delete_subshape_portion with invalid folder
        """
        param_name = self.get_test_value('delete_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshape_portion', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('delete_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('delete_subshape_portion', 'portion_index', 'int')
        param_password = self.get_test_value('delete_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('delete_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshape_portion', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_subshape_portion', 'folder', param_folder, 'str')
        self.initialize('delete_subshape_portion', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_subshape_portion(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_subshape_portion', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_subshape_portion', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_subshape_portion', 'folder')

    def test_delete_subshape_portion_invalid_storage(self):
        """Test case for delete_subshape_portion with invalid storage
        """
        param_name = self.get_test_value('delete_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshape_portion', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('delete_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('delete_subshape_portion', 'portion_index', 'int')
        param_password = self.get_test_value('delete_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('delete_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshape_portion', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_subshape_portion', 'storage', param_storage, 'str')
        self.initialize('delete_subshape_portion', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_subshape_portion(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_subshape_portion', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_subshape_portion', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_subshape_portion', 'storage')

    def test_delete_subshape_portions(self):
        """Test case for delete_subshape_portions
        """
        param_name = self.get_test_value('delete_subshape_portions', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshape_portions', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshape_portions', 'path', 'str')
        param_shape_index = self.get_test_value('delete_subshape_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_subshape_portions', 'paragraph_index', 'int')
        param_portions = self.get_test_value('delete_subshape_portions', 'portions', 'list[int]')
        param_password = self.get_test_value('delete_subshape_portions', 'password', 'str')
        param_folder = self.get_test_value('delete_subshape_portions', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshape_portions', 'storage', 'str')
        self.initialize('delete_subshape_portions', None, None)
        response = self.api.delete_subshape_portions(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_portions, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_delete_subshape_portions_invalid_name(self):
        """Test case for delete_subshape_portions with invalid name
        """
        param_name = self.get_test_value('delete_subshape_portions', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshape_portions', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshape_portions', 'path', 'str')
        param_shape_index = self.get_test_value('delete_subshape_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_subshape_portions', 'paragraph_index', 'int')
        param_portions = self.get_test_value('delete_subshape_portions', 'portions', 'list[int]')
        param_password = self.get_test_value('delete_subshape_portions', 'password', 'str')
        param_folder = self.get_test_value('delete_subshape_portions', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshape_portions', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_subshape_portions', 'name', param_name, 'str')
        self.initialize('delete_subshape_portions', 'name', param_name)
        ok = False
        try:
            self.api.delete_subshape_portions(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_portions, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_subshape_portions', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_subshape_portions', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_subshape_portions', 'name')

    def test_delete_subshape_portions_invalid_slide_index(self):
        """Test case for delete_subshape_portions with invalid slide_index
        """
        param_name = self.get_test_value('delete_subshape_portions', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshape_portions', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshape_portions', 'path', 'str')
        param_shape_index = self.get_test_value('delete_subshape_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_subshape_portions', 'paragraph_index', 'int')
        param_portions = self.get_test_value('delete_subshape_portions', 'portions', 'list[int]')
        param_password = self.get_test_value('delete_subshape_portions', 'password', 'str')
        param_folder = self.get_test_value('delete_subshape_portions', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshape_portions', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('delete_subshape_portions', 'slide_index', param_slide_index, 'int')
        self.initialize('delete_subshape_portions', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.delete_subshape_portions(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_portions, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_subshape_portions', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_subshape_portions', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('delete_subshape_portions', 'slide_index')

    def test_delete_subshape_portions_invalid_path(self):
        """Test case for delete_subshape_portions with invalid path
        """
        param_name = self.get_test_value('delete_subshape_portions', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshape_portions', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshape_portions', 'path', 'str')
        param_shape_index = self.get_test_value('delete_subshape_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_subshape_portions', 'paragraph_index', 'int')
        param_portions = self.get_test_value('delete_subshape_portions', 'portions', 'list[int]')
        param_password = self.get_test_value('delete_subshape_portions', 'password', 'str')
        param_folder = self.get_test_value('delete_subshape_portions', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshape_portions', 'storage', 'str')
        param_path = self.get_invalid_test_value('delete_subshape_portions', 'path', param_path, 'str')
        self.initialize('delete_subshape_portions', 'path', param_path)
        ok = False
        try:
            self.api.delete_subshape_portions(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_portions, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_subshape_portions', 'path', param_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_subshape_portions', 'path', param_path)
        if ok:
            self.assert_no_exception('delete_subshape_portions', 'path')

    def test_delete_subshape_portions_invalid_shape_index(self):
        """Test case for delete_subshape_portions with invalid shape_index
        """
        param_name = self.get_test_value('delete_subshape_portions', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshape_portions', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshape_portions', 'path', 'str')
        param_shape_index = self.get_test_value('delete_subshape_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_subshape_portions', 'paragraph_index', 'int')
        param_portions = self.get_test_value('delete_subshape_portions', 'portions', 'list[int]')
        param_password = self.get_test_value('delete_subshape_portions', 'password', 'str')
        param_folder = self.get_test_value('delete_subshape_portions', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshape_portions', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('delete_subshape_portions', 'shape_index', param_shape_index, 'int')
        self.initialize('delete_subshape_portions', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.delete_subshape_portions(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_portions, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_subshape_portions', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_subshape_portions', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('delete_subshape_portions', 'shape_index')

    def test_delete_subshape_portions_invalid_paragraph_index(self):
        """Test case for delete_subshape_portions with invalid paragraph_index
        """
        param_name = self.get_test_value('delete_subshape_portions', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshape_portions', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshape_portions', 'path', 'str')
        param_shape_index = self.get_test_value('delete_subshape_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_subshape_portions', 'paragraph_index', 'int')
        param_portions = self.get_test_value('delete_subshape_portions', 'portions', 'list[int]')
        param_password = self.get_test_value('delete_subshape_portions', 'password', 'str')
        param_folder = self.get_test_value('delete_subshape_portions', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshape_portions', 'storage', 'str')
        param_paragraph_index = self.get_invalid_test_value('delete_subshape_portions', 'paragraph_index', param_paragraph_index, 'int')
        self.initialize('delete_subshape_portions', 'paragraph_index', param_paragraph_index)
        ok = False
        try:
            self.api.delete_subshape_portions(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_portions, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_subshape_portions', 'paragraph_index', param_paragraph_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_subshape_portions', 'paragraph_index', param_paragraph_index)
        if ok:
            self.assert_no_exception('delete_subshape_portions', 'paragraph_index')

    def test_delete_subshape_portions_invalid_portions(self):
        """Test case for delete_subshape_portions with invalid portions
        """
        param_name = self.get_test_value('delete_subshape_portions', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshape_portions', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshape_portions', 'path', 'str')
        param_shape_index = self.get_test_value('delete_subshape_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_subshape_portions', 'paragraph_index', 'int')
        param_portions = self.get_test_value('delete_subshape_portions', 'portions', 'list[int]')
        param_password = self.get_test_value('delete_subshape_portions', 'password', 'str')
        param_folder = self.get_test_value('delete_subshape_portions', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshape_portions', 'storage', 'str')
        param_portions = self.get_invalid_test_value('delete_subshape_portions', 'portions', param_portions, 'list[int]')
        self.initialize('delete_subshape_portions', 'portions', param_portions)
        ok = False
        try:
            self.api.delete_subshape_portions(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_portions, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_subshape_portions', 'portions', param_portions)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_subshape_portions', 'portions', param_portions)
        if ok:
            self.assert_no_exception('delete_subshape_portions', 'portions')

    def test_delete_subshape_portions_invalid_password(self):
        """Test case for delete_subshape_portions with invalid password
        """
        param_name = self.get_test_value('delete_subshape_portions', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshape_portions', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshape_portions', 'path', 'str')
        param_shape_index = self.get_test_value('delete_subshape_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_subshape_portions', 'paragraph_index', 'int')
        param_portions = self.get_test_value('delete_subshape_portions', 'portions', 'list[int]')
        param_password = self.get_test_value('delete_subshape_portions', 'password', 'str')
        param_folder = self.get_test_value('delete_subshape_portions', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshape_portions', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_subshape_portions', 'password', param_password, 'str')
        self.initialize('delete_subshape_portions', 'password', param_password)
        ok = False
        try:
            self.api.delete_subshape_portions(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_portions, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_subshape_portions', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_subshape_portions', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_subshape_portions', 'password')

    def test_delete_subshape_portions_invalid_folder(self):
        """Test case for delete_subshape_portions with invalid folder
        """
        param_name = self.get_test_value('delete_subshape_portions', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshape_portions', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshape_portions', 'path', 'str')
        param_shape_index = self.get_test_value('delete_subshape_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_subshape_portions', 'paragraph_index', 'int')
        param_portions = self.get_test_value('delete_subshape_portions', 'portions', 'list[int]')
        param_password = self.get_test_value('delete_subshape_portions', 'password', 'str')
        param_folder = self.get_test_value('delete_subshape_portions', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshape_portions', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_subshape_portions', 'folder', param_folder, 'str')
        self.initialize('delete_subshape_portions', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_subshape_portions(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_portions, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_subshape_portions', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_subshape_portions', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_subshape_portions', 'folder')

    def test_delete_subshape_portions_invalid_storage(self):
        """Test case for delete_subshape_portions with invalid storage
        """
        param_name = self.get_test_value('delete_subshape_portions', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshape_portions', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshape_portions', 'path', 'str')
        param_shape_index = self.get_test_value('delete_subshape_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('delete_subshape_portions', 'paragraph_index', 'int')
        param_portions = self.get_test_value('delete_subshape_portions', 'portions', 'list[int]')
        param_password = self.get_test_value('delete_subshape_portions', 'password', 'str')
        param_folder = self.get_test_value('delete_subshape_portions', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshape_portions', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_subshape_portions', 'storage', param_storage, 'str')
        self.initialize('delete_subshape_portions', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_subshape_portions(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_portions, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_subshape_portions', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_subshape_portions', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_subshape_portions', 'storage')

    def test_delete_subshapes(self):
        """Test case for delete_subshapes
        """
        param_name = self.get_test_value('delete_subshapes', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshapes', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshapes', 'path', 'str')
        param_shapes = self.get_test_value('delete_subshapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('delete_subshapes', 'password', 'str')
        param_folder = self.get_test_value('delete_subshapes', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshapes', 'storage', 'str')
        self.initialize('delete_subshapes', None, None)
        response = self.api.delete_subshapes(param_name, param_slide_index, param_path, param_shapes, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_delete_subshapes_invalid_name(self):
        """Test case for delete_subshapes with invalid name
        """
        param_name = self.get_test_value('delete_subshapes', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshapes', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshapes', 'path', 'str')
        param_shapes = self.get_test_value('delete_subshapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('delete_subshapes', 'password', 'str')
        param_folder = self.get_test_value('delete_subshapes', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshapes', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_subshapes', 'name', param_name, 'str')
        self.initialize('delete_subshapes', 'name', param_name)
        ok = False
        try:
            self.api.delete_subshapes(param_name, param_slide_index, param_path, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_subshapes', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_subshapes', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_subshapes', 'name')

    def test_delete_subshapes_invalid_slide_index(self):
        """Test case for delete_subshapes with invalid slide_index
        """
        param_name = self.get_test_value('delete_subshapes', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshapes', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshapes', 'path', 'str')
        param_shapes = self.get_test_value('delete_subshapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('delete_subshapes', 'password', 'str')
        param_folder = self.get_test_value('delete_subshapes', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshapes', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('delete_subshapes', 'slide_index', param_slide_index, 'int')
        self.initialize('delete_subshapes', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.delete_subshapes(param_name, param_slide_index, param_path, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_subshapes', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_subshapes', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('delete_subshapes', 'slide_index')

    def test_delete_subshapes_invalid_path(self):
        """Test case for delete_subshapes with invalid path
        """
        param_name = self.get_test_value('delete_subshapes', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshapes', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshapes', 'path', 'str')
        param_shapes = self.get_test_value('delete_subshapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('delete_subshapes', 'password', 'str')
        param_folder = self.get_test_value('delete_subshapes', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshapes', 'storage', 'str')
        param_path = self.get_invalid_test_value('delete_subshapes', 'path', param_path, 'str')
        self.initialize('delete_subshapes', 'path', param_path)
        ok = False
        try:
            self.api.delete_subshapes(param_name, param_slide_index, param_path, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_subshapes', 'path', param_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_subshapes', 'path', param_path)
        if ok:
            self.assert_no_exception('delete_subshapes', 'path')

    def test_delete_subshapes_invalid_shapes(self):
        """Test case for delete_subshapes with invalid shapes
        """
        param_name = self.get_test_value('delete_subshapes', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshapes', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshapes', 'path', 'str')
        param_shapes = self.get_test_value('delete_subshapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('delete_subshapes', 'password', 'str')
        param_folder = self.get_test_value('delete_subshapes', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshapes', 'storage', 'str')
        param_shapes = self.get_invalid_test_value('delete_subshapes', 'shapes', param_shapes, 'list[int]')
        self.initialize('delete_subshapes', 'shapes', param_shapes)
        ok = False
        try:
            self.api.delete_subshapes(param_name, param_slide_index, param_path, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_subshapes', 'shapes', param_shapes)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_subshapes', 'shapes', param_shapes)
        if ok:
            self.assert_no_exception('delete_subshapes', 'shapes')

    def test_delete_subshapes_invalid_password(self):
        """Test case for delete_subshapes with invalid password
        """
        param_name = self.get_test_value('delete_subshapes', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshapes', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshapes', 'path', 'str')
        param_shapes = self.get_test_value('delete_subshapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('delete_subshapes', 'password', 'str')
        param_folder = self.get_test_value('delete_subshapes', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshapes', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_subshapes', 'password', param_password, 'str')
        self.initialize('delete_subshapes', 'password', param_password)
        ok = False
        try:
            self.api.delete_subshapes(param_name, param_slide_index, param_path, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_subshapes', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_subshapes', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_subshapes', 'password')

    def test_delete_subshapes_invalid_folder(self):
        """Test case for delete_subshapes with invalid folder
        """
        param_name = self.get_test_value('delete_subshapes', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshapes', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshapes', 'path', 'str')
        param_shapes = self.get_test_value('delete_subshapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('delete_subshapes', 'password', 'str')
        param_folder = self.get_test_value('delete_subshapes', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshapes', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_subshapes', 'folder', param_folder, 'str')
        self.initialize('delete_subshapes', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_subshapes(param_name, param_slide_index, param_path, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_subshapes', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_subshapes', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_subshapes', 'folder')

    def test_delete_subshapes_invalid_storage(self):
        """Test case for delete_subshapes with invalid storage
        """
        param_name = self.get_test_value('delete_subshapes', 'name', 'str')
        param_slide_index = self.get_test_value('delete_subshapes', 'slide_index', 'int')
        param_path = self.get_test_value('delete_subshapes', 'path', 'str')
        param_shapes = self.get_test_value('delete_subshapes', 'shapes', 'list[int]')
        param_password = self.get_test_value('delete_subshapes', 'password', 'str')
        param_folder = self.get_test_value('delete_subshapes', 'folder', 'str')
        param_storage = self.get_test_value('delete_subshapes', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_subshapes', 'storage', param_storage, 'str')
        self.initialize('delete_subshapes', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_subshapes(param_name, param_slide_index, param_path, param_shapes, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_subshapes', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_subshapes', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_subshapes', 'storage')

    def test_delete_watermark(self):
        """Test case for delete_watermark
        """
        param_name = self.get_test_value('delete_watermark', 'name', 'str')
        param_shape_name = self.get_test_value('delete_watermark', 'shape_name', 'str')
        param_password = self.get_test_value('delete_watermark', 'password', 'str')
        param_folder = self.get_test_value('delete_watermark', 'folder', 'str')
        param_storage = self.get_test_value('delete_watermark', 'storage', 'str')
        self.initialize('delete_watermark', None, None)
        response = self.api.delete_watermark(param_name, param_shape_name, param_password, param_folder, param_storage)
        self.assertIsNone(response)

    def test_delete_watermark_invalid_name(self):
        """Test case for delete_watermark with invalid name
        """
        param_name = self.get_test_value('delete_watermark', 'name', 'str')
        param_shape_name = self.get_test_value('delete_watermark', 'shape_name', 'str')
        param_password = self.get_test_value('delete_watermark', 'password', 'str')
        param_folder = self.get_test_value('delete_watermark', 'folder', 'str')
        param_storage = self.get_test_value('delete_watermark', 'storage', 'str')
        param_name = self.get_invalid_test_value('delete_watermark', 'name', param_name, 'str')
        self.initialize('delete_watermark', 'name', param_name)
        ok = False
        try:
            self.api.delete_watermark(param_name, param_shape_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_watermark', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_watermark', 'name', param_name)
        if ok:
            self.assert_no_exception('delete_watermark', 'name')

    def test_delete_watermark_invalid_shape_name(self):
        """Test case for delete_watermark with invalid shape_name
        """
        param_name = self.get_test_value('delete_watermark', 'name', 'str')
        param_shape_name = self.get_test_value('delete_watermark', 'shape_name', 'str')
        param_password = self.get_test_value('delete_watermark', 'password', 'str')
        param_folder = self.get_test_value('delete_watermark', 'folder', 'str')
        param_storage = self.get_test_value('delete_watermark', 'storage', 'str')
        param_shape_name = self.get_invalid_test_value('delete_watermark', 'shape_name', param_shape_name, 'str')
        self.initialize('delete_watermark', 'shape_name', param_shape_name)
        ok = False
        try:
            self.api.delete_watermark(param_name, param_shape_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_watermark', 'shape_name', param_shape_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_watermark', 'shape_name', param_shape_name)
        if ok:
            self.assert_no_exception('delete_watermark', 'shape_name')

    def test_delete_watermark_invalid_password(self):
        """Test case for delete_watermark with invalid password
        """
        param_name = self.get_test_value('delete_watermark', 'name', 'str')
        param_shape_name = self.get_test_value('delete_watermark', 'shape_name', 'str')
        param_password = self.get_test_value('delete_watermark', 'password', 'str')
        param_folder = self.get_test_value('delete_watermark', 'folder', 'str')
        param_storage = self.get_test_value('delete_watermark', 'storage', 'str')
        param_password = self.get_invalid_test_value('delete_watermark', 'password', param_password, 'str')
        self.initialize('delete_watermark', 'password', param_password)
        ok = False
        try:
            self.api.delete_watermark(param_name, param_shape_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_watermark', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_watermark', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_watermark', 'password')

    def test_delete_watermark_invalid_folder(self):
        """Test case for delete_watermark with invalid folder
        """
        param_name = self.get_test_value('delete_watermark', 'name', 'str')
        param_shape_name = self.get_test_value('delete_watermark', 'shape_name', 'str')
        param_password = self.get_test_value('delete_watermark', 'password', 'str')
        param_folder = self.get_test_value('delete_watermark', 'folder', 'str')
        param_storage = self.get_test_value('delete_watermark', 'storage', 'str')
        param_folder = self.get_invalid_test_value('delete_watermark', 'folder', param_folder, 'str')
        self.initialize('delete_watermark', 'folder', param_folder)
        ok = False
        try:
            self.api.delete_watermark(param_name, param_shape_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_watermark', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_watermark', 'folder', param_folder)
        if ok:
            self.assert_no_exception('delete_watermark', 'folder')

    def test_delete_watermark_invalid_storage(self):
        """Test case for delete_watermark with invalid storage
        """
        param_name = self.get_test_value('delete_watermark', 'name', 'str')
        param_shape_name = self.get_test_value('delete_watermark', 'shape_name', 'str')
        param_password = self.get_test_value('delete_watermark', 'password', 'str')
        param_folder = self.get_test_value('delete_watermark', 'folder', 'str')
        param_storage = self.get_test_value('delete_watermark', 'storage', 'str')
        param_storage = self.get_invalid_test_value('delete_watermark', 'storage', param_storage, 'str')
        self.initialize('delete_watermark', 'storage', param_storage)
        ok = False
        try:
            self.api.delete_watermark(param_name, param_shape_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_watermark', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_watermark', 'storage', param_storage)
        if ok:
            self.assert_no_exception('delete_watermark', 'storage')

    def test_delete_watermark_online(self):
        """Test case for delete_watermark_online
        """
        param_document = self.get_test_value('delete_watermark_online', 'document', 'file')
        param_shape_name = self.get_test_value('delete_watermark_online', 'shape_name', 'str')
        param_password = self.get_test_value('delete_watermark_online', 'password', 'str')
        self.initialize('delete_watermark_online', None, None)
        response = self.api.delete_watermark_online(param_document, param_shape_name, param_password)
        self.assertTrue(isinstance(response, str))
        self.assertTrue(len(response) > 0)

    def test_delete_watermark_online_invalid_document(self):
        """Test case for delete_watermark_online with invalid document
        """
        param_document = self.get_test_value('delete_watermark_online', 'document', 'file')
        param_shape_name = self.get_test_value('delete_watermark_online', 'shape_name', 'str')
        param_password = self.get_test_value('delete_watermark_online', 'password', 'str')
        param_document = self.get_invalid_test_value('delete_watermark_online', 'document', param_document, 'file')
        self.initialize('delete_watermark_online', 'document', param_document)
        ok = False
        try:
            self.api.delete_watermark_online(param_document, param_shape_name, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_watermark_online', 'document', param_document)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_watermark_online', 'document', param_document)
        if ok:
            self.assert_no_exception('delete_watermark_online', 'document')

    def test_delete_watermark_online_invalid_shape_name(self):
        """Test case for delete_watermark_online with invalid shape_name
        """
        param_document = self.get_test_value('delete_watermark_online', 'document', 'file')
        param_shape_name = self.get_test_value('delete_watermark_online', 'shape_name', 'str')
        param_password = self.get_test_value('delete_watermark_online', 'password', 'str')
        param_shape_name = self.get_invalid_test_value('delete_watermark_online', 'shape_name', param_shape_name, 'str')
        self.initialize('delete_watermark_online', 'shape_name', param_shape_name)
        ok = False
        try:
            self.api.delete_watermark_online(param_document, param_shape_name, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_watermark_online', 'shape_name', param_shape_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_watermark_online', 'shape_name', param_shape_name)
        if ok:
            self.assert_no_exception('delete_watermark_online', 'shape_name')

    def test_delete_watermark_online_invalid_password(self):
        """Test case for delete_watermark_online with invalid password
        """
        param_document = self.get_test_value('delete_watermark_online', 'document', 'file')
        param_shape_name = self.get_test_value('delete_watermark_online', 'shape_name', 'str')
        param_password = self.get_test_value('delete_watermark_online', 'password', 'str')
        param_password = self.get_invalid_test_value('delete_watermark_online', 'password', param_password, 'str')
        self.initialize('delete_watermark_online', 'password', param_password)
        ok = False
        try:
            self.api.delete_watermark_online(param_document, param_shape_name, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'delete_watermark_online', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'delete_watermark_online', 'password', param_password)
        if ok:
            self.assert_no_exception('delete_watermark_online', 'password')

    def test_download_file(self):
        """Test case for download_file
        """
        param_path = self.get_test_value('download_file', 'path', 'str')
        param_storage_name = self.get_test_value('download_file', 'storage_name', 'str')
        param_version_id = self.get_test_value('download_file', 'version_id', 'str')
        self.initialize('download_file', None, None)
        response = self.api.download_file(param_path, param_storage_name, param_version_id)
        self.assertTrue(isinstance(response, str))
        self.assertTrue(len(response) > 0)

    def test_download_file_invalid_path(self):
        """Test case for download_file with invalid path
        """
        param_path = self.get_test_value('download_file', 'path', 'str')
        param_storage_name = self.get_test_value('download_file', 'storage_name', 'str')
        param_version_id = self.get_test_value('download_file', 'version_id', 'str')
        param_path = self.get_invalid_test_value('download_file', 'path', param_path, 'str')
        self.initialize('download_file', 'path', param_path)
        ok = False
        try:
            self.api.download_file(param_path, param_storage_name, param_version_id)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_file', 'path', param_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_file', 'path', param_path)
        if ok:
            self.assert_no_exception('download_file', 'path')

    def test_download_file_invalid_storage_name(self):
        """Test case for download_file with invalid storage_name
        """
        param_path = self.get_test_value('download_file', 'path', 'str')
        param_storage_name = self.get_test_value('download_file', 'storage_name', 'str')
        param_version_id = self.get_test_value('download_file', 'version_id', 'str')
        param_storage_name = self.get_invalid_test_value('download_file', 'storage_name', param_storage_name, 'str')
        self.initialize('download_file', 'storage_name', param_storage_name)
        ok = False
        try:
            self.api.download_file(param_path, param_storage_name, param_version_id)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_file', 'storage_name', param_storage_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_file', 'storage_name', param_storage_name)
        if ok:
            self.assert_no_exception('download_file', 'storage_name')

    def test_download_file_invalid_version_id(self):
        """Test case for download_file with invalid version_id
        """
        param_path = self.get_test_value('download_file', 'path', 'str')
        param_storage_name = self.get_test_value('download_file', 'storage_name', 'str')
        param_version_id = self.get_test_value('download_file', 'version_id', 'str')
        param_version_id = self.get_invalid_test_value('download_file', 'version_id', param_version_id, 'str')
        self.initialize('download_file', 'version_id', param_version_id)
        ok = False
        try:
            self.api.download_file(param_path, param_storage_name, param_version_id)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_file', 'version_id', param_version_id)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_file', 'version_id', param_version_id)
        if ok:
            self.assert_no_exception('download_file', 'version_id')

    def test_download_image(self):
        """Test case for download_image
        """
        param_name = self.get_test_value('download_image', 'name', 'str')
        param_index = self.get_test_value('download_image', 'index', 'int')
        param_format = self.get_test_value('download_image', 'format', 'str')
        param_password = self.get_test_value('download_image', 'password', 'str')
        param_folder = self.get_test_value('download_image', 'folder', 'str')
        param_storage = self.get_test_value('download_image', 'storage', 'str')
        self.initialize('download_image', None, None)
        response = self.api.download_image(param_name, param_index, param_format, param_password, param_folder, param_storage)
        self.assertTrue(isinstance(response, str))
        self.assertTrue(len(response) > 0)

    def test_download_image_invalid_name(self):
        """Test case for download_image with invalid name
        """
        param_name = self.get_test_value('download_image', 'name', 'str')
        param_index = self.get_test_value('download_image', 'index', 'int')
        param_format = self.get_test_value('download_image', 'format', 'str')
        param_password = self.get_test_value('download_image', 'password', 'str')
        param_folder = self.get_test_value('download_image', 'folder', 'str')
        param_storage = self.get_test_value('download_image', 'storage', 'str')
        param_name = self.get_invalid_test_value('download_image', 'name', param_name, 'str')
        self.initialize('download_image', 'name', param_name)
        ok = False
        try:
            self.api.download_image(param_name, param_index, param_format, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_image', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_image', 'name', param_name)
        if ok:
            self.assert_no_exception('download_image', 'name')

    def test_download_image_invalid_index(self):
        """Test case for download_image with invalid index
        """
        param_name = self.get_test_value('download_image', 'name', 'str')
        param_index = self.get_test_value('download_image', 'index', 'int')
        param_format = self.get_test_value('download_image', 'format', 'str')
        param_password = self.get_test_value('download_image', 'password', 'str')
        param_folder = self.get_test_value('download_image', 'folder', 'str')
        param_storage = self.get_test_value('download_image', 'storage', 'str')
        param_index = self.get_invalid_test_value('download_image', 'index', param_index, 'int')
        self.initialize('download_image', 'index', param_index)
        ok = False
        try:
            self.api.download_image(param_name, param_index, param_format, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_image', 'index', param_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_image', 'index', param_index)
        if ok:
            self.assert_no_exception('download_image', 'index')

    def test_download_image_invalid_format(self):
        """Test case for download_image with invalid format
        """
        param_name = self.get_test_value('download_image', 'name', 'str')
        param_index = self.get_test_value('download_image', 'index', 'int')
        param_format = self.get_test_value('download_image', 'format', 'str')
        param_password = self.get_test_value('download_image', 'password', 'str')
        param_folder = self.get_test_value('download_image', 'folder', 'str')
        param_storage = self.get_test_value('download_image', 'storage', 'str')
        param_format = self.get_invalid_test_value('download_image', 'format', param_format, 'str')
        self.initialize('download_image', 'format', param_format)
        ok = False
        try:
            self.api.download_image(param_name, param_index, param_format, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_image', 'format', param_format)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_image', 'format', param_format)
        if ok:
            self.assert_no_exception('download_image', 'format')

    def test_download_image_invalid_password(self):
        """Test case for download_image with invalid password
        """
        param_name = self.get_test_value('download_image', 'name', 'str')
        param_index = self.get_test_value('download_image', 'index', 'int')
        param_format = self.get_test_value('download_image', 'format', 'str')
        param_password = self.get_test_value('download_image', 'password', 'str')
        param_folder = self.get_test_value('download_image', 'folder', 'str')
        param_storage = self.get_test_value('download_image', 'storage', 'str')
        param_password = self.get_invalid_test_value('download_image', 'password', param_password, 'str')
        self.initialize('download_image', 'password', param_password)
        ok = False
        try:
            self.api.download_image(param_name, param_index, param_format, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_image', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_image', 'password', param_password)
        if ok:
            self.assert_no_exception('download_image', 'password')

    def test_download_image_invalid_folder(self):
        """Test case for download_image with invalid folder
        """
        param_name = self.get_test_value('download_image', 'name', 'str')
        param_index = self.get_test_value('download_image', 'index', 'int')
        param_format = self.get_test_value('download_image', 'format', 'str')
        param_password = self.get_test_value('download_image', 'password', 'str')
        param_folder = self.get_test_value('download_image', 'folder', 'str')
        param_storage = self.get_test_value('download_image', 'storage', 'str')
        param_folder = self.get_invalid_test_value('download_image', 'folder', param_folder, 'str')
        self.initialize('download_image', 'folder', param_folder)
        ok = False
        try:
            self.api.download_image(param_name, param_index, param_format, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_image', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_image', 'folder', param_folder)
        if ok:
            self.assert_no_exception('download_image', 'folder')

    def test_download_image_invalid_storage(self):
        """Test case for download_image with invalid storage
        """
        param_name = self.get_test_value('download_image', 'name', 'str')
        param_index = self.get_test_value('download_image', 'index', 'int')
        param_format = self.get_test_value('download_image', 'format', 'str')
        param_password = self.get_test_value('download_image', 'password', 'str')
        param_folder = self.get_test_value('download_image', 'folder', 'str')
        param_storage = self.get_test_value('download_image', 'storage', 'str')
        param_storage = self.get_invalid_test_value('download_image', 'storage', param_storage, 'str')
        self.initialize('download_image', 'storage', param_storage)
        ok = False
        try:
            self.api.download_image(param_name, param_index, param_format, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_image', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_image', 'storage', param_storage)
        if ok:
            self.assert_no_exception('download_image', 'storage')

    def test_download_image_default_format(self):
        """Test case for download_image_default_format
        """
        param_name = self.get_test_value('download_image_default_format', 'name', 'str')
        param_index = self.get_test_value('download_image_default_format', 'index', 'int')
        param_password = self.get_test_value('download_image_default_format', 'password', 'str')
        param_folder = self.get_test_value('download_image_default_format', 'folder', 'str')
        param_storage = self.get_test_value('download_image_default_format', 'storage', 'str')
        self.initialize('download_image_default_format', None, None)
        response = self.api.download_image_default_format(param_name, param_index, param_password, param_folder, param_storage)
        self.assertTrue(isinstance(response, str))
        self.assertTrue(len(response) > 0)

    def test_download_image_default_format_invalid_name(self):
        """Test case for download_image_default_format with invalid name
        """
        param_name = self.get_test_value('download_image_default_format', 'name', 'str')
        param_index = self.get_test_value('download_image_default_format', 'index', 'int')
        param_password = self.get_test_value('download_image_default_format', 'password', 'str')
        param_folder = self.get_test_value('download_image_default_format', 'folder', 'str')
        param_storage = self.get_test_value('download_image_default_format', 'storage', 'str')
        param_name = self.get_invalid_test_value('download_image_default_format', 'name', param_name, 'str')
        self.initialize('download_image_default_format', 'name', param_name)
        ok = False
        try:
            self.api.download_image_default_format(param_name, param_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_image_default_format', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_image_default_format', 'name', param_name)
        if ok:
            self.assert_no_exception('download_image_default_format', 'name')

    def test_download_image_default_format_invalid_index(self):
        """Test case for download_image_default_format with invalid index
        """
        param_name = self.get_test_value('download_image_default_format', 'name', 'str')
        param_index = self.get_test_value('download_image_default_format', 'index', 'int')
        param_password = self.get_test_value('download_image_default_format', 'password', 'str')
        param_folder = self.get_test_value('download_image_default_format', 'folder', 'str')
        param_storage = self.get_test_value('download_image_default_format', 'storage', 'str')
        param_index = self.get_invalid_test_value('download_image_default_format', 'index', param_index, 'int')
        self.initialize('download_image_default_format', 'index', param_index)
        ok = False
        try:
            self.api.download_image_default_format(param_name, param_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_image_default_format', 'index', param_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_image_default_format', 'index', param_index)
        if ok:
            self.assert_no_exception('download_image_default_format', 'index')

    def test_download_image_default_format_invalid_password(self):
        """Test case for download_image_default_format with invalid password
        """
        param_name = self.get_test_value('download_image_default_format', 'name', 'str')
        param_index = self.get_test_value('download_image_default_format', 'index', 'int')
        param_password = self.get_test_value('download_image_default_format', 'password', 'str')
        param_folder = self.get_test_value('download_image_default_format', 'folder', 'str')
        param_storage = self.get_test_value('download_image_default_format', 'storage', 'str')
        param_password = self.get_invalid_test_value('download_image_default_format', 'password', param_password, 'str')
        self.initialize('download_image_default_format', 'password', param_password)
        ok = False
        try:
            self.api.download_image_default_format(param_name, param_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_image_default_format', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_image_default_format', 'password', param_password)
        if ok:
            self.assert_no_exception('download_image_default_format', 'password')

    def test_download_image_default_format_invalid_folder(self):
        """Test case for download_image_default_format with invalid folder
        """
        param_name = self.get_test_value('download_image_default_format', 'name', 'str')
        param_index = self.get_test_value('download_image_default_format', 'index', 'int')
        param_password = self.get_test_value('download_image_default_format', 'password', 'str')
        param_folder = self.get_test_value('download_image_default_format', 'folder', 'str')
        param_storage = self.get_test_value('download_image_default_format', 'storage', 'str')
        param_folder = self.get_invalid_test_value('download_image_default_format', 'folder', param_folder, 'str')
        self.initialize('download_image_default_format', 'folder', param_folder)
        ok = False
        try:
            self.api.download_image_default_format(param_name, param_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_image_default_format', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_image_default_format', 'folder', param_folder)
        if ok:
            self.assert_no_exception('download_image_default_format', 'folder')

    def test_download_image_default_format_invalid_storage(self):
        """Test case for download_image_default_format with invalid storage
        """
        param_name = self.get_test_value('download_image_default_format', 'name', 'str')
        param_index = self.get_test_value('download_image_default_format', 'index', 'int')
        param_password = self.get_test_value('download_image_default_format', 'password', 'str')
        param_folder = self.get_test_value('download_image_default_format', 'folder', 'str')
        param_storage = self.get_test_value('download_image_default_format', 'storage', 'str')
        param_storage = self.get_invalid_test_value('download_image_default_format', 'storage', param_storage, 'str')
        self.initialize('download_image_default_format', 'storage', param_storage)
        ok = False
        try:
            self.api.download_image_default_format(param_name, param_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_image_default_format', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_image_default_format', 'storage', param_storage)
        if ok:
            self.assert_no_exception('download_image_default_format', 'storage')

    def test_download_image_default_format_online(self):
        """Test case for download_image_default_format_online
        """
        param_document = self.get_test_value('download_image_default_format_online', 'document', 'file')
        param_index = self.get_test_value('download_image_default_format_online', 'index', 'int')
        param_password = self.get_test_value('download_image_default_format_online', 'password', 'str')
        self.initialize('download_image_default_format_online', None, None)
        response = self.api.download_image_default_format_online(param_document, param_index, param_password)
        self.assertTrue(isinstance(response, str))
        self.assertTrue(len(response) > 0)

    def test_download_image_default_format_online_invalid_document(self):
        """Test case for download_image_default_format_online with invalid document
        """
        param_document = self.get_test_value('download_image_default_format_online', 'document', 'file')
        param_index = self.get_test_value('download_image_default_format_online', 'index', 'int')
        param_password = self.get_test_value('download_image_default_format_online', 'password', 'str')
        param_document = self.get_invalid_test_value('download_image_default_format_online', 'document', param_document, 'file')
        self.initialize('download_image_default_format_online', 'document', param_document)
        ok = False
        try:
            self.api.download_image_default_format_online(param_document, param_index, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_image_default_format_online', 'document', param_document)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_image_default_format_online', 'document', param_document)
        if ok:
            self.assert_no_exception('download_image_default_format_online', 'document')

    def test_download_image_default_format_online_invalid_index(self):
        """Test case for download_image_default_format_online with invalid index
        """
        param_document = self.get_test_value('download_image_default_format_online', 'document', 'file')
        param_index = self.get_test_value('download_image_default_format_online', 'index', 'int')
        param_password = self.get_test_value('download_image_default_format_online', 'password', 'str')
        param_index = self.get_invalid_test_value('download_image_default_format_online', 'index', param_index, 'int')
        self.initialize('download_image_default_format_online', 'index', param_index)
        ok = False
        try:
            self.api.download_image_default_format_online(param_document, param_index, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_image_default_format_online', 'index', param_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_image_default_format_online', 'index', param_index)
        if ok:
            self.assert_no_exception('download_image_default_format_online', 'index')

    def test_download_image_default_format_online_invalid_password(self):
        """Test case for download_image_default_format_online with invalid password
        """
        param_document = self.get_test_value('download_image_default_format_online', 'document', 'file')
        param_index = self.get_test_value('download_image_default_format_online', 'index', 'int')
        param_password = self.get_test_value('download_image_default_format_online', 'password', 'str')
        param_password = self.get_invalid_test_value('download_image_default_format_online', 'password', param_password, 'str')
        self.initialize('download_image_default_format_online', 'password', param_password)
        ok = False
        try:
            self.api.download_image_default_format_online(param_document, param_index, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_image_default_format_online', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_image_default_format_online', 'password', param_password)
        if ok:
            self.assert_no_exception('download_image_default_format_online', 'password')

    def test_download_image_online(self):
        """Test case for download_image_online
        """
        param_document = self.get_test_value('download_image_online', 'document', 'file')
        param_index = self.get_test_value('download_image_online', 'index', 'int')
        param_format = self.get_test_value('download_image_online', 'format', 'str')
        param_password = self.get_test_value('download_image_online', 'password', 'str')
        self.initialize('download_image_online', None, None)
        response = self.api.download_image_online(param_document, param_index, param_format, param_password)
        self.assertTrue(isinstance(response, str))
        self.assertTrue(len(response) > 0)

    def test_download_image_online_invalid_document(self):
        """Test case for download_image_online with invalid document
        """
        param_document = self.get_test_value('download_image_online', 'document', 'file')
        param_index = self.get_test_value('download_image_online', 'index', 'int')
        param_format = self.get_test_value('download_image_online', 'format', 'str')
        param_password = self.get_test_value('download_image_online', 'password', 'str')
        param_document = self.get_invalid_test_value('download_image_online', 'document', param_document, 'file')
        self.initialize('download_image_online', 'document', param_document)
        ok = False
        try:
            self.api.download_image_online(param_document, param_index, param_format, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_image_online', 'document', param_document)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_image_online', 'document', param_document)
        if ok:
            self.assert_no_exception('download_image_online', 'document')

    def test_download_image_online_invalid_index(self):
        """Test case for download_image_online with invalid index
        """
        param_document = self.get_test_value('download_image_online', 'document', 'file')
        param_index = self.get_test_value('download_image_online', 'index', 'int')
        param_format = self.get_test_value('download_image_online', 'format', 'str')
        param_password = self.get_test_value('download_image_online', 'password', 'str')
        param_index = self.get_invalid_test_value('download_image_online', 'index', param_index, 'int')
        self.initialize('download_image_online', 'index', param_index)
        ok = False
        try:
            self.api.download_image_online(param_document, param_index, param_format, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_image_online', 'index', param_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_image_online', 'index', param_index)
        if ok:
            self.assert_no_exception('download_image_online', 'index')

    def test_download_image_online_invalid_format(self):
        """Test case for download_image_online with invalid format
        """
        param_document = self.get_test_value('download_image_online', 'document', 'file')
        param_index = self.get_test_value('download_image_online', 'index', 'int')
        param_format = self.get_test_value('download_image_online', 'format', 'str')
        param_password = self.get_test_value('download_image_online', 'password', 'str')
        param_format = self.get_invalid_test_value('download_image_online', 'format', param_format, 'str')
        self.initialize('download_image_online', 'format', param_format)
        ok = False
        try:
            self.api.download_image_online(param_document, param_index, param_format, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_image_online', 'format', param_format)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_image_online', 'format', param_format)
        if ok:
            self.assert_no_exception('download_image_online', 'format')

    def test_download_image_online_invalid_password(self):
        """Test case for download_image_online with invalid password
        """
        param_document = self.get_test_value('download_image_online', 'document', 'file')
        param_index = self.get_test_value('download_image_online', 'index', 'int')
        param_format = self.get_test_value('download_image_online', 'format', 'str')
        param_password = self.get_test_value('download_image_online', 'password', 'str')
        param_password = self.get_invalid_test_value('download_image_online', 'password', param_password, 'str')
        self.initialize('download_image_online', 'password', param_password)
        ok = False
        try:
            self.api.download_image_online(param_document, param_index, param_format, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_image_online', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_image_online', 'password', param_password)
        if ok:
            self.assert_no_exception('download_image_online', 'password')

    def test_download_images(self):
        """Test case for download_images
        """
        param_name = self.get_test_value('download_images', 'name', 'str')
        param_format = self.get_test_value('download_images', 'format', 'str')
        param_password = self.get_test_value('download_images', 'password', 'str')
        param_folder = self.get_test_value('download_images', 'folder', 'str')
        param_storage = self.get_test_value('download_images', 'storage', 'str')
        self.initialize('download_images', None, None)
        response = self.api.download_images(param_name, param_format, param_password, param_folder, param_storage)
        self.assertTrue(isinstance(response, str))
        self.assertTrue(len(response) > 0)

    def test_download_images_invalid_name(self):
        """Test case for download_images with invalid name
        """
        param_name = self.get_test_value('download_images', 'name', 'str')
        param_format = self.get_test_value('download_images', 'format', 'str')
        param_password = self.get_test_value('download_images', 'password', 'str')
        param_folder = self.get_test_value('download_images', 'folder', 'str')
        param_storage = self.get_test_value('download_images', 'storage', 'str')
        param_name = self.get_invalid_test_value('download_images', 'name', param_name, 'str')
        self.initialize('download_images', 'name', param_name)
        ok = False
        try:
            self.api.download_images(param_name, param_format, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_images', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_images', 'name', param_name)
        if ok:
            self.assert_no_exception('download_images', 'name')

    def test_download_images_invalid_format(self):
        """Test case for download_images with invalid format
        """
        param_name = self.get_test_value('download_images', 'name', 'str')
        param_format = self.get_test_value('download_images', 'format', 'str')
        param_password = self.get_test_value('download_images', 'password', 'str')
        param_folder = self.get_test_value('download_images', 'folder', 'str')
        param_storage = self.get_test_value('download_images', 'storage', 'str')
        param_format = self.get_invalid_test_value('download_images', 'format', param_format, 'str')
        self.initialize('download_images', 'format', param_format)
        ok = False
        try:
            self.api.download_images(param_name, param_format, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_images', 'format', param_format)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_images', 'format', param_format)
        if ok:
            self.assert_no_exception('download_images', 'format')

    def test_download_images_invalid_password(self):
        """Test case for download_images with invalid password
        """
        param_name = self.get_test_value('download_images', 'name', 'str')
        param_format = self.get_test_value('download_images', 'format', 'str')
        param_password = self.get_test_value('download_images', 'password', 'str')
        param_folder = self.get_test_value('download_images', 'folder', 'str')
        param_storage = self.get_test_value('download_images', 'storage', 'str')
        param_password = self.get_invalid_test_value('download_images', 'password', param_password, 'str')
        self.initialize('download_images', 'password', param_password)
        ok = False
        try:
            self.api.download_images(param_name, param_format, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_images', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_images', 'password', param_password)
        if ok:
            self.assert_no_exception('download_images', 'password')

    def test_download_images_invalid_folder(self):
        """Test case for download_images with invalid folder
        """
        param_name = self.get_test_value('download_images', 'name', 'str')
        param_format = self.get_test_value('download_images', 'format', 'str')
        param_password = self.get_test_value('download_images', 'password', 'str')
        param_folder = self.get_test_value('download_images', 'folder', 'str')
        param_storage = self.get_test_value('download_images', 'storage', 'str')
        param_folder = self.get_invalid_test_value('download_images', 'folder', param_folder, 'str')
        self.initialize('download_images', 'folder', param_folder)
        ok = False
        try:
            self.api.download_images(param_name, param_format, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_images', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_images', 'folder', param_folder)
        if ok:
            self.assert_no_exception('download_images', 'folder')

    def test_download_images_invalid_storage(self):
        """Test case for download_images with invalid storage
        """
        param_name = self.get_test_value('download_images', 'name', 'str')
        param_format = self.get_test_value('download_images', 'format', 'str')
        param_password = self.get_test_value('download_images', 'password', 'str')
        param_folder = self.get_test_value('download_images', 'folder', 'str')
        param_storage = self.get_test_value('download_images', 'storage', 'str')
        param_storage = self.get_invalid_test_value('download_images', 'storage', param_storage, 'str')
        self.initialize('download_images', 'storage', param_storage)
        ok = False
        try:
            self.api.download_images(param_name, param_format, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_images', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_images', 'storage', param_storage)
        if ok:
            self.assert_no_exception('download_images', 'storage')

    def test_download_images_default_format(self):
        """Test case for download_images_default_format
        """
        param_name = self.get_test_value('download_images_default_format', 'name', 'str')
        param_password = self.get_test_value('download_images_default_format', 'password', 'str')
        param_folder = self.get_test_value('download_images_default_format', 'folder', 'str')
        param_storage = self.get_test_value('download_images_default_format', 'storage', 'str')
        self.initialize('download_images_default_format', None, None)
        response = self.api.download_images_default_format(param_name, param_password, param_folder, param_storage)
        self.assertTrue(isinstance(response, str))
        self.assertTrue(len(response) > 0)

    def test_download_images_default_format_invalid_name(self):
        """Test case for download_images_default_format with invalid name
        """
        param_name = self.get_test_value('download_images_default_format', 'name', 'str')
        param_password = self.get_test_value('download_images_default_format', 'password', 'str')
        param_folder = self.get_test_value('download_images_default_format', 'folder', 'str')
        param_storage = self.get_test_value('download_images_default_format', 'storage', 'str')
        param_name = self.get_invalid_test_value('download_images_default_format', 'name', param_name, 'str')
        self.initialize('download_images_default_format', 'name', param_name)
        ok = False
        try:
            self.api.download_images_default_format(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_images_default_format', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_images_default_format', 'name', param_name)
        if ok:
            self.assert_no_exception('download_images_default_format', 'name')

    def test_download_images_default_format_invalid_password(self):
        """Test case for download_images_default_format with invalid password
        """
        param_name = self.get_test_value('download_images_default_format', 'name', 'str')
        param_password = self.get_test_value('download_images_default_format', 'password', 'str')
        param_folder = self.get_test_value('download_images_default_format', 'folder', 'str')
        param_storage = self.get_test_value('download_images_default_format', 'storage', 'str')
        param_password = self.get_invalid_test_value('download_images_default_format', 'password', param_password, 'str')
        self.initialize('download_images_default_format', 'password', param_password)
        ok = False
        try:
            self.api.download_images_default_format(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_images_default_format', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_images_default_format', 'password', param_password)
        if ok:
            self.assert_no_exception('download_images_default_format', 'password')

    def test_download_images_default_format_invalid_folder(self):
        """Test case for download_images_default_format with invalid folder
        """
        param_name = self.get_test_value('download_images_default_format', 'name', 'str')
        param_password = self.get_test_value('download_images_default_format', 'password', 'str')
        param_folder = self.get_test_value('download_images_default_format', 'folder', 'str')
        param_storage = self.get_test_value('download_images_default_format', 'storage', 'str')
        param_folder = self.get_invalid_test_value('download_images_default_format', 'folder', param_folder, 'str')
        self.initialize('download_images_default_format', 'folder', param_folder)
        ok = False
        try:
            self.api.download_images_default_format(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_images_default_format', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_images_default_format', 'folder', param_folder)
        if ok:
            self.assert_no_exception('download_images_default_format', 'folder')

    def test_download_images_default_format_invalid_storage(self):
        """Test case for download_images_default_format with invalid storage
        """
        param_name = self.get_test_value('download_images_default_format', 'name', 'str')
        param_password = self.get_test_value('download_images_default_format', 'password', 'str')
        param_folder = self.get_test_value('download_images_default_format', 'folder', 'str')
        param_storage = self.get_test_value('download_images_default_format', 'storage', 'str')
        param_storage = self.get_invalid_test_value('download_images_default_format', 'storage', param_storage, 'str')
        self.initialize('download_images_default_format', 'storage', param_storage)
        ok = False
        try:
            self.api.download_images_default_format(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_images_default_format', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_images_default_format', 'storage', param_storage)
        if ok:
            self.assert_no_exception('download_images_default_format', 'storage')

    def test_download_images_default_format_online(self):
        """Test case for download_images_default_format_online
        """
        param_document = self.get_test_value('download_images_default_format_online', 'document', 'file')
        param_password = self.get_test_value('download_images_default_format_online', 'password', 'str')
        self.initialize('download_images_default_format_online', None, None)
        response = self.api.download_images_default_format_online(param_document, param_password)
        self.assertTrue(isinstance(response, str))
        self.assertTrue(len(response) > 0)

    def test_download_images_default_format_online_invalid_document(self):
        """Test case for download_images_default_format_online with invalid document
        """
        param_document = self.get_test_value('download_images_default_format_online', 'document', 'file')
        param_password = self.get_test_value('download_images_default_format_online', 'password', 'str')
        param_document = self.get_invalid_test_value('download_images_default_format_online', 'document', param_document, 'file')
        self.initialize('download_images_default_format_online', 'document', param_document)
        ok = False
        try:
            self.api.download_images_default_format_online(param_document, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_images_default_format_online', 'document', param_document)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_images_default_format_online', 'document', param_document)
        if ok:
            self.assert_no_exception('download_images_default_format_online', 'document')

    def test_download_images_default_format_online_invalid_password(self):
        """Test case for download_images_default_format_online with invalid password
        """
        param_document = self.get_test_value('download_images_default_format_online', 'document', 'file')
        param_password = self.get_test_value('download_images_default_format_online', 'password', 'str')
        param_password = self.get_invalid_test_value('download_images_default_format_online', 'password', param_password, 'str')
        self.initialize('download_images_default_format_online', 'password', param_password)
        ok = False
        try:
            self.api.download_images_default_format_online(param_document, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_images_default_format_online', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_images_default_format_online', 'password', param_password)
        if ok:
            self.assert_no_exception('download_images_default_format_online', 'password')

    def test_download_images_online(self):
        """Test case for download_images_online
        """
        param_document = self.get_test_value('download_images_online', 'document', 'file')
        param_format = self.get_test_value('download_images_online', 'format', 'str')
        param_password = self.get_test_value('download_images_online', 'password', 'str')
        self.initialize('download_images_online', None, None)
        response = self.api.download_images_online(param_document, param_format, param_password)
        self.assertTrue(isinstance(response, str))
        self.assertTrue(len(response) > 0)

    def test_download_images_online_invalid_document(self):
        """Test case for download_images_online with invalid document
        """
        param_document = self.get_test_value('download_images_online', 'document', 'file')
        param_format = self.get_test_value('download_images_online', 'format', 'str')
        param_password = self.get_test_value('download_images_online', 'password', 'str')
        param_document = self.get_invalid_test_value('download_images_online', 'document', param_document, 'file')
        self.initialize('download_images_online', 'document', param_document)
        ok = False
        try:
            self.api.download_images_online(param_document, param_format, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_images_online', 'document', param_document)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_images_online', 'document', param_document)
        if ok:
            self.assert_no_exception('download_images_online', 'document')

    def test_download_images_online_invalid_format(self):
        """Test case for download_images_online with invalid format
        """
        param_document = self.get_test_value('download_images_online', 'document', 'file')
        param_format = self.get_test_value('download_images_online', 'format', 'str')
        param_password = self.get_test_value('download_images_online', 'password', 'str')
        param_format = self.get_invalid_test_value('download_images_online', 'format', param_format, 'str')
        self.initialize('download_images_online', 'format', param_format)
        ok = False
        try:
            self.api.download_images_online(param_document, param_format, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_images_online', 'format', param_format)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_images_online', 'format', param_format)
        if ok:
            self.assert_no_exception('download_images_online', 'format')

    def test_download_images_online_invalid_password(self):
        """Test case for download_images_online with invalid password
        """
        param_document = self.get_test_value('download_images_online', 'document', 'file')
        param_format = self.get_test_value('download_images_online', 'format', 'str')
        param_password = self.get_test_value('download_images_online', 'password', 'str')
        param_password = self.get_invalid_test_value('download_images_online', 'password', param_password, 'str')
        self.initialize('download_images_online', 'password', param_password)
        ok = False
        try:
            self.api.download_images_online(param_document, param_format, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_images_online', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_images_online', 'password', param_password)
        if ok:
            self.assert_no_exception('download_images_online', 'password')

    def test_download_notes_slide(self):
        """Test case for download_notes_slide
        """
        param_name = self.get_test_value('download_notes_slide', 'name', 'str')
        param_slide_index = self.get_test_value('download_notes_slide', 'slide_index', 'int')
        param_format = self.get_test_value('download_notes_slide', 'format', 'str')
        param_width = self.get_test_value('download_notes_slide', 'width', 'int')
        param_height = self.get_test_value('download_notes_slide', 'height', 'int')
        param_password = self.get_test_value('download_notes_slide', 'password', 'str')
        param_folder = self.get_test_value('download_notes_slide', 'folder', 'str')
        param_storage = self.get_test_value('download_notes_slide', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_notes_slide', 'fonts_folder', 'str')
        self.initialize('download_notes_slide', None, None)
        response = self.api.download_notes_slide(param_name, param_slide_index, param_format, param_width, param_height, param_password, param_folder, param_storage, param_fonts_folder)
        self.assertTrue(isinstance(response, str))
        self.assertTrue(len(response) > 0)

    def test_download_notes_slide_invalid_name(self):
        """Test case for download_notes_slide with invalid name
        """
        param_name = self.get_test_value('download_notes_slide', 'name', 'str')
        param_slide_index = self.get_test_value('download_notes_slide', 'slide_index', 'int')
        param_format = self.get_test_value('download_notes_slide', 'format', 'str')
        param_width = self.get_test_value('download_notes_slide', 'width', 'int')
        param_height = self.get_test_value('download_notes_slide', 'height', 'int')
        param_password = self.get_test_value('download_notes_slide', 'password', 'str')
        param_folder = self.get_test_value('download_notes_slide', 'folder', 'str')
        param_storage = self.get_test_value('download_notes_slide', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_notes_slide', 'fonts_folder', 'str')
        param_name = self.get_invalid_test_value('download_notes_slide', 'name', param_name, 'str')
        self.initialize('download_notes_slide', 'name', param_name)
        ok = False
        try:
            self.api.download_notes_slide(param_name, param_slide_index, param_format, param_width, param_height, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_notes_slide', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_notes_slide', 'name', param_name)
        if ok:
            self.assert_no_exception('download_notes_slide', 'name')

    def test_download_notes_slide_invalid_slide_index(self):
        """Test case for download_notes_slide with invalid slide_index
        """
        param_name = self.get_test_value('download_notes_slide', 'name', 'str')
        param_slide_index = self.get_test_value('download_notes_slide', 'slide_index', 'int')
        param_format = self.get_test_value('download_notes_slide', 'format', 'str')
        param_width = self.get_test_value('download_notes_slide', 'width', 'int')
        param_height = self.get_test_value('download_notes_slide', 'height', 'int')
        param_password = self.get_test_value('download_notes_slide', 'password', 'str')
        param_folder = self.get_test_value('download_notes_slide', 'folder', 'str')
        param_storage = self.get_test_value('download_notes_slide', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_notes_slide', 'fonts_folder', 'str')
        param_slide_index = self.get_invalid_test_value('download_notes_slide', 'slide_index', param_slide_index, 'int')
        self.initialize('download_notes_slide', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.download_notes_slide(param_name, param_slide_index, param_format, param_width, param_height, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_notes_slide', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_notes_slide', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('download_notes_slide', 'slide_index')

    def test_download_notes_slide_invalid_format(self):
        """Test case for download_notes_slide with invalid format
        """
        param_name = self.get_test_value('download_notes_slide', 'name', 'str')
        param_slide_index = self.get_test_value('download_notes_slide', 'slide_index', 'int')
        param_format = self.get_test_value('download_notes_slide', 'format', 'str')
        param_width = self.get_test_value('download_notes_slide', 'width', 'int')
        param_height = self.get_test_value('download_notes_slide', 'height', 'int')
        param_password = self.get_test_value('download_notes_slide', 'password', 'str')
        param_folder = self.get_test_value('download_notes_slide', 'folder', 'str')
        param_storage = self.get_test_value('download_notes_slide', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_notes_slide', 'fonts_folder', 'str')
        param_format = self.get_invalid_test_value('download_notes_slide', 'format', param_format, 'str')
        self.initialize('download_notes_slide', 'format', param_format)
        ok = False
        try:
            self.api.download_notes_slide(param_name, param_slide_index, param_format, param_width, param_height, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_notes_slide', 'format', param_format)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_notes_slide', 'format', param_format)
        if ok:
            self.assert_no_exception('download_notes_slide', 'format')

    def test_download_notes_slide_invalid_width(self):
        """Test case for download_notes_slide with invalid width
        """
        param_name = self.get_test_value('download_notes_slide', 'name', 'str')
        param_slide_index = self.get_test_value('download_notes_slide', 'slide_index', 'int')
        param_format = self.get_test_value('download_notes_slide', 'format', 'str')
        param_width = self.get_test_value('download_notes_slide', 'width', 'int')
        param_height = self.get_test_value('download_notes_slide', 'height', 'int')
        param_password = self.get_test_value('download_notes_slide', 'password', 'str')
        param_folder = self.get_test_value('download_notes_slide', 'folder', 'str')
        param_storage = self.get_test_value('download_notes_slide', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_notes_slide', 'fonts_folder', 'str')
        param_width = self.get_invalid_test_value('download_notes_slide', 'width', param_width, 'int')
        self.initialize('download_notes_slide', 'width', param_width)
        ok = False
        try:
            self.api.download_notes_slide(param_name, param_slide_index, param_format, param_width, param_height, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_notes_slide', 'width', param_width)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_notes_slide', 'width', param_width)
        if ok:
            self.assert_no_exception('download_notes_slide', 'width')

    def test_download_notes_slide_invalid_height(self):
        """Test case for download_notes_slide with invalid height
        """
        param_name = self.get_test_value('download_notes_slide', 'name', 'str')
        param_slide_index = self.get_test_value('download_notes_slide', 'slide_index', 'int')
        param_format = self.get_test_value('download_notes_slide', 'format', 'str')
        param_width = self.get_test_value('download_notes_slide', 'width', 'int')
        param_height = self.get_test_value('download_notes_slide', 'height', 'int')
        param_password = self.get_test_value('download_notes_slide', 'password', 'str')
        param_folder = self.get_test_value('download_notes_slide', 'folder', 'str')
        param_storage = self.get_test_value('download_notes_slide', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_notes_slide', 'fonts_folder', 'str')
        param_height = self.get_invalid_test_value('download_notes_slide', 'height', param_height, 'int')
        self.initialize('download_notes_slide', 'height', param_height)
        ok = False
        try:
            self.api.download_notes_slide(param_name, param_slide_index, param_format, param_width, param_height, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_notes_slide', 'height', param_height)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_notes_slide', 'height', param_height)
        if ok:
            self.assert_no_exception('download_notes_slide', 'height')

    def test_download_notes_slide_invalid_password(self):
        """Test case for download_notes_slide with invalid password
        """
        param_name = self.get_test_value('download_notes_slide', 'name', 'str')
        param_slide_index = self.get_test_value('download_notes_slide', 'slide_index', 'int')
        param_format = self.get_test_value('download_notes_slide', 'format', 'str')
        param_width = self.get_test_value('download_notes_slide', 'width', 'int')
        param_height = self.get_test_value('download_notes_slide', 'height', 'int')
        param_password = self.get_test_value('download_notes_slide', 'password', 'str')
        param_folder = self.get_test_value('download_notes_slide', 'folder', 'str')
        param_storage = self.get_test_value('download_notes_slide', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_notes_slide', 'fonts_folder', 'str')
        param_password = self.get_invalid_test_value('download_notes_slide', 'password', param_password, 'str')
        self.initialize('download_notes_slide', 'password', param_password)
        ok = False
        try:
            self.api.download_notes_slide(param_name, param_slide_index, param_format, param_width, param_height, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_notes_slide', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_notes_slide', 'password', param_password)
        if ok:
            self.assert_no_exception('download_notes_slide', 'password')

    def test_download_notes_slide_invalid_folder(self):
        """Test case for download_notes_slide with invalid folder
        """
        param_name = self.get_test_value('download_notes_slide', 'name', 'str')
        param_slide_index = self.get_test_value('download_notes_slide', 'slide_index', 'int')
        param_format = self.get_test_value('download_notes_slide', 'format', 'str')
        param_width = self.get_test_value('download_notes_slide', 'width', 'int')
        param_height = self.get_test_value('download_notes_slide', 'height', 'int')
        param_password = self.get_test_value('download_notes_slide', 'password', 'str')
        param_folder = self.get_test_value('download_notes_slide', 'folder', 'str')
        param_storage = self.get_test_value('download_notes_slide', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_notes_slide', 'fonts_folder', 'str')
        param_folder = self.get_invalid_test_value('download_notes_slide', 'folder', param_folder, 'str')
        self.initialize('download_notes_slide', 'folder', param_folder)
        ok = False
        try:
            self.api.download_notes_slide(param_name, param_slide_index, param_format, param_width, param_height, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_notes_slide', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_notes_slide', 'folder', param_folder)
        if ok:
            self.assert_no_exception('download_notes_slide', 'folder')

    def test_download_notes_slide_invalid_storage(self):
        """Test case for download_notes_slide with invalid storage
        """
        param_name = self.get_test_value('download_notes_slide', 'name', 'str')
        param_slide_index = self.get_test_value('download_notes_slide', 'slide_index', 'int')
        param_format = self.get_test_value('download_notes_slide', 'format', 'str')
        param_width = self.get_test_value('download_notes_slide', 'width', 'int')
        param_height = self.get_test_value('download_notes_slide', 'height', 'int')
        param_password = self.get_test_value('download_notes_slide', 'password', 'str')
        param_folder = self.get_test_value('download_notes_slide', 'folder', 'str')
        param_storage = self.get_test_value('download_notes_slide', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_notes_slide', 'fonts_folder', 'str')
        param_storage = self.get_invalid_test_value('download_notes_slide', 'storage', param_storage, 'str')
        self.initialize('download_notes_slide', 'storage', param_storage)
        ok = False
        try:
            self.api.download_notes_slide(param_name, param_slide_index, param_format, param_width, param_height, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_notes_slide', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_notes_slide', 'storage', param_storage)
        if ok:
            self.assert_no_exception('download_notes_slide', 'storage')

    def test_download_notes_slide_invalid_fonts_folder(self):
        """Test case for download_notes_slide with invalid fonts_folder
        """
        param_name = self.get_test_value('download_notes_slide', 'name', 'str')
        param_slide_index = self.get_test_value('download_notes_slide', 'slide_index', 'int')
        param_format = self.get_test_value('download_notes_slide', 'format', 'str')
        param_width = self.get_test_value('download_notes_slide', 'width', 'int')
        param_height = self.get_test_value('download_notes_slide', 'height', 'int')
        param_password = self.get_test_value('download_notes_slide', 'password', 'str')
        param_folder = self.get_test_value('download_notes_slide', 'folder', 'str')
        param_storage = self.get_test_value('download_notes_slide', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_notes_slide', 'fonts_folder', 'str')
        param_fonts_folder = self.get_invalid_test_value('download_notes_slide', 'fonts_folder', param_fonts_folder, 'str')
        self.initialize('download_notes_slide', 'fonts_folder', param_fonts_folder)
        ok = False
        try:
            self.api.download_notes_slide(param_name, param_slide_index, param_format, param_width, param_height, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_notes_slide', 'fonts_folder', param_fonts_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_notes_slide', 'fonts_folder', param_fonts_folder)
        if ok:
            self.assert_no_exception('download_notes_slide', 'fonts_folder')

    def test_download_notes_slide_online(self):
        """Test case for download_notes_slide_online
        """
        param_document = self.get_test_value('download_notes_slide_online', 'document', 'file')
        param_slide_index = self.get_test_value('download_notes_slide_online', 'slide_index', 'int')
        param_format = self.get_test_value('download_notes_slide_online', 'format', 'str')
        param_width = self.get_test_value('download_notes_slide_online', 'width', 'int')
        param_height = self.get_test_value('download_notes_slide_online', 'height', 'int')
        param_password = self.get_test_value('download_notes_slide_online', 'password', 'str')
        param_fonts_folder = self.get_test_value('download_notes_slide_online', 'fonts_folder', 'str')
        self.initialize('download_notes_slide_online', None, None)
        response = self.api.download_notes_slide_online(param_document, param_slide_index, param_format, param_width, param_height, param_password, param_fonts_folder)
        self.assertTrue(isinstance(response, str))
        self.assertTrue(len(response) > 0)

    def test_download_notes_slide_online_invalid_document(self):
        """Test case for download_notes_slide_online with invalid document
        """
        param_document = self.get_test_value('download_notes_slide_online', 'document', 'file')
        param_slide_index = self.get_test_value('download_notes_slide_online', 'slide_index', 'int')
        param_format = self.get_test_value('download_notes_slide_online', 'format', 'str')
        param_width = self.get_test_value('download_notes_slide_online', 'width', 'int')
        param_height = self.get_test_value('download_notes_slide_online', 'height', 'int')
        param_password = self.get_test_value('download_notes_slide_online', 'password', 'str')
        param_fonts_folder = self.get_test_value('download_notes_slide_online', 'fonts_folder', 'str')
        param_document = self.get_invalid_test_value('download_notes_slide_online', 'document', param_document, 'file')
        self.initialize('download_notes_slide_online', 'document', param_document)
        ok = False
        try:
            self.api.download_notes_slide_online(param_document, param_slide_index, param_format, param_width, param_height, param_password, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_notes_slide_online', 'document', param_document)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_notes_slide_online', 'document', param_document)
        if ok:
            self.assert_no_exception('download_notes_slide_online', 'document')

    def test_download_notes_slide_online_invalid_slide_index(self):
        """Test case for download_notes_slide_online with invalid slide_index
        """
        param_document = self.get_test_value('download_notes_slide_online', 'document', 'file')
        param_slide_index = self.get_test_value('download_notes_slide_online', 'slide_index', 'int')
        param_format = self.get_test_value('download_notes_slide_online', 'format', 'str')
        param_width = self.get_test_value('download_notes_slide_online', 'width', 'int')
        param_height = self.get_test_value('download_notes_slide_online', 'height', 'int')
        param_password = self.get_test_value('download_notes_slide_online', 'password', 'str')
        param_fonts_folder = self.get_test_value('download_notes_slide_online', 'fonts_folder', 'str')
        param_slide_index = self.get_invalid_test_value('download_notes_slide_online', 'slide_index', param_slide_index, 'int')
        self.initialize('download_notes_slide_online', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.download_notes_slide_online(param_document, param_slide_index, param_format, param_width, param_height, param_password, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_notes_slide_online', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_notes_slide_online', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('download_notes_slide_online', 'slide_index')

    def test_download_notes_slide_online_invalid_format(self):
        """Test case for download_notes_slide_online with invalid format
        """
        param_document = self.get_test_value('download_notes_slide_online', 'document', 'file')
        param_slide_index = self.get_test_value('download_notes_slide_online', 'slide_index', 'int')
        param_format = self.get_test_value('download_notes_slide_online', 'format', 'str')
        param_width = self.get_test_value('download_notes_slide_online', 'width', 'int')
        param_height = self.get_test_value('download_notes_slide_online', 'height', 'int')
        param_password = self.get_test_value('download_notes_slide_online', 'password', 'str')
        param_fonts_folder = self.get_test_value('download_notes_slide_online', 'fonts_folder', 'str')
        param_format = self.get_invalid_test_value('download_notes_slide_online', 'format', param_format, 'str')
        self.initialize('download_notes_slide_online', 'format', param_format)
        ok = False
        try:
            self.api.download_notes_slide_online(param_document, param_slide_index, param_format, param_width, param_height, param_password, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_notes_slide_online', 'format', param_format)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_notes_slide_online', 'format', param_format)
        if ok:
            self.assert_no_exception('download_notes_slide_online', 'format')

    def test_download_notes_slide_online_invalid_width(self):
        """Test case for download_notes_slide_online with invalid width
        """
        param_document = self.get_test_value('download_notes_slide_online', 'document', 'file')
        param_slide_index = self.get_test_value('download_notes_slide_online', 'slide_index', 'int')
        param_format = self.get_test_value('download_notes_slide_online', 'format', 'str')
        param_width = self.get_test_value('download_notes_slide_online', 'width', 'int')
        param_height = self.get_test_value('download_notes_slide_online', 'height', 'int')
        param_password = self.get_test_value('download_notes_slide_online', 'password', 'str')
        param_fonts_folder = self.get_test_value('download_notes_slide_online', 'fonts_folder', 'str')
        param_width = self.get_invalid_test_value('download_notes_slide_online', 'width', param_width, 'int')
        self.initialize('download_notes_slide_online', 'width', param_width)
        ok = False
        try:
            self.api.download_notes_slide_online(param_document, param_slide_index, param_format, param_width, param_height, param_password, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_notes_slide_online', 'width', param_width)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_notes_slide_online', 'width', param_width)
        if ok:
            self.assert_no_exception('download_notes_slide_online', 'width')

    def test_download_notes_slide_online_invalid_height(self):
        """Test case for download_notes_slide_online with invalid height
        """
        param_document = self.get_test_value('download_notes_slide_online', 'document', 'file')
        param_slide_index = self.get_test_value('download_notes_slide_online', 'slide_index', 'int')
        param_format = self.get_test_value('download_notes_slide_online', 'format', 'str')
        param_width = self.get_test_value('download_notes_slide_online', 'width', 'int')
        param_height = self.get_test_value('download_notes_slide_online', 'height', 'int')
        param_password = self.get_test_value('download_notes_slide_online', 'password', 'str')
        param_fonts_folder = self.get_test_value('download_notes_slide_online', 'fonts_folder', 'str')
        param_height = self.get_invalid_test_value('download_notes_slide_online', 'height', param_height, 'int')
        self.initialize('download_notes_slide_online', 'height', param_height)
        ok = False
        try:
            self.api.download_notes_slide_online(param_document, param_slide_index, param_format, param_width, param_height, param_password, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_notes_slide_online', 'height', param_height)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_notes_slide_online', 'height', param_height)
        if ok:
            self.assert_no_exception('download_notes_slide_online', 'height')

    def test_download_notes_slide_online_invalid_password(self):
        """Test case for download_notes_slide_online with invalid password
        """
        param_document = self.get_test_value('download_notes_slide_online', 'document', 'file')
        param_slide_index = self.get_test_value('download_notes_slide_online', 'slide_index', 'int')
        param_format = self.get_test_value('download_notes_slide_online', 'format', 'str')
        param_width = self.get_test_value('download_notes_slide_online', 'width', 'int')
        param_height = self.get_test_value('download_notes_slide_online', 'height', 'int')
        param_password = self.get_test_value('download_notes_slide_online', 'password', 'str')
        param_fonts_folder = self.get_test_value('download_notes_slide_online', 'fonts_folder', 'str')
        param_password = self.get_invalid_test_value('download_notes_slide_online', 'password', param_password, 'str')
        self.initialize('download_notes_slide_online', 'password', param_password)
        ok = False
        try:
            self.api.download_notes_slide_online(param_document, param_slide_index, param_format, param_width, param_height, param_password, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_notes_slide_online', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_notes_slide_online', 'password', param_password)
        if ok:
            self.assert_no_exception('download_notes_slide_online', 'password')

    def test_download_notes_slide_online_invalid_fonts_folder(self):
        """Test case for download_notes_slide_online with invalid fonts_folder
        """
        param_document = self.get_test_value('download_notes_slide_online', 'document', 'file')
        param_slide_index = self.get_test_value('download_notes_slide_online', 'slide_index', 'int')
        param_format = self.get_test_value('download_notes_slide_online', 'format', 'str')
        param_width = self.get_test_value('download_notes_slide_online', 'width', 'int')
        param_height = self.get_test_value('download_notes_slide_online', 'height', 'int')
        param_password = self.get_test_value('download_notes_slide_online', 'password', 'str')
        param_fonts_folder = self.get_test_value('download_notes_slide_online', 'fonts_folder', 'str')
        param_fonts_folder = self.get_invalid_test_value('download_notes_slide_online', 'fonts_folder', param_fonts_folder, 'str')
        self.initialize('download_notes_slide_online', 'fonts_folder', param_fonts_folder)
        ok = False
        try:
            self.api.download_notes_slide_online(param_document, param_slide_index, param_format, param_width, param_height, param_password, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_notes_slide_online', 'fonts_folder', param_fonts_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_notes_slide_online', 'fonts_folder', param_fonts_folder)
        if ok:
            self.assert_no_exception('download_notes_slide_online', 'fonts_folder')

    def test_download_portion_as_math_ml(self):
        """Test case for download_portion_as_math_ml
        """
        param_name = self.get_test_value('download_portion_as_math_ml', 'name', 'str')
        param_slide_index = self.get_test_value('download_portion_as_math_ml', 'slide_index', 'int')
        param_shape_index = self.get_test_value('download_portion_as_math_ml', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('download_portion_as_math_ml', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('download_portion_as_math_ml', 'portion_index', 'int')
        param_password = self.get_test_value('download_portion_as_math_ml', 'password', 'str')
        param_folder = self.get_test_value('download_portion_as_math_ml', 'folder', 'str')
        param_storage = self.get_test_value('download_portion_as_math_ml', 'storage', 'str')
        self.initialize('download_portion_as_math_ml', None, None)
        response = self.api.download_portion_as_math_ml(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
        self.assertTrue(isinstance(response, str))
        self.assertTrue(len(response) > 0)

    def test_download_portion_as_math_ml_invalid_name(self):
        """Test case for download_portion_as_math_ml with invalid name
        """
        param_name = self.get_test_value('download_portion_as_math_ml', 'name', 'str')
        param_slide_index = self.get_test_value('download_portion_as_math_ml', 'slide_index', 'int')
        param_shape_index = self.get_test_value('download_portion_as_math_ml', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('download_portion_as_math_ml', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('download_portion_as_math_ml', 'portion_index', 'int')
        param_password = self.get_test_value('download_portion_as_math_ml', 'password', 'str')
        param_folder = self.get_test_value('download_portion_as_math_ml', 'folder', 'str')
        param_storage = self.get_test_value('download_portion_as_math_ml', 'storage', 'str')
        param_name = self.get_invalid_test_value('download_portion_as_math_ml', 'name', param_name, 'str')
        self.initialize('download_portion_as_math_ml', 'name', param_name)
        ok = False
        try:
            self.api.download_portion_as_math_ml(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_portion_as_math_ml', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_portion_as_math_ml', 'name', param_name)
        if ok:
            self.assert_no_exception('download_portion_as_math_ml', 'name')

    def test_download_portion_as_math_ml_invalid_slide_index(self):
        """Test case for download_portion_as_math_ml with invalid slide_index
        """
        param_name = self.get_test_value('download_portion_as_math_ml', 'name', 'str')
        param_slide_index = self.get_test_value('download_portion_as_math_ml', 'slide_index', 'int')
        param_shape_index = self.get_test_value('download_portion_as_math_ml', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('download_portion_as_math_ml', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('download_portion_as_math_ml', 'portion_index', 'int')
        param_password = self.get_test_value('download_portion_as_math_ml', 'password', 'str')
        param_folder = self.get_test_value('download_portion_as_math_ml', 'folder', 'str')
        param_storage = self.get_test_value('download_portion_as_math_ml', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('download_portion_as_math_ml', 'slide_index', param_slide_index, 'int')
        self.initialize('download_portion_as_math_ml', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.download_portion_as_math_ml(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_portion_as_math_ml', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_portion_as_math_ml', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('download_portion_as_math_ml', 'slide_index')

    def test_download_portion_as_math_ml_invalid_shape_index(self):
        """Test case for download_portion_as_math_ml with invalid shape_index
        """
        param_name = self.get_test_value('download_portion_as_math_ml', 'name', 'str')
        param_slide_index = self.get_test_value('download_portion_as_math_ml', 'slide_index', 'int')
        param_shape_index = self.get_test_value('download_portion_as_math_ml', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('download_portion_as_math_ml', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('download_portion_as_math_ml', 'portion_index', 'int')
        param_password = self.get_test_value('download_portion_as_math_ml', 'password', 'str')
        param_folder = self.get_test_value('download_portion_as_math_ml', 'folder', 'str')
        param_storage = self.get_test_value('download_portion_as_math_ml', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('download_portion_as_math_ml', 'shape_index', param_shape_index, 'int')
        self.initialize('download_portion_as_math_ml', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.download_portion_as_math_ml(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_portion_as_math_ml', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_portion_as_math_ml', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('download_portion_as_math_ml', 'shape_index')

    def test_download_portion_as_math_ml_invalid_paragraph_index(self):
        """Test case for download_portion_as_math_ml with invalid paragraph_index
        """
        param_name = self.get_test_value('download_portion_as_math_ml', 'name', 'str')
        param_slide_index = self.get_test_value('download_portion_as_math_ml', 'slide_index', 'int')
        param_shape_index = self.get_test_value('download_portion_as_math_ml', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('download_portion_as_math_ml', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('download_portion_as_math_ml', 'portion_index', 'int')
        param_password = self.get_test_value('download_portion_as_math_ml', 'password', 'str')
        param_folder = self.get_test_value('download_portion_as_math_ml', 'folder', 'str')
        param_storage = self.get_test_value('download_portion_as_math_ml', 'storage', 'str')
        param_paragraph_index = self.get_invalid_test_value('download_portion_as_math_ml', 'paragraph_index', param_paragraph_index, 'int')
        self.initialize('download_portion_as_math_ml', 'paragraph_index', param_paragraph_index)
        ok = False
        try:
            self.api.download_portion_as_math_ml(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_portion_as_math_ml', 'paragraph_index', param_paragraph_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_portion_as_math_ml', 'paragraph_index', param_paragraph_index)
        if ok:
            self.assert_no_exception('download_portion_as_math_ml', 'paragraph_index')

    def test_download_portion_as_math_ml_invalid_portion_index(self):
        """Test case for download_portion_as_math_ml with invalid portion_index
        """
        param_name = self.get_test_value('download_portion_as_math_ml', 'name', 'str')
        param_slide_index = self.get_test_value('download_portion_as_math_ml', 'slide_index', 'int')
        param_shape_index = self.get_test_value('download_portion_as_math_ml', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('download_portion_as_math_ml', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('download_portion_as_math_ml', 'portion_index', 'int')
        param_password = self.get_test_value('download_portion_as_math_ml', 'password', 'str')
        param_folder = self.get_test_value('download_portion_as_math_ml', 'folder', 'str')
        param_storage = self.get_test_value('download_portion_as_math_ml', 'storage', 'str')
        param_portion_index = self.get_invalid_test_value('download_portion_as_math_ml', 'portion_index', param_portion_index, 'int')
        self.initialize('download_portion_as_math_ml', 'portion_index', param_portion_index)
        ok = False
        try:
            self.api.download_portion_as_math_ml(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_portion_as_math_ml', 'portion_index', param_portion_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_portion_as_math_ml', 'portion_index', param_portion_index)
        if ok:
            self.assert_no_exception('download_portion_as_math_ml', 'portion_index')

    def test_download_portion_as_math_ml_invalid_password(self):
        """Test case for download_portion_as_math_ml with invalid password
        """
        param_name = self.get_test_value('download_portion_as_math_ml', 'name', 'str')
        param_slide_index = self.get_test_value('download_portion_as_math_ml', 'slide_index', 'int')
        param_shape_index = self.get_test_value('download_portion_as_math_ml', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('download_portion_as_math_ml', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('download_portion_as_math_ml', 'portion_index', 'int')
        param_password = self.get_test_value('download_portion_as_math_ml', 'password', 'str')
        param_folder = self.get_test_value('download_portion_as_math_ml', 'folder', 'str')
        param_storage = self.get_test_value('download_portion_as_math_ml', 'storage', 'str')
        param_password = self.get_invalid_test_value('download_portion_as_math_ml', 'password', param_password, 'str')
        self.initialize('download_portion_as_math_ml', 'password', param_password)
        ok = False
        try:
            self.api.download_portion_as_math_ml(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_portion_as_math_ml', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_portion_as_math_ml', 'password', param_password)
        if ok:
            self.assert_no_exception('download_portion_as_math_ml', 'password')

    def test_download_portion_as_math_ml_invalid_folder(self):
        """Test case for download_portion_as_math_ml with invalid folder
        """
        param_name = self.get_test_value('download_portion_as_math_ml', 'name', 'str')
        param_slide_index = self.get_test_value('download_portion_as_math_ml', 'slide_index', 'int')
        param_shape_index = self.get_test_value('download_portion_as_math_ml', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('download_portion_as_math_ml', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('download_portion_as_math_ml', 'portion_index', 'int')
        param_password = self.get_test_value('download_portion_as_math_ml', 'password', 'str')
        param_folder = self.get_test_value('download_portion_as_math_ml', 'folder', 'str')
        param_storage = self.get_test_value('download_portion_as_math_ml', 'storage', 'str')
        param_folder = self.get_invalid_test_value('download_portion_as_math_ml', 'folder', param_folder, 'str')
        self.initialize('download_portion_as_math_ml', 'folder', param_folder)
        ok = False
        try:
            self.api.download_portion_as_math_ml(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_portion_as_math_ml', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_portion_as_math_ml', 'folder', param_folder)
        if ok:
            self.assert_no_exception('download_portion_as_math_ml', 'folder')

    def test_download_portion_as_math_ml_invalid_storage(self):
        """Test case for download_portion_as_math_ml with invalid storage
        """
        param_name = self.get_test_value('download_portion_as_math_ml', 'name', 'str')
        param_slide_index = self.get_test_value('download_portion_as_math_ml', 'slide_index', 'int')
        param_shape_index = self.get_test_value('download_portion_as_math_ml', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('download_portion_as_math_ml', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('download_portion_as_math_ml', 'portion_index', 'int')
        param_password = self.get_test_value('download_portion_as_math_ml', 'password', 'str')
        param_folder = self.get_test_value('download_portion_as_math_ml', 'folder', 'str')
        param_storage = self.get_test_value('download_portion_as_math_ml', 'storage', 'str')
        param_storage = self.get_invalid_test_value('download_portion_as_math_ml', 'storage', param_storage, 'str')
        self.initialize('download_portion_as_math_ml', 'storage', param_storage)
        ok = False
        try:
            self.api.download_portion_as_math_ml(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_portion_as_math_ml', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_portion_as_math_ml', 'storage', param_storage)
        if ok:
            self.assert_no_exception('download_portion_as_math_ml', 'storage')

    def test_download_presentation(self):
        """Test case for download_presentation
        """
        param_name = self.get_test_value('download_presentation', 'name', 'str')
        param_format = self.get_test_value('download_presentation', 'format', 'str')
        param_options = self.get_test_value('download_presentation', 'options', 'ExportOptions')
        param_password = self.get_test_value('download_presentation', 'password', 'str')
        param_folder = self.get_test_value('download_presentation', 'folder', 'str')
        param_storage = self.get_test_value('download_presentation', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_presentation', 'fonts_folder', 'str')
        param_slides = self.get_test_value('download_presentation', 'slides', 'list[int]')
        self.initialize('download_presentation', None, None)
        response = self.api.download_presentation(param_name, param_format, param_options, param_password, param_folder, param_storage, param_fonts_folder, param_slides)
        self.assertTrue(isinstance(response, str))
        self.assertTrue(len(response) > 0)

    def test_download_presentation_invalid_name(self):
        """Test case for download_presentation with invalid name
        """
        param_name = self.get_test_value('download_presentation', 'name', 'str')
        param_format = self.get_test_value('download_presentation', 'format', 'str')
        param_options = self.get_test_value('download_presentation', 'options', 'ExportOptions')
        param_password = self.get_test_value('download_presentation', 'password', 'str')
        param_folder = self.get_test_value('download_presentation', 'folder', 'str')
        param_storage = self.get_test_value('download_presentation', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_presentation', 'fonts_folder', 'str')
        param_slides = self.get_test_value('download_presentation', 'slides', 'list[int]')
        param_name = self.get_invalid_test_value('download_presentation', 'name', param_name, 'str')
        self.initialize('download_presentation', 'name', param_name)
        ok = False
        try:
            self.api.download_presentation(param_name, param_format, param_options, param_password, param_folder, param_storage, param_fonts_folder, param_slides)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_presentation', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_presentation', 'name', param_name)
        if ok:
            self.assert_no_exception('download_presentation', 'name')

    def test_download_presentation_invalid_format(self):
        """Test case for download_presentation with invalid format
        """
        param_name = self.get_test_value('download_presentation', 'name', 'str')
        param_format = self.get_test_value('download_presentation', 'format', 'str')
        param_options = self.get_test_value('download_presentation', 'options', 'ExportOptions')
        param_password = self.get_test_value('download_presentation', 'password', 'str')
        param_folder = self.get_test_value('download_presentation', 'folder', 'str')
        param_storage = self.get_test_value('download_presentation', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_presentation', 'fonts_folder', 'str')
        param_slides = self.get_test_value('download_presentation', 'slides', 'list[int]')
        param_format = self.get_invalid_test_value('download_presentation', 'format', param_format, 'str')
        self.initialize('download_presentation', 'format', param_format)
        ok = False
        try:
            self.api.download_presentation(param_name, param_format, param_options, param_password, param_folder, param_storage, param_fonts_folder, param_slides)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_presentation', 'format', param_format)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_presentation', 'format', param_format)
        if ok:
            self.assert_no_exception('download_presentation', 'format')

    def test_download_presentation_invalid_options(self):
        """Test case for download_presentation with invalid options
        """
        param_name = self.get_test_value('download_presentation', 'name', 'str')
        param_format = self.get_test_value('download_presentation', 'format', 'str')
        param_options = self.get_test_value('download_presentation', 'options', 'ExportOptions')
        param_password = self.get_test_value('download_presentation', 'password', 'str')
        param_folder = self.get_test_value('download_presentation', 'folder', 'str')
        param_storage = self.get_test_value('download_presentation', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_presentation', 'fonts_folder', 'str')
        param_slides = self.get_test_value('download_presentation', 'slides', 'list[int]')
        param_options = self.get_invalid_test_value('download_presentation', 'options', param_options, 'ExportOptions')
        self.initialize('download_presentation', 'options', param_options)
        ok = False
        try:
            self.api.download_presentation(param_name, param_format, param_options, param_password, param_folder, param_storage, param_fonts_folder, param_slides)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_presentation', 'options', param_options)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_presentation', 'options', param_options)
        if ok:
            self.assert_no_exception('download_presentation', 'options')

    def test_download_presentation_invalid_password(self):
        """Test case for download_presentation with invalid password
        """
        param_name = self.get_test_value('download_presentation', 'name', 'str')
        param_format = self.get_test_value('download_presentation', 'format', 'str')
        param_options = self.get_test_value('download_presentation', 'options', 'ExportOptions')
        param_password = self.get_test_value('download_presentation', 'password', 'str')
        param_folder = self.get_test_value('download_presentation', 'folder', 'str')
        param_storage = self.get_test_value('download_presentation', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_presentation', 'fonts_folder', 'str')
        param_slides = self.get_test_value('download_presentation', 'slides', 'list[int]')
        param_password = self.get_invalid_test_value('download_presentation', 'password', param_password, 'str')
        self.initialize('download_presentation', 'password', param_password)
        ok = False
        try:
            self.api.download_presentation(param_name, param_format, param_options, param_password, param_folder, param_storage, param_fonts_folder, param_slides)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_presentation', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_presentation', 'password', param_password)
        if ok:
            self.assert_no_exception('download_presentation', 'password')

    def test_download_presentation_invalid_folder(self):
        """Test case for download_presentation with invalid folder
        """
        param_name = self.get_test_value('download_presentation', 'name', 'str')
        param_format = self.get_test_value('download_presentation', 'format', 'str')
        param_options = self.get_test_value('download_presentation', 'options', 'ExportOptions')
        param_password = self.get_test_value('download_presentation', 'password', 'str')
        param_folder = self.get_test_value('download_presentation', 'folder', 'str')
        param_storage = self.get_test_value('download_presentation', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_presentation', 'fonts_folder', 'str')
        param_slides = self.get_test_value('download_presentation', 'slides', 'list[int]')
        param_folder = self.get_invalid_test_value('download_presentation', 'folder', param_folder, 'str')
        self.initialize('download_presentation', 'folder', param_folder)
        ok = False
        try:
            self.api.download_presentation(param_name, param_format, param_options, param_password, param_folder, param_storage, param_fonts_folder, param_slides)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_presentation', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_presentation', 'folder', param_folder)
        if ok:
            self.assert_no_exception('download_presentation', 'folder')

    def test_download_presentation_invalid_storage(self):
        """Test case for download_presentation with invalid storage
        """
        param_name = self.get_test_value('download_presentation', 'name', 'str')
        param_format = self.get_test_value('download_presentation', 'format', 'str')
        param_options = self.get_test_value('download_presentation', 'options', 'ExportOptions')
        param_password = self.get_test_value('download_presentation', 'password', 'str')
        param_folder = self.get_test_value('download_presentation', 'folder', 'str')
        param_storage = self.get_test_value('download_presentation', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_presentation', 'fonts_folder', 'str')
        param_slides = self.get_test_value('download_presentation', 'slides', 'list[int]')
        param_storage = self.get_invalid_test_value('download_presentation', 'storage', param_storage, 'str')
        self.initialize('download_presentation', 'storage', param_storage)
        ok = False
        try:
            self.api.download_presentation(param_name, param_format, param_options, param_password, param_folder, param_storage, param_fonts_folder, param_slides)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_presentation', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_presentation', 'storage', param_storage)
        if ok:
            self.assert_no_exception('download_presentation', 'storage')

    def test_download_presentation_invalid_fonts_folder(self):
        """Test case for download_presentation with invalid fonts_folder
        """
        param_name = self.get_test_value('download_presentation', 'name', 'str')
        param_format = self.get_test_value('download_presentation', 'format', 'str')
        param_options = self.get_test_value('download_presentation', 'options', 'ExportOptions')
        param_password = self.get_test_value('download_presentation', 'password', 'str')
        param_folder = self.get_test_value('download_presentation', 'folder', 'str')
        param_storage = self.get_test_value('download_presentation', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_presentation', 'fonts_folder', 'str')
        param_slides = self.get_test_value('download_presentation', 'slides', 'list[int]')
        param_fonts_folder = self.get_invalid_test_value('download_presentation', 'fonts_folder', param_fonts_folder, 'str')
        self.initialize('download_presentation', 'fonts_folder', param_fonts_folder)
        ok = False
        try:
            self.api.download_presentation(param_name, param_format, param_options, param_password, param_folder, param_storage, param_fonts_folder, param_slides)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_presentation', 'fonts_folder', param_fonts_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_presentation', 'fonts_folder', param_fonts_folder)
        if ok:
            self.assert_no_exception('download_presentation', 'fonts_folder')

    def test_download_presentation_invalid_slides(self):
        """Test case for download_presentation with invalid slides
        """
        param_name = self.get_test_value('download_presentation', 'name', 'str')
        param_format = self.get_test_value('download_presentation', 'format', 'str')
        param_options = self.get_test_value('download_presentation', 'options', 'ExportOptions')
        param_password = self.get_test_value('download_presentation', 'password', 'str')
        param_folder = self.get_test_value('download_presentation', 'folder', 'str')
        param_storage = self.get_test_value('download_presentation', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_presentation', 'fonts_folder', 'str')
        param_slides = self.get_test_value('download_presentation', 'slides', 'list[int]')
        param_slides = self.get_invalid_test_value('download_presentation', 'slides', param_slides, 'list[int]')
        self.initialize('download_presentation', 'slides', param_slides)
        ok = False
        try:
            self.api.download_presentation(param_name, param_format, param_options, param_password, param_folder, param_storage, param_fonts_folder, param_slides)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_presentation', 'slides', param_slides)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_presentation', 'slides', param_slides)
        if ok:
            self.assert_no_exception('download_presentation', 'slides')

    def test_download_shape(self):
        """Test case for download_shape
        """
        param_name = self.get_test_value('download_shape', 'name', 'str')
        param_slide_index = self.get_test_value('download_shape', 'slide_index', 'int')
        param_shape_index = self.get_test_value('download_shape', 'shape_index', 'int')
        param_format = self.get_test_value('download_shape', 'format', 'str')
        param_options = self.get_test_value('download_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_shape', 'bounds', 'str')
        param_password = self.get_test_value('download_shape', 'password', 'str')
        param_folder = self.get_test_value('download_shape', 'folder', 'str')
        param_storage = self.get_test_value('download_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_shape', 'fonts_folder', 'str')
        self.initialize('download_shape', None, None)
        response = self.api.download_shape(param_name, param_slide_index, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
        self.assertTrue(isinstance(response, str))
        self.assertTrue(len(response) > 0)

    def test_download_shape_invalid_name(self):
        """Test case for download_shape with invalid name
        """
        param_name = self.get_test_value('download_shape', 'name', 'str')
        param_slide_index = self.get_test_value('download_shape', 'slide_index', 'int')
        param_shape_index = self.get_test_value('download_shape', 'shape_index', 'int')
        param_format = self.get_test_value('download_shape', 'format', 'str')
        param_options = self.get_test_value('download_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_shape', 'bounds', 'str')
        param_password = self.get_test_value('download_shape', 'password', 'str')
        param_folder = self.get_test_value('download_shape', 'folder', 'str')
        param_storage = self.get_test_value('download_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_shape', 'fonts_folder', 'str')
        param_name = self.get_invalid_test_value('download_shape', 'name', param_name, 'str')
        self.initialize('download_shape', 'name', param_name)
        ok = False
        try:
            self.api.download_shape(param_name, param_slide_index, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_shape', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_shape', 'name', param_name)
        if ok:
            self.assert_no_exception('download_shape', 'name')

    def test_download_shape_invalid_slide_index(self):
        """Test case for download_shape with invalid slide_index
        """
        param_name = self.get_test_value('download_shape', 'name', 'str')
        param_slide_index = self.get_test_value('download_shape', 'slide_index', 'int')
        param_shape_index = self.get_test_value('download_shape', 'shape_index', 'int')
        param_format = self.get_test_value('download_shape', 'format', 'str')
        param_options = self.get_test_value('download_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_shape', 'bounds', 'str')
        param_password = self.get_test_value('download_shape', 'password', 'str')
        param_folder = self.get_test_value('download_shape', 'folder', 'str')
        param_storage = self.get_test_value('download_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_shape', 'fonts_folder', 'str')
        param_slide_index = self.get_invalid_test_value('download_shape', 'slide_index', param_slide_index, 'int')
        self.initialize('download_shape', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.download_shape(param_name, param_slide_index, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_shape', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_shape', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('download_shape', 'slide_index')

    def test_download_shape_invalid_shape_index(self):
        """Test case for download_shape with invalid shape_index
        """
        param_name = self.get_test_value('download_shape', 'name', 'str')
        param_slide_index = self.get_test_value('download_shape', 'slide_index', 'int')
        param_shape_index = self.get_test_value('download_shape', 'shape_index', 'int')
        param_format = self.get_test_value('download_shape', 'format', 'str')
        param_options = self.get_test_value('download_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_shape', 'bounds', 'str')
        param_password = self.get_test_value('download_shape', 'password', 'str')
        param_folder = self.get_test_value('download_shape', 'folder', 'str')
        param_storage = self.get_test_value('download_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_shape', 'fonts_folder', 'str')
        param_shape_index = self.get_invalid_test_value('download_shape', 'shape_index', param_shape_index, 'int')
        self.initialize('download_shape', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.download_shape(param_name, param_slide_index, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_shape', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_shape', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('download_shape', 'shape_index')

    def test_download_shape_invalid_format(self):
        """Test case for download_shape with invalid format
        """
        param_name = self.get_test_value('download_shape', 'name', 'str')
        param_slide_index = self.get_test_value('download_shape', 'slide_index', 'int')
        param_shape_index = self.get_test_value('download_shape', 'shape_index', 'int')
        param_format = self.get_test_value('download_shape', 'format', 'str')
        param_options = self.get_test_value('download_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_shape', 'bounds', 'str')
        param_password = self.get_test_value('download_shape', 'password', 'str')
        param_folder = self.get_test_value('download_shape', 'folder', 'str')
        param_storage = self.get_test_value('download_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_shape', 'fonts_folder', 'str')
        param_format = self.get_invalid_test_value('download_shape', 'format', param_format, 'str')
        self.initialize('download_shape', 'format', param_format)
        ok = False
        try:
            self.api.download_shape(param_name, param_slide_index, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_shape', 'format', param_format)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_shape', 'format', param_format)
        if ok:
            self.assert_no_exception('download_shape', 'format')

    def test_download_shape_invalid_options(self):
        """Test case for download_shape with invalid options
        """
        param_name = self.get_test_value('download_shape', 'name', 'str')
        param_slide_index = self.get_test_value('download_shape', 'slide_index', 'int')
        param_shape_index = self.get_test_value('download_shape', 'shape_index', 'int')
        param_format = self.get_test_value('download_shape', 'format', 'str')
        param_options = self.get_test_value('download_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_shape', 'bounds', 'str')
        param_password = self.get_test_value('download_shape', 'password', 'str')
        param_folder = self.get_test_value('download_shape', 'folder', 'str')
        param_storage = self.get_test_value('download_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_shape', 'fonts_folder', 'str')
        param_options = self.get_invalid_test_value('download_shape', 'options', param_options, 'IShapeExportOptions')
        self.initialize('download_shape', 'options', param_options)
        ok = False
        try:
            self.api.download_shape(param_name, param_slide_index, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_shape', 'options', param_options)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_shape', 'options', param_options)
        if ok:
            self.assert_no_exception('download_shape', 'options')

    def test_download_shape_invalid_scale_x(self):
        """Test case for download_shape with invalid scale_x
        """
        param_name = self.get_test_value('download_shape', 'name', 'str')
        param_slide_index = self.get_test_value('download_shape', 'slide_index', 'int')
        param_shape_index = self.get_test_value('download_shape', 'shape_index', 'int')
        param_format = self.get_test_value('download_shape', 'format', 'str')
        param_options = self.get_test_value('download_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_shape', 'bounds', 'str')
        param_password = self.get_test_value('download_shape', 'password', 'str')
        param_folder = self.get_test_value('download_shape', 'folder', 'str')
        param_storage = self.get_test_value('download_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_shape', 'fonts_folder', 'str')
        param_scale_x = self.get_invalid_test_value('download_shape', 'scale_x', param_scale_x, 'float')
        self.initialize('download_shape', 'scale_x', param_scale_x)
        ok = False
        try:
            self.api.download_shape(param_name, param_slide_index, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_shape', 'scale_x', param_scale_x)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_shape', 'scale_x', param_scale_x)
        if ok:
            self.assert_no_exception('download_shape', 'scale_x')

    def test_download_shape_invalid_scale_y(self):
        """Test case for download_shape with invalid scale_y
        """
        param_name = self.get_test_value('download_shape', 'name', 'str')
        param_slide_index = self.get_test_value('download_shape', 'slide_index', 'int')
        param_shape_index = self.get_test_value('download_shape', 'shape_index', 'int')
        param_format = self.get_test_value('download_shape', 'format', 'str')
        param_options = self.get_test_value('download_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_shape', 'bounds', 'str')
        param_password = self.get_test_value('download_shape', 'password', 'str')
        param_folder = self.get_test_value('download_shape', 'folder', 'str')
        param_storage = self.get_test_value('download_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_shape', 'fonts_folder', 'str')
        param_scale_y = self.get_invalid_test_value('download_shape', 'scale_y', param_scale_y, 'float')
        self.initialize('download_shape', 'scale_y', param_scale_y)
        ok = False
        try:
            self.api.download_shape(param_name, param_slide_index, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_shape', 'scale_y', param_scale_y)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_shape', 'scale_y', param_scale_y)
        if ok:
            self.assert_no_exception('download_shape', 'scale_y')

    def test_download_shape_invalid_bounds(self):
        """Test case for download_shape with invalid bounds
        """
        param_name = self.get_test_value('download_shape', 'name', 'str')
        param_slide_index = self.get_test_value('download_shape', 'slide_index', 'int')
        param_shape_index = self.get_test_value('download_shape', 'shape_index', 'int')
        param_format = self.get_test_value('download_shape', 'format', 'str')
        param_options = self.get_test_value('download_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_shape', 'bounds', 'str')
        param_password = self.get_test_value('download_shape', 'password', 'str')
        param_folder = self.get_test_value('download_shape', 'folder', 'str')
        param_storage = self.get_test_value('download_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_shape', 'fonts_folder', 'str')
        param_bounds = self.get_invalid_test_value('download_shape', 'bounds', param_bounds, 'str')
        self.initialize('download_shape', 'bounds', param_bounds)
        ok = False
        try:
            self.api.download_shape(param_name, param_slide_index, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_shape', 'bounds', param_bounds)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_shape', 'bounds', param_bounds)
        if ok:
            self.assert_no_exception('download_shape', 'bounds')

    def test_download_shape_invalid_password(self):
        """Test case for download_shape with invalid password
        """
        param_name = self.get_test_value('download_shape', 'name', 'str')
        param_slide_index = self.get_test_value('download_shape', 'slide_index', 'int')
        param_shape_index = self.get_test_value('download_shape', 'shape_index', 'int')
        param_format = self.get_test_value('download_shape', 'format', 'str')
        param_options = self.get_test_value('download_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_shape', 'bounds', 'str')
        param_password = self.get_test_value('download_shape', 'password', 'str')
        param_folder = self.get_test_value('download_shape', 'folder', 'str')
        param_storage = self.get_test_value('download_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_shape', 'fonts_folder', 'str')
        param_password = self.get_invalid_test_value('download_shape', 'password', param_password, 'str')
        self.initialize('download_shape', 'password', param_password)
        ok = False
        try:
            self.api.download_shape(param_name, param_slide_index, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_shape', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_shape', 'password', param_password)
        if ok:
            self.assert_no_exception('download_shape', 'password')

    def test_download_shape_invalid_folder(self):
        """Test case for download_shape with invalid folder
        """
        param_name = self.get_test_value('download_shape', 'name', 'str')
        param_slide_index = self.get_test_value('download_shape', 'slide_index', 'int')
        param_shape_index = self.get_test_value('download_shape', 'shape_index', 'int')
        param_format = self.get_test_value('download_shape', 'format', 'str')
        param_options = self.get_test_value('download_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_shape', 'bounds', 'str')
        param_password = self.get_test_value('download_shape', 'password', 'str')
        param_folder = self.get_test_value('download_shape', 'folder', 'str')
        param_storage = self.get_test_value('download_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_shape', 'fonts_folder', 'str')
        param_folder = self.get_invalid_test_value('download_shape', 'folder', param_folder, 'str')
        self.initialize('download_shape', 'folder', param_folder)
        ok = False
        try:
            self.api.download_shape(param_name, param_slide_index, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_shape', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_shape', 'folder', param_folder)
        if ok:
            self.assert_no_exception('download_shape', 'folder')

    def test_download_shape_invalid_storage(self):
        """Test case for download_shape with invalid storage
        """
        param_name = self.get_test_value('download_shape', 'name', 'str')
        param_slide_index = self.get_test_value('download_shape', 'slide_index', 'int')
        param_shape_index = self.get_test_value('download_shape', 'shape_index', 'int')
        param_format = self.get_test_value('download_shape', 'format', 'str')
        param_options = self.get_test_value('download_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_shape', 'bounds', 'str')
        param_password = self.get_test_value('download_shape', 'password', 'str')
        param_folder = self.get_test_value('download_shape', 'folder', 'str')
        param_storage = self.get_test_value('download_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_shape', 'fonts_folder', 'str')
        param_storage = self.get_invalid_test_value('download_shape', 'storage', param_storage, 'str')
        self.initialize('download_shape', 'storage', param_storage)
        ok = False
        try:
            self.api.download_shape(param_name, param_slide_index, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_shape', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_shape', 'storage', param_storage)
        if ok:
            self.assert_no_exception('download_shape', 'storage')

    def test_download_shape_invalid_fonts_folder(self):
        """Test case for download_shape with invalid fonts_folder
        """
        param_name = self.get_test_value('download_shape', 'name', 'str')
        param_slide_index = self.get_test_value('download_shape', 'slide_index', 'int')
        param_shape_index = self.get_test_value('download_shape', 'shape_index', 'int')
        param_format = self.get_test_value('download_shape', 'format', 'str')
        param_options = self.get_test_value('download_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_shape', 'bounds', 'str')
        param_password = self.get_test_value('download_shape', 'password', 'str')
        param_folder = self.get_test_value('download_shape', 'folder', 'str')
        param_storage = self.get_test_value('download_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_shape', 'fonts_folder', 'str')
        param_fonts_folder = self.get_invalid_test_value('download_shape', 'fonts_folder', param_fonts_folder, 'str')
        self.initialize('download_shape', 'fonts_folder', param_fonts_folder)
        ok = False
        try:
            self.api.download_shape(param_name, param_slide_index, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_shape', 'fonts_folder', param_fonts_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_shape', 'fonts_folder', param_fonts_folder)
        if ok:
            self.assert_no_exception('download_shape', 'fonts_folder')

    def test_download_shape_online(self):
        """Test case for download_shape_online
        """
        param_document = self.get_test_value('download_shape_online', 'document', 'file')
        param_slide_index = self.get_test_value('download_shape_online', 'slide_index', 'int')
        param_shape_index = self.get_test_value('download_shape_online', 'shape_index', 'int')
        param_format = self.get_test_value('download_shape_online', 'format', 'str')
        param_scale_x = self.get_test_value('download_shape_online', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_shape_online', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_shape_online', 'bounds', 'str')
        param_password = self.get_test_value('download_shape_online', 'password', 'str')
        param_storage = self.get_test_value('download_shape_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_shape_online', 'fonts_folder', 'str')
        param_options = self.get_test_value('download_shape_online', 'options', 'IShapeExportOptions')
        self.initialize('download_shape_online', None, None)
        response = self.api.download_shape_online(param_document, param_slide_index, param_shape_index, param_format, param_scale_x, param_scale_y, param_bounds, param_password, param_storage, param_fonts_folder, param_options)
        self.assertTrue(isinstance(response, str))
        self.assertTrue(len(response) > 0)

    def test_download_shape_online_invalid_document(self):
        """Test case for download_shape_online with invalid document
        """
        param_document = self.get_test_value('download_shape_online', 'document', 'file')
        param_slide_index = self.get_test_value('download_shape_online', 'slide_index', 'int')
        param_shape_index = self.get_test_value('download_shape_online', 'shape_index', 'int')
        param_format = self.get_test_value('download_shape_online', 'format', 'str')
        param_scale_x = self.get_test_value('download_shape_online', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_shape_online', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_shape_online', 'bounds', 'str')
        param_password = self.get_test_value('download_shape_online', 'password', 'str')
        param_storage = self.get_test_value('download_shape_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_shape_online', 'fonts_folder', 'str')
        param_options = self.get_test_value('download_shape_online', 'options', 'IShapeExportOptions')
        param_document = self.get_invalid_test_value('download_shape_online', 'document', param_document, 'file')
        self.initialize('download_shape_online', 'document', param_document)
        ok = False
        try:
            self.api.download_shape_online(param_document, param_slide_index, param_shape_index, param_format, param_scale_x, param_scale_y, param_bounds, param_password, param_storage, param_fonts_folder, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_shape_online', 'document', param_document)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_shape_online', 'document', param_document)
        if ok:
            self.assert_no_exception('download_shape_online', 'document')

    def test_download_shape_online_invalid_slide_index(self):
        """Test case for download_shape_online with invalid slide_index
        """
        param_document = self.get_test_value('download_shape_online', 'document', 'file')
        param_slide_index = self.get_test_value('download_shape_online', 'slide_index', 'int')
        param_shape_index = self.get_test_value('download_shape_online', 'shape_index', 'int')
        param_format = self.get_test_value('download_shape_online', 'format', 'str')
        param_scale_x = self.get_test_value('download_shape_online', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_shape_online', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_shape_online', 'bounds', 'str')
        param_password = self.get_test_value('download_shape_online', 'password', 'str')
        param_storage = self.get_test_value('download_shape_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_shape_online', 'fonts_folder', 'str')
        param_options = self.get_test_value('download_shape_online', 'options', 'IShapeExportOptions')
        param_slide_index = self.get_invalid_test_value('download_shape_online', 'slide_index', param_slide_index, 'int')
        self.initialize('download_shape_online', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.download_shape_online(param_document, param_slide_index, param_shape_index, param_format, param_scale_x, param_scale_y, param_bounds, param_password, param_storage, param_fonts_folder, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_shape_online', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_shape_online', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('download_shape_online', 'slide_index')

    def test_download_shape_online_invalid_shape_index(self):
        """Test case for download_shape_online with invalid shape_index
        """
        param_document = self.get_test_value('download_shape_online', 'document', 'file')
        param_slide_index = self.get_test_value('download_shape_online', 'slide_index', 'int')
        param_shape_index = self.get_test_value('download_shape_online', 'shape_index', 'int')
        param_format = self.get_test_value('download_shape_online', 'format', 'str')
        param_scale_x = self.get_test_value('download_shape_online', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_shape_online', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_shape_online', 'bounds', 'str')
        param_password = self.get_test_value('download_shape_online', 'password', 'str')
        param_storage = self.get_test_value('download_shape_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_shape_online', 'fonts_folder', 'str')
        param_options = self.get_test_value('download_shape_online', 'options', 'IShapeExportOptions')
        param_shape_index = self.get_invalid_test_value('download_shape_online', 'shape_index', param_shape_index, 'int')
        self.initialize('download_shape_online', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.download_shape_online(param_document, param_slide_index, param_shape_index, param_format, param_scale_x, param_scale_y, param_bounds, param_password, param_storage, param_fonts_folder, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_shape_online', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_shape_online', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('download_shape_online', 'shape_index')

    def test_download_shape_online_invalid_format(self):
        """Test case for download_shape_online with invalid format
        """
        param_document = self.get_test_value('download_shape_online', 'document', 'file')
        param_slide_index = self.get_test_value('download_shape_online', 'slide_index', 'int')
        param_shape_index = self.get_test_value('download_shape_online', 'shape_index', 'int')
        param_format = self.get_test_value('download_shape_online', 'format', 'str')
        param_scale_x = self.get_test_value('download_shape_online', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_shape_online', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_shape_online', 'bounds', 'str')
        param_password = self.get_test_value('download_shape_online', 'password', 'str')
        param_storage = self.get_test_value('download_shape_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_shape_online', 'fonts_folder', 'str')
        param_options = self.get_test_value('download_shape_online', 'options', 'IShapeExportOptions')
        param_format = self.get_invalid_test_value('download_shape_online', 'format', param_format, 'str')
        self.initialize('download_shape_online', 'format', param_format)
        ok = False
        try:
            self.api.download_shape_online(param_document, param_slide_index, param_shape_index, param_format, param_scale_x, param_scale_y, param_bounds, param_password, param_storage, param_fonts_folder, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_shape_online', 'format', param_format)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_shape_online', 'format', param_format)
        if ok:
            self.assert_no_exception('download_shape_online', 'format')

    def test_download_shape_online_invalid_scale_x(self):
        """Test case for download_shape_online with invalid scale_x
        """
        param_document = self.get_test_value('download_shape_online', 'document', 'file')
        param_slide_index = self.get_test_value('download_shape_online', 'slide_index', 'int')
        param_shape_index = self.get_test_value('download_shape_online', 'shape_index', 'int')
        param_format = self.get_test_value('download_shape_online', 'format', 'str')
        param_scale_x = self.get_test_value('download_shape_online', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_shape_online', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_shape_online', 'bounds', 'str')
        param_password = self.get_test_value('download_shape_online', 'password', 'str')
        param_storage = self.get_test_value('download_shape_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_shape_online', 'fonts_folder', 'str')
        param_options = self.get_test_value('download_shape_online', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_invalid_test_value('download_shape_online', 'scale_x', param_scale_x, 'float')
        self.initialize('download_shape_online', 'scale_x', param_scale_x)
        ok = False
        try:
            self.api.download_shape_online(param_document, param_slide_index, param_shape_index, param_format, param_scale_x, param_scale_y, param_bounds, param_password, param_storage, param_fonts_folder, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_shape_online', 'scale_x', param_scale_x)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_shape_online', 'scale_x', param_scale_x)
        if ok:
            self.assert_no_exception('download_shape_online', 'scale_x')

    def test_download_shape_online_invalid_scale_y(self):
        """Test case for download_shape_online with invalid scale_y
        """
        param_document = self.get_test_value('download_shape_online', 'document', 'file')
        param_slide_index = self.get_test_value('download_shape_online', 'slide_index', 'int')
        param_shape_index = self.get_test_value('download_shape_online', 'shape_index', 'int')
        param_format = self.get_test_value('download_shape_online', 'format', 'str')
        param_scale_x = self.get_test_value('download_shape_online', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_shape_online', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_shape_online', 'bounds', 'str')
        param_password = self.get_test_value('download_shape_online', 'password', 'str')
        param_storage = self.get_test_value('download_shape_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_shape_online', 'fonts_folder', 'str')
        param_options = self.get_test_value('download_shape_online', 'options', 'IShapeExportOptions')
        param_scale_y = self.get_invalid_test_value('download_shape_online', 'scale_y', param_scale_y, 'float')
        self.initialize('download_shape_online', 'scale_y', param_scale_y)
        ok = False
        try:
            self.api.download_shape_online(param_document, param_slide_index, param_shape_index, param_format, param_scale_x, param_scale_y, param_bounds, param_password, param_storage, param_fonts_folder, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_shape_online', 'scale_y', param_scale_y)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_shape_online', 'scale_y', param_scale_y)
        if ok:
            self.assert_no_exception('download_shape_online', 'scale_y')

    def test_download_shape_online_invalid_bounds(self):
        """Test case for download_shape_online with invalid bounds
        """
        param_document = self.get_test_value('download_shape_online', 'document', 'file')
        param_slide_index = self.get_test_value('download_shape_online', 'slide_index', 'int')
        param_shape_index = self.get_test_value('download_shape_online', 'shape_index', 'int')
        param_format = self.get_test_value('download_shape_online', 'format', 'str')
        param_scale_x = self.get_test_value('download_shape_online', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_shape_online', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_shape_online', 'bounds', 'str')
        param_password = self.get_test_value('download_shape_online', 'password', 'str')
        param_storage = self.get_test_value('download_shape_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_shape_online', 'fonts_folder', 'str')
        param_options = self.get_test_value('download_shape_online', 'options', 'IShapeExportOptions')
        param_bounds = self.get_invalid_test_value('download_shape_online', 'bounds', param_bounds, 'str')
        self.initialize('download_shape_online', 'bounds', param_bounds)
        ok = False
        try:
            self.api.download_shape_online(param_document, param_slide_index, param_shape_index, param_format, param_scale_x, param_scale_y, param_bounds, param_password, param_storage, param_fonts_folder, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_shape_online', 'bounds', param_bounds)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_shape_online', 'bounds', param_bounds)
        if ok:
            self.assert_no_exception('download_shape_online', 'bounds')

    def test_download_shape_online_invalid_password(self):
        """Test case for download_shape_online with invalid password
        """
        param_document = self.get_test_value('download_shape_online', 'document', 'file')
        param_slide_index = self.get_test_value('download_shape_online', 'slide_index', 'int')
        param_shape_index = self.get_test_value('download_shape_online', 'shape_index', 'int')
        param_format = self.get_test_value('download_shape_online', 'format', 'str')
        param_scale_x = self.get_test_value('download_shape_online', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_shape_online', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_shape_online', 'bounds', 'str')
        param_password = self.get_test_value('download_shape_online', 'password', 'str')
        param_storage = self.get_test_value('download_shape_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_shape_online', 'fonts_folder', 'str')
        param_options = self.get_test_value('download_shape_online', 'options', 'IShapeExportOptions')
        param_password = self.get_invalid_test_value('download_shape_online', 'password', param_password, 'str')
        self.initialize('download_shape_online', 'password', param_password)
        ok = False
        try:
            self.api.download_shape_online(param_document, param_slide_index, param_shape_index, param_format, param_scale_x, param_scale_y, param_bounds, param_password, param_storage, param_fonts_folder, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_shape_online', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_shape_online', 'password', param_password)
        if ok:
            self.assert_no_exception('download_shape_online', 'password')

    def test_download_shape_online_invalid_storage(self):
        """Test case for download_shape_online with invalid storage
        """
        param_document = self.get_test_value('download_shape_online', 'document', 'file')
        param_slide_index = self.get_test_value('download_shape_online', 'slide_index', 'int')
        param_shape_index = self.get_test_value('download_shape_online', 'shape_index', 'int')
        param_format = self.get_test_value('download_shape_online', 'format', 'str')
        param_scale_x = self.get_test_value('download_shape_online', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_shape_online', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_shape_online', 'bounds', 'str')
        param_password = self.get_test_value('download_shape_online', 'password', 'str')
        param_storage = self.get_test_value('download_shape_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_shape_online', 'fonts_folder', 'str')
        param_options = self.get_test_value('download_shape_online', 'options', 'IShapeExportOptions')
        param_storage = self.get_invalid_test_value('download_shape_online', 'storage', param_storage, 'str')
        self.initialize('download_shape_online', 'storage', param_storage)
        ok = False
        try:
            self.api.download_shape_online(param_document, param_slide_index, param_shape_index, param_format, param_scale_x, param_scale_y, param_bounds, param_password, param_storage, param_fonts_folder, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_shape_online', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_shape_online', 'storage', param_storage)
        if ok:
            self.assert_no_exception('download_shape_online', 'storage')

    def test_download_shape_online_invalid_fonts_folder(self):
        """Test case for download_shape_online with invalid fonts_folder
        """
        param_document = self.get_test_value('download_shape_online', 'document', 'file')
        param_slide_index = self.get_test_value('download_shape_online', 'slide_index', 'int')
        param_shape_index = self.get_test_value('download_shape_online', 'shape_index', 'int')
        param_format = self.get_test_value('download_shape_online', 'format', 'str')
        param_scale_x = self.get_test_value('download_shape_online', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_shape_online', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_shape_online', 'bounds', 'str')
        param_password = self.get_test_value('download_shape_online', 'password', 'str')
        param_storage = self.get_test_value('download_shape_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_shape_online', 'fonts_folder', 'str')
        param_options = self.get_test_value('download_shape_online', 'options', 'IShapeExportOptions')
        param_fonts_folder = self.get_invalid_test_value('download_shape_online', 'fonts_folder', param_fonts_folder, 'str')
        self.initialize('download_shape_online', 'fonts_folder', param_fonts_folder)
        ok = False
        try:
            self.api.download_shape_online(param_document, param_slide_index, param_shape_index, param_format, param_scale_x, param_scale_y, param_bounds, param_password, param_storage, param_fonts_folder, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_shape_online', 'fonts_folder', param_fonts_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_shape_online', 'fonts_folder', param_fonts_folder)
        if ok:
            self.assert_no_exception('download_shape_online', 'fonts_folder')

    def test_download_shape_online_invalid_options(self):
        """Test case for download_shape_online with invalid options
        """
        param_document = self.get_test_value('download_shape_online', 'document', 'file')
        param_slide_index = self.get_test_value('download_shape_online', 'slide_index', 'int')
        param_shape_index = self.get_test_value('download_shape_online', 'shape_index', 'int')
        param_format = self.get_test_value('download_shape_online', 'format', 'str')
        param_scale_x = self.get_test_value('download_shape_online', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_shape_online', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_shape_online', 'bounds', 'str')
        param_password = self.get_test_value('download_shape_online', 'password', 'str')
        param_storage = self.get_test_value('download_shape_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_shape_online', 'fonts_folder', 'str')
        param_options = self.get_test_value('download_shape_online', 'options', 'IShapeExportOptions')
        param_options = self.get_invalid_test_value('download_shape_online', 'options', param_options, 'IShapeExportOptions')
        self.initialize('download_shape_online', 'options', param_options)
        ok = False
        try:
            self.api.download_shape_online(param_document, param_slide_index, param_shape_index, param_format, param_scale_x, param_scale_y, param_bounds, param_password, param_storage, param_fonts_folder, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_shape_online', 'options', param_options)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_shape_online', 'options', param_options)
        if ok:
            self.assert_no_exception('download_shape_online', 'options')

    def test_download_slide(self):
        """Test case for download_slide
        """
        param_name = self.get_test_value('download_slide', 'name', 'str')
        param_slide_index = self.get_test_value('download_slide', 'slide_index', 'int')
        param_format = self.get_test_value('download_slide', 'format', 'str')
        param_options = self.get_test_value('download_slide', 'options', 'ExportOptions')
        param_width = self.get_test_value('download_slide', 'width', 'int')
        param_height = self.get_test_value('download_slide', 'height', 'int')
        param_password = self.get_test_value('download_slide', 'password', 'str')
        param_folder = self.get_test_value('download_slide', 'folder', 'str')
        param_storage = self.get_test_value('download_slide', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_slide', 'fonts_folder', 'str')
        self.initialize('download_slide', None, None)
        response = self.api.download_slide(param_name, param_slide_index, param_format, param_options, param_width, param_height, param_password, param_folder, param_storage, param_fonts_folder)
        self.assertTrue(isinstance(response, str))
        self.assertTrue(len(response) > 0)

    def test_download_slide_invalid_name(self):
        """Test case for download_slide with invalid name
        """
        param_name = self.get_test_value('download_slide', 'name', 'str')
        param_slide_index = self.get_test_value('download_slide', 'slide_index', 'int')
        param_format = self.get_test_value('download_slide', 'format', 'str')
        param_options = self.get_test_value('download_slide', 'options', 'ExportOptions')
        param_width = self.get_test_value('download_slide', 'width', 'int')
        param_height = self.get_test_value('download_slide', 'height', 'int')
        param_password = self.get_test_value('download_slide', 'password', 'str')
        param_folder = self.get_test_value('download_slide', 'folder', 'str')
        param_storage = self.get_test_value('download_slide', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_slide', 'fonts_folder', 'str')
        param_name = self.get_invalid_test_value('download_slide', 'name', param_name, 'str')
        self.initialize('download_slide', 'name', param_name)
        ok = False
        try:
            self.api.download_slide(param_name, param_slide_index, param_format, param_options, param_width, param_height, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_slide', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_slide', 'name', param_name)
        if ok:
            self.assert_no_exception('download_slide', 'name')

    def test_download_slide_invalid_slide_index(self):
        """Test case for download_slide with invalid slide_index
        """
        param_name = self.get_test_value('download_slide', 'name', 'str')
        param_slide_index = self.get_test_value('download_slide', 'slide_index', 'int')
        param_format = self.get_test_value('download_slide', 'format', 'str')
        param_options = self.get_test_value('download_slide', 'options', 'ExportOptions')
        param_width = self.get_test_value('download_slide', 'width', 'int')
        param_height = self.get_test_value('download_slide', 'height', 'int')
        param_password = self.get_test_value('download_slide', 'password', 'str')
        param_folder = self.get_test_value('download_slide', 'folder', 'str')
        param_storage = self.get_test_value('download_slide', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_slide', 'fonts_folder', 'str')
        param_slide_index = self.get_invalid_test_value('download_slide', 'slide_index', param_slide_index, 'int')
        self.initialize('download_slide', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.download_slide(param_name, param_slide_index, param_format, param_options, param_width, param_height, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_slide', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_slide', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('download_slide', 'slide_index')

    def test_download_slide_invalid_format(self):
        """Test case for download_slide with invalid format
        """
        param_name = self.get_test_value('download_slide', 'name', 'str')
        param_slide_index = self.get_test_value('download_slide', 'slide_index', 'int')
        param_format = self.get_test_value('download_slide', 'format', 'str')
        param_options = self.get_test_value('download_slide', 'options', 'ExportOptions')
        param_width = self.get_test_value('download_slide', 'width', 'int')
        param_height = self.get_test_value('download_slide', 'height', 'int')
        param_password = self.get_test_value('download_slide', 'password', 'str')
        param_folder = self.get_test_value('download_slide', 'folder', 'str')
        param_storage = self.get_test_value('download_slide', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_slide', 'fonts_folder', 'str')
        param_format = self.get_invalid_test_value('download_slide', 'format', param_format, 'str')
        self.initialize('download_slide', 'format', param_format)
        ok = False
        try:
            self.api.download_slide(param_name, param_slide_index, param_format, param_options, param_width, param_height, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_slide', 'format', param_format)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_slide', 'format', param_format)
        if ok:
            self.assert_no_exception('download_slide', 'format')

    def test_download_slide_invalid_options(self):
        """Test case for download_slide with invalid options
        """
        param_name = self.get_test_value('download_slide', 'name', 'str')
        param_slide_index = self.get_test_value('download_slide', 'slide_index', 'int')
        param_format = self.get_test_value('download_slide', 'format', 'str')
        param_options = self.get_test_value('download_slide', 'options', 'ExportOptions')
        param_width = self.get_test_value('download_slide', 'width', 'int')
        param_height = self.get_test_value('download_slide', 'height', 'int')
        param_password = self.get_test_value('download_slide', 'password', 'str')
        param_folder = self.get_test_value('download_slide', 'folder', 'str')
        param_storage = self.get_test_value('download_slide', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_slide', 'fonts_folder', 'str')
        param_options = self.get_invalid_test_value('download_slide', 'options', param_options, 'ExportOptions')
        self.initialize('download_slide', 'options', param_options)
        ok = False
        try:
            self.api.download_slide(param_name, param_slide_index, param_format, param_options, param_width, param_height, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_slide', 'options', param_options)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_slide', 'options', param_options)
        if ok:
            self.assert_no_exception('download_slide', 'options')

    def test_download_slide_invalid_width(self):
        """Test case for download_slide with invalid width
        """
        param_name = self.get_test_value('download_slide', 'name', 'str')
        param_slide_index = self.get_test_value('download_slide', 'slide_index', 'int')
        param_format = self.get_test_value('download_slide', 'format', 'str')
        param_options = self.get_test_value('download_slide', 'options', 'ExportOptions')
        param_width = self.get_test_value('download_slide', 'width', 'int')
        param_height = self.get_test_value('download_slide', 'height', 'int')
        param_password = self.get_test_value('download_slide', 'password', 'str')
        param_folder = self.get_test_value('download_slide', 'folder', 'str')
        param_storage = self.get_test_value('download_slide', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_slide', 'fonts_folder', 'str')
        param_width = self.get_invalid_test_value('download_slide', 'width', param_width, 'int')
        self.initialize('download_slide', 'width', param_width)
        ok = False
        try:
            self.api.download_slide(param_name, param_slide_index, param_format, param_options, param_width, param_height, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_slide', 'width', param_width)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_slide', 'width', param_width)
        if ok:
            self.assert_no_exception('download_slide', 'width')

    def test_download_slide_invalid_height(self):
        """Test case for download_slide with invalid height
        """
        param_name = self.get_test_value('download_slide', 'name', 'str')
        param_slide_index = self.get_test_value('download_slide', 'slide_index', 'int')
        param_format = self.get_test_value('download_slide', 'format', 'str')
        param_options = self.get_test_value('download_slide', 'options', 'ExportOptions')
        param_width = self.get_test_value('download_slide', 'width', 'int')
        param_height = self.get_test_value('download_slide', 'height', 'int')
        param_password = self.get_test_value('download_slide', 'password', 'str')
        param_folder = self.get_test_value('download_slide', 'folder', 'str')
        param_storage = self.get_test_value('download_slide', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_slide', 'fonts_folder', 'str')
        param_height = self.get_invalid_test_value('download_slide', 'height', param_height, 'int')
        self.initialize('download_slide', 'height', param_height)
        ok = False
        try:
            self.api.download_slide(param_name, param_slide_index, param_format, param_options, param_width, param_height, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_slide', 'height', param_height)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_slide', 'height', param_height)
        if ok:
            self.assert_no_exception('download_slide', 'height')

    def test_download_slide_invalid_password(self):
        """Test case for download_slide with invalid password
        """
        param_name = self.get_test_value('download_slide', 'name', 'str')
        param_slide_index = self.get_test_value('download_slide', 'slide_index', 'int')
        param_format = self.get_test_value('download_slide', 'format', 'str')
        param_options = self.get_test_value('download_slide', 'options', 'ExportOptions')
        param_width = self.get_test_value('download_slide', 'width', 'int')
        param_height = self.get_test_value('download_slide', 'height', 'int')
        param_password = self.get_test_value('download_slide', 'password', 'str')
        param_folder = self.get_test_value('download_slide', 'folder', 'str')
        param_storage = self.get_test_value('download_slide', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_slide', 'fonts_folder', 'str')
        param_password = self.get_invalid_test_value('download_slide', 'password', param_password, 'str')
        self.initialize('download_slide', 'password', param_password)
        ok = False
        try:
            self.api.download_slide(param_name, param_slide_index, param_format, param_options, param_width, param_height, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_slide', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_slide', 'password', param_password)
        if ok:
            self.assert_no_exception('download_slide', 'password')

    def test_download_slide_invalid_folder(self):
        """Test case for download_slide with invalid folder
        """
        param_name = self.get_test_value('download_slide', 'name', 'str')
        param_slide_index = self.get_test_value('download_slide', 'slide_index', 'int')
        param_format = self.get_test_value('download_slide', 'format', 'str')
        param_options = self.get_test_value('download_slide', 'options', 'ExportOptions')
        param_width = self.get_test_value('download_slide', 'width', 'int')
        param_height = self.get_test_value('download_slide', 'height', 'int')
        param_password = self.get_test_value('download_slide', 'password', 'str')
        param_folder = self.get_test_value('download_slide', 'folder', 'str')
        param_storage = self.get_test_value('download_slide', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_slide', 'fonts_folder', 'str')
        param_folder = self.get_invalid_test_value('download_slide', 'folder', param_folder, 'str')
        self.initialize('download_slide', 'folder', param_folder)
        ok = False
        try:
            self.api.download_slide(param_name, param_slide_index, param_format, param_options, param_width, param_height, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_slide', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_slide', 'folder', param_folder)
        if ok:
            self.assert_no_exception('download_slide', 'folder')

    def test_download_slide_invalid_storage(self):
        """Test case for download_slide with invalid storage
        """
        param_name = self.get_test_value('download_slide', 'name', 'str')
        param_slide_index = self.get_test_value('download_slide', 'slide_index', 'int')
        param_format = self.get_test_value('download_slide', 'format', 'str')
        param_options = self.get_test_value('download_slide', 'options', 'ExportOptions')
        param_width = self.get_test_value('download_slide', 'width', 'int')
        param_height = self.get_test_value('download_slide', 'height', 'int')
        param_password = self.get_test_value('download_slide', 'password', 'str')
        param_folder = self.get_test_value('download_slide', 'folder', 'str')
        param_storage = self.get_test_value('download_slide', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_slide', 'fonts_folder', 'str')
        param_storage = self.get_invalid_test_value('download_slide', 'storage', param_storage, 'str')
        self.initialize('download_slide', 'storage', param_storage)
        ok = False
        try:
            self.api.download_slide(param_name, param_slide_index, param_format, param_options, param_width, param_height, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_slide', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_slide', 'storage', param_storage)
        if ok:
            self.assert_no_exception('download_slide', 'storage')

    def test_download_slide_invalid_fonts_folder(self):
        """Test case for download_slide with invalid fonts_folder
        """
        param_name = self.get_test_value('download_slide', 'name', 'str')
        param_slide_index = self.get_test_value('download_slide', 'slide_index', 'int')
        param_format = self.get_test_value('download_slide', 'format', 'str')
        param_options = self.get_test_value('download_slide', 'options', 'ExportOptions')
        param_width = self.get_test_value('download_slide', 'width', 'int')
        param_height = self.get_test_value('download_slide', 'height', 'int')
        param_password = self.get_test_value('download_slide', 'password', 'str')
        param_folder = self.get_test_value('download_slide', 'folder', 'str')
        param_storage = self.get_test_value('download_slide', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_slide', 'fonts_folder', 'str')
        param_fonts_folder = self.get_invalid_test_value('download_slide', 'fonts_folder', param_fonts_folder, 'str')
        self.initialize('download_slide', 'fonts_folder', param_fonts_folder)
        ok = False
        try:
            self.api.download_slide(param_name, param_slide_index, param_format, param_options, param_width, param_height, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_slide', 'fonts_folder', param_fonts_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_slide', 'fonts_folder', param_fonts_folder)
        if ok:
            self.assert_no_exception('download_slide', 'fonts_folder')

    def test_download_slide_online(self):
        """Test case for download_slide_online
        """
        param_document = self.get_test_value('download_slide_online', 'document', 'file')
        param_slide_index = self.get_test_value('download_slide_online', 'slide_index', 'int')
        param_format = self.get_test_value('download_slide_online', 'format', 'str')
        param_width = self.get_test_value('download_slide_online', 'width', 'int')
        param_height = self.get_test_value('download_slide_online', 'height', 'int')
        param_password = self.get_test_value('download_slide_online', 'password', 'str')
        param_storage = self.get_test_value('download_slide_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_slide_online', 'fonts_folder', 'str')
        param_options = self.get_test_value('download_slide_online', 'options', 'ExportOptions')
        self.initialize('download_slide_online', None, None)
        response = self.api.download_slide_online(param_document, param_slide_index, param_format, param_width, param_height, param_password, param_storage, param_fonts_folder, param_options)
        self.assertTrue(isinstance(response, str))
        self.assertTrue(len(response) > 0)

    def test_download_slide_online_invalid_document(self):
        """Test case for download_slide_online with invalid document
        """
        param_document = self.get_test_value('download_slide_online', 'document', 'file')
        param_slide_index = self.get_test_value('download_slide_online', 'slide_index', 'int')
        param_format = self.get_test_value('download_slide_online', 'format', 'str')
        param_width = self.get_test_value('download_slide_online', 'width', 'int')
        param_height = self.get_test_value('download_slide_online', 'height', 'int')
        param_password = self.get_test_value('download_slide_online', 'password', 'str')
        param_storage = self.get_test_value('download_slide_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_slide_online', 'fonts_folder', 'str')
        param_options = self.get_test_value('download_slide_online', 'options', 'ExportOptions')
        param_document = self.get_invalid_test_value('download_slide_online', 'document', param_document, 'file')
        self.initialize('download_slide_online', 'document', param_document)
        ok = False
        try:
            self.api.download_slide_online(param_document, param_slide_index, param_format, param_width, param_height, param_password, param_storage, param_fonts_folder, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_slide_online', 'document', param_document)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_slide_online', 'document', param_document)
        if ok:
            self.assert_no_exception('download_slide_online', 'document')

    def test_download_slide_online_invalid_slide_index(self):
        """Test case for download_slide_online with invalid slide_index
        """
        param_document = self.get_test_value('download_slide_online', 'document', 'file')
        param_slide_index = self.get_test_value('download_slide_online', 'slide_index', 'int')
        param_format = self.get_test_value('download_slide_online', 'format', 'str')
        param_width = self.get_test_value('download_slide_online', 'width', 'int')
        param_height = self.get_test_value('download_slide_online', 'height', 'int')
        param_password = self.get_test_value('download_slide_online', 'password', 'str')
        param_storage = self.get_test_value('download_slide_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_slide_online', 'fonts_folder', 'str')
        param_options = self.get_test_value('download_slide_online', 'options', 'ExportOptions')
        param_slide_index = self.get_invalid_test_value('download_slide_online', 'slide_index', param_slide_index, 'int')
        self.initialize('download_slide_online', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.download_slide_online(param_document, param_slide_index, param_format, param_width, param_height, param_password, param_storage, param_fonts_folder, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_slide_online', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_slide_online', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('download_slide_online', 'slide_index')

    def test_download_slide_online_invalid_format(self):
        """Test case for download_slide_online with invalid format
        """
        param_document = self.get_test_value('download_slide_online', 'document', 'file')
        param_slide_index = self.get_test_value('download_slide_online', 'slide_index', 'int')
        param_format = self.get_test_value('download_slide_online', 'format', 'str')
        param_width = self.get_test_value('download_slide_online', 'width', 'int')
        param_height = self.get_test_value('download_slide_online', 'height', 'int')
        param_password = self.get_test_value('download_slide_online', 'password', 'str')
        param_storage = self.get_test_value('download_slide_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_slide_online', 'fonts_folder', 'str')
        param_options = self.get_test_value('download_slide_online', 'options', 'ExportOptions')
        param_format = self.get_invalid_test_value('download_slide_online', 'format', param_format, 'str')
        self.initialize('download_slide_online', 'format', param_format)
        ok = False
        try:
            self.api.download_slide_online(param_document, param_slide_index, param_format, param_width, param_height, param_password, param_storage, param_fonts_folder, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_slide_online', 'format', param_format)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_slide_online', 'format', param_format)
        if ok:
            self.assert_no_exception('download_slide_online', 'format')

    def test_download_slide_online_invalid_width(self):
        """Test case for download_slide_online with invalid width
        """
        param_document = self.get_test_value('download_slide_online', 'document', 'file')
        param_slide_index = self.get_test_value('download_slide_online', 'slide_index', 'int')
        param_format = self.get_test_value('download_slide_online', 'format', 'str')
        param_width = self.get_test_value('download_slide_online', 'width', 'int')
        param_height = self.get_test_value('download_slide_online', 'height', 'int')
        param_password = self.get_test_value('download_slide_online', 'password', 'str')
        param_storage = self.get_test_value('download_slide_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_slide_online', 'fonts_folder', 'str')
        param_options = self.get_test_value('download_slide_online', 'options', 'ExportOptions')
        param_width = self.get_invalid_test_value('download_slide_online', 'width', param_width, 'int')
        self.initialize('download_slide_online', 'width', param_width)
        ok = False
        try:
            self.api.download_slide_online(param_document, param_slide_index, param_format, param_width, param_height, param_password, param_storage, param_fonts_folder, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_slide_online', 'width', param_width)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_slide_online', 'width', param_width)
        if ok:
            self.assert_no_exception('download_slide_online', 'width')

    def test_download_slide_online_invalid_height(self):
        """Test case for download_slide_online with invalid height
        """
        param_document = self.get_test_value('download_slide_online', 'document', 'file')
        param_slide_index = self.get_test_value('download_slide_online', 'slide_index', 'int')
        param_format = self.get_test_value('download_slide_online', 'format', 'str')
        param_width = self.get_test_value('download_slide_online', 'width', 'int')
        param_height = self.get_test_value('download_slide_online', 'height', 'int')
        param_password = self.get_test_value('download_slide_online', 'password', 'str')
        param_storage = self.get_test_value('download_slide_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_slide_online', 'fonts_folder', 'str')
        param_options = self.get_test_value('download_slide_online', 'options', 'ExportOptions')
        param_height = self.get_invalid_test_value('download_slide_online', 'height', param_height, 'int')
        self.initialize('download_slide_online', 'height', param_height)
        ok = False
        try:
            self.api.download_slide_online(param_document, param_slide_index, param_format, param_width, param_height, param_password, param_storage, param_fonts_folder, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_slide_online', 'height', param_height)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_slide_online', 'height', param_height)
        if ok:
            self.assert_no_exception('download_slide_online', 'height')

    def test_download_slide_online_invalid_password(self):
        """Test case for download_slide_online with invalid password
        """
        param_document = self.get_test_value('download_slide_online', 'document', 'file')
        param_slide_index = self.get_test_value('download_slide_online', 'slide_index', 'int')
        param_format = self.get_test_value('download_slide_online', 'format', 'str')
        param_width = self.get_test_value('download_slide_online', 'width', 'int')
        param_height = self.get_test_value('download_slide_online', 'height', 'int')
        param_password = self.get_test_value('download_slide_online', 'password', 'str')
        param_storage = self.get_test_value('download_slide_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_slide_online', 'fonts_folder', 'str')
        param_options = self.get_test_value('download_slide_online', 'options', 'ExportOptions')
        param_password = self.get_invalid_test_value('download_slide_online', 'password', param_password, 'str')
        self.initialize('download_slide_online', 'password', param_password)
        ok = False
        try:
            self.api.download_slide_online(param_document, param_slide_index, param_format, param_width, param_height, param_password, param_storage, param_fonts_folder, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_slide_online', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_slide_online', 'password', param_password)
        if ok:
            self.assert_no_exception('download_slide_online', 'password')

    def test_download_slide_online_invalid_storage(self):
        """Test case for download_slide_online with invalid storage
        """
        param_document = self.get_test_value('download_slide_online', 'document', 'file')
        param_slide_index = self.get_test_value('download_slide_online', 'slide_index', 'int')
        param_format = self.get_test_value('download_slide_online', 'format', 'str')
        param_width = self.get_test_value('download_slide_online', 'width', 'int')
        param_height = self.get_test_value('download_slide_online', 'height', 'int')
        param_password = self.get_test_value('download_slide_online', 'password', 'str')
        param_storage = self.get_test_value('download_slide_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_slide_online', 'fonts_folder', 'str')
        param_options = self.get_test_value('download_slide_online', 'options', 'ExportOptions')
        param_storage = self.get_invalid_test_value('download_slide_online', 'storage', param_storage, 'str')
        self.initialize('download_slide_online', 'storage', param_storage)
        ok = False
        try:
            self.api.download_slide_online(param_document, param_slide_index, param_format, param_width, param_height, param_password, param_storage, param_fonts_folder, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_slide_online', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_slide_online', 'storage', param_storage)
        if ok:
            self.assert_no_exception('download_slide_online', 'storage')

    def test_download_slide_online_invalid_fonts_folder(self):
        """Test case for download_slide_online with invalid fonts_folder
        """
        param_document = self.get_test_value('download_slide_online', 'document', 'file')
        param_slide_index = self.get_test_value('download_slide_online', 'slide_index', 'int')
        param_format = self.get_test_value('download_slide_online', 'format', 'str')
        param_width = self.get_test_value('download_slide_online', 'width', 'int')
        param_height = self.get_test_value('download_slide_online', 'height', 'int')
        param_password = self.get_test_value('download_slide_online', 'password', 'str')
        param_storage = self.get_test_value('download_slide_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_slide_online', 'fonts_folder', 'str')
        param_options = self.get_test_value('download_slide_online', 'options', 'ExportOptions')
        param_fonts_folder = self.get_invalid_test_value('download_slide_online', 'fonts_folder', param_fonts_folder, 'str')
        self.initialize('download_slide_online', 'fonts_folder', param_fonts_folder)
        ok = False
        try:
            self.api.download_slide_online(param_document, param_slide_index, param_format, param_width, param_height, param_password, param_storage, param_fonts_folder, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_slide_online', 'fonts_folder', param_fonts_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_slide_online', 'fonts_folder', param_fonts_folder)
        if ok:
            self.assert_no_exception('download_slide_online', 'fonts_folder')

    def test_download_slide_online_invalid_options(self):
        """Test case for download_slide_online with invalid options
        """
        param_document = self.get_test_value('download_slide_online', 'document', 'file')
        param_slide_index = self.get_test_value('download_slide_online', 'slide_index', 'int')
        param_format = self.get_test_value('download_slide_online', 'format', 'str')
        param_width = self.get_test_value('download_slide_online', 'width', 'int')
        param_height = self.get_test_value('download_slide_online', 'height', 'int')
        param_password = self.get_test_value('download_slide_online', 'password', 'str')
        param_storage = self.get_test_value('download_slide_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_slide_online', 'fonts_folder', 'str')
        param_options = self.get_test_value('download_slide_online', 'options', 'ExportOptions')
        param_options = self.get_invalid_test_value('download_slide_online', 'options', param_options, 'ExportOptions')
        self.initialize('download_slide_online', 'options', param_options)
        ok = False
        try:
            self.api.download_slide_online(param_document, param_slide_index, param_format, param_width, param_height, param_password, param_storage, param_fonts_folder, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_slide_online', 'options', param_options)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_slide_online', 'options', param_options)
        if ok:
            self.assert_no_exception('download_slide_online', 'options')

    def test_download_special_slide_shape(self):
        """Test case for download_special_slide_shape
        """
        param_name = self.get_test_value('download_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('download_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('download_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('download_special_slide_shape', 'shape_index', 'int')
        param_format = self.get_test_value('download_special_slide_shape', 'format', 'str')
        param_options = self.get_test_value('download_special_slide_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_special_slide_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_special_slide_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_special_slide_shape', 'bounds', 'str')
        param_password = self.get_test_value('download_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('download_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('download_special_slide_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_special_slide_shape', 'fonts_folder', 'str')
        self.initialize('download_special_slide_shape', None, None)
        response = self.api.download_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
        self.assertTrue(isinstance(response, str))
        self.assertTrue(len(response) > 0)

    def test_download_special_slide_shape_invalid_name(self):
        """Test case for download_special_slide_shape with invalid name
        """
        param_name = self.get_test_value('download_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('download_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('download_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('download_special_slide_shape', 'shape_index', 'int')
        param_format = self.get_test_value('download_special_slide_shape', 'format', 'str')
        param_options = self.get_test_value('download_special_slide_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_special_slide_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_special_slide_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_special_slide_shape', 'bounds', 'str')
        param_password = self.get_test_value('download_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('download_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('download_special_slide_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_special_slide_shape', 'fonts_folder', 'str')
        param_name = self.get_invalid_test_value('download_special_slide_shape', 'name', param_name, 'str')
        self.initialize('download_special_slide_shape', 'name', param_name)
        ok = False
        try:
            self.api.download_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_special_slide_shape', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_special_slide_shape', 'name', param_name)
        if ok:
            self.assert_no_exception('download_special_slide_shape', 'name')

    def test_download_special_slide_shape_invalid_slide_index(self):
        """Test case for download_special_slide_shape with invalid slide_index
        """
        param_name = self.get_test_value('download_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('download_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('download_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('download_special_slide_shape', 'shape_index', 'int')
        param_format = self.get_test_value('download_special_slide_shape', 'format', 'str')
        param_options = self.get_test_value('download_special_slide_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_special_slide_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_special_slide_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_special_slide_shape', 'bounds', 'str')
        param_password = self.get_test_value('download_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('download_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('download_special_slide_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_special_slide_shape', 'fonts_folder', 'str')
        param_slide_index = self.get_invalid_test_value('download_special_slide_shape', 'slide_index', param_slide_index, 'int')
        self.initialize('download_special_slide_shape', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.download_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_special_slide_shape', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_special_slide_shape', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('download_special_slide_shape', 'slide_index')

    def test_download_special_slide_shape_invalid_slide_type(self):
        """Test case for download_special_slide_shape with invalid slide_type
        """
        param_name = self.get_test_value('download_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('download_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('download_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('download_special_slide_shape', 'shape_index', 'int')
        param_format = self.get_test_value('download_special_slide_shape', 'format', 'str')
        param_options = self.get_test_value('download_special_slide_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_special_slide_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_special_slide_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_special_slide_shape', 'bounds', 'str')
        param_password = self.get_test_value('download_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('download_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('download_special_slide_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_special_slide_shape', 'fonts_folder', 'str')
        param_slide_type = self.get_invalid_test_value('download_special_slide_shape', 'slide_type', param_slide_type, 'str')
        self.initialize('download_special_slide_shape', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.download_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_special_slide_shape', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_special_slide_shape', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('download_special_slide_shape', 'slide_type')

    def test_download_special_slide_shape_invalid_shape_index(self):
        """Test case for download_special_slide_shape with invalid shape_index
        """
        param_name = self.get_test_value('download_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('download_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('download_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('download_special_slide_shape', 'shape_index', 'int')
        param_format = self.get_test_value('download_special_slide_shape', 'format', 'str')
        param_options = self.get_test_value('download_special_slide_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_special_slide_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_special_slide_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_special_slide_shape', 'bounds', 'str')
        param_password = self.get_test_value('download_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('download_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('download_special_slide_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_special_slide_shape', 'fonts_folder', 'str')
        param_shape_index = self.get_invalid_test_value('download_special_slide_shape', 'shape_index', param_shape_index, 'int')
        self.initialize('download_special_slide_shape', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.download_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_special_slide_shape', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_special_slide_shape', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('download_special_slide_shape', 'shape_index')

    def test_download_special_slide_shape_invalid_format(self):
        """Test case for download_special_slide_shape with invalid format
        """
        param_name = self.get_test_value('download_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('download_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('download_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('download_special_slide_shape', 'shape_index', 'int')
        param_format = self.get_test_value('download_special_slide_shape', 'format', 'str')
        param_options = self.get_test_value('download_special_slide_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_special_slide_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_special_slide_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_special_slide_shape', 'bounds', 'str')
        param_password = self.get_test_value('download_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('download_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('download_special_slide_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_special_slide_shape', 'fonts_folder', 'str')
        param_format = self.get_invalid_test_value('download_special_slide_shape', 'format', param_format, 'str')
        self.initialize('download_special_slide_shape', 'format', param_format)
        ok = False
        try:
            self.api.download_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_special_slide_shape', 'format', param_format)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_special_slide_shape', 'format', param_format)
        if ok:
            self.assert_no_exception('download_special_slide_shape', 'format')

    def test_download_special_slide_shape_invalid_options(self):
        """Test case for download_special_slide_shape with invalid options
        """
        param_name = self.get_test_value('download_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('download_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('download_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('download_special_slide_shape', 'shape_index', 'int')
        param_format = self.get_test_value('download_special_slide_shape', 'format', 'str')
        param_options = self.get_test_value('download_special_slide_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_special_slide_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_special_slide_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_special_slide_shape', 'bounds', 'str')
        param_password = self.get_test_value('download_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('download_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('download_special_slide_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_special_slide_shape', 'fonts_folder', 'str')
        param_options = self.get_invalid_test_value('download_special_slide_shape', 'options', param_options, 'IShapeExportOptions')
        self.initialize('download_special_slide_shape', 'options', param_options)
        ok = False
        try:
            self.api.download_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_special_slide_shape', 'options', param_options)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_special_slide_shape', 'options', param_options)
        if ok:
            self.assert_no_exception('download_special_slide_shape', 'options')

    def test_download_special_slide_shape_invalid_scale_x(self):
        """Test case for download_special_slide_shape with invalid scale_x
        """
        param_name = self.get_test_value('download_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('download_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('download_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('download_special_slide_shape', 'shape_index', 'int')
        param_format = self.get_test_value('download_special_slide_shape', 'format', 'str')
        param_options = self.get_test_value('download_special_slide_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_special_slide_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_special_slide_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_special_slide_shape', 'bounds', 'str')
        param_password = self.get_test_value('download_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('download_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('download_special_slide_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_special_slide_shape', 'fonts_folder', 'str')
        param_scale_x = self.get_invalid_test_value('download_special_slide_shape', 'scale_x', param_scale_x, 'float')
        self.initialize('download_special_slide_shape', 'scale_x', param_scale_x)
        ok = False
        try:
            self.api.download_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_special_slide_shape', 'scale_x', param_scale_x)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_special_slide_shape', 'scale_x', param_scale_x)
        if ok:
            self.assert_no_exception('download_special_slide_shape', 'scale_x')

    def test_download_special_slide_shape_invalid_scale_y(self):
        """Test case for download_special_slide_shape with invalid scale_y
        """
        param_name = self.get_test_value('download_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('download_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('download_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('download_special_slide_shape', 'shape_index', 'int')
        param_format = self.get_test_value('download_special_slide_shape', 'format', 'str')
        param_options = self.get_test_value('download_special_slide_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_special_slide_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_special_slide_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_special_slide_shape', 'bounds', 'str')
        param_password = self.get_test_value('download_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('download_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('download_special_slide_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_special_slide_shape', 'fonts_folder', 'str')
        param_scale_y = self.get_invalid_test_value('download_special_slide_shape', 'scale_y', param_scale_y, 'float')
        self.initialize('download_special_slide_shape', 'scale_y', param_scale_y)
        ok = False
        try:
            self.api.download_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_special_slide_shape', 'scale_y', param_scale_y)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_special_slide_shape', 'scale_y', param_scale_y)
        if ok:
            self.assert_no_exception('download_special_slide_shape', 'scale_y')

    def test_download_special_slide_shape_invalid_bounds(self):
        """Test case for download_special_slide_shape with invalid bounds
        """
        param_name = self.get_test_value('download_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('download_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('download_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('download_special_slide_shape', 'shape_index', 'int')
        param_format = self.get_test_value('download_special_slide_shape', 'format', 'str')
        param_options = self.get_test_value('download_special_slide_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_special_slide_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_special_slide_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_special_slide_shape', 'bounds', 'str')
        param_password = self.get_test_value('download_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('download_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('download_special_slide_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_special_slide_shape', 'fonts_folder', 'str')
        param_bounds = self.get_invalid_test_value('download_special_slide_shape', 'bounds', param_bounds, 'str')
        self.initialize('download_special_slide_shape', 'bounds', param_bounds)
        ok = False
        try:
            self.api.download_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_special_slide_shape', 'bounds', param_bounds)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_special_slide_shape', 'bounds', param_bounds)
        if ok:
            self.assert_no_exception('download_special_slide_shape', 'bounds')

    def test_download_special_slide_shape_invalid_password(self):
        """Test case for download_special_slide_shape with invalid password
        """
        param_name = self.get_test_value('download_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('download_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('download_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('download_special_slide_shape', 'shape_index', 'int')
        param_format = self.get_test_value('download_special_slide_shape', 'format', 'str')
        param_options = self.get_test_value('download_special_slide_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_special_slide_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_special_slide_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_special_slide_shape', 'bounds', 'str')
        param_password = self.get_test_value('download_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('download_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('download_special_slide_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_special_slide_shape', 'fonts_folder', 'str')
        param_password = self.get_invalid_test_value('download_special_slide_shape', 'password', param_password, 'str')
        self.initialize('download_special_slide_shape', 'password', param_password)
        ok = False
        try:
            self.api.download_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_special_slide_shape', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_special_slide_shape', 'password', param_password)
        if ok:
            self.assert_no_exception('download_special_slide_shape', 'password')

    def test_download_special_slide_shape_invalid_folder(self):
        """Test case for download_special_slide_shape with invalid folder
        """
        param_name = self.get_test_value('download_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('download_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('download_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('download_special_slide_shape', 'shape_index', 'int')
        param_format = self.get_test_value('download_special_slide_shape', 'format', 'str')
        param_options = self.get_test_value('download_special_slide_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_special_slide_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_special_slide_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_special_slide_shape', 'bounds', 'str')
        param_password = self.get_test_value('download_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('download_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('download_special_slide_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_special_slide_shape', 'fonts_folder', 'str')
        param_folder = self.get_invalid_test_value('download_special_slide_shape', 'folder', param_folder, 'str')
        self.initialize('download_special_slide_shape', 'folder', param_folder)
        ok = False
        try:
            self.api.download_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_special_slide_shape', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_special_slide_shape', 'folder', param_folder)
        if ok:
            self.assert_no_exception('download_special_slide_shape', 'folder')

    def test_download_special_slide_shape_invalid_storage(self):
        """Test case for download_special_slide_shape with invalid storage
        """
        param_name = self.get_test_value('download_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('download_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('download_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('download_special_slide_shape', 'shape_index', 'int')
        param_format = self.get_test_value('download_special_slide_shape', 'format', 'str')
        param_options = self.get_test_value('download_special_slide_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_special_slide_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_special_slide_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_special_slide_shape', 'bounds', 'str')
        param_password = self.get_test_value('download_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('download_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('download_special_slide_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_special_slide_shape', 'fonts_folder', 'str')
        param_storage = self.get_invalid_test_value('download_special_slide_shape', 'storage', param_storage, 'str')
        self.initialize('download_special_slide_shape', 'storage', param_storage)
        ok = False
        try:
            self.api.download_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_special_slide_shape', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_special_slide_shape', 'storage', param_storage)
        if ok:
            self.assert_no_exception('download_special_slide_shape', 'storage')

    def test_download_special_slide_shape_invalid_fonts_folder(self):
        """Test case for download_special_slide_shape with invalid fonts_folder
        """
        param_name = self.get_test_value('download_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('download_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('download_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('download_special_slide_shape', 'shape_index', 'int')
        param_format = self.get_test_value('download_special_slide_shape', 'format', 'str')
        param_options = self.get_test_value('download_special_slide_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_special_slide_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_special_slide_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_special_slide_shape', 'bounds', 'str')
        param_password = self.get_test_value('download_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('download_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('download_special_slide_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_special_slide_shape', 'fonts_folder', 'str')
        param_fonts_folder = self.get_invalid_test_value('download_special_slide_shape', 'fonts_folder', param_fonts_folder, 'str')
        self.initialize('download_special_slide_shape', 'fonts_folder', param_fonts_folder)
        ok = False
        try:
            self.api.download_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_special_slide_shape', 'fonts_folder', param_fonts_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_special_slide_shape', 'fonts_folder', param_fonts_folder)
        if ok:
            self.assert_no_exception('download_special_slide_shape', 'fonts_folder')

    def test_download_special_slide_subshape(self):
        """Test case for download_special_slide_subshape
        """
        param_name = self.get_test_value('download_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('download_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('download_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('download_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('download_special_slide_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('download_special_slide_subshape', 'format', 'str')
        param_options = self.get_test_value('download_special_slide_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_special_slide_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_special_slide_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_special_slide_subshape', 'bounds', 'str')
        param_password = self.get_test_value('download_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('download_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('download_special_slide_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_special_slide_subshape', 'fonts_folder', 'str')
        self.initialize('download_special_slide_subshape', None, None)
        response = self.api.download_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
        self.assertTrue(isinstance(response, str))
        self.assertTrue(len(response) > 0)

    def test_download_special_slide_subshape_invalid_name(self):
        """Test case for download_special_slide_subshape with invalid name
        """
        param_name = self.get_test_value('download_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('download_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('download_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('download_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('download_special_slide_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('download_special_slide_subshape', 'format', 'str')
        param_options = self.get_test_value('download_special_slide_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_special_slide_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_special_slide_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_special_slide_subshape', 'bounds', 'str')
        param_password = self.get_test_value('download_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('download_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('download_special_slide_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_special_slide_subshape', 'fonts_folder', 'str')
        param_name = self.get_invalid_test_value('download_special_slide_subshape', 'name', param_name, 'str')
        self.initialize('download_special_slide_subshape', 'name', param_name)
        ok = False
        try:
            self.api.download_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_special_slide_subshape', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_special_slide_subshape', 'name', param_name)
        if ok:
            self.assert_no_exception('download_special_slide_subshape', 'name')

    def test_download_special_slide_subshape_invalid_slide_index(self):
        """Test case for download_special_slide_subshape with invalid slide_index
        """
        param_name = self.get_test_value('download_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('download_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('download_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('download_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('download_special_slide_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('download_special_slide_subshape', 'format', 'str')
        param_options = self.get_test_value('download_special_slide_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_special_slide_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_special_slide_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_special_slide_subshape', 'bounds', 'str')
        param_password = self.get_test_value('download_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('download_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('download_special_slide_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_special_slide_subshape', 'fonts_folder', 'str')
        param_slide_index = self.get_invalid_test_value('download_special_slide_subshape', 'slide_index', param_slide_index, 'int')
        self.initialize('download_special_slide_subshape', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.download_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_special_slide_subshape', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_special_slide_subshape', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('download_special_slide_subshape', 'slide_index')

    def test_download_special_slide_subshape_invalid_slide_type(self):
        """Test case for download_special_slide_subshape with invalid slide_type
        """
        param_name = self.get_test_value('download_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('download_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('download_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('download_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('download_special_slide_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('download_special_slide_subshape', 'format', 'str')
        param_options = self.get_test_value('download_special_slide_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_special_slide_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_special_slide_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_special_slide_subshape', 'bounds', 'str')
        param_password = self.get_test_value('download_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('download_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('download_special_slide_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_special_slide_subshape', 'fonts_folder', 'str')
        param_slide_type = self.get_invalid_test_value('download_special_slide_subshape', 'slide_type', param_slide_type, 'str')
        self.initialize('download_special_slide_subshape', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.download_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_special_slide_subshape', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_special_slide_subshape', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('download_special_slide_subshape', 'slide_type')

    def test_download_special_slide_subshape_invalid_path(self):
        """Test case for download_special_slide_subshape with invalid path
        """
        param_name = self.get_test_value('download_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('download_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('download_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('download_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('download_special_slide_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('download_special_slide_subshape', 'format', 'str')
        param_options = self.get_test_value('download_special_slide_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_special_slide_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_special_slide_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_special_slide_subshape', 'bounds', 'str')
        param_password = self.get_test_value('download_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('download_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('download_special_slide_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_special_slide_subshape', 'fonts_folder', 'str')
        param_path = self.get_invalid_test_value('download_special_slide_subshape', 'path', param_path, 'str')
        self.initialize('download_special_slide_subshape', 'path', param_path)
        ok = False
        try:
            self.api.download_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_special_slide_subshape', 'path', param_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_special_slide_subshape', 'path', param_path)
        if ok:
            self.assert_no_exception('download_special_slide_subshape', 'path')

    def test_download_special_slide_subshape_invalid_shape_index(self):
        """Test case for download_special_slide_subshape with invalid shape_index
        """
        param_name = self.get_test_value('download_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('download_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('download_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('download_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('download_special_slide_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('download_special_slide_subshape', 'format', 'str')
        param_options = self.get_test_value('download_special_slide_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_special_slide_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_special_slide_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_special_slide_subshape', 'bounds', 'str')
        param_password = self.get_test_value('download_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('download_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('download_special_slide_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_special_slide_subshape', 'fonts_folder', 'str')
        param_shape_index = self.get_invalid_test_value('download_special_slide_subshape', 'shape_index', param_shape_index, 'int')
        self.initialize('download_special_slide_subshape', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.download_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_special_slide_subshape', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_special_slide_subshape', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('download_special_slide_subshape', 'shape_index')

    def test_download_special_slide_subshape_invalid_format(self):
        """Test case for download_special_slide_subshape with invalid format
        """
        param_name = self.get_test_value('download_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('download_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('download_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('download_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('download_special_slide_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('download_special_slide_subshape', 'format', 'str')
        param_options = self.get_test_value('download_special_slide_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_special_slide_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_special_slide_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_special_slide_subshape', 'bounds', 'str')
        param_password = self.get_test_value('download_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('download_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('download_special_slide_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_special_slide_subshape', 'fonts_folder', 'str')
        param_format = self.get_invalid_test_value('download_special_slide_subshape', 'format', param_format, 'str')
        self.initialize('download_special_slide_subshape', 'format', param_format)
        ok = False
        try:
            self.api.download_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_special_slide_subshape', 'format', param_format)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_special_slide_subshape', 'format', param_format)
        if ok:
            self.assert_no_exception('download_special_slide_subshape', 'format')

    def test_download_special_slide_subshape_invalid_options(self):
        """Test case for download_special_slide_subshape with invalid options
        """
        param_name = self.get_test_value('download_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('download_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('download_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('download_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('download_special_slide_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('download_special_slide_subshape', 'format', 'str')
        param_options = self.get_test_value('download_special_slide_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_special_slide_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_special_slide_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_special_slide_subshape', 'bounds', 'str')
        param_password = self.get_test_value('download_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('download_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('download_special_slide_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_special_slide_subshape', 'fonts_folder', 'str')
        param_options = self.get_invalid_test_value('download_special_slide_subshape', 'options', param_options, 'IShapeExportOptions')
        self.initialize('download_special_slide_subshape', 'options', param_options)
        ok = False
        try:
            self.api.download_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_special_slide_subshape', 'options', param_options)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_special_slide_subshape', 'options', param_options)
        if ok:
            self.assert_no_exception('download_special_slide_subshape', 'options')

    def test_download_special_slide_subshape_invalid_scale_x(self):
        """Test case for download_special_slide_subshape with invalid scale_x
        """
        param_name = self.get_test_value('download_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('download_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('download_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('download_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('download_special_slide_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('download_special_slide_subshape', 'format', 'str')
        param_options = self.get_test_value('download_special_slide_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_special_slide_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_special_slide_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_special_slide_subshape', 'bounds', 'str')
        param_password = self.get_test_value('download_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('download_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('download_special_slide_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_special_slide_subshape', 'fonts_folder', 'str')
        param_scale_x = self.get_invalid_test_value('download_special_slide_subshape', 'scale_x', param_scale_x, 'float')
        self.initialize('download_special_slide_subshape', 'scale_x', param_scale_x)
        ok = False
        try:
            self.api.download_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_special_slide_subshape', 'scale_x', param_scale_x)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_special_slide_subshape', 'scale_x', param_scale_x)
        if ok:
            self.assert_no_exception('download_special_slide_subshape', 'scale_x')

    def test_download_special_slide_subshape_invalid_scale_y(self):
        """Test case for download_special_slide_subshape with invalid scale_y
        """
        param_name = self.get_test_value('download_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('download_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('download_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('download_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('download_special_slide_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('download_special_slide_subshape', 'format', 'str')
        param_options = self.get_test_value('download_special_slide_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_special_slide_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_special_slide_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_special_slide_subshape', 'bounds', 'str')
        param_password = self.get_test_value('download_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('download_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('download_special_slide_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_special_slide_subshape', 'fonts_folder', 'str')
        param_scale_y = self.get_invalid_test_value('download_special_slide_subshape', 'scale_y', param_scale_y, 'float')
        self.initialize('download_special_slide_subshape', 'scale_y', param_scale_y)
        ok = False
        try:
            self.api.download_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_special_slide_subshape', 'scale_y', param_scale_y)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_special_slide_subshape', 'scale_y', param_scale_y)
        if ok:
            self.assert_no_exception('download_special_slide_subshape', 'scale_y')

    def test_download_special_slide_subshape_invalid_bounds(self):
        """Test case for download_special_slide_subshape with invalid bounds
        """
        param_name = self.get_test_value('download_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('download_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('download_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('download_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('download_special_slide_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('download_special_slide_subshape', 'format', 'str')
        param_options = self.get_test_value('download_special_slide_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_special_slide_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_special_slide_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_special_slide_subshape', 'bounds', 'str')
        param_password = self.get_test_value('download_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('download_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('download_special_slide_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_special_slide_subshape', 'fonts_folder', 'str')
        param_bounds = self.get_invalid_test_value('download_special_slide_subshape', 'bounds', param_bounds, 'str')
        self.initialize('download_special_slide_subshape', 'bounds', param_bounds)
        ok = False
        try:
            self.api.download_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_special_slide_subshape', 'bounds', param_bounds)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_special_slide_subshape', 'bounds', param_bounds)
        if ok:
            self.assert_no_exception('download_special_slide_subshape', 'bounds')

    def test_download_special_slide_subshape_invalid_password(self):
        """Test case for download_special_slide_subshape with invalid password
        """
        param_name = self.get_test_value('download_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('download_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('download_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('download_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('download_special_slide_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('download_special_slide_subshape', 'format', 'str')
        param_options = self.get_test_value('download_special_slide_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_special_slide_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_special_slide_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_special_slide_subshape', 'bounds', 'str')
        param_password = self.get_test_value('download_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('download_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('download_special_slide_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_special_slide_subshape', 'fonts_folder', 'str')
        param_password = self.get_invalid_test_value('download_special_slide_subshape', 'password', param_password, 'str')
        self.initialize('download_special_slide_subshape', 'password', param_password)
        ok = False
        try:
            self.api.download_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_special_slide_subshape', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_special_slide_subshape', 'password', param_password)
        if ok:
            self.assert_no_exception('download_special_slide_subshape', 'password')

    def test_download_special_slide_subshape_invalid_folder(self):
        """Test case for download_special_slide_subshape with invalid folder
        """
        param_name = self.get_test_value('download_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('download_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('download_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('download_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('download_special_slide_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('download_special_slide_subshape', 'format', 'str')
        param_options = self.get_test_value('download_special_slide_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_special_slide_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_special_slide_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_special_slide_subshape', 'bounds', 'str')
        param_password = self.get_test_value('download_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('download_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('download_special_slide_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_special_slide_subshape', 'fonts_folder', 'str')
        param_folder = self.get_invalid_test_value('download_special_slide_subshape', 'folder', param_folder, 'str')
        self.initialize('download_special_slide_subshape', 'folder', param_folder)
        ok = False
        try:
            self.api.download_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_special_slide_subshape', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_special_slide_subshape', 'folder', param_folder)
        if ok:
            self.assert_no_exception('download_special_slide_subshape', 'folder')

    def test_download_special_slide_subshape_invalid_storage(self):
        """Test case for download_special_slide_subshape with invalid storage
        """
        param_name = self.get_test_value('download_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('download_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('download_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('download_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('download_special_slide_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('download_special_slide_subshape', 'format', 'str')
        param_options = self.get_test_value('download_special_slide_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_special_slide_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_special_slide_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_special_slide_subshape', 'bounds', 'str')
        param_password = self.get_test_value('download_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('download_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('download_special_slide_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_special_slide_subshape', 'fonts_folder', 'str')
        param_storage = self.get_invalid_test_value('download_special_slide_subshape', 'storage', param_storage, 'str')
        self.initialize('download_special_slide_subshape', 'storage', param_storage)
        ok = False
        try:
            self.api.download_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_special_slide_subshape', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_special_slide_subshape', 'storage', param_storage)
        if ok:
            self.assert_no_exception('download_special_slide_subshape', 'storage')

    def test_download_special_slide_subshape_invalid_fonts_folder(self):
        """Test case for download_special_slide_subshape with invalid fonts_folder
        """
        param_name = self.get_test_value('download_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('download_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('download_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('download_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('download_special_slide_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('download_special_slide_subshape', 'format', 'str')
        param_options = self.get_test_value('download_special_slide_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_special_slide_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_special_slide_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_special_slide_subshape', 'bounds', 'str')
        param_password = self.get_test_value('download_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('download_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('download_special_slide_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_special_slide_subshape', 'fonts_folder', 'str')
        param_fonts_folder = self.get_invalid_test_value('download_special_slide_subshape', 'fonts_folder', param_fonts_folder, 'str')
        self.initialize('download_special_slide_subshape', 'fonts_folder', param_fonts_folder)
        ok = False
        try:
            self.api.download_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_special_slide_subshape', 'fonts_folder', param_fonts_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_special_slide_subshape', 'fonts_folder', param_fonts_folder)
        if ok:
            self.assert_no_exception('download_special_slide_subshape', 'fonts_folder')

    def test_download_subshape(self):
        """Test case for download_subshape
        """
        param_name = self.get_test_value('download_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('download_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('download_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('download_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('download_subshape', 'format', 'str')
        param_options = self.get_test_value('download_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_subshape', 'bounds', 'str')
        param_password = self.get_test_value('download_subshape', 'password', 'str')
        param_folder = self.get_test_value('download_subshape', 'folder', 'str')
        param_storage = self.get_test_value('download_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_subshape', 'fonts_folder', 'str')
        self.initialize('download_subshape', None, None)
        response = self.api.download_subshape(param_name, param_slide_index, param_path, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
        self.assertTrue(isinstance(response, str))
        self.assertTrue(len(response) > 0)

    def test_download_subshape_invalid_name(self):
        """Test case for download_subshape with invalid name
        """
        param_name = self.get_test_value('download_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('download_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('download_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('download_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('download_subshape', 'format', 'str')
        param_options = self.get_test_value('download_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_subshape', 'bounds', 'str')
        param_password = self.get_test_value('download_subshape', 'password', 'str')
        param_folder = self.get_test_value('download_subshape', 'folder', 'str')
        param_storage = self.get_test_value('download_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_subshape', 'fonts_folder', 'str')
        param_name = self.get_invalid_test_value('download_subshape', 'name', param_name, 'str')
        self.initialize('download_subshape', 'name', param_name)
        ok = False
        try:
            self.api.download_subshape(param_name, param_slide_index, param_path, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_subshape', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_subshape', 'name', param_name)
        if ok:
            self.assert_no_exception('download_subshape', 'name')

    def test_download_subshape_invalid_slide_index(self):
        """Test case for download_subshape with invalid slide_index
        """
        param_name = self.get_test_value('download_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('download_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('download_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('download_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('download_subshape', 'format', 'str')
        param_options = self.get_test_value('download_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_subshape', 'bounds', 'str')
        param_password = self.get_test_value('download_subshape', 'password', 'str')
        param_folder = self.get_test_value('download_subshape', 'folder', 'str')
        param_storage = self.get_test_value('download_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_subshape', 'fonts_folder', 'str')
        param_slide_index = self.get_invalid_test_value('download_subshape', 'slide_index', param_slide_index, 'int')
        self.initialize('download_subshape', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.download_subshape(param_name, param_slide_index, param_path, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_subshape', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_subshape', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('download_subshape', 'slide_index')

    def test_download_subshape_invalid_path(self):
        """Test case for download_subshape with invalid path
        """
        param_name = self.get_test_value('download_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('download_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('download_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('download_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('download_subshape', 'format', 'str')
        param_options = self.get_test_value('download_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_subshape', 'bounds', 'str')
        param_password = self.get_test_value('download_subshape', 'password', 'str')
        param_folder = self.get_test_value('download_subshape', 'folder', 'str')
        param_storage = self.get_test_value('download_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_subshape', 'fonts_folder', 'str')
        param_path = self.get_invalid_test_value('download_subshape', 'path', param_path, 'str')
        self.initialize('download_subshape', 'path', param_path)
        ok = False
        try:
            self.api.download_subshape(param_name, param_slide_index, param_path, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_subshape', 'path', param_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_subshape', 'path', param_path)
        if ok:
            self.assert_no_exception('download_subshape', 'path')

    def test_download_subshape_invalid_shape_index(self):
        """Test case for download_subshape with invalid shape_index
        """
        param_name = self.get_test_value('download_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('download_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('download_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('download_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('download_subshape', 'format', 'str')
        param_options = self.get_test_value('download_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_subshape', 'bounds', 'str')
        param_password = self.get_test_value('download_subshape', 'password', 'str')
        param_folder = self.get_test_value('download_subshape', 'folder', 'str')
        param_storage = self.get_test_value('download_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_subshape', 'fonts_folder', 'str')
        param_shape_index = self.get_invalid_test_value('download_subshape', 'shape_index', param_shape_index, 'int')
        self.initialize('download_subshape', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.download_subshape(param_name, param_slide_index, param_path, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_subshape', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_subshape', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('download_subshape', 'shape_index')

    def test_download_subshape_invalid_format(self):
        """Test case for download_subshape with invalid format
        """
        param_name = self.get_test_value('download_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('download_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('download_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('download_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('download_subshape', 'format', 'str')
        param_options = self.get_test_value('download_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_subshape', 'bounds', 'str')
        param_password = self.get_test_value('download_subshape', 'password', 'str')
        param_folder = self.get_test_value('download_subshape', 'folder', 'str')
        param_storage = self.get_test_value('download_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_subshape', 'fonts_folder', 'str')
        param_format = self.get_invalid_test_value('download_subshape', 'format', param_format, 'str')
        self.initialize('download_subshape', 'format', param_format)
        ok = False
        try:
            self.api.download_subshape(param_name, param_slide_index, param_path, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_subshape', 'format', param_format)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_subshape', 'format', param_format)
        if ok:
            self.assert_no_exception('download_subshape', 'format')

    def test_download_subshape_invalid_options(self):
        """Test case for download_subshape with invalid options
        """
        param_name = self.get_test_value('download_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('download_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('download_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('download_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('download_subshape', 'format', 'str')
        param_options = self.get_test_value('download_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_subshape', 'bounds', 'str')
        param_password = self.get_test_value('download_subshape', 'password', 'str')
        param_folder = self.get_test_value('download_subshape', 'folder', 'str')
        param_storage = self.get_test_value('download_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_subshape', 'fonts_folder', 'str')
        param_options = self.get_invalid_test_value('download_subshape', 'options', param_options, 'IShapeExportOptions')
        self.initialize('download_subshape', 'options', param_options)
        ok = False
        try:
            self.api.download_subshape(param_name, param_slide_index, param_path, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_subshape', 'options', param_options)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_subshape', 'options', param_options)
        if ok:
            self.assert_no_exception('download_subshape', 'options')

    def test_download_subshape_invalid_scale_x(self):
        """Test case for download_subshape with invalid scale_x
        """
        param_name = self.get_test_value('download_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('download_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('download_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('download_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('download_subshape', 'format', 'str')
        param_options = self.get_test_value('download_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_subshape', 'bounds', 'str')
        param_password = self.get_test_value('download_subshape', 'password', 'str')
        param_folder = self.get_test_value('download_subshape', 'folder', 'str')
        param_storage = self.get_test_value('download_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_subshape', 'fonts_folder', 'str')
        param_scale_x = self.get_invalid_test_value('download_subshape', 'scale_x', param_scale_x, 'float')
        self.initialize('download_subshape', 'scale_x', param_scale_x)
        ok = False
        try:
            self.api.download_subshape(param_name, param_slide_index, param_path, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_subshape', 'scale_x', param_scale_x)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_subshape', 'scale_x', param_scale_x)
        if ok:
            self.assert_no_exception('download_subshape', 'scale_x')

    def test_download_subshape_invalid_scale_y(self):
        """Test case for download_subshape with invalid scale_y
        """
        param_name = self.get_test_value('download_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('download_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('download_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('download_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('download_subshape', 'format', 'str')
        param_options = self.get_test_value('download_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_subshape', 'bounds', 'str')
        param_password = self.get_test_value('download_subshape', 'password', 'str')
        param_folder = self.get_test_value('download_subshape', 'folder', 'str')
        param_storage = self.get_test_value('download_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_subshape', 'fonts_folder', 'str')
        param_scale_y = self.get_invalid_test_value('download_subshape', 'scale_y', param_scale_y, 'float')
        self.initialize('download_subshape', 'scale_y', param_scale_y)
        ok = False
        try:
            self.api.download_subshape(param_name, param_slide_index, param_path, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_subshape', 'scale_y', param_scale_y)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_subshape', 'scale_y', param_scale_y)
        if ok:
            self.assert_no_exception('download_subshape', 'scale_y')

    def test_download_subshape_invalid_bounds(self):
        """Test case for download_subshape with invalid bounds
        """
        param_name = self.get_test_value('download_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('download_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('download_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('download_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('download_subshape', 'format', 'str')
        param_options = self.get_test_value('download_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_subshape', 'bounds', 'str')
        param_password = self.get_test_value('download_subshape', 'password', 'str')
        param_folder = self.get_test_value('download_subshape', 'folder', 'str')
        param_storage = self.get_test_value('download_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_subshape', 'fonts_folder', 'str')
        param_bounds = self.get_invalid_test_value('download_subshape', 'bounds', param_bounds, 'str')
        self.initialize('download_subshape', 'bounds', param_bounds)
        ok = False
        try:
            self.api.download_subshape(param_name, param_slide_index, param_path, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_subshape', 'bounds', param_bounds)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_subshape', 'bounds', param_bounds)
        if ok:
            self.assert_no_exception('download_subshape', 'bounds')

    def test_download_subshape_invalid_password(self):
        """Test case for download_subshape with invalid password
        """
        param_name = self.get_test_value('download_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('download_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('download_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('download_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('download_subshape', 'format', 'str')
        param_options = self.get_test_value('download_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_subshape', 'bounds', 'str')
        param_password = self.get_test_value('download_subshape', 'password', 'str')
        param_folder = self.get_test_value('download_subshape', 'folder', 'str')
        param_storage = self.get_test_value('download_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_subshape', 'fonts_folder', 'str')
        param_password = self.get_invalid_test_value('download_subshape', 'password', param_password, 'str')
        self.initialize('download_subshape', 'password', param_password)
        ok = False
        try:
            self.api.download_subshape(param_name, param_slide_index, param_path, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_subshape', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_subshape', 'password', param_password)
        if ok:
            self.assert_no_exception('download_subshape', 'password')

    def test_download_subshape_invalid_folder(self):
        """Test case for download_subshape with invalid folder
        """
        param_name = self.get_test_value('download_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('download_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('download_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('download_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('download_subshape', 'format', 'str')
        param_options = self.get_test_value('download_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_subshape', 'bounds', 'str')
        param_password = self.get_test_value('download_subshape', 'password', 'str')
        param_folder = self.get_test_value('download_subshape', 'folder', 'str')
        param_storage = self.get_test_value('download_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_subshape', 'fonts_folder', 'str')
        param_folder = self.get_invalid_test_value('download_subshape', 'folder', param_folder, 'str')
        self.initialize('download_subshape', 'folder', param_folder)
        ok = False
        try:
            self.api.download_subshape(param_name, param_slide_index, param_path, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_subshape', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_subshape', 'folder', param_folder)
        if ok:
            self.assert_no_exception('download_subshape', 'folder')

    def test_download_subshape_invalid_storage(self):
        """Test case for download_subshape with invalid storage
        """
        param_name = self.get_test_value('download_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('download_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('download_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('download_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('download_subshape', 'format', 'str')
        param_options = self.get_test_value('download_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_subshape', 'bounds', 'str')
        param_password = self.get_test_value('download_subshape', 'password', 'str')
        param_folder = self.get_test_value('download_subshape', 'folder', 'str')
        param_storage = self.get_test_value('download_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_subshape', 'fonts_folder', 'str')
        param_storage = self.get_invalid_test_value('download_subshape', 'storage', param_storage, 'str')
        self.initialize('download_subshape', 'storage', param_storage)
        ok = False
        try:
            self.api.download_subshape(param_name, param_slide_index, param_path, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_subshape', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_subshape', 'storage', param_storage)
        if ok:
            self.assert_no_exception('download_subshape', 'storage')

    def test_download_subshape_invalid_fonts_folder(self):
        """Test case for download_subshape with invalid fonts_folder
        """
        param_name = self.get_test_value('download_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('download_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('download_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('download_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('download_subshape', 'format', 'str')
        param_options = self.get_test_value('download_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('download_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('download_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('download_subshape', 'bounds', 'str')
        param_password = self.get_test_value('download_subshape', 'password', 'str')
        param_folder = self.get_test_value('download_subshape', 'folder', 'str')
        param_storage = self.get_test_value('download_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('download_subshape', 'fonts_folder', 'str')
        param_fonts_folder = self.get_invalid_test_value('download_subshape', 'fonts_folder', param_fonts_folder, 'str')
        self.initialize('download_subshape', 'fonts_folder', param_fonts_folder)
        ok = False
        try:
            self.api.download_subshape(param_name, param_slide_index, param_path, param_shape_index, param_format, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'download_subshape', 'fonts_folder', param_fonts_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'download_subshape', 'fonts_folder', param_fonts_folder)
        if ok:
            self.assert_no_exception('download_subshape', 'fonts_folder')

    def test_get_animation(self):
        """Test case for get_animation
        """
        param_name = self.get_test_value('get_animation', 'name', 'str')
        param_slide_index = self.get_test_value('get_animation', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_animation', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_animation', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_animation', 'password', 'str')
        param_folder = self.get_test_value('get_animation', 'folder', 'str')
        param_storage = self.get_test_value('get_animation', 'storage', 'str')
        self.initialize('get_animation', None, None)
        response = self.api.get_animation(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_animation_invalid_name(self):
        """Test case for get_animation with invalid name
        """
        param_name = self.get_test_value('get_animation', 'name', 'str')
        param_slide_index = self.get_test_value('get_animation', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_animation', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_animation', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_animation', 'password', 'str')
        param_folder = self.get_test_value('get_animation', 'folder', 'str')
        param_storage = self.get_test_value('get_animation', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_animation', 'name', param_name, 'str')
        self.initialize('get_animation', 'name', param_name)
        ok = False
        try:
            self.api.get_animation(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_animation', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_animation', 'name', param_name)
        if ok:
            self.assert_no_exception('get_animation', 'name')

    def test_get_animation_invalid_slide_index(self):
        """Test case for get_animation with invalid slide_index
        """
        param_name = self.get_test_value('get_animation', 'name', 'str')
        param_slide_index = self.get_test_value('get_animation', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_animation', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_animation', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_animation', 'password', 'str')
        param_folder = self.get_test_value('get_animation', 'folder', 'str')
        param_storage = self.get_test_value('get_animation', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('get_animation', 'slide_index', param_slide_index, 'int')
        self.initialize('get_animation', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.get_animation(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_animation', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_animation', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('get_animation', 'slide_index')

    def test_get_animation_invalid_shape_index(self):
        """Test case for get_animation with invalid shape_index
        """
        param_name = self.get_test_value('get_animation', 'name', 'str')
        param_slide_index = self.get_test_value('get_animation', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_animation', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_animation', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_animation', 'password', 'str')
        param_folder = self.get_test_value('get_animation', 'folder', 'str')
        param_storage = self.get_test_value('get_animation', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('get_animation', 'shape_index', param_shape_index, 'int')
        self.initialize('get_animation', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.get_animation(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_animation', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_animation', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('get_animation', 'shape_index')

    def test_get_animation_invalid_paragraph_index(self):
        """Test case for get_animation with invalid paragraph_index
        """
        param_name = self.get_test_value('get_animation', 'name', 'str')
        param_slide_index = self.get_test_value('get_animation', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_animation', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_animation', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_animation', 'password', 'str')
        param_folder = self.get_test_value('get_animation', 'folder', 'str')
        param_storage = self.get_test_value('get_animation', 'storage', 'str')
        param_paragraph_index = self.get_invalid_test_value('get_animation', 'paragraph_index', param_paragraph_index, 'int')
        self.initialize('get_animation', 'paragraph_index', param_paragraph_index)
        ok = False
        try:
            self.api.get_animation(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_animation', 'paragraph_index', param_paragraph_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_animation', 'paragraph_index', param_paragraph_index)
        if ok:
            self.assert_no_exception('get_animation', 'paragraph_index')

    def test_get_animation_invalid_password(self):
        """Test case for get_animation with invalid password
        """
        param_name = self.get_test_value('get_animation', 'name', 'str')
        param_slide_index = self.get_test_value('get_animation', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_animation', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_animation', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_animation', 'password', 'str')
        param_folder = self.get_test_value('get_animation', 'folder', 'str')
        param_storage = self.get_test_value('get_animation', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_animation', 'password', param_password, 'str')
        self.initialize('get_animation', 'password', param_password)
        ok = False
        try:
            self.api.get_animation(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_animation', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_animation', 'password', param_password)
        if ok:
            self.assert_no_exception('get_animation', 'password')

    def test_get_animation_invalid_folder(self):
        """Test case for get_animation with invalid folder
        """
        param_name = self.get_test_value('get_animation', 'name', 'str')
        param_slide_index = self.get_test_value('get_animation', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_animation', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_animation', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_animation', 'password', 'str')
        param_folder = self.get_test_value('get_animation', 'folder', 'str')
        param_storage = self.get_test_value('get_animation', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_animation', 'folder', param_folder, 'str')
        self.initialize('get_animation', 'folder', param_folder)
        ok = False
        try:
            self.api.get_animation(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_animation', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_animation', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_animation', 'folder')

    def test_get_animation_invalid_storage(self):
        """Test case for get_animation with invalid storage
        """
        param_name = self.get_test_value('get_animation', 'name', 'str')
        param_slide_index = self.get_test_value('get_animation', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_animation', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_animation', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_animation', 'password', 'str')
        param_folder = self.get_test_value('get_animation', 'folder', 'str')
        param_storage = self.get_test_value('get_animation', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_animation', 'storage', param_storage, 'str')
        self.initialize('get_animation', 'storage', param_storage)
        ok = False
        try:
            self.api.get_animation(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_animation', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_animation', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_animation', 'storage')

    def test_get_api_info(self):
        """Test case for get_api_info
        """
        self.initialize('get_api_info', None, None)
        response = self.api.get_api_info()
        self.assertIsNotNone(response)

    def test_get_background(self):
        """Test case for get_background
        """
        param_name = self.get_test_value('get_background', 'name', 'str')
        param_slide_index = self.get_test_value('get_background', 'slide_index', 'int')
        param_password = self.get_test_value('get_background', 'password', 'str')
        param_folder = self.get_test_value('get_background', 'folder', 'str')
        param_storage = self.get_test_value('get_background', 'storage', 'str')
        self.initialize('get_background', None, None)
        response = self.api.get_background(param_name, param_slide_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_background_invalid_name(self):
        """Test case for get_background with invalid name
        """
        param_name = self.get_test_value('get_background', 'name', 'str')
        param_slide_index = self.get_test_value('get_background', 'slide_index', 'int')
        param_password = self.get_test_value('get_background', 'password', 'str')
        param_folder = self.get_test_value('get_background', 'folder', 'str')
        param_storage = self.get_test_value('get_background', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_background', 'name', param_name, 'str')
        self.initialize('get_background', 'name', param_name)
        ok = False
        try:
            self.api.get_background(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_background', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_background', 'name', param_name)
        if ok:
            self.assert_no_exception('get_background', 'name')

    def test_get_background_invalid_slide_index(self):
        """Test case for get_background with invalid slide_index
        """
        param_name = self.get_test_value('get_background', 'name', 'str')
        param_slide_index = self.get_test_value('get_background', 'slide_index', 'int')
        param_password = self.get_test_value('get_background', 'password', 'str')
        param_folder = self.get_test_value('get_background', 'folder', 'str')
        param_storage = self.get_test_value('get_background', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('get_background', 'slide_index', param_slide_index, 'int')
        self.initialize('get_background', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.get_background(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_background', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_background', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('get_background', 'slide_index')

    def test_get_background_invalid_password(self):
        """Test case for get_background with invalid password
        """
        param_name = self.get_test_value('get_background', 'name', 'str')
        param_slide_index = self.get_test_value('get_background', 'slide_index', 'int')
        param_password = self.get_test_value('get_background', 'password', 'str')
        param_folder = self.get_test_value('get_background', 'folder', 'str')
        param_storage = self.get_test_value('get_background', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_background', 'password', param_password, 'str')
        self.initialize('get_background', 'password', param_password)
        ok = False
        try:
            self.api.get_background(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_background', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_background', 'password', param_password)
        if ok:
            self.assert_no_exception('get_background', 'password')

    def test_get_background_invalid_folder(self):
        """Test case for get_background with invalid folder
        """
        param_name = self.get_test_value('get_background', 'name', 'str')
        param_slide_index = self.get_test_value('get_background', 'slide_index', 'int')
        param_password = self.get_test_value('get_background', 'password', 'str')
        param_folder = self.get_test_value('get_background', 'folder', 'str')
        param_storage = self.get_test_value('get_background', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_background', 'folder', param_folder, 'str')
        self.initialize('get_background', 'folder', param_folder)
        ok = False
        try:
            self.api.get_background(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_background', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_background', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_background', 'folder')

    def test_get_background_invalid_storage(self):
        """Test case for get_background with invalid storage
        """
        param_name = self.get_test_value('get_background', 'name', 'str')
        param_slide_index = self.get_test_value('get_background', 'slide_index', 'int')
        param_password = self.get_test_value('get_background', 'password', 'str')
        param_folder = self.get_test_value('get_background', 'folder', 'str')
        param_storage = self.get_test_value('get_background', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_background', 'storage', param_storage, 'str')
        self.initialize('get_background', 'storage', param_storage)
        ok = False
        try:
            self.api.get_background(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_background', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_background', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_background', 'storage')

    def test_get_color_scheme(self):
        """Test case for get_color_scheme
        """
        param_name = self.get_test_value('get_color_scheme', 'name', 'str')
        param_slide_index = self.get_test_value('get_color_scheme', 'slide_index', 'int')
        param_password = self.get_test_value('get_color_scheme', 'password', 'str')
        param_folder = self.get_test_value('get_color_scheme', 'folder', 'str')
        param_storage = self.get_test_value('get_color_scheme', 'storage', 'str')
        self.initialize('get_color_scheme', None, None)
        response = self.api.get_color_scheme(param_name, param_slide_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_color_scheme_invalid_name(self):
        """Test case for get_color_scheme with invalid name
        """
        param_name = self.get_test_value('get_color_scheme', 'name', 'str')
        param_slide_index = self.get_test_value('get_color_scheme', 'slide_index', 'int')
        param_password = self.get_test_value('get_color_scheme', 'password', 'str')
        param_folder = self.get_test_value('get_color_scheme', 'folder', 'str')
        param_storage = self.get_test_value('get_color_scheme', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_color_scheme', 'name', param_name, 'str')
        self.initialize('get_color_scheme', 'name', param_name)
        ok = False
        try:
            self.api.get_color_scheme(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_color_scheme', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_color_scheme', 'name', param_name)
        if ok:
            self.assert_no_exception('get_color_scheme', 'name')

    def test_get_color_scheme_invalid_slide_index(self):
        """Test case for get_color_scheme with invalid slide_index
        """
        param_name = self.get_test_value('get_color_scheme', 'name', 'str')
        param_slide_index = self.get_test_value('get_color_scheme', 'slide_index', 'int')
        param_password = self.get_test_value('get_color_scheme', 'password', 'str')
        param_folder = self.get_test_value('get_color_scheme', 'folder', 'str')
        param_storage = self.get_test_value('get_color_scheme', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('get_color_scheme', 'slide_index', param_slide_index, 'int')
        self.initialize('get_color_scheme', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.get_color_scheme(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_color_scheme', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_color_scheme', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('get_color_scheme', 'slide_index')

    def test_get_color_scheme_invalid_password(self):
        """Test case for get_color_scheme with invalid password
        """
        param_name = self.get_test_value('get_color_scheme', 'name', 'str')
        param_slide_index = self.get_test_value('get_color_scheme', 'slide_index', 'int')
        param_password = self.get_test_value('get_color_scheme', 'password', 'str')
        param_folder = self.get_test_value('get_color_scheme', 'folder', 'str')
        param_storage = self.get_test_value('get_color_scheme', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_color_scheme', 'password', param_password, 'str')
        self.initialize('get_color_scheme', 'password', param_password)
        ok = False
        try:
            self.api.get_color_scheme(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_color_scheme', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_color_scheme', 'password', param_password)
        if ok:
            self.assert_no_exception('get_color_scheme', 'password')

    def test_get_color_scheme_invalid_folder(self):
        """Test case for get_color_scheme with invalid folder
        """
        param_name = self.get_test_value('get_color_scheme', 'name', 'str')
        param_slide_index = self.get_test_value('get_color_scheme', 'slide_index', 'int')
        param_password = self.get_test_value('get_color_scheme', 'password', 'str')
        param_folder = self.get_test_value('get_color_scheme', 'folder', 'str')
        param_storage = self.get_test_value('get_color_scheme', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_color_scheme', 'folder', param_folder, 'str')
        self.initialize('get_color_scheme', 'folder', param_folder)
        ok = False
        try:
            self.api.get_color_scheme(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_color_scheme', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_color_scheme', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_color_scheme', 'folder')

    def test_get_color_scheme_invalid_storage(self):
        """Test case for get_color_scheme with invalid storage
        """
        param_name = self.get_test_value('get_color_scheme', 'name', 'str')
        param_slide_index = self.get_test_value('get_color_scheme', 'slide_index', 'int')
        param_password = self.get_test_value('get_color_scheme', 'password', 'str')
        param_folder = self.get_test_value('get_color_scheme', 'folder', 'str')
        param_storage = self.get_test_value('get_color_scheme', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_color_scheme', 'storage', param_storage, 'str')
        self.initialize('get_color_scheme', 'storage', param_storage)
        ok = False
        try:
            self.api.get_color_scheme(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_color_scheme', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_color_scheme', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_color_scheme', 'storage')

    def test_get_disc_usage(self):
        """Test case for get_disc_usage
        """
        param_storage_name = self.get_test_value('get_disc_usage', 'storage_name', 'str')
        self.initialize('get_disc_usage', None, None)
        response = self.api.get_disc_usage(param_storage_name)
        self.assertIsNotNone(response)

    def test_get_disc_usage_invalid_storage_name(self):
        """Test case for get_disc_usage with invalid storage_name
        """
        param_storage_name = self.get_test_value('get_disc_usage', 'storage_name', 'str')
        param_storage_name = self.get_invalid_test_value('get_disc_usage', 'storage_name', param_storage_name, 'str')
        self.initialize('get_disc_usage', 'storage_name', param_storage_name)
        ok = False
        try:
            self.api.get_disc_usage(param_storage_name)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_disc_usage', 'storage_name', param_storage_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_disc_usage', 'storage_name', param_storage_name)
        if ok:
            self.assert_no_exception('get_disc_usage', 'storage_name')

    def test_get_document_properties(self):
        """Test case for get_document_properties
        """
        param_name = self.get_test_value('get_document_properties', 'name', 'str')
        param_password = self.get_test_value('get_document_properties', 'password', 'str')
        param_folder = self.get_test_value('get_document_properties', 'folder', 'str')
        param_storage = self.get_test_value('get_document_properties', 'storage', 'str')
        self.initialize('get_document_properties', None, None)
        response = self.api.get_document_properties(param_name, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_document_properties_invalid_name(self):
        """Test case for get_document_properties with invalid name
        """
        param_name = self.get_test_value('get_document_properties', 'name', 'str')
        param_password = self.get_test_value('get_document_properties', 'password', 'str')
        param_folder = self.get_test_value('get_document_properties', 'folder', 'str')
        param_storage = self.get_test_value('get_document_properties', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_document_properties', 'name', param_name, 'str')
        self.initialize('get_document_properties', 'name', param_name)
        ok = False
        try:
            self.api.get_document_properties(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_document_properties', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_document_properties', 'name', param_name)
        if ok:
            self.assert_no_exception('get_document_properties', 'name')

    def test_get_document_properties_invalid_password(self):
        """Test case for get_document_properties with invalid password
        """
        param_name = self.get_test_value('get_document_properties', 'name', 'str')
        param_password = self.get_test_value('get_document_properties', 'password', 'str')
        param_folder = self.get_test_value('get_document_properties', 'folder', 'str')
        param_storage = self.get_test_value('get_document_properties', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_document_properties', 'password', param_password, 'str')
        self.initialize('get_document_properties', 'password', param_password)
        ok = False
        try:
            self.api.get_document_properties(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_document_properties', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_document_properties', 'password', param_password)
        if ok:
            self.assert_no_exception('get_document_properties', 'password')

    def test_get_document_properties_invalid_folder(self):
        """Test case for get_document_properties with invalid folder
        """
        param_name = self.get_test_value('get_document_properties', 'name', 'str')
        param_password = self.get_test_value('get_document_properties', 'password', 'str')
        param_folder = self.get_test_value('get_document_properties', 'folder', 'str')
        param_storage = self.get_test_value('get_document_properties', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_document_properties', 'folder', param_folder, 'str')
        self.initialize('get_document_properties', 'folder', param_folder)
        ok = False
        try:
            self.api.get_document_properties(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_document_properties', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_document_properties', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_document_properties', 'folder')

    def test_get_document_properties_invalid_storage(self):
        """Test case for get_document_properties with invalid storage
        """
        param_name = self.get_test_value('get_document_properties', 'name', 'str')
        param_password = self.get_test_value('get_document_properties', 'password', 'str')
        param_folder = self.get_test_value('get_document_properties', 'folder', 'str')
        param_storage = self.get_test_value('get_document_properties', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_document_properties', 'storage', param_storage, 'str')
        self.initialize('get_document_properties', 'storage', param_storage)
        ok = False
        try:
            self.api.get_document_properties(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_document_properties', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_document_properties', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_document_properties', 'storage')

    def test_get_document_property(self):
        """Test case for get_document_property
        """
        param_name = self.get_test_value('get_document_property', 'name', 'str')
        param_property_name = self.get_test_value('get_document_property', 'property_name', 'str')
        param_password = self.get_test_value('get_document_property', 'password', 'str')
        param_folder = self.get_test_value('get_document_property', 'folder', 'str')
        param_storage = self.get_test_value('get_document_property', 'storage', 'str')
        self.initialize('get_document_property', None, None)
        response = self.api.get_document_property(param_name, param_property_name, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_document_property_invalid_name(self):
        """Test case for get_document_property with invalid name
        """
        param_name = self.get_test_value('get_document_property', 'name', 'str')
        param_property_name = self.get_test_value('get_document_property', 'property_name', 'str')
        param_password = self.get_test_value('get_document_property', 'password', 'str')
        param_folder = self.get_test_value('get_document_property', 'folder', 'str')
        param_storage = self.get_test_value('get_document_property', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_document_property', 'name', param_name, 'str')
        self.initialize('get_document_property', 'name', param_name)
        ok = False
        try:
            self.api.get_document_property(param_name, param_property_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_document_property', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_document_property', 'name', param_name)
        if ok:
            self.assert_no_exception('get_document_property', 'name')

    def test_get_document_property_invalid_property_name(self):
        """Test case for get_document_property with invalid property_name
        """
        param_name = self.get_test_value('get_document_property', 'name', 'str')
        param_property_name = self.get_test_value('get_document_property', 'property_name', 'str')
        param_password = self.get_test_value('get_document_property', 'password', 'str')
        param_folder = self.get_test_value('get_document_property', 'folder', 'str')
        param_storage = self.get_test_value('get_document_property', 'storage', 'str')
        param_property_name = self.get_invalid_test_value('get_document_property', 'property_name', param_property_name, 'str')
        self.initialize('get_document_property', 'property_name', param_property_name)
        ok = False
        try:
            self.api.get_document_property(param_name, param_property_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_document_property', 'property_name', param_property_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_document_property', 'property_name', param_property_name)
        if ok:
            self.assert_no_exception('get_document_property', 'property_name')

    def test_get_document_property_invalid_password(self):
        """Test case for get_document_property with invalid password
        """
        param_name = self.get_test_value('get_document_property', 'name', 'str')
        param_property_name = self.get_test_value('get_document_property', 'property_name', 'str')
        param_password = self.get_test_value('get_document_property', 'password', 'str')
        param_folder = self.get_test_value('get_document_property', 'folder', 'str')
        param_storage = self.get_test_value('get_document_property', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_document_property', 'password', param_password, 'str')
        self.initialize('get_document_property', 'password', param_password)
        ok = False
        try:
            self.api.get_document_property(param_name, param_property_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_document_property', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_document_property', 'password', param_password)
        if ok:
            self.assert_no_exception('get_document_property', 'password')

    def test_get_document_property_invalid_folder(self):
        """Test case for get_document_property with invalid folder
        """
        param_name = self.get_test_value('get_document_property', 'name', 'str')
        param_property_name = self.get_test_value('get_document_property', 'property_name', 'str')
        param_password = self.get_test_value('get_document_property', 'password', 'str')
        param_folder = self.get_test_value('get_document_property', 'folder', 'str')
        param_storage = self.get_test_value('get_document_property', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_document_property', 'folder', param_folder, 'str')
        self.initialize('get_document_property', 'folder', param_folder)
        ok = False
        try:
            self.api.get_document_property(param_name, param_property_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_document_property', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_document_property', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_document_property', 'folder')

    def test_get_document_property_invalid_storage(self):
        """Test case for get_document_property with invalid storage
        """
        param_name = self.get_test_value('get_document_property', 'name', 'str')
        param_property_name = self.get_test_value('get_document_property', 'property_name', 'str')
        param_password = self.get_test_value('get_document_property', 'password', 'str')
        param_folder = self.get_test_value('get_document_property', 'folder', 'str')
        param_storage = self.get_test_value('get_document_property', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_document_property', 'storage', param_storage, 'str')
        self.initialize('get_document_property', 'storage', param_storage)
        ok = False
        try:
            self.api.get_document_property(param_name, param_property_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_document_property', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_document_property', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_document_property', 'storage')

    def test_get_file_versions(self):
        """Test case for get_file_versions
        """
        param_path = self.get_test_value('get_file_versions', 'path', 'str')
        param_storage_name = self.get_test_value('get_file_versions', 'storage_name', 'str')
        self.initialize('get_file_versions', None, None)
        response = self.api.get_file_versions(param_path, param_storage_name)
        self.assertIsNotNone(response)

    def test_get_file_versions_invalid_path(self):
        """Test case for get_file_versions with invalid path
        """
        param_path = self.get_test_value('get_file_versions', 'path', 'str')
        param_storage_name = self.get_test_value('get_file_versions', 'storage_name', 'str')
        param_path = self.get_invalid_test_value('get_file_versions', 'path', param_path, 'str')
        self.initialize('get_file_versions', 'path', param_path)
        ok = False
        try:
            self.api.get_file_versions(param_path, param_storage_name)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_file_versions', 'path', param_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_file_versions', 'path', param_path)
        if ok:
            self.assert_no_exception('get_file_versions', 'path')

    def test_get_file_versions_invalid_storage_name(self):
        """Test case for get_file_versions with invalid storage_name
        """
        param_path = self.get_test_value('get_file_versions', 'path', 'str')
        param_storage_name = self.get_test_value('get_file_versions', 'storage_name', 'str')
        param_storage_name = self.get_invalid_test_value('get_file_versions', 'storage_name', param_storage_name, 'str')
        self.initialize('get_file_versions', 'storage_name', param_storage_name)
        ok = False
        try:
            self.api.get_file_versions(param_path, param_storage_name)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_file_versions', 'storage_name', param_storage_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_file_versions', 'storage_name', param_storage_name)
        if ok:
            self.assert_no_exception('get_file_versions', 'storage_name')

    def test_get_files_list(self):
        """Test case for get_files_list
        """
        param_path = self.get_test_value('get_files_list', 'path', 'str')
        param_storage_name = self.get_test_value('get_files_list', 'storage_name', 'str')
        self.initialize('get_files_list', None, None)
        response = self.api.get_files_list(param_path, param_storage_name)
        self.assertIsNotNone(response)

    def test_get_files_list_invalid_path(self):
        """Test case for get_files_list with invalid path
        """
        param_path = self.get_test_value('get_files_list', 'path', 'str')
        param_storage_name = self.get_test_value('get_files_list', 'storage_name', 'str')
        param_path = self.get_invalid_test_value('get_files_list', 'path', param_path, 'str')
        self.initialize('get_files_list', 'path', param_path)
        ok = False
        try:
            self.api.get_files_list(param_path, param_storage_name)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_files_list', 'path', param_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_files_list', 'path', param_path)
        if ok:
            self.assert_no_exception('get_files_list', 'path')

    def test_get_files_list_invalid_storage_name(self):
        """Test case for get_files_list with invalid storage_name
        """
        param_path = self.get_test_value('get_files_list', 'path', 'str')
        param_storage_name = self.get_test_value('get_files_list', 'storage_name', 'str')
        param_storage_name = self.get_invalid_test_value('get_files_list', 'storage_name', param_storage_name, 'str')
        self.initialize('get_files_list', 'storage_name', param_storage_name)
        ok = False
        try:
            self.api.get_files_list(param_path, param_storage_name)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_files_list', 'storage_name', param_storage_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_files_list', 'storage_name', param_storage_name)
        if ok:
            self.assert_no_exception('get_files_list', 'storage_name')

    def test_get_font_scheme(self):
        """Test case for get_font_scheme
        """
        param_name = self.get_test_value('get_font_scheme', 'name', 'str')
        param_slide_index = self.get_test_value('get_font_scheme', 'slide_index', 'int')
        param_password = self.get_test_value('get_font_scheme', 'password', 'str')
        param_folder = self.get_test_value('get_font_scheme', 'folder', 'str')
        param_storage = self.get_test_value('get_font_scheme', 'storage', 'str')
        self.initialize('get_font_scheme', None, None)
        response = self.api.get_font_scheme(param_name, param_slide_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_font_scheme_invalid_name(self):
        """Test case for get_font_scheme with invalid name
        """
        param_name = self.get_test_value('get_font_scheme', 'name', 'str')
        param_slide_index = self.get_test_value('get_font_scheme', 'slide_index', 'int')
        param_password = self.get_test_value('get_font_scheme', 'password', 'str')
        param_folder = self.get_test_value('get_font_scheme', 'folder', 'str')
        param_storage = self.get_test_value('get_font_scheme', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_font_scheme', 'name', param_name, 'str')
        self.initialize('get_font_scheme', 'name', param_name)
        ok = False
        try:
            self.api.get_font_scheme(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_font_scheme', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_font_scheme', 'name', param_name)
        if ok:
            self.assert_no_exception('get_font_scheme', 'name')

    def test_get_font_scheme_invalid_slide_index(self):
        """Test case for get_font_scheme with invalid slide_index
        """
        param_name = self.get_test_value('get_font_scheme', 'name', 'str')
        param_slide_index = self.get_test_value('get_font_scheme', 'slide_index', 'int')
        param_password = self.get_test_value('get_font_scheme', 'password', 'str')
        param_folder = self.get_test_value('get_font_scheme', 'folder', 'str')
        param_storage = self.get_test_value('get_font_scheme', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('get_font_scheme', 'slide_index', param_slide_index, 'int')
        self.initialize('get_font_scheme', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.get_font_scheme(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_font_scheme', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_font_scheme', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('get_font_scheme', 'slide_index')

    def test_get_font_scheme_invalid_password(self):
        """Test case for get_font_scheme with invalid password
        """
        param_name = self.get_test_value('get_font_scheme', 'name', 'str')
        param_slide_index = self.get_test_value('get_font_scheme', 'slide_index', 'int')
        param_password = self.get_test_value('get_font_scheme', 'password', 'str')
        param_folder = self.get_test_value('get_font_scheme', 'folder', 'str')
        param_storage = self.get_test_value('get_font_scheme', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_font_scheme', 'password', param_password, 'str')
        self.initialize('get_font_scheme', 'password', param_password)
        ok = False
        try:
            self.api.get_font_scheme(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_font_scheme', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_font_scheme', 'password', param_password)
        if ok:
            self.assert_no_exception('get_font_scheme', 'password')

    def test_get_font_scheme_invalid_folder(self):
        """Test case for get_font_scheme with invalid folder
        """
        param_name = self.get_test_value('get_font_scheme', 'name', 'str')
        param_slide_index = self.get_test_value('get_font_scheme', 'slide_index', 'int')
        param_password = self.get_test_value('get_font_scheme', 'password', 'str')
        param_folder = self.get_test_value('get_font_scheme', 'folder', 'str')
        param_storage = self.get_test_value('get_font_scheme', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_font_scheme', 'folder', param_folder, 'str')
        self.initialize('get_font_scheme', 'folder', param_folder)
        ok = False
        try:
            self.api.get_font_scheme(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_font_scheme', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_font_scheme', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_font_scheme', 'folder')

    def test_get_font_scheme_invalid_storage(self):
        """Test case for get_font_scheme with invalid storage
        """
        param_name = self.get_test_value('get_font_scheme', 'name', 'str')
        param_slide_index = self.get_test_value('get_font_scheme', 'slide_index', 'int')
        param_password = self.get_test_value('get_font_scheme', 'password', 'str')
        param_folder = self.get_test_value('get_font_scheme', 'folder', 'str')
        param_storage = self.get_test_value('get_font_scheme', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_font_scheme', 'storage', param_storage, 'str')
        self.initialize('get_font_scheme', 'storage', param_storage)
        ok = False
        try:
            self.api.get_font_scheme(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_font_scheme', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_font_scheme', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_font_scheme', 'storage')

    def test_get_format_scheme(self):
        """Test case for get_format_scheme
        """
        param_name = self.get_test_value('get_format_scheme', 'name', 'str')
        param_slide_index = self.get_test_value('get_format_scheme', 'slide_index', 'int')
        param_password = self.get_test_value('get_format_scheme', 'password', 'str')
        param_folder = self.get_test_value('get_format_scheme', 'folder', 'str')
        param_storage = self.get_test_value('get_format_scheme', 'storage', 'str')
        self.initialize('get_format_scheme', None, None)
        response = self.api.get_format_scheme(param_name, param_slide_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_format_scheme_invalid_name(self):
        """Test case for get_format_scheme with invalid name
        """
        param_name = self.get_test_value('get_format_scheme', 'name', 'str')
        param_slide_index = self.get_test_value('get_format_scheme', 'slide_index', 'int')
        param_password = self.get_test_value('get_format_scheme', 'password', 'str')
        param_folder = self.get_test_value('get_format_scheme', 'folder', 'str')
        param_storage = self.get_test_value('get_format_scheme', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_format_scheme', 'name', param_name, 'str')
        self.initialize('get_format_scheme', 'name', param_name)
        ok = False
        try:
            self.api.get_format_scheme(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_format_scheme', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_format_scheme', 'name', param_name)
        if ok:
            self.assert_no_exception('get_format_scheme', 'name')

    def test_get_format_scheme_invalid_slide_index(self):
        """Test case for get_format_scheme with invalid slide_index
        """
        param_name = self.get_test_value('get_format_scheme', 'name', 'str')
        param_slide_index = self.get_test_value('get_format_scheme', 'slide_index', 'int')
        param_password = self.get_test_value('get_format_scheme', 'password', 'str')
        param_folder = self.get_test_value('get_format_scheme', 'folder', 'str')
        param_storage = self.get_test_value('get_format_scheme', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('get_format_scheme', 'slide_index', param_slide_index, 'int')
        self.initialize('get_format_scheme', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.get_format_scheme(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_format_scheme', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_format_scheme', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('get_format_scheme', 'slide_index')

    def test_get_format_scheme_invalid_password(self):
        """Test case for get_format_scheme with invalid password
        """
        param_name = self.get_test_value('get_format_scheme', 'name', 'str')
        param_slide_index = self.get_test_value('get_format_scheme', 'slide_index', 'int')
        param_password = self.get_test_value('get_format_scheme', 'password', 'str')
        param_folder = self.get_test_value('get_format_scheme', 'folder', 'str')
        param_storage = self.get_test_value('get_format_scheme', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_format_scheme', 'password', param_password, 'str')
        self.initialize('get_format_scheme', 'password', param_password)
        ok = False
        try:
            self.api.get_format_scheme(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_format_scheme', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_format_scheme', 'password', param_password)
        if ok:
            self.assert_no_exception('get_format_scheme', 'password')

    def test_get_format_scheme_invalid_folder(self):
        """Test case for get_format_scheme with invalid folder
        """
        param_name = self.get_test_value('get_format_scheme', 'name', 'str')
        param_slide_index = self.get_test_value('get_format_scheme', 'slide_index', 'int')
        param_password = self.get_test_value('get_format_scheme', 'password', 'str')
        param_folder = self.get_test_value('get_format_scheme', 'folder', 'str')
        param_storage = self.get_test_value('get_format_scheme', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_format_scheme', 'folder', param_folder, 'str')
        self.initialize('get_format_scheme', 'folder', param_folder)
        ok = False
        try:
            self.api.get_format_scheme(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_format_scheme', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_format_scheme', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_format_scheme', 'folder')

    def test_get_format_scheme_invalid_storage(self):
        """Test case for get_format_scheme with invalid storage
        """
        param_name = self.get_test_value('get_format_scheme', 'name', 'str')
        param_slide_index = self.get_test_value('get_format_scheme', 'slide_index', 'int')
        param_password = self.get_test_value('get_format_scheme', 'password', 'str')
        param_folder = self.get_test_value('get_format_scheme', 'folder', 'str')
        param_storage = self.get_test_value('get_format_scheme', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_format_scheme', 'storage', param_storage, 'str')
        self.initialize('get_format_scheme', 'storage', param_storage)
        ok = False
        try:
            self.api.get_format_scheme(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_format_scheme', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_format_scheme', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_format_scheme', 'storage')

    def test_get_layout_slide(self):
        """Test case for get_layout_slide
        """
        param_name = self.get_test_value('get_layout_slide', 'name', 'str')
        param_slide_index = self.get_test_value('get_layout_slide', 'slide_index', 'int')
        param_password = self.get_test_value('get_layout_slide', 'password', 'str')
        param_folder = self.get_test_value('get_layout_slide', 'folder', 'str')
        param_storage = self.get_test_value('get_layout_slide', 'storage', 'str')
        self.initialize('get_layout_slide', None, None)
        response = self.api.get_layout_slide(param_name, param_slide_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_layout_slide_invalid_name(self):
        """Test case for get_layout_slide with invalid name
        """
        param_name = self.get_test_value('get_layout_slide', 'name', 'str')
        param_slide_index = self.get_test_value('get_layout_slide', 'slide_index', 'int')
        param_password = self.get_test_value('get_layout_slide', 'password', 'str')
        param_folder = self.get_test_value('get_layout_slide', 'folder', 'str')
        param_storage = self.get_test_value('get_layout_slide', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_layout_slide', 'name', param_name, 'str')
        self.initialize('get_layout_slide', 'name', param_name)
        ok = False
        try:
            self.api.get_layout_slide(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_layout_slide', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_layout_slide', 'name', param_name)
        if ok:
            self.assert_no_exception('get_layout_slide', 'name')

    def test_get_layout_slide_invalid_slide_index(self):
        """Test case for get_layout_slide with invalid slide_index
        """
        param_name = self.get_test_value('get_layout_slide', 'name', 'str')
        param_slide_index = self.get_test_value('get_layout_slide', 'slide_index', 'int')
        param_password = self.get_test_value('get_layout_slide', 'password', 'str')
        param_folder = self.get_test_value('get_layout_slide', 'folder', 'str')
        param_storage = self.get_test_value('get_layout_slide', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('get_layout_slide', 'slide_index', param_slide_index, 'int')
        self.initialize('get_layout_slide', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.get_layout_slide(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_layout_slide', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_layout_slide', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('get_layout_slide', 'slide_index')

    def test_get_layout_slide_invalid_password(self):
        """Test case for get_layout_slide with invalid password
        """
        param_name = self.get_test_value('get_layout_slide', 'name', 'str')
        param_slide_index = self.get_test_value('get_layout_slide', 'slide_index', 'int')
        param_password = self.get_test_value('get_layout_slide', 'password', 'str')
        param_folder = self.get_test_value('get_layout_slide', 'folder', 'str')
        param_storage = self.get_test_value('get_layout_slide', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_layout_slide', 'password', param_password, 'str')
        self.initialize('get_layout_slide', 'password', param_password)
        ok = False
        try:
            self.api.get_layout_slide(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_layout_slide', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_layout_slide', 'password', param_password)
        if ok:
            self.assert_no_exception('get_layout_slide', 'password')

    def test_get_layout_slide_invalid_folder(self):
        """Test case for get_layout_slide with invalid folder
        """
        param_name = self.get_test_value('get_layout_slide', 'name', 'str')
        param_slide_index = self.get_test_value('get_layout_slide', 'slide_index', 'int')
        param_password = self.get_test_value('get_layout_slide', 'password', 'str')
        param_folder = self.get_test_value('get_layout_slide', 'folder', 'str')
        param_storage = self.get_test_value('get_layout_slide', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_layout_slide', 'folder', param_folder, 'str')
        self.initialize('get_layout_slide', 'folder', param_folder)
        ok = False
        try:
            self.api.get_layout_slide(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_layout_slide', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_layout_slide', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_layout_slide', 'folder')

    def test_get_layout_slide_invalid_storage(self):
        """Test case for get_layout_slide with invalid storage
        """
        param_name = self.get_test_value('get_layout_slide', 'name', 'str')
        param_slide_index = self.get_test_value('get_layout_slide', 'slide_index', 'int')
        param_password = self.get_test_value('get_layout_slide', 'password', 'str')
        param_folder = self.get_test_value('get_layout_slide', 'folder', 'str')
        param_storage = self.get_test_value('get_layout_slide', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_layout_slide', 'storage', param_storage, 'str')
        self.initialize('get_layout_slide', 'storage', param_storage)
        ok = False
        try:
            self.api.get_layout_slide(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_layout_slide', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_layout_slide', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_layout_slide', 'storage')

    def test_get_layout_slides(self):
        """Test case for get_layout_slides
        """
        param_name = self.get_test_value('get_layout_slides', 'name', 'str')
        param_password = self.get_test_value('get_layout_slides', 'password', 'str')
        param_folder = self.get_test_value('get_layout_slides', 'folder', 'str')
        param_storage = self.get_test_value('get_layout_slides', 'storage', 'str')
        self.initialize('get_layout_slides', None, None)
        response = self.api.get_layout_slides(param_name, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_layout_slides_invalid_name(self):
        """Test case for get_layout_slides with invalid name
        """
        param_name = self.get_test_value('get_layout_slides', 'name', 'str')
        param_password = self.get_test_value('get_layout_slides', 'password', 'str')
        param_folder = self.get_test_value('get_layout_slides', 'folder', 'str')
        param_storage = self.get_test_value('get_layout_slides', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_layout_slides', 'name', param_name, 'str')
        self.initialize('get_layout_slides', 'name', param_name)
        ok = False
        try:
            self.api.get_layout_slides(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_layout_slides', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_layout_slides', 'name', param_name)
        if ok:
            self.assert_no_exception('get_layout_slides', 'name')

    def test_get_layout_slides_invalid_password(self):
        """Test case for get_layout_slides with invalid password
        """
        param_name = self.get_test_value('get_layout_slides', 'name', 'str')
        param_password = self.get_test_value('get_layout_slides', 'password', 'str')
        param_folder = self.get_test_value('get_layout_slides', 'folder', 'str')
        param_storage = self.get_test_value('get_layout_slides', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_layout_slides', 'password', param_password, 'str')
        self.initialize('get_layout_slides', 'password', param_password)
        ok = False
        try:
            self.api.get_layout_slides(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_layout_slides', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_layout_slides', 'password', param_password)
        if ok:
            self.assert_no_exception('get_layout_slides', 'password')

    def test_get_layout_slides_invalid_folder(self):
        """Test case for get_layout_slides with invalid folder
        """
        param_name = self.get_test_value('get_layout_slides', 'name', 'str')
        param_password = self.get_test_value('get_layout_slides', 'password', 'str')
        param_folder = self.get_test_value('get_layout_slides', 'folder', 'str')
        param_storage = self.get_test_value('get_layout_slides', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_layout_slides', 'folder', param_folder, 'str')
        self.initialize('get_layout_slides', 'folder', param_folder)
        ok = False
        try:
            self.api.get_layout_slides(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_layout_slides', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_layout_slides', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_layout_slides', 'folder')

    def test_get_layout_slides_invalid_storage(self):
        """Test case for get_layout_slides with invalid storage
        """
        param_name = self.get_test_value('get_layout_slides', 'name', 'str')
        param_password = self.get_test_value('get_layout_slides', 'password', 'str')
        param_folder = self.get_test_value('get_layout_slides', 'folder', 'str')
        param_storage = self.get_test_value('get_layout_slides', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_layout_slides', 'storage', param_storage, 'str')
        self.initialize('get_layout_slides', 'storage', param_storage)
        ok = False
        try:
            self.api.get_layout_slides(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_layout_slides', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_layout_slides', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_layout_slides', 'storage')

    def test_get_master_slide(self):
        """Test case for get_master_slide
        """
        param_name = self.get_test_value('get_master_slide', 'name', 'str')
        param_slide_index = self.get_test_value('get_master_slide', 'slide_index', 'int')
        param_password = self.get_test_value('get_master_slide', 'password', 'str')
        param_folder = self.get_test_value('get_master_slide', 'folder', 'str')
        param_storage = self.get_test_value('get_master_slide', 'storage', 'str')
        self.initialize('get_master_slide', None, None)
        response = self.api.get_master_slide(param_name, param_slide_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_master_slide_invalid_name(self):
        """Test case for get_master_slide with invalid name
        """
        param_name = self.get_test_value('get_master_slide', 'name', 'str')
        param_slide_index = self.get_test_value('get_master_slide', 'slide_index', 'int')
        param_password = self.get_test_value('get_master_slide', 'password', 'str')
        param_folder = self.get_test_value('get_master_slide', 'folder', 'str')
        param_storage = self.get_test_value('get_master_slide', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_master_slide', 'name', param_name, 'str')
        self.initialize('get_master_slide', 'name', param_name)
        ok = False
        try:
            self.api.get_master_slide(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_master_slide', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_master_slide', 'name', param_name)
        if ok:
            self.assert_no_exception('get_master_slide', 'name')

    def test_get_master_slide_invalid_slide_index(self):
        """Test case for get_master_slide with invalid slide_index
        """
        param_name = self.get_test_value('get_master_slide', 'name', 'str')
        param_slide_index = self.get_test_value('get_master_slide', 'slide_index', 'int')
        param_password = self.get_test_value('get_master_slide', 'password', 'str')
        param_folder = self.get_test_value('get_master_slide', 'folder', 'str')
        param_storage = self.get_test_value('get_master_slide', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('get_master_slide', 'slide_index', param_slide_index, 'int')
        self.initialize('get_master_slide', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.get_master_slide(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_master_slide', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_master_slide', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('get_master_slide', 'slide_index')

    def test_get_master_slide_invalid_password(self):
        """Test case for get_master_slide with invalid password
        """
        param_name = self.get_test_value('get_master_slide', 'name', 'str')
        param_slide_index = self.get_test_value('get_master_slide', 'slide_index', 'int')
        param_password = self.get_test_value('get_master_slide', 'password', 'str')
        param_folder = self.get_test_value('get_master_slide', 'folder', 'str')
        param_storage = self.get_test_value('get_master_slide', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_master_slide', 'password', param_password, 'str')
        self.initialize('get_master_slide', 'password', param_password)
        ok = False
        try:
            self.api.get_master_slide(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_master_slide', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_master_slide', 'password', param_password)
        if ok:
            self.assert_no_exception('get_master_slide', 'password')

    def test_get_master_slide_invalid_folder(self):
        """Test case for get_master_slide with invalid folder
        """
        param_name = self.get_test_value('get_master_slide', 'name', 'str')
        param_slide_index = self.get_test_value('get_master_slide', 'slide_index', 'int')
        param_password = self.get_test_value('get_master_slide', 'password', 'str')
        param_folder = self.get_test_value('get_master_slide', 'folder', 'str')
        param_storage = self.get_test_value('get_master_slide', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_master_slide', 'folder', param_folder, 'str')
        self.initialize('get_master_slide', 'folder', param_folder)
        ok = False
        try:
            self.api.get_master_slide(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_master_slide', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_master_slide', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_master_slide', 'folder')

    def test_get_master_slide_invalid_storage(self):
        """Test case for get_master_slide with invalid storage
        """
        param_name = self.get_test_value('get_master_slide', 'name', 'str')
        param_slide_index = self.get_test_value('get_master_slide', 'slide_index', 'int')
        param_password = self.get_test_value('get_master_slide', 'password', 'str')
        param_folder = self.get_test_value('get_master_slide', 'folder', 'str')
        param_storage = self.get_test_value('get_master_slide', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_master_slide', 'storage', param_storage, 'str')
        self.initialize('get_master_slide', 'storage', param_storage)
        ok = False
        try:
            self.api.get_master_slide(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_master_slide', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_master_slide', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_master_slide', 'storage')

    def test_get_master_slides(self):
        """Test case for get_master_slides
        """
        param_name = self.get_test_value('get_master_slides', 'name', 'str')
        param_password = self.get_test_value('get_master_slides', 'password', 'str')
        param_folder = self.get_test_value('get_master_slides', 'folder', 'str')
        param_storage = self.get_test_value('get_master_slides', 'storage', 'str')
        self.initialize('get_master_slides', None, None)
        response = self.api.get_master_slides(param_name, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_master_slides_invalid_name(self):
        """Test case for get_master_slides with invalid name
        """
        param_name = self.get_test_value('get_master_slides', 'name', 'str')
        param_password = self.get_test_value('get_master_slides', 'password', 'str')
        param_folder = self.get_test_value('get_master_slides', 'folder', 'str')
        param_storage = self.get_test_value('get_master_slides', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_master_slides', 'name', param_name, 'str')
        self.initialize('get_master_slides', 'name', param_name)
        ok = False
        try:
            self.api.get_master_slides(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_master_slides', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_master_slides', 'name', param_name)
        if ok:
            self.assert_no_exception('get_master_slides', 'name')

    def test_get_master_slides_invalid_password(self):
        """Test case for get_master_slides with invalid password
        """
        param_name = self.get_test_value('get_master_slides', 'name', 'str')
        param_password = self.get_test_value('get_master_slides', 'password', 'str')
        param_folder = self.get_test_value('get_master_slides', 'folder', 'str')
        param_storage = self.get_test_value('get_master_slides', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_master_slides', 'password', param_password, 'str')
        self.initialize('get_master_slides', 'password', param_password)
        ok = False
        try:
            self.api.get_master_slides(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_master_slides', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_master_slides', 'password', param_password)
        if ok:
            self.assert_no_exception('get_master_slides', 'password')

    def test_get_master_slides_invalid_folder(self):
        """Test case for get_master_slides with invalid folder
        """
        param_name = self.get_test_value('get_master_slides', 'name', 'str')
        param_password = self.get_test_value('get_master_slides', 'password', 'str')
        param_folder = self.get_test_value('get_master_slides', 'folder', 'str')
        param_storage = self.get_test_value('get_master_slides', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_master_slides', 'folder', param_folder, 'str')
        self.initialize('get_master_slides', 'folder', param_folder)
        ok = False
        try:
            self.api.get_master_slides(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_master_slides', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_master_slides', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_master_slides', 'folder')

    def test_get_master_slides_invalid_storage(self):
        """Test case for get_master_slides with invalid storage
        """
        param_name = self.get_test_value('get_master_slides', 'name', 'str')
        param_password = self.get_test_value('get_master_slides', 'password', 'str')
        param_folder = self.get_test_value('get_master_slides', 'folder', 'str')
        param_storage = self.get_test_value('get_master_slides', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_master_slides', 'storage', param_storage, 'str')
        self.initialize('get_master_slides', 'storage', param_storage)
        ok = False
        try:
            self.api.get_master_slides(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_master_slides', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_master_slides', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_master_slides', 'storage')

    def test_get_notes_slide(self):
        """Test case for get_notes_slide
        """
        param_name = self.get_test_value('get_notes_slide', 'name', 'str')
        param_slide_index = self.get_test_value('get_notes_slide', 'slide_index', 'int')
        param_password = self.get_test_value('get_notes_slide', 'password', 'str')
        param_folder = self.get_test_value('get_notes_slide', 'folder', 'str')
        param_storage = self.get_test_value('get_notes_slide', 'storage', 'str')
        self.initialize('get_notes_slide', None, None)
        response = self.api.get_notes_slide(param_name, param_slide_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_notes_slide_invalid_name(self):
        """Test case for get_notes_slide with invalid name
        """
        param_name = self.get_test_value('get_notes_slide', 'name', 'str')
        param_slide_index = self.get_test_value('get_notes_slide', 'slide_index', 'int')
        param_password = self.get_test_value('get_notes_slide', 'password', 'str')
        param_folder = self.get_test_value('get_notes_slide', 'folder', 'str')
        param_storage = self.get_test_value('get_notes_slide', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_notes_slide', 'name', param_name, 'str')
        self.initialize('get_notes_slide', 'name', param_name)
        ok = False
        try:
            self.api.get_notes_slide(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_notes_slide', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_notes_slide', 'name', param_name)
        if ok:
            self.assert_no_exception('get_notes_slide', 'name')

    def test_get_notes_slide_invalid_slide_index(self):
        """Test case for get_notes_slide with invalid slide_index
        """
        param_name = self.get_test_value('get_notes_slide', 'name', 'str')
        param_slide_index = self.get_test_value('get_notes_slide', 'slide_index', 'int')
        param_password = self.get_test_value('get_notes_slide', 'password', 'str')
        param_folder = self.get_test_value('get_notes_slide', 'folder', 'str')
        param_storage = self.get_test_value('get_notes_slide', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('get_notes_slide', 'slide_index', param_slide_index, 'int')
        self.initialize('get_notes_slide', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.get_notes_slide(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_notes_slide', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_notes_slide', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('get_notes_slide', 'slide_index')

    def test_get_notes_slide_invalid_password(self):
        """Test case for get_notes_slide with invalid password
        """
        param_name = self.get_test_value('get_notes_slide', 'name', 'str')
        param_slide_index = self.get_test_value('get_notes_slide', 'slide_index', 'int')
        param_password = self.get_test_value('get_notes_slide', 'password', 'str')
        param_folder = self.get_test_value('get_notes_slide', 'folder', 'str')
        param_storage = self.get_test_value('get_notes_slide', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_notes_slide', 'password', param_password, 'str')
        self.initialize('get_notes_slide', 'password', param_password)
        ok = False
        try:
            self.api.get_notes_slide(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_notes_slide', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_notes_slide', 'password', param_password)
        if ok:
            self.assert_no_exception('get_notes_slide', 'password')

    def test_get_notes_slide_invalid_folder(self):
        """Test case for get_notes_slide with invalid folder
        """
        param_name = self.get_test_value('get_notes_slide', 'name', 'str')
        param_slide_index = self.get_test_value('get_notes_slide', 'slide_index', 'int')
        param_password = self.get_test_value('get_notes_slide', 'password', 'str')
        param_folder = self.get_test_value('get_notes_slide', 'folder', 'str')
        param_storage = self.get_test_value('get_notes_slide', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_notes_slide', 'folder', param_folder, 'str')
        self.initialize('get_notes_slide', 'folder', param_folder)
        ok = False
        try:
            self.api.get_notes_slide(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_notes_slide', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_notes_slide', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_notes_slide', 'folder')

    def test_get_notes_slide_invalid_storage(self):
        """Test case for get_notes_slide with invalid storage
        """
        param_name = self.get_test_value('get_notes_slide', 'name', 'str')
        param_slide_index = self.get_test_value('get_notes_slide', 'slide_index', 'int')
        param_password = self.get_test_value('get_notes_slide', 'password', 'str')
        param_folder = self.get_test_value('get_notes_slide', 'folder', 'str')
        param_storage = self.get_test_value('get_notes_slide', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_notes_slide', 'storage', param_storage, 'str')
        self.initialize('get_notes_slide', 'storage', param_storage)
        ok = False
        try:
            self.api.get_notes_slide(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_notes_slide', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_notes_slide', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_notes_slide', 'storage')

    def test_get_notes_slide_header_footer(self):
        """Test case for get_notes_slide_header_footer
        """
        param_name = self.get_test_value('get_notes_slide_header_footer', 'name', 'str')
        param_slide_index = self.get_test_value('get_notes_slide_header_footer', 'slide_index', 'int')
        param_password = self.get_test_value('get_notes_slide_header_footer', 'password', 'str')
        param_folder = self.get_test_value('get_notes_slide_header_footer', 'folder', 'str')
        param_storage = self.get_test_value('get_notes_slide_header_footer', 'storage', 'str')
        self.initialize('get_notes_slide_header_footer', None, None)
        response = self.api.get_notes_slide_header_footer(param_name, param_slide_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_notes_slide_header_footer_invalid_name(self):
        """Test case for get_notes_slide_header_footer with invalid name
        """
        param_name = self.get_test_value('get_notes_slide_header_footer', 'name', 'str')
        param_slide_index = self.get_test_value('get_notes_slide_header_footer', 'slide_index', 'int')
        param_password = self.get_test_value('get_notes_slide_header_footer', 'password', 'str')
        param_folder = self.get_test_value('get_notes_slide_header_footer', 'folder', 'str')
        param_storage = self.get_test_value('get_notes_slide_header_footer', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_notes_slide_header_footer', 'name', param_name, 'str')
        self.initialize('get_notes_slide_header_footer', 'name', param_name)
        ok = False
        try:
            self.api.get_notes_slide_header_footer(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_notes_slide_header_footer', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_notes_slide_header_footer', 'name', param_name)
        if ok:
            self.assert_no_exception('get_notes_slide_header_footer', 'name')

    def test_get_notes_slide_header_footer_invalid_slide_index(self):
        """Test case for get_notes_slide_header_footer with invalid slide_index
        """
        param_name = self.get_test_value('get_notes_slide_header_footer', 'name', 'str')
        param_slide_index = self.get_test_value('get_notes_slide_header_footer', 'slide_index', 'int')
        param_password = self.get_test_value('get_notes_slide_header_footer', 'password', 'str')
        param_folder = self.get_test_value('get_notes_slide_header_footer', 'folder', 'str')
        param_storage = self.get_test_value('get_notes_slide_header_footer', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('get_notes_slide_header_footer', 'slide_index', param_slide_index, 'int')
        self.initialize('get_notes_slide_header_footer', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.get_notes_slide_header_footer(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_notes_slide_header_footer', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_notes_slide_header_footer', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('get_notes_slide_header_footer', 'slide_index')

    def test_get_notes_slide_header_footer_invalid_password(self):
        """Test case for get_notes_slide_header_footer with invalid password
        """
        param_name = self.get_test_value('get_notes_slide_header_footer', 'name', 'str')
        param_slide_index = self.get_test_value('get_notes_slide_header_footer', 'slide_index', 'int')
        param_password = self.get_test_value('get_notes_slide_header_footer', 'password', 'str')
        param_folder = self.get_test_value('get_notes_slide_header_footer', 'folder', 'str')
        param_storage = self.get_test_value('get_notes_slide_header_footer', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_notes_slide_header_footer', 'password', param_password, 'str')
        self.initialize('get_notes_slide_header_footer', 'password', param_password)
        ok = False
        try:
            self.api.get_notes_slide_header_footer(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_notes_slide_header_footer', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_notes_slide_header_footer', 'password', param_password)
        if ok:
            self.assert_no_exception('get_notes_slide_header_footer', 'password')

    def test_get_notes_slide_header_footer_invalid_folder(self):
        """Test case for get_notes_slide_header_footer with invalid folder
        """
        param_name = self.get_test_value('get_notes_slide_header_footer', 'name', 'str')
        param_slide_index = self.get_test_value('get_notes_slide_header_footer', 'slide_index', 'int')
        param_password = self.get_test_value('get_notes_slide_header_footer', 'password', 'str')
        param_folder = self.get_test_value('get_notes_slide_header_footer', 'folder', 'str')
        param_storage = self.get_test_value('get_notes_slide_header_footer', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_notes_slide_header_footer', 'folder', param_folder, 'str')
        self.initialize('get_notes_slide_header_footer', 'folder', param_folder)
        ok = False
        try:
            self.api.get_notes_slide_header_footer(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_notes_slide_header_footer', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_notes_slide_header_footer', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_notes_slide_header_footer', 'folder')

    def test_get_notes_slide_header_footer_invalid_storage(self):
        """Test case for get_notes_slide_header_footer with invalid storage
        """
        param_name = self.get_test_value('get_notes_slide_header_footer', 'name', 'str')
        param_slide_index = self.get_test_value('get_notes_slide_header_footer', 'slide_index', 'int')
        param_password = self.get_test_value('get_notes_slide_header_footer', 'password', 'str')
        param_folder = self.get_test_value('get_notes_slide_header_footer', 'folder', 'str')
        param_storage = self.get_test_value('get_notes_slide_header_footer', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_notes_slide_header_footer', 'storage', param_storage, 'str')
        self.initialize('get_notes_slide_header_footer', 'storage', param_storage)
        ok = False
        try:
            self.api.get_notes_slide_header_footer(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_notes_slide_header_footer', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_notes_slide_header_footer', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_notes_slide_header_footer', 'storage')

    def test_get_notes_slide_online(self):
        """Test case for get_notes_slide_online
        """
        param_document = self.get_test_value('get_notes_slide_online', 'document', 'file')
        param_slide_index = self.get_test_value('get_notes_slide_online', 'slide_index', 'int')
        param_password = self.get_test_value('get_notes_slide_online', 'password', 'str')
        self.initialize('get_notes_slide_online', None, None)
        response = self.api.get_notes_slide_online(param_document, param_slide_index, param_password)
        self.assertIsNotNone(response)

    def test_get_notes_slide_online_invalid_document(self):
        """Test case for get_notes_slide_online with invalid document
        """
        param_document = self.get_test_value('get_notes_slide_online', 'document', 'file')
        param_slide_index = self.get_test_value('get_notes_slide_online', 'slide_index', 'int')
        param_password = self.get_test_value('get_notes_slide_online', 'password', 'str')
        param_document = self.get_invalid_test_value('get_notes_slide_online', 'document', param_document, 'file')
        self.initialize('get_notes_slide_online', 'document', param_document)
        ok = False
        try:
            self.api.get_notes_slide_online(param_document, param_slide_index, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_notes_slide_online', 'document', param_document)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_notes_slide_online', 'document', param_document)
        if ok:
            self.assert_no_exception('get_notes_slide_online', 'document')

    def test_get_notes_slide_online_invalid_slide_index(self):
        """Test case for get_notes_slide_online with invalid slide_index
        """
        param_document = self.get_test_value('get_notes_slide_online', 'document', 'file')
        param_slide_index = self.get_test_value('get_notes_slide_online', 'slide_index', 'int')
        param_password = self.get_test_value('get_notes_slide_online', 'password', 'str')
        param_slide_index = self.get_invalid_test_value('get_notes_slide_online', 'slide_index', param_slide_index, 'int')
        self.initialize('get_notes_slide_online', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.get_notes_slide_online(param_document, param_slide_index, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_notes_slide_online', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_notes_slide_online', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('get_notes_slide_online', 'slide_index')

    def test_get_notes_slide_online_invalid_password(self):
        """Test case for get_notes_slide_online with invalid password
        """
        param_document = self.get_test_value('get_notes_slide_online', 'document', 'file')
        param_slide_index = self.get_test_value('get_notes_slide_online', 'slide_index', 'int')
        param_password = self.get_test_value('get_notes_slide_online', 'password', 'str')
        param_password = self.get_invalid_test_value('get_notes_slide_online', 'password', param_password, 'str')
        self.initialize('get_notes_slide_online', 'password', param_password)
        ok = False
        try:
            self.api.get_notes_slide_online(param_document, param_slide_index, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_notes_slide_online', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_notes_slide_online', 'password', param_password)
        if ok:
            self.assert_no_exception('get_notes_slide_online', 'password')

    def test_get_paragraph(self):
        """Test case for get_paragraph
        """
        param_name = self.get_test_value('get_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('get_paragraph', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_paragraph', 'password', 'str')
        param_folder = self.get_test_value('get_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('get_paragraph', 'storage', 'str')
        self.initialize('get_paragraph', None, None)
        response = self.api.get_paragraph(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_paragraph_invalid_name(self):
        """Test case for get_paragraph with invalid name
        """
        param_name = self.get_test_value('get_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('get_paragraph', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_paragraph', 'password', 'str')
        param_folder = self.get_test_value('get_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('get_paragraph', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_paragraph', 'name', param_name, 'str')
        self.initialize('get_paragraph', 'name', param_name)
        ok = False
        try:
            self.api.get_paragraph(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_paragraph', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_paragraph', 'name', param_name)
        if ok:
            self.assert_no_exception('get_paragraph', 'name')

    def test_get_paragraph_invalid_slide_index(self):
        """Test case for get_paragraph with invalid slide_index
        """
        param_name = self.get_test_value('get_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('get_paragraph', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_paragraph', 'password', 'str')
        param_folder = self.get_test_value('get_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('get_paragraph', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('get_paragraph', 'slide_index', param_slide_index, 'int')
        self.initialize('get_paragraph', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.get_paragraph(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_paragraph', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_paragraph', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('get_paragraph', 'slide_index')

    def test_get_paragraph_invalid_shape_index(self):
        """Test case for get_paragraph with invalid shape_index
        """
        param_name = self.get_test_value('get_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('get_paragraph', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_paragraph', 'password', 'str')
        param_folder = self.get_test_value('get_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('get_paragraph', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('get_paragraph', 'shape_index', param_shape_index, 'int')
        self.initialize('get_paragraph', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.get_paragraph(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_paragraph', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_paragraph', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('get_paragraph', 'shape_index')

    def test_get_paragraph_invalid_paragraph_index(self):
        """Test case for get_paragraph with invalid paragraph_index
        """
        param_name = self.get_test_value('get_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('get_paragraph', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_paragraph', 'password', 'str')
        param_folder = self.get_test_value('get_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('get_paragraph', 'storage', 'str')
        param_paragraph_index = self.get_invalid_test_value('get_paragraph', 'paragraph_index', param_paragraph_index, 'int')
        self.initialize('get_paragraph', 'paragraph_index', param_paragraph_index)
        ok = False
        try:
            self.api.get_paragraph(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_paragraph', 'paragraph_index', param_paragraph_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_paragraph', 'paragraph_index', param_paragraph_index)
        if ok:
            self.assert_no_exception('get_paragraph', 'paragraph_index')

    def test_get_paragraph_invalid_password(self):
        """Test case for get_paragraph with invalid password
        """
        param_name = self.get_test_value('get_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('get_paragraph', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_paragraph', 'password', 'str')
        param_folder = self.get_test_value('get_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('get_paragraph', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_paragraph', 'password', param_password, 'str')
        self.initialize('get_paragraph', 'password', param_password)
        ok = False
        try:
            self.api.get_paragraph(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_paragraph', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_paragraph', 'password', param_password)
        if ok:
            self.assert_no_exception('get_paragraph', 'password')

    def test_get_paragraph_invalid_folder(self):
        """Test case for get_paragraph with invalid folder
        """
        param_name = self.get_test_value('get_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('get_paragraph', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_paragraph', 'password', 'str')
        param_folder = self.get_test_value('get_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('get_paragraph', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_paragraph', 'folder', param_folder, 'str')
        self.initialize('get_paragraph', 'folder', param_folder)
        ok = False
        try:
            self.api.get_paragraph(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_paragraph', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_paragraph', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_paragraph', 'folder')

    def test_get_paragraph_invalid_storage(self):
        """Test case for get_paragraph with invalid storage
        """
        param_name = self.get_test_value('get_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('get_paragraph', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_paragraph', 'password', 'str')
        param_folder = self.get_test_value('get_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('get_paragraph', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_paragraph', 'storage', param_storage, 'str')
        self.initialize('get_paragraph', 'storage', param_storage)
        ok = False
        try:
            self.api.get_paragraph(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_paragraph', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_paragraph', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_paragraph', 'storage')

    def test_get_paragraphs(self):
        """Test case for get_paragraphs
        """
        param_name = self.get_test_value('get_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('get_paragraphs', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_paragraphs', 'shape_index', 'int')
        param_password = self.get_test_value('get_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('get_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('get_paragraphs', 'storage', 'str')
        self.initialize('get_paragraphs', None, None)
        response = self.api.get_paragraphs(param_name, param_slide_index, param_shape_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_paragraphs_invalid_name(self):
        """Test case for get_paragraphs with invalid name
        """
        param_name = self.get_test_value('get_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('get_paragraphs', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_paragraphs', 'shape_index', 'int')
        param_password = self.get_test_value('get_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('get_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('get_paragraphs', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_paragraphs', 'name', param_name, 'str')
        self.initialize('get_paragraphs', 'name', param_name)
        ok = False
        try:
            self.api.get_paragraphs(param_name, param_slide_index, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_paragraphs', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_paragraphs', 'name', param_name)
        if ok:
            self.assert_no_exception('get_paragraphs', 'name')

    def test_get_paragraphs_invalid_slide_index(self):
        """Test case for get_paragraphs with invalid slide_index
        """
        param_name = self.get_test_value('get_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('get_paragraphs', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_paragraphs', 'shape_index', 'int')
        param_password = self.get_test_value('get_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('get_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('get_paragraphs', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('get_paragraphs', 'slide_index', param_slide_index, 'int')
        self.initialize('get_paragraphs', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.get_paragraphs(param_name, param_slide_index, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_paragraphs', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_paragraphs', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('get_paragraphs', 'slide_index')

    def test_get_paragraphs_invalid_shape_index(self):
        """Test case for get_paragraphs with invalid shape_index
        """
        param_name = self.get_test_value('get_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('get_paragraphs', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_paragraphs', 'shape_index', 'int')
        param_password = self.get_test_value('get_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('get_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('get_paragraphs', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('get_paragraphs', 'shape_index', param_shape_index, 'int')
        self.initialize('get_paragraphs', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.get_paragraphs(param_name, param_slide_index, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_paragraphs', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_paragraphs', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('get_paragraphs', 'shape_index')

    def test_get_paragraphs_invalid_password(self):
        """Test case for get_paragraphs with invalid password
        """
        param_name = self.get_test_value('get_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('get_paragraphs', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_paragraphs', 'shape_index', 'int')
        param_password = self.get_test_value('get_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('get_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('get_paragraphs', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_paragraphs', 'password', param_password, 'str')
        self.initialize('get_paragraphs', 'password', param_password)
        ok = False
        try:
            self.api.get_paragraphs(param_name, param_slide_index, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_paragraphs', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_paragraphs', 'password', param_password)
        if ok:
            self.assert_no_exception('get_paragraphs', 'password')

    def test_get_paragraphs_invalid_folder(self):
        """Test case for get_paragraphs with invalid folder
        """
        param_name = self.get_test_value('get_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('get_paragraphs', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_paragraphs', 'shape_index', 'int')
        param_password = self.get_test_value('get_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('get_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('get_paragraphs', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_paragraphs', 'folder', param_folder, 'str')
        self.initialize('get_paragraphs', 'folder', param_folder)
        ok = False
        try:
            self.api.get_paragraphs(param_name, param_slide_index, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_paragraphs', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_paragraphs', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_paragraphs', 'folder')

    def test_get_paragraphs_invalid_storage(self):
        """Test case for get_paragraphs with invalid storage
        """
        param_name = self.get_test_value('get_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('get_paragraphs', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_paragraphs', 'shape_index', 'int')
        param_password = self.get_test_value('get_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('get_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('get_paragraphs', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_paragraphs', 'storage', param_storage, 'str')
        self.initialize('get_paragraphs', 'storage', param_storage)
        ok = False
        try:
            self.api.get_paragraphs(param_name, param_slide_index, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_paragraphs', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_paragraphs', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_paragraphs', 'storage')

    def test_get_placeholder(self):
        """Test case for get_placeholder
        """
        param_name = self.get_test_value('get_placeholder', 'name', 'str')
        param_slide_index = self.get_test_value('get_placeholder', 'slide_index', 'int')
        param_placeholder_index = self.get_test_value('get_placeholder', 'placeholder_index', 'int')
        param_password = self.get_test_value('get_placeholder', 'password', 'str')
        param_folder = self.get_test_value('get_placeholder', 'folder', 'str')
        param_storage = self.get_test_value('get_placeholder', 'storage', 'str')
        self.initialize('get_placeholder', None, None)
        response = self.api.get_placeholder(param_name, param_slide_index, param_placeholder_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_placeholder_invalid_name(self):
        """Test case for get_placeholder with invalid name
        """
        param_name = self.get_test_value('get_placeholder', 'name', 'str')
        param_slide_index = self.get_test_value('get_placeholder', 'slide_index', 'int')
        param_placeholder_index = self.get_test_value('get_placeholder', 'placeholder_index', 'int')
        param_password = self.get_test_value('get_placeholder', 'password', 'str')
        param_folder = self.get_test_value('get_placeholder', 'folder', 'str')
        param_storage = self.get_test_value('get_placeholder', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_placeholder', 'name', param_name, 'str')
        self.initialize('get_placeholder', 'name', param_name)
        ok = False
        try:
            self.api.get_placeholder(param_name, param_slide_index, param_placeholder_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_placeholder', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_placeholder', 'name', param_name)
        if ok:
            self.assert_no_exception('get_placeholder', 'name')

    def test_get_placeholder_invalid_slide_index(self):
        """Test case for get_placeholder with invalid slide_index
        """
        param_name = self.get_test_value('get_placeholder', 'name', 'str')
        param_slide_index = self.get_test_value('get_placeholder', 'slide_index', 'int')
        param_placeholder_index = self.get_test_value('get_placeholder', 'placeholder_index', 'int')
        param_password = self.get_test_value('get_placeholder', 'password', 'str')
        param_folder = self.get_test_value('get_placeholder', 'folder', 'str')
        param_storage = self.get_test_value('get_placeholder', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('get_placeholder', 'slide_index', param_slide_index, 'int')
        self.initialize('get_placeholder', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.get_placeholder(param_name, param_slide_index, param_placeholder_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_placeholder', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_placeholder', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('get_placeholder', 'slide_index')

    def test_get_placeholder_invalid_placeholder_index(self):
        """Test case for get_placeholder with invalid placeholder_index
        """
        param_name = self.get_test_value('get_placeholder', 'name', 'str')
        param_slide_index = self.get_test_value('get_placeholder', 'slide_index', 'int')
        param_placeholder_index = self.get_test_value('get_placeholder', 'placeholder_index', 'int')
        param_password = self.get_test_value('get_placeholder', 'password', 'str')
        param_folder = self.get_test_value('get_placeholder', 'folder', 'str')
        param_storage = self.get_test_value('get_placeholder', 'storage', 'str')
        param_placeholder_index = self.get_invalid_test_value('get_placeholder', 'placeholder_index', param_placeholder_index, 'int')
        self.initialize('get_placeholder', 'placeholder_index', param_placeholder_index)
        ok = False
        try:
            self.api.get_placeholder(param_name, param_slide_index, param_placeholder_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_placeholder', 'placeholder_index', param_placeholder_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_placeholder', 'placeholder_index', param_placeholder_index)
        if ok:
            self.assert_no_exception('get_placeholder', 'placeholder_index')

    def test_get_placeholder_invalid_password(self):
        """Test case for get_placeholder with invalid password
        """
        param_name = self.get_test_value('get_placeholder', 'name', 'str')
        param_slide_index = self.get_test_value('get_placeholder', 'slide_index', 'int')
        param_placeholder_index = self.get_test_value('get_placeholder', 'placeholder_index', 'int')
        param_password = self.get_test_value('get_placeholder', 'password', 'str')
        param_folder = self.get_test_value('get_placeholder', 'folder', 'str')
        param_storage = self.get_test_value('get_placeholder', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_placeholder', 'password', param_password, 'str')
        self.initialize('get_placeholder', 'password', param_password)
        ok = False
        try:
            self.api.get_placeholder(param_name, param_slide_index, param_placeholder_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_placeholder', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_placeholder', 'password', param_password)
        if ok:
            self.assert_no_exception('get_placeholder', 'password')

    def test_get_placeholder_invalid_folder(self):
        """Test case for get_placeholder with invalid folder
        """
        param_name = self.get_test_value('get_placeholder', 'name', 'str')
        param_slide_index = self.get_test_value('get_placeholder', 'slide_index', 'int')
        param_placeholder_index = self.get_test_value('get_placeholder', 'placeholder_index', 'int')
        param_password = self.get_test_value('get_placeholder', 'password', 'str')
        param_folder = self.get_test_value('get_placeholder', 'folder', 'str')
        param_storage = self.get_test_value('get_placeholder', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_placeholder', 'folder', param_folder, 'str')
        self.initialize('get_placeholder', 'folder', param_folder)
        ok = False
        try:
            self.api.get_placeholder(param_name, param_slide_index, param_placeholder_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_placeholder', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_placeholder', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_placeholder', 'folder')

    def test_get_placeholder_invalid_storage(self):
        """Test case for get_placeholder with invalid storage
        """
        param_name = self.get_test_value('get_placeholder', 'name', 'str')
        param_slide_index = self.get_test_value('get_placeholder', 'slide_index', 'int')
        param_placeholder_index = self.get_test_value('get_placeholder', 'placeholder_index', 'int')
        param_password = self.get_test_value('get_placeholder', 'password', 'str')
        param_folder = self.get_test_value('get_placeholder', 'folder', 'str')
        param_storage = self.get_test_value('get_placeholder', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_placeholder', 'storage', param_storage, 'str')
        self.initialize('get_placeholder', 'storage', param_storage)
        ok = False
        try:
            self.api.get_placeholder(param_name, param_slide_index, param_placeholder_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_placeholder', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_placeholder', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_placeholder', 'storage')

    def test_get_placeholders(self):
        """Test case for get_placeholders
        """
        param_name = self.get_test_value('get_placeholders', 'name', 'str')
        param_slide_index = self.get_test_value('get_placeholders', 'slide_index', 'int')
        param_password = self.get_test_value('get_placeholders', 'password', 'str')
        param_folder = self.get_test_value('get_placeholders', 'folder', 'str')
        param_storage = self.get_test_value('get_placeholders', 'storage', 'str')
        self.initialize('get_placeholders', None, None)
        response = self.api.get_placeholders(param_name, param_slide_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_placeholders_invalid_name(self):
        """Test case for get_placeholders with invalid name
        """
        param_name = self.get_test_value('get_placeholders', 'name', 'str')
        param_slide_index = self.get_test_value('get_placeholders', 'slide_index', 'int')
        param_password = self.get_test_value('get_placeholders', 'password', 'str')
        param_folder = self.get_test_value('get_placeholders', 'folder', 'str')
        param_storage = self.get_test_value('get_placeholders', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_placeholders', 'name', param_name, 'str')
        self.initialize('get_placeholders', 'name', param_name)
        ok = False
        try:
            self.api.get_placeholders(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_placeholders', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_placeholders', 'name', param_name)
        if ok:
            self.assert_no_exception('get_placeholders', 'name')

    def test_get_placeholders_invalid_slide_index(self):
        """Test case for get_placeholders with invalid slide_index
        """
        param_name = self.get_test_value('get_placeholders', 'name', 'str')
        param_slide_index = self.get_test_value('get_placeholders', 'slide_index', 'int')
        param_password = self.get_test_value('get_placeholders', 'password', 'str')
        param_folder = self.get_test_value('get_placeholders', 'folder', 'str')
        param_storage = self.get_test_value('get_placeholders', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('get_placeholders', 'slide_index', param_slide_index, 'int')
        self.initialize('get_placeholders', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.get_placeholders(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_placeholders', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_placeholders', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('get_placeholders', 'slide_index')

    def test_get_placeholders_invalid_password(self):
        """Test case for get_placeholders with invalid password
        """
        param_name = self.get_test_value('get_placeholders', 'name', 'str')
        param_slide_index = self.get_test_value('get_placeholders', 'slide_index', 'int')
        param_password = self.get_test_value('get_placeholders', 'password', 'str')
        param_folder = self.get_test_value('get_placeholders', 'folder', 'str')
        param_storage = self.get_test_value('get_placeholders', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_placeholders', 'password', param_password, 'str')
        self.initialize('get_placeholders', 'password', param_password)
        ok = False
        try:
            self.api.get_placeholders(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_placeholders', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_placeholders', 'password', param_password)
        if ok:
            self.assert_no_exception('get_placeholders', 'password')

    def test_get_placeholders_invalid_folder(self):
        """Test case for get_placeholders with invalid folder
        """
        param_name = self.get_test_value('get_placeholders', 'name', 'str')
        param_slide_index = self.get_test_value('get_placeholders', 'slide_index', 'int')
        param_password = self.get_test_value('get_placeholders', 'password', 'str')
        param_folder = self.get_test_value('get_placeholders', 'folder', 'str')
        param_storage = self.get_test_value('get_placeholders', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_placeholders', 'folder', param_folder, 'str')
        self.initialize('get_placeholders', 'folder', param_folder)
        ok = False
        try:
            self.api.get_placeholders(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_placeholders', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_placeholders', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_placeholders', 'folder')

    def test_get_placeholders_invalid_storage(self):
        """Test case for get_placeholders with invalid storage
        """
        param_name = self.get_test_value('get_placeholders', 'name', 'str')
        param_slide_index = self.get_test_value('get_placeholders', 'slide_index', 'int')
        param_password = self.get_test_value('get_placeholders', 'password', 'str')
        param_folder = self.get_test_value('get_placeholders', 'folder', 'str')
        param_storage = self.get_test_value('get_placeholders', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_placeholders', 'storage', param_storage, 'str')
        self.initialize('get_placeholders', 'storage', param_storage)
        ok = False
        try:
            self.api.get_placeholders(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_placeholders', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_placeholders', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_placeholders', 'storage')

    def test_get_portion(self):
        """Test case for get_portion
        """
        param_name = self.get_test_value('get_portion', 'name', 'str')
        param_slide_index = self.get_test_value('get_portion', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('get_portion', 'portion_index', 'int')
        param_password = self.get_test_value('get_portion', 'password', 'str')
        param_folder = self.get_test_value('get_portion', 'folder', 'str')
        param_storage = self.get_test_value('get_portion', 'storage', 'str')
        self.initialize('get_portion', None, None)
        response = self.api.get_portion(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_portion_invalid_name(self):
        """Test case for get_portion with invalid name
        """
        param_name = self.get_test_value('get_portion', 'name', 'str')
        param_slide_index = self.get_test_value('get_portion', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('get_portion', 'portion_index', 'int')
        param_password = self.get_test_value('get_portion', 'password', 'str')
        param_folder = self.get_test_value('get_portion', 'folder', 'str')
        param_storage = self.get_test_value('get_portion', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_portion', 'name', param_name, 'str')
        self.initialize('get_portion', 'name', param_name)
        ok = False
        try:
            self.api.get_portion(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_portion', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_portion', 'name', param_name)
        if ok:
            self.assert_no_exception('get_portion', 'name')

    def test_get_portion_invalid_slide_index(self):
        """Test case for get_portion with invalid slide_index
        """
        param_name = self.get_test_value('get_portion', 'name', 'str')
        param_slide_index = self.get_test_value('get_portion', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('get_portion', 'portion_index', 'int')
        param_password = self.get_test_value('get_portion', 'password', 'str')
        param_folder = self.get_test_value('get_portion', 'folder', 'str')
        param_storage = self.get_test_value('get_portion', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('get_portion', 'slide_index', param_slide_index, 'int')
        self.initialize('get_portion', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.get_portion(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_portion', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_portion', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('get_portion', 'slide_index')

    def test_get_portion_invalid_shape_index(self):
        """Test case for get_portion with invalid shape_index
        """
        param_name = self.get_test_value('get_portion', 'name', 'str')
        param_slide_index = self.get_test_value('get_portion', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('get_portion', 'portion_index', 'int')
        param_password = self.get_test_value('get_portion', 'password', 'str')
        param_folder = self.get_test_value('get_portion', 'folder', 'str')
        param_storage = self.get_test_value('get_portion', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('get_portion', 'shape_index', param_shape_index, 'int')
        self.initialize('get_portion', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.get_portion(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_portion', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_portion', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('get_portion', 'shape_index')

    def test_get_portion_invalid_paragraph_index(self):
        """Test case for get_portion with invalid paragraph_index
        """
        param_name = self.get_test_value('get_portion', 'name', 'str')
        param_slide_index = self.get_test_value('get_portion', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('get_portion', 'portion_index', 'int')
        param_password = self.get_test_value('get_portion', 'password', 'str')
        param_folder = self.get_test_value('get_portion', 'folder', 'str')
        param_storage = self.get_test_value('get_portion', 'storage', 'str')
        param_paragraph_index = self.get_invalid_test_value('get_portion', 'paragraph_index', param_paragraph_index, 'int')
        self.initialize('get_portion', 'paragraph_index', param_paragraph_index)
        ok = False
        try:
            self.api.get_portion(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_portion', 'paragraph_index', param_paragraph_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_portion', 'paragraph_index', param_paragraph_index)
        if ok:
            self.assert_no_exception('get_portion', 'paragraph_index')

    def test_get_portion_invalid_portion_index(self):
        """Test case for get_portion with invalid portion_index
        """
        param_name = self.get_test_value('get_portion', 'name', 'str')
        param_slide_index = self.get_test_value('get_portion', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('get_portion', 'portion_index', 'int')
        param_password = self.get_test_value('get_portion', 'password', 'str')
        param_folder = self.get_test_value('get_portion', 'folder', 'str')
        param_storage = self.get_test_value('get_portion', 'storage', 'str')
        param_portion_index = self.get_invalid_test_value('get_portion', 'portion_index', param_portion_index, 'int')
        self.initialize('get_portion', 'portion_index', param_portion_index)
        ok = False
        try:
            self.api.get_portion(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_portion', 'portion_index', param_portion_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_portion', 'portion_index', param_portion_index)
        if ok:
            self.assert_no_exception('get_portion', 'portion_index')

    def test_get_portion_invalid_password(self):
        """Test case for get_portion with invalid password
        """
        param_name = self.get_test_value('get_portion', 'name', 'str')
        param_slide_index = self.get_test_value('get_portion', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('get_portion', 'portion_index', 'int')
        param_password = self.get_test_value('get_portion', 'password', 'str')
        param_folder = self.get_test_value('get_portion', 'folder', 'str')
        param_storage = self.get_test_value('get_portion', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_portion', 'password', param_password, 'str')
        self.initialize('get_portion', 'password', param_password)
        ok = False
        try:
            self.api.get_portion(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_portion', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_portion', 'password', param_password)
        if ok:
            self.assert_no_exception('get_portion', 'password')

    def test_get_portion_invalid_folder(self):
        """Test case for get_portion with invalid folder
        """
        param_name = self.get_test_value('get_portion', 'name', 'str')
        param_slide_index = self.get_test_value('get_portion', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('get_portion', 'portion_index', 'int')
        param_password = self.get_test_value('get_portion', 'password', 'str')
        param_folder = self.get_test_value('get_portion', 'folder', 'str')
        param_storage = self.get_test_value('get_portion', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_portion', 'folder', param_folder, 'str')
        self.initialize('get_portion', 'folder', param_folder)
        ok = False
        try:
            self.api.get_portion(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_portion', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_portion', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_portion', 'folder')

    def test_get_portion_invalid_storage(self):
        """Test case for get_portion with invalid storage
        """
        param_name = self.get_test_value('get_portion', 'name', 'str')
        param_slide_index = self.get_test_value('get_portion', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('get_portion', 'portion_index', 'int')
        param_password = self.get_test_value('get_portion', 'password', 'str')
        param_folder = self.get_test_value('get_portion', 'folder', 'str')
        param_storage = self.get_test_value('get_portion', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_portion', 'storage', param_storage, 'str')
        self.initialize('get_portion', 'storage', param_storage)
        ok = False
        try:
            self.api.get_portion(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_portion', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_portion', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_portion', 'storage')

    def test_get_portions(self):
        """Test case for get_portions
        """
        param_name = self.get_test_value('get_portions', 'name', 'str')
        param_slide_index = self.get_test_value('get_portions', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_portions', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_portions', 'password', 'str')
        param_folder = self.get_test_value('get_portions', 'folder', 'str')
        param_storage = self.get_test_value('get_portions', 'storage', 'str')
        self.initialize('get_portions', None, None)
        response = self.api.get_portions(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_portions_invalid_name(self):
        """Test case for get_portions with invalid name
        """
        param_name = self.get_test_value('get_portions', 'name', 'str')
        param_slide_index = self.get_test_value('get_portions', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_portions', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_portions', 'password', 'str')
        param_folder = self.get_test_value('get_portions', 'folder', 'str')
        param_storage = self.get_test_value('get_portions', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_portions', 'name', param_name, 'str')
        self.initialize('get_portions', 'name', param_name)
        ok = False
        try:
            self.api.get_portions(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_portions', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_portions', 'name', param_name)
        if ok:
            self.assert_no_exception('get_portions', 'name')

    def test_get_portions_invalid_slide_index(self):
        """Test case for get_portions with invalid slide_index
        """
        param_name = self.get_test_value('get_portions', 'name', 'str')
        param_slide_index = self.get_test_value('get_portions', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_portions', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_portions', 'password', 'str')
        param_folder = self.get_test_value('get_portions', 'folder', 'str')
        param_storage = self.get_test_value('get_portions', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('get_portions', 'slide_index', param_slide_index, 'int')
        self.initialize('get_portions', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.get_portions(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_portions', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_portions', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('get_portions', 'slide_index')

    def test_get_portions_invalid_shape_index(self):
        """Test case for get_portions with invalid shape_index
        """
        param_name = self.get_test_value('get_portions', 'name', 'str')
        param_slide_index = self.get_test_value('get_portions', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_portions', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_portions', 'password', 'str')
        param_folder = self.get_test_value('get_portions', 'folder', 'str')
        param_storage = self.get_test_value('get_portions', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('get_portions', 'shape_index', param_shape_index, 'int')
        self.initialize('get_portions', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.get_portions(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_portions', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_portions', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('get_portions', 'shape_index')

    def test_get_portions_invalid_paragraph_index(self):
        """Test case for get_portions with invalid paragraph_index
        """
        param_name = self.get_test_value('get_portions', 'name', 'str')
        param_slide_index = self.get_test_value('get_portions', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_portions', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_portions', 'password', 'str')
        param_folder = self.get_test_value('get_portions', 'folder', 'str')
        param_storage = self.get_test_value('get_portions', 'storage', 'str')
        param_paragraph_index = self.get_invalid_test_value('get_portions', 'paragraph_index', param_paragraph_index, 'int')
        self.initialize('get_portions', 'paragraph_index', param_paragraph_index)
        ok = False
        try:
            self.api.get_portions(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_portions', 'paragraph_index', param_paragraph_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_portions', 'paragraph_index', param_paragraph_index)
        if ok:
            self.assert_no_exception('get_portions', 'paragraph_index')

    def test_get_portions_invalid_password(self):
        """Test case for get_portions with invalid password
        """
        param_name = self.get_test_value('get_portions', 'name', 'str')
        param_slide_index = self.get_test_value('get_portions', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_portions', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_portions', 'password', 'str')
        param_folder = self.get_test_value('get_portions', 'folder', 'str')
        param_storage = self.get_test_value('get_portions', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_portions', 'password', param_password, 'str')
        self.initialize('get_portions', 'password', param_password)
        ok = False
        try:
            self.api.get_portions(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_portions', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_portions', 'password', param_password)
        if ok:
            self.assert_no_exception('get_portions', 'password')

    def test_get_portions_invalid_folder(self):
        """Test case for get_portions with invalid folder
        """
        param_name = self.get_test_value('get_portions', 'name', 'str')
        param_slide_index = self.get_test_value('get_portions', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_portions', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_portions', 'password', 'str')
        param_folder = self.get_test_value('get_portions', 'folder', 'str')
        param_storage = self.get_test_value('get_portions', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_portions', 'folder', param_folder, 'str')
        self.initialize('get_portions', 'folder', param_folder)
        ok = False
        try:
            self.api.get_portions(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_portions', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_portions', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_portions', 'folder')

    def test_get_portions_invalid_storage(self):
        """Test case for get_portions with invalid storage
        """
        param_name = self.get_test_value('get_portions', 'name', 'str')
        param_slide_index = self.get_test_value('get_portions', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_portions', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_portions', 'password', 'str')
        param_folder = self.get_test_value('get_portions', 'folder', 'str')
        param_storage = self.get_test_value('get_portions', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_portions', 'storage', param_storage, 'str')
        self.initialize('get_portions', 'storage', param_storage)
        ok = False
        try:
            self.api.get_portions(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_portions', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_portions', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_portions', 'storage')

    def test_get_presentation(self):
        """Test case for get_presentation
        """
        param_name = self.get_test_value('get_presentation', 'name', 'str')
        param_password = self.get_test_value('get_presentation', 'password', 'str')
        param_folder = self.get_test_value('get_presentation', 'folder', 'str')
        param_storage = self.get_test_value('get_presentation', 'storage', 'str')
        self.initialize('get_presentation', None, None)
        response = self.api.get_presentation(param_name, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_presentation_invalid_name(self):
        """Test case for get_presentation with invalid name
        """
        param_name = self.get_test_value('get_presentation', 'name', 'str')
        param_password = self.get_test_value('get_presentation', 'password', 'str')
        param_folder = self.get_test_value('get_presentation', 'folder', 'str')
        param_storage = self.get_test_value('get_presentation', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_presentation', 'name', param_name, 'str')
        self.initialize('get_presentation', 'name', param_name)
        ok = False
        try:
            self.api.get_presentation(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_presentation', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_presentation', 'name', param_name)
        if ok:
            self.assert_no_exception('get_presentation', 'name')

    def test_get_presentation_invalid_password(self):
        """Test case for get_presentation with invalid password
        """
        param_name = self.get_test_value('get_presentation', 'name', 'str')
        param_password = self.get_test_value('get_presentation', 'password', 'str')
        param_folder = self.get_test_value('get_presentation', 'folder', 'str')
        param_storage = self.get_test_value('get_presentation', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_presentation', 'password', param_password, 'str')
        self.initialize('get_presentation', 'password', param_password)
        ok = False
        try:
            self.api.get_presentation(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_presentation', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_presentation', 'password', param_password)
        if ok:
            self.assert_no_exception('get_presentation', 'password')

    def test_get_presentation_invalid_folder(self):
        """Test case for get_presentation with invalid folder
        """
        param_name = self.get_test_value('get_presentation', 'name', 'str')
        param_password = self.get_test_value('get_presentation', 'password', 'str')
        param_folder = self.get_test_value('get_presentation', 'folder', 'str')
        param_storage = self.get_test_value('get_presentation', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_presentation', 'folder', param_folder, 'str')
        self.initialize('get_presentation', 'folder', param_folder)
        ok = False
        try:
            self.api.get_presentation(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_presentation', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_presentation', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_presentation', 'folder')

    def test_get_presentation_invalid_storage(self):
        """Test case for get_presentation with invalid storage
        """
        param_name = self.get_test_value('get_presentation', 'name', 'str')
        param_password = self.get_test_value('get_presentation', 'password', 'str')
        param_folder = self.get_test_value('get_presentation', 'folder', 'str')
        param_storage = self.get_test_value('get_presentation', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_presentation', 'storage', param_storage, 'str')
        self.initialize('get_presentation', 'storage', param_storage)
        ok = False
        try:
            self.api.get_presentation(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_presentation', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_presentation', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_presentation', 'storage')

    def test_get_presentation_images(self):
        """Test case for get_presentation_images
        """
        param_name = self.get_test_value('get_presentation_images', 'name', 'str')
        param_password = self.get_test_value('get_presentation_images', 'password', 'str')
        param_folder = self.get_test_value('get_presentation_images', 'folder', 'str')
        param_storage = self.get_test_value('get_presentation_images', 'storage', 'str')
        self.initialize('get_presentation_images', None, None)
        response = self.api.get_presentation_images(param_name, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_presentation_images_invalid_name(self):
        """Test case for get_presentation_images with invalid name
        """
        param_name = self.get_test_value('get_presentation_images', 'name', 'str')
        param_password = self.get_test_value('get_presentation_images', 'password', 'str')
        param_folder = self.get_test_value('get_presentation_images', 'folder', 'str')
        param_storage = self.get_test_value('get_presentation_images', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_presentation_images', 'name', param_name, 'str')
        self.initialize('get_presentation_images', 'name', param_name)
        ok = False
        try:
            self.api.get_presentation_images(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_presentation_images', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_presentation_images', 'name', param_name)
        if ok:
            self.assert_no_exception('get_presentation_images', 'name')

    def test_get_presentation_images_invalid_password(self):
        """Test case for get_presentation_images with invalid password
        """
        param_name = self.get_test_value('get_presentation_images', 'name', 'str')
        param_password = self.get_test_value('get_presentation_images', 'password', 'str')
        param_folder = self.get_test_value('get_presentation_images', 'folder', 'str')
        param_storage = self.get_test_value('get_presentation_images', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_presentation_images', 'password', param_password, 'str')
        self.initialize('get_presentation_images', 'password', param_password)
        ok = False
        try:
            self.api.get_presentation_images(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_presentation_images', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_presentation_images', 'password', param_password)
        if ok:
            self.assert_no_exception('get_presentation_images', 'password')

    def test_get_presentation_images_invalid_folder(self):
        """Test case for get_presentation_images with invalid folder
        """
        param_name = self.get_test_value('get_presentation_images', 'name', 'str')
        param_password = self.get_test_value('get_presentation_images', 'password', 'str')
        param_folder = self.get_test_value('get_presentation_images', 'folder', 'str')
        param_storage = self.get_test_value('get_presentation_images', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_presentation_images', 'folder', param_folder, 'str')
        self.initialize('get_presentation_images', 'folder', param_folder)
        ok = False
        try:
            self.api.get_presentation_images(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_presentation_images', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_presentation_images', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_presentation_images', 'folder')

    def test_get_presentation_images_invalid_storage(self):
        """Test case for get_presentation_images with invalid storage
        """
        param_name = self.get_test_value('get_presentation_images', 'name', 'str')
        param_password = self.get_test_value('get_presentation_images', 'password', 'str')
        param_folder = self.get_test_value('get_presentation_images', 'folder', 'str')
        param_storage = self.get_test_value('get_presentation_images', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_presentation_images', 'storage', param_storage, 'str')
        self.initialize('get_presentation_images', 'storage', param_storage)
        ok = False
        try:
            self.api.get_presentation_images(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_presentation_images', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_presentation_images', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_presentation_images', 'storage')

    def test_get_presentation_text_items(self):
        """Test case for get_presentation_text_items
        """
        param_name = self.get_test_value('get_presentation_text_items', 'name', 'str')
        param_with_empty = self.get_test_value('get_presentation_text_items', 'with_empty', 'bool')
        param_password = self.get_test_value('get_presentation_text_items', 'password', 'str')
        param_folder = self.get_test_value('get_presentation_text_items', 'folder', 'str')
        param_storage = self.get_test_value('get_presentation_text_items', 'storage', 'str')
        self.initialize('get_presentation_text_items', None, None)
        response = self.api.get_presentation_text_items(param_name, param_with_empty, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_presentation_text_items_invalid_name(self):
        """Test case for get_presentation_text_items with invalid name
        """
        param_name = self.get_test_value('get_presentation_text_items', 'name', 'str')
        param_with_empty = self.get_test_value('get_presentation_text_items', 'with_empty', 'bool')
        param_password = self.get_test_value('get_presentation_text_items', 'password', 'str')
        param_folder = self.get_test_value('get_presentation_text_items', 'folder', 'str')
        param_storage = self.get_test_value('get_presentation_text_items', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_presentation_text_items', 'name', param_name, 'str')
        self.initialize('get_presentation_text_items', 'name', param_name)
        ok = False
        try:
            self.api.get_presentation_text_items(param_name, param_with_empty, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_presentation_text_items', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_presentation_text_items', 'name', param_name)
        if ok:
            self.assert_no_exception('get_presentation_text_items', 'name')

    def test_get_presentation_text_items_invalid_with_empty(self):
        """Test case for get_presentation_text_items with invalid with_empty
        """
        param_name = self.get_test_value('get_presentation_text_items', 'name', 'str')
        param_with_empty = self.get_test_value('get_presentation_text_items', 'with_empty', 'bool')
        param_password = self.get_test_value('get_presentation_text_items', 'password', 'str')
        param_folder = self.get_test_value('get_presentation_text_items', 'folder', 'str')
        param_storage = self.get_test_value('get_presentation_text_items', 'storage', 'str')
        param_with_empty = self.get_invalid_test_value('get_presentation_text_items', 'with_empty', param_with_empty, 'bool')
        self.initialize('get_presentation_text_items', 'with_empty', param_with_empty)
        ok = False
        try:
            self.api.get_presentation_text_items(param_name, param_with_empty, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_presentation_text_items', 'with_empty', param_with_empty)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_presentation_text_items', 'with_empty', param_with_empty)
        if ok:
            self.assert_no_exception('get_presentation_text_items', 'with_empty')

    def test_get_presentation_text_items_invalid_password(self):
        """Test case for get_presentation_text_items with invalid password
        """
        param_name = self.get_test_value('get_presentation_text_items', 'name', 'str')
        param_with_empty = self.get_test_value('get_presentation_text_items', 'with_empty', 'bool')
        param_password = self.get_test_value('get_presentation_text_items', 'password', 'str')
        param_folder = self.get_test_value('get_presentation_text_items', 'folder', 'str')
        param_storage = self.get_test_value('get_presentation_text_items', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_presentation_text_items', 'password', param_password, 'str')
        self.initialize('get_presentation_text_items', 'password', param_password)
        ok = False
        try:
            self.api.get_presentation_text_items(param_name, param_with_empty, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_presentation_text_items', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_presentation_text_items', 'password', param_password)
        if ok:
            self.assert_no_exception('get_presentation_text_items', 'password')

    def test_get_presentation_text_items_invalid_folder(self):
        """Test case for get_presentation_text_items with invalid folder
        """
        param_name = self.get_test_value('get_presentation_text_items', 'name', 'str')
        param_with_empty = self.get_test_value('get_presentation_text_items', 'with_empty', 'bool')
        param_password = self.get_test_value('get_presentation_text_items', 'password', 'str')
        param_folder = self.get_test_value('get_presentation_text_items', 'folder', 'str')
        param_storage = self.get_test_value('get_presentation_text_items', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_presentation_text_items', 'folder', param_folder, 'str')
        self.initialize('get_presentation_text_items', 'folder', param_folder)
        ok = False
        try:
            self.api.get_presentation_text_items(param_name, param_with_empty, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_presentation_text_items', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_presentation_text_items', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_presentation_text_items', 'folder')

    def test_get_presentation_text_items_invalid_storage(self):
        """Test case for get_presentation_text_items with invalid storage
        """
        param_name = self.get_test_value('get_presentation_text_items', 'name', 'str')
        param_with_empty = self.get_test_value('get_presentation_text_items', 'with_empty', 'bool')
        param_password = self.get_test_value('get_presentation_text_items', 'password', 'str')
        param_folder = self.get_test_value('get_presentation_text_items', 'folder', 'str')
        param_storage = self.get_test_value('get_presentation_text_items', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_presentation_text_items', 'storage', param_storage, 'str')
        self.initialize('get_presentation_text_items', 'storage', param_storage)
        ok = False
        try:
            self.api.get_presentation_text_items(param_name, param_with_empty, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_presentation_text_items', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_presentation_text_items', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_presentation_text_items', 'storage')

    def test_get_protection_properties(self):
        """Test case for get_protection_properties
        """
        param_name = self.get_test_value('get_protection_properties', 'name', 'str')
        param_password = self.get_test_value('get_protection_properties', 'password', 'str')
        param_folder = self.get_test_value('get_protection_properties', 'folder', 'str')
        param_storage = self.get_test_value('get_protection_properties', 'storage', 'str')
        self.initialize('get_protection_properties', None, None)
        response = self.api.get_protection_properties(param_name, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_protection_properties_invalid_name(self):
        """Test case for get_protection_properties with invalid name
        """
        param_name = self.get_test_value('get_protection_properties', 'name', 'str')
        param_password = self.get_test_value('get_protection_properties', 'password', 'str')
        param_folder = self.get_test_value('get_protection_properties', 'folder', 'str')
        param_storage = self.get_test_value('get_protection_properties', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_protection_properties', 'name', param_name, 'str')
        self.initialize('get_protection_properties', 'name', param_name)
        ok = False
        try:
            self.api.get_protection_properties(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_protection_properties', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_protection_properties', 'name', param_name)
        if ok:
            self.assert_no_exception('get_protection_properties', 'name')

    def test_get_protection_properties_invalid_password(self):
        """Test case for get_protection_properties with invalid password
        """
        param_name = self.get_test_value('get_protection_properties', 'name', 'str')
        param_password = self.get_test_value('get_protection_properties', 'password', 'str')
        param_folder = self.get_test_value('get_protection_properties', 'folder', 'str')
        param_storage = self.get_test_value('get_protection_properties', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_protection_properties', 'password', param_password, 'str')
        self.initialize('get_protection_properties', 'password', param_password)
        ok = False
        try:
            self.api.get_protection_properties(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_protection_properties', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_protection_properties', 'password', param_password)
        if ok:
            self.assert_no_exception('get_protection_properties', 'password')

    def test_get_protection_properties_invalid_folder(self):
        """Test case for get_protection_properties with invalid folder
        """
        param_name = self.get_test_value('get_protection_properties', 'name', 'str')
        param_password = self.get_test_value('get_protection_properties', 'password', 'str')
        param_folder = self.get_test_value('get_protection_properties', 'folder', 'str')
        param_storage = self.get_test_value('get_protection_properties', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_protection_properties', 'folder', param_folder, 'str')
        self.initialize('get_protection_properties', 'folder', param_folder)
        ok = False
        try:
            self.api.get_protection_properties(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_protection_properties', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_protection_properties', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_protection_properties', 'folder')

    def test_get_protection_properties_invalid_storage(self):
        """Test case for get_protection_properties with invalid storage
        """
        param_name = self.get_test_value('get_protection_properties', 'name', 'str')
        param_password = self.get_test_value('get_protection_properties', 'password', 'str')
        param_folder = self.get_test_value('get_protection_properties', 'folder', 'str')
        param_storage = self.get_test_value('get_protection_properties', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_protection_properties', 'storage', param_storage, 'str')
        self.initialize('get_protection_properties', 'storage', param_storage)
        ok = False
        try:
            self.api.get_protection_properties(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_protection_properties', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_protection_properties', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_protection_properties', 'storage')

    def test_get_sections(self):
        """Test case for get_sections
        """
        param_name = self.get_test_value('get_sections', 'name', 'str')
        param_password = self.get_test_value('get_sections', 'password', 'str')
        param_folder = self.get_test_value('get_sections', 'folder', 'str')
        param_storage = self.get_test_value('get_sections', 'storage', 'str')
        self.initialize('get_sections', None, None)
        response = self.api.get_sections(param_name, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_sections_invalid_name(self):
        """Test case for get_sections with invalid name
        """
        param_name = self.get_test_value('get_sections', 'name', 'str')
        param_password = self.get_test_value('get_sections', 'password', 'str')
        param_folder = self.get_test_value('get_sections', 'folder', 'str')
        param_storage = self.get_test_value('get_sections', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_sections', 'name', param_name, 'str')
        self.initialize('get_sections', 'name', param_name)
        ok = False
        try:
            self.api.get_sections(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_sections', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_sections', 'name', param_name)
        if ok:
            self.assert_no_exception('get_sections', 'name')

    def test_get_sections_invalid_password(self):
        """Test case for get_sections with invalid password
        """
        param_name = self.get_test_value('get_sections', 'name', 'str')
        param_password = self.get_test_value('get_sections', 'password', 'str')
        param_folder = self.get_test_value('get_sections', 'folder', 'str')
        param_storage = self.get_test_value('get_sections', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_sections', 'password', param_password, 'str')
        self.initialize('get_sections', 'password', param_password)
        ok = False
        try:
            self.api.get_sections(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_sections', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_sections', 'password', param_password)
        if ok:
            self.assert_no_exception('get_sections', 'password')

    def test_get_sections_invalid_folder(self):
        """Test case for get_sections with invalid folder
        """
        param_name = self.get_test_value('get_sections', 'name', 'str')
        param_password = self.get_test_value('get_sections', 'password', 'str')
        param_folder = self.get_test_value('get_sections', 'folder', 'str')
        param_storage = self.get_test_value('get_sections', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_sections', 'folder', param_folder, 'str')
        self.initialize('get_sections', 'folder', param_folder)
        ok = False
        try:
            self.api.get_sections(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_sections', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_sections', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_sections', 'folder')

    def test_get_sections_invalid_storage(self):
        """Test case for get_sections with invalid storage
        """
        param_name = self.get_test_value('get_sections', 'name', 'str')
        param_password = self.get_test_value('get_sections', 'password', 'str')
        param_folder = self.get_test_value('get_sections', 'folder', 'str')
        param_storage = self.get_test_value('get_sections', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_sections', 'storage', param_storage, 'str')
        self.initialize('get_sections', 'storage', param_storage)
        ok = False
        try:
            self.api.get_sections(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_sections', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_sections', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_sections', 'storage')

    def test_get_shape(self):
        """Test case for get_shape
        """
        param_name = self.get_test_value('get_shape', 'name', 'str')
        param_slide_index = self.get_test_value('get_shape', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_shape', 'shape_index', 'int')
        param_password = self.get_test_value('get_shape', 'password', 'str')
        param_folder = self.get_test_value('get_shape', 'folder', 'str')
        param_storage = self.get_test_value('get_shape', 'storage', 'str')
        self.initialize('get_shape', None, None)
        response = self.api.get_shape(param_name, param_slide_index, param_shape_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_shape_invalid_name(self):
        """Test case for get_shape with invalid name
        """
        param_name = self.get_test_value('get_shape', 'name', 'str')
        param_slide_index = self.get_test_value('get_shape', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_shape', 'shape_index', 'int')
        param_password = self.get_test_value('get_shape', 'password', 'str')
        param_folder = self.get_test_value('get_shape', 'folder', 'str')
        param_storage = self.get_test_value('get_shape', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_shape', 'name', param_name, 'str')
        self.initialize('get_shape', 'name', param_name)
        ok = False
        try:
            self.api.get_shape(param_name, param_slide_index, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_shape', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_shape', 'name', param_name)
        if ok:
            self.assert_no_exception('get_shape', 'name')

    def test_get_shape_invalid_slide_index(self):
        """Test case for get_shape with invalid slide_index
        """
        param_name = self.get_test_value('get_shape', 'name', 'str')
        param_slide_index = self.get_test_value('get_shape', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_shape', 'shape_index', 'int')
        param_password = self.get_test_value('get_shape', 'password', 'str')
        param_folder = self.get_test_value('get_shape', 'folder', 'str')
        param_storage = self.get_test_value('get_shape', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('get_shape', 'slide_index', param_slide_index, 'int')
        self.initialize('get_shape', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.get_shape(param_name, param_slide_index, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_shape', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_shape', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('get_shape', 'slide_index')

    def test_get_shape_invalid_shape_index(self):
        """Test case for get_shape with invalid shape_index
        """
        param_name = self.get_test_value('get_shape', 'name', 'str')
        param_slide_index = self.get_test_value('get_shape', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_shape', 'shape_index', 'int')
        param_password = self.get_test_value('get_shape', 'password', 'str')
        param_folder = self.get_test_value('get_shape', 'folder', 'str')
        param_storage = self.get_test_value('get_shape', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('get_shape', 'shape_index', param_shape_index, 'int')
        self.initialize('get_shape', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.get_shape(param_name, param_slide_index, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_shape', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_shape', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('get_shape', 'shape_index')

    def test_get_shape_invalid_password(self):
        """Test case for get_shape with invalid password
        """
        param_name = self.get_test_value('get_shape', 'name', 'str')
        param_slide_index = self.get_test_value('get_shape', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_shape', 'shape_index', 'int')
        param_password = self.get_test_value('get_shape', 'password', 'str')
        param_folder = self.get_test_value('get_shape', 'folder', 'str')
        param_storage = self.get_test_value('get_shape', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_shape', 'password', param_password, 'str')
        self.initialize('get_shape', 'password', param_password)
        ok = False
        try:
            self.api.get_shape(param_name, param_slide_index, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_shape', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_shape', 'password', param_password)
        if ok:
            self.assert_no_exception('get_shape', 'password')

    def test_get_shape_invalid_folder(self):
        """Test case for get_shape with invalid folder
        """
        param_name = self.get_test_value('get_shape', 'name', 'str')
        param_slide_index = self.get_test_value('get_shape', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_shape', 'shape_index', 'int')
        param_password = self.get_test_value('get_shape', 'password', 'str')
        param_folder = self.get_test_value('get_shape', 'folder', 'str')
        param_storage = self.get_test_value('get_shape', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_shape', 'folder', param_folder, 'str')
        self.initialize('get_shape', 'folder', param_folder)
        ok = False
        try:
            self.api.get_shape(param_name, param_slide_index, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_shape', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_shape', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_shape', 'folder')

    def test_get_shape_invalid_storage(self):
        """Test case for get_shape with invalid storage
        """
        param_name = self.get_test_value('get_shape', 'name', 'str')
        param_slide_index = self.get_test_value('get_shape', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_shape', 'shape_index', 'int')
        param_password = self.get_test_value('get_shape', 'password', 'str')
        param_folder = self.get_test_value('get_shape', 'folder', 'str')
        param_storage = self.get_test_value('get_shape', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_shape', 'storage', param_storage, 'str')
        self.initialize('get_shape', 'storage', param_storage)
        ok = False
        try:
            self.api.get_shape(param_name, param_slide_index, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_shape', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_shape', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_shape', 'storage')

    def test_get_shape_geometry_path(self):
        """Test case for get_shape_geometry_path
        """
        param_name = self.get_test_value('get_shape_geometry_path', 'name', 'str')
        param_slide_index = self.get_test_value('get_shape_geometry_path', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_shape_geometry_path', 'shape_index', 'int')
        param_password = self.get_test_value('get_shape_geometry_path', 'password', 'str')
        param_folder = self.get_test_value('get_shape_geometry_path', 'folder', 'str')
        param_storage = self.get_test_value('get_shape_geometry_path', 'storage', 'str')
        self.initialize('get_shape_geometry_path', None, None)
        response = self.api.get_shape_geometry_path(param_name, param_slide_index, param_shape_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_shape_geometry_path_invalid_name(self):
        """Test case for get_shape_geometry_path with invalid name
        """
        param_name = self.get_test_value('get_shape_geometry_path', 'name', 'str')
        param_slide_index = self.get_test_value('get_shape_geometry_path', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_shape_geometry_path', 'shape_index', 'int')
        param_password = self.get_test_value('get_shape_geometry_path', 'password', 'str')
        param_folder = self.get_test_value('get_shape_geometry_path', 'folder', 'str')
        param_storage = self.get_test_value('get_shape_geometry_path', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_shape_geometry_path', 'name', param_name, 'str')
        self.initialize('get_shape_geometry_path', 'name', param_name)
        ok = False
        try:
            self.api.get_shape_geometry_path(param_name, param_slide_index, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_shape_geometry_path', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_shape_geometry_path', 'name', param_name)
        if ok:
            self.assert_no_exception('get_shape_geometry_path', 'name')

    def test_get_shape_geometry_path_invalid_slide_index(self):
        """Test case for get_shape_geometry_path with invalid slide_index
        """
        param_name = self.get_test_value('get_shape_geometry_path', 'name', 'str')
        param_slide_index = self.get_test_value('get_shape_geometry_path', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_shape_geometry_path', 'shape_index', 'int')
        param_password = self.get_test_value('get_shape_geometry_path', 'password', 'str')
        param_folder = self.get_test_value('get_shape_geometry_path', 'folder', 'str')
        param_storage = self.get_test_value('get_shape_geometry_path', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('get_shape_geometry_path', 'slide_index', param_slide_index, 'int')
        self.initialize('get_shape_geometry_path', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.get_shape_geometry_path(param_name, param_slide_index, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_shape_geometry_path', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_shape_geometry_path', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('get_shape_geometry_path', 'slide_index')

    def test_get_shape_geometry_path_invalid_shape_index(self):
        """Test case for get_shape_geometry_path with invalid shape_index
        """
        param_name = self.get_test_value('get_shape_geometry_path', 'name', 'str')
        param_slide_index = self.get_test_value('get_shape_geometry_path', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_shape_geometry_path', 'shape_index', 'int')
        param_password = self.get_test_value('get_shape_geometry_path', 'password', 'str')
        param_folder = self.get_test_value('get_shape_geometry_path', 'folder', 'str')
        param_storage = self.get_test_value('get_shape_geometry_path', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('get_shape_geometry_path', 'shape_index', param_shape_index, 'int')
        self.initialize('get_shape_geometry_path', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.get_shape_geometry_path(param_name, param_slide_index, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_shape_geometry_path', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_shape_geometry_path', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('get_shape_geometry_path', 'shape_index')

    def test_get_shape_geometry_path_invalid_password(self):
        """Test case for get_shape_geometry_path with invalid password
        """
        param_name = self.get_test_value('get_shape_geometry_path', 'name', 'str')
        param_slide_index = self.get_test_value('get_shape_geometry_path', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_shape_geometry_path', 'shape_index', 'int')
        param_password = self.get_test_value('get_shape_geometry_path', 'password', 'str')
        param_folder = self.get_test_value('get_shape_geometry_path', 'folder', 'str')
        param_storage = self.get_test_value('get_shape_geometry_path', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_shape_geometry_path', 'password', param_password, 'str')
        self.initialize('get_shape_geometry_path', 'password', param_password)
        ok = False
        try:
            self.api.get_shape_geometry_path(param_name, param_slide_index, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_shape_geometry_path', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_shape_geometry_path', 'password', param_password)
        if ok:
            self.assert_no_exception('get_shape_geometry_path', 'password')

    def test_get_shape_geometry_path_invalid_folder(self):
        """Test case for get_shape_geometry_path with invalid folder
        """
        param_name = self.get_test_value('get_shape_geometry_path', 'name', 'str')
        param_slide_index = self.get_test_value('get_shape_geometry_path', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_shape_geometry_path', 'shape_index', 'int')
        param_password = self.get_test_value('get_shape_geometry_path', 'password', 'str')
        param_folder = self.get_test_value('get_shape_geometry_path', 'folder', 'str')
        param_storage = self.get_test_value('get_shape_geometry_path', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_shape_geometry_path', 'folder', param_folder, 'str')
        self.initialize('get_shape_geometry_path', 'folder', param_folder)
        ok = False
        try:
            self.api.get_shape_geometry_path(param_name, param_slide_index, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_shape_geometry_path', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_shape_geometry_path', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_shape_geometry_path', 'folder')

    def test_get_shape_geometry_path_invalid_storage(self):
        """Test case for get_shape_geometry_path with invalid storage
        """
        param_name = self.get_test_value('get_shape_geometry_path', 'name', 'str')
        param_slide_index = self.get_test_value('get_shape_geometry_path', 'slide_index', 'int')
        param_shape_index = self.get_test_value('get_shape_geometry_path', 'shape_index', 'int')
        param_password = self.get_test_value('get_shape_geometry_path', 'password', 'str')
        param_folder = self.get_test_value('get_shape_geometry_path', 'folder', 'str')
        param_storage = self.get_test_value('get_shape_geometry_path', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_shape_geometry_path', 'storage', param_storage, 'str')
        self.initialize('get_shape_geometry_path', 'storage', param_storage)
        ok = False
        try:
            self.api.get_shape_geometry_path(param_name, param_slide_index, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_shape_geometry_path', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_shape_geometry_path', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_shape_geometry_path', 'storage')

    def test_get_shapes(self):
        """Test case for get_shapes
        """
        param_name = self.get_test_value('get_shapes', 'name', 'str')
        param_slide_index = self.get_test_value('get_shapes', 'slide_index', 'int')
        param_password = self.get_test_value('get_shapes', 'password', 'str')
        param_folder = self.get_test_value('get_shapes', 'folder', 'str')
        param_storage = self.get_test_value('get_shapes', 'storage', 'str')
        self.initialize('get_shapes', None, None)
        response = self.api.get_shapes(param_name, param_slide_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_shapes_invalid_name(self):
        """Test case for get_shapes with invalid name
        """
        param_name = self.get_test_value('get_shapes', 'name', 'str')
        param_slide_index = self.get_test_value('get_shapes', 'slide_index', 'int')
        param_password = self.get_test_value('get_shapes', 'password', 'str')
        param_folder = self.get_test_value('get_shapes', 'folder', 'str')
        param_storage = self.get_test_value('get_shapes', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_shapes', 'name', param_name, 'str')
        self.initialize('get_shapes', 'name', param_name)
        ok = False
        try:
            self.api.get_shapes(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_shapes', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_shapes', 'name', param_name)
        if ok:
            self.assert_no_exception('get_shapes', 'name')

    def test_get_shapes_invalid_slide_index(self):
        """Test case for get_shapes with invalid slide_index
        """
        param_name = self.get_test_value('get_shapes', 'name', 'str')
        param_slide_index = self.get_test_value('get_shapes', 'slide_index', 'int')
        param_password = self.get_test_value('get_shapes', 'password', 'str')
        param_folder = self.get_test_value('get_shapes', 'folder', 'str')
        param_storage = self.get_test_value('get_shapes', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('get_shapes', 'slide_index', param_slide_index, 'int')
        self.initialize('get_shapes', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.get_shapes(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_shapes', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_shapes', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('get_shapes', 'slide_index')

    def test_get_shapes_invalid_password(self):
        """Test case for get_shapes with invalid password
        """
        param_name = self.get_test_value('get_shapes', 'name', 'str')
        param_slide_index = self.get_test_value('get_shapes', 'slide_index', 'int')
        param_password = self.get_test_value('get_shapes', 'password', 'str')
        param_folder = self.get_test_value('get_shapes', 'folder', 'str')
        param_storage = self.get_test_value('get_shapes', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_shapes', 'password', param_password, 'str')
        self.initialize('get_shapes', 'password', param_password)
        ok = False
        try:
            self.api.get_shapes(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_shapes', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_shapes', 'password', param_password)
        if ok:
            self.assert_no_exception('get_shapes', 'password')

    def test_get_shapes_invalid_folder(self):
        """Test case for get_shapes with invalid folder
        """
        param_name = self.get_test_value('get_shapes', 'name', 'str')
        param_slide_index = self.get_test_value('get_shapes', 'slide_index', 'int')
        param_password = self.get_test_value('get_shapes', 'password', 'str')
        param_folder = self.get_test_value('get_shapes', 'folder', 'str')
        param_storage = self.get_test_value('get_shapes', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_shapes', 'folder', param_folder, 'str')
        self.initialize('get_shapes', 'folder', param_folder)
        ok = False
        try:
            self.api.get_shapes(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_shapes', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_shapes', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_shapes', 'folder')

    def test_get_shapes_invalid_storage(self):
        """Test case for get_shapes with invalid storage
        """
        param_name = self.get_test_value('get_shapes', 'name', 'str')
        param_slide_index = self.get_test_value('get_shapes', 'slide_index', 'int')
        param_password = self.get_test_value('get_shapes', 'password', 'str')
        param_folder = self.get_test_value('get_shapes', 'folder', 'str')
        param_storage = self.get_test_value('get_shapes', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_shapes', 'storage', param_storage, 'str')
        self.initialize('get_shapes', 'storage', param_storage)
        ok = False
        try:
            self.api.get_shapes(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_shapes', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_shapes', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_shapes', 'storage')

    def test_get_slide(self):
        """Test case for get_slide
        """
        param_name = self.get_test_value('get_slide', 'name', 'str')
        param_slide_index = self.get_test_value('get_slide', 'slide_index', 'int')
        param_password = self.get_test_value('get_slide', 'password', 'str')
        param_folder = self.get_test_value('get_slide', 'folder', 'str')
        param_storage = self.get_test_value('get_slide', 'storage', 'str')
        self.initialize('get_slide', None, None)
        response = self.api.get_slide(param_name, param_slide_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_slide_invalid_name(self):
        """Test case for get_slide with invalid name
        """
        param_name = self.get_test_value('get_slide', 'name', 'str')
        param_slide_index = self.get_test_value('get_slide', 'slide_index', 'int')
        param_password = self.get_test_value('get_slide', 'password', 'str')
        param_folder = self.get_test_value('get_slide', 'folder', 'str')
        param_storage = self.get_test_value('get_slide', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_slide', 'name', param_name, 'str')
        self.initialize('get_slide', 'name', param_name)
        ok = False
        try:
            self.api.get_slide(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_slide', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_slide', 'name', param_name)
        if ok:
            self.assert_no_exception('get_slide', 'name')

    def test_get_slide_invalid_slide_index(self):
        """Test case for get_slide with invalid slide_index
        """
        param_name = self.get_test_value('get_slide', 'name', 'str')
        param_slide_index = self.get_test_value('get_slide', 'slide_index', 'int')
        param_password = self.get_test_value('get_slide', 'password', 'str')
        param_folder = self.get_test_value('get_slide', 'folder', 'str')
        param_storage = self.get_test_value('get_slide', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('get_slide', 'slide_index', param_slide_index, 'int')
        self.initialize('get_slide', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.get_slide(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_slide', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_slide', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('get_slide', 'slide_index')

    def test_get_slide_invalid_password(self):
        """Test case for get_slide with invalid password
        """
        param_name = self.get_test_value('get_slide', 'name', 'str')
        param_slide_index = self.get_test_value('get_slide', 'slide_index', 'int')
        param_password = self.get_test_value('get_slide', 'password', 'str')
        param_folder = self.get_test_value('get_slide', 'folder', 'str')
        param_storage = self.get_test_value('get_slide', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_slide', 'password', param_password, 'str')
        self.initialize('get_slide', 'password', param_password)
        ok = False
        try:
            self.api.get_slide(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_slide', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_slide', 'password', param_password)
        if ok:
            self.assert_no_exception('get_slide', 'password')

    def test_get_slide_invalid_folder(self):
        """Test case for get_slide with invalid folder
        """
        param_name = self.get_test_value('get_slide', 'name', 'str')
        param_slide_index = self.get_test_value('get_slide', 'slide_index', 'int')
        param_password = self.get_test_value('get_slide', 'password', 'str')
        param_folder = self.get_test_value('get_slide', 'folder', 'str')
        param_storage = self.get_test_value('get_slide', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_slide', 'folder', param_folder, 'str')
        self.initialize('get_slide', 'folder', param_folder)
        ok = False
        try:
            self.api.get_slide(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_slide', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_slide', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_slide', 'folder')

    def test_get_slide_invalid_storage(self):
        """Test case for get_slide with invalid storage
        """
        param_name = self.get_test_value('get_slide', 'name', 'str')
        param_slide_index = self.get_test_value('get_slide', 'slide_index', 'int')
        param_password = self.get_test_value('get_slide', 'password', 'str')
        param_folder = self.get_test_value('get_slide', 'folder', 'str')
        param_storage = self.get_test_value('get_slide', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_slide', 'storage', param_storage, 'str')
        self.initialize('get_slide', 'storage', param_storage)
        ok = False
        try:
            self.api.get_slide(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_slide', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_slide', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_slide', 'storage')

    def test_get_slide_comments(self):
        """Test case for get_slide_comments
        """
        param_name = self.get_test_value('get_slide_comments', 'name', 'str')
        param_slide_index = self.get_test_value('get_slide_comments', 'slide_index', 'int')
        param_password = self.get_test_value('get_slide_comments', 'password', 'str')
        param_folder = self.get_test_value('get_slide_comments', 'folder', 'str')
        param_storage = self.get_test_value('get_slide_comments', 'storage', 'str')
        self.initialize('get_slide_comments', None, None)
        response = self.api.get_slide_comments(param_name, param_slide_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_slide_comments_invalid_name(self):
        """Test case for get_slide_comments with invalid name
        """
        param_name = self.get_test_value('get_slide_comments', 'name', 'str')
        param_slide_index = self.get_test_value('get_slide_comments', 'slide_index', 'int')
        param_password = self.get_test_value('get_slide_comments', 'password', 'str')
        param_folder = self.get_test_value('get_slide_comments', 'folder', 'str')
        param_storage = self.get_test_value('get_slide_comments', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_slide_comments', 'name', param_name, 'str')
        self.initialize('get_slide_comments', 'name', param_name)
        ok = False
        try:
            self.api.get_slide_comments(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_slide_comments', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_slide_comments', 'name', param_name)
        if ok:
            self.assert_no_exception('get_slide_comments', 'name')

    def test_get_slide_comments_invalid_slide_index(self):
        """Test case for get_slide_comments with invalid slide_index
        """
        param_name = self.get_test_value('get_slide_comments', 'name', 'str')
        param_slide_index = self.get_test_value('get_slide_comments', 'slide_index', 'int')
        param_password = self.get_test_value('get_slide_comments', 'password', 'str')
        param_folder = self.get_test_value('get_slide_comments', 'folder', 'str')
        param_storage = self.get_test_value('get_slide_comments', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('get_slide_comments', 'slide_index', param_slide_index, 'int')
        self.initialize('get_slide_comments', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.get_slide_comments(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_slide_comments', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_slide_comments', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('get_slide_comments', 'slide_index')

    def test_get_slide_comments_invalid_password(self):
        """Test case for get_slide_comments with invalid password
        """
        param_name = self.get_test_value('get_slide_comments', 'name', 'str')
        param_slide_index = self.get_test_value('get_slide_comments', 'slide_index', 'int')
        param_password = self.get_test_value('get_slide_comments', 'password', 'str')
        param_folder = self.get_test_value('get_slide_comments', 'folder', 'str')
        param_storage = self.get_test_value('get_slide_comments', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_slide_comments', 'password', param_password, 'str')
        self.initialize('get_slide_comments', 'password', param_password)
        ok = False
        try:
            self.api.get_slide_comments(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_slide_comments', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_slide_comments', 'password', param_password)
        if ok:
            self.assert_no_exception('get_slide_comments', 'password')

    def test_get_slide_comments_invalid_folder(self):
        """Test case for get_slide_comments with invalid folder
        """
        param_name = self.get_test_value('get_slide_comments', 'name', 'str')
        param_slide_index = self.get_test_value('get_slide_comments', 'slide_index', 'int')
        param_password = self.get_test_value('get_slide_comments', 'password', 'str')
        param_folder = self.get_test_value('get_slide_comments', 'folder', 'str')
        param_storage = self.get_test_value('get_slide_comments', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_slide_comments', 'folder', param_folder, 'str')
        self.initialize('get_slide_comments', 'folder', param_folder)
        ok = False
        try:
            self.api.get_slide_comments(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_slide_comments', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_slide_comments', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_slide_comments', 'folder')

    def test_get_slide_comments_invalid_storage(self):
        """Test case for get_slide_comments with invalid storage
        """
        param_name = self.get_test_value('get_slide_comments', 'name', 'str')
        param_slide_index = self.get_test_value('get_slide_comments', 'slide_index', 'int')
        param_password = self.get_test_value('get_slide_comments', 'password', 'str')
        param_folder = self.get_test_value('get_slide_comments', 'folder', 'str')
        param_storage = self.get_test_value('get_slide_comments', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_slide_comments', 'storage', param_storage, 'str')
        self.initialize('get_slide_comments', 'storage', param_storage)
        ok = False
        try:
            self.api.get_slide_comments(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_slide_comments', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_slide_comments', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_slide_comments', 'storage')

    def test_get_slide_header_footer(self):
        """Test case for get_slide_header_footer
        """
        param_name = self.get_test_value('get_slide_header_footer', 'name', 'str')
        param_slide_index = self.get_test_value('get_slide_header_footer', 'slide_index', 'int')
        param_password = self.get_test_value('get_slide_header_footer', 'password', 'str')
        param_folder = self.get_test_value('get_slide_header_footer', 'folder', 'str')
        param_storage = self.get_test_value('get_slide_header_footer', 'storage', 'str')
        self.initialize('get_slide_header_footer', None, None)
        response = self.api.get_slide_header_footer(param_name, param_slide_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_slide_header_footer_invalid_name(self):
        """Test case for get_slide_header_footer with invalid name
        """
        param_name = self.get_test_value('get_slide_header_footer', 'name', 'str')
        param_slide_index = self.get_test_value('get_slide_header_footer', 'slide_index', 'int')
        param_password = self.get_test_value('get_slide_header_footer', 'password', 'str')
        param_folder = self.get_test_value('get_slide_header_footer', 'folder', 'str')
        param_storage = self.get_test_value('get_slide_header_footer', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_slide_header_footer', 'name', param_name, 'str')
        self.initialize('get_slide_header_footer', 'name', param_name)
        ok = False
        try:
            self.api.get_slide_header_footer(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_slide_header_footer', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_slide_header_footer', 'name', param_name)
        if ok:
            self.assert_no_exception('get_slide_header_footer', 'name')

    def test_get_slide_header_footer_invalid_slide_index(self):
        """Test case for get_slide_header_footer with invalid slide_index
        """
        param_name = self.get_test_value('get_slide_header_footer', 'name', 'str')
        param_slide_index = self.get_test_value('get_slide_header_footer', 'slide_index', 'int')
        param_password = self.get_test_value('get_slide_header_footer', 'password', 'str')
        param_folder = self.get_test_value('get_slide_header_footer', 'folder', 'str')
        param_storage = self.get_test_value('get_slide_header_footer', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('get_slide_header_footer', 'slide_index', param_slide_index, 'int')
        self.initialize('get_slide_header_footer', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.get_slide_header_footer(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_slide_header_footer', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_slide_header_footer', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('get_slide_header_footer', 'slide_index')

    def test_get_slide_header_footer_invalid_password(self):
        """Test case for get_slide_header_footer with invalid password
        """
        param_name = self.get_test_value('get_slide_header_footer', 'name', 'str')
        param_slide_index = self.get_test_value('get_slide_header_footer', 'slide_index', 'int')
        param_password = self.get_test_value('get_slide_header_footer', 'password', 'str')
        param_folder = self.get_test_value('get_slide_header_footer', 'folder', 'str')
        param_storage = self.get_test_value('get_slide_header_footer', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_slide_header_footer', 'password', param_password, 'str')
        self.initialize('get_slide_header_footer', 'password', param_password)
        ok = False
        try:
            self.api.get_slide_header_footer(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_slide_header_footer', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_slide_header_footer', 'password', param_password)
        if ok:
            self.assert_no_exception('get_slide_header_footer', 'password')

    def test_get_slide_header_footer_invalid_folder(self):
        """Test case for get_slide_header_footer with invalid folder
        """
        param_name = self.get_test_value('get_slide_header_footer', 'name', 'str')
        param_slide_index = self.get_test_value('get_slide_header_footer', 'slide_index', 'int')
        param_password = self.get_test_value('get_slide_header_footer', 'password', 'str')
        param_folder = self.get_test_value('get_slide_header_footer', 'folder', 'str')
        param_storage = self.get_test_value('get_slide_header_footer', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_slide_header_footer', 'folder', param_folder, 'str')
        self.initialize('get_slide_header_footer', 'folder', param_folder)
        ok = False
        try:
            self.api.get_slide_header_footer(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_slide_header_footer', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_slide_header_footer', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_slide_header_footer', 'folder')

    def test_get_slide_header_footer_invalid_storage(self):
        """Test case for get_slide_header_footer with invalid storage
        """
        param_name = self.get_test_value('get_slide_header_footer', 'name', 'str')
        param_slide_index = self.get_test_value('get_slide_header_footer', 'slide_index', 'int')
        param_password = self.get_test_value('get_slide_header_footer', 'password', 'str')
        param_folder = self.get_test_value('get_slide_header_footer', 'folder', 'str')
        param_storage = self.get_test_value('get_slide_header_footer', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_slide_header_footer', 'storage', param_storage, 'str')
        self.initialize('get_slide_header_footer', 'storage', param_storage)
        ok = False
        try:
            self.api.get_slide_header_footer(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_slide_header_footer', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_slide_header_footer', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_slide_header_footer', 'storage')

    def test_get_slide_images(self):
        """Test case for get_slide_images
        """
        param_name = self.get_test_value('get_slide_images', 'name', 'str')
        param_slide_index = self.get_test_value('get_slide_images', 'slide_index', 'int')
        param_password = self.get_test_value('get_slide_images', 'password', 'str')
        param_folder = self.get_test_value('get_slide_images', 'folder', 'str')
        param_storage = self.get_test_value('get_slide_images', 'storage', 'str')
        self.initialize('get_slide_images', None, None)
        response = self.api.get_slide_images(param_name, param_slide_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_slide_images_invalid_name(self):
        """Test case for get_slide_images with invalid name
        """
        param_name = self.get_test_value('get_slide_images', 'name', 'str')
        param_slide_index = self.get_test_value('get_slide_images', 'slide_index', 'int')
        param_password = self.get_test_value('get_slide_images', 'password', 'str')
        param_folder = self.get_test_value('get_slide_images', 'folder', 'str')
        param_storage = self.get_test_value('get_slide_images', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_slide_images', 'name', param_name, 'str')
        self.initialize('get_slide_images', 'name', param_name)
        ok = False
        try:
            self.api.get_slide_images(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_slide_images', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_slide_images', 'name', param_name)
        if ok:
            self.assert_no_exception('get_slide_images', 'name')

    def test_get_slide_images_invalid_slide_index(self):
        """Test case for get_slide_images with invalid slide_index
        """
        param_name = self.get_test_value('get_slide_images', 'name', 'str')
        param_slide_index = self.get_test_value('get_slide_images', 'slide_index', 'int')
        param_password = self.get_test_value('get_slide_images', 'password', 'str')
        param_folder = self.get_test_value('get_slide_images', 'folder', 'str')
        param_storage = self.get_test_value('get_slide_images', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('get_slide_images', 'slide_index', param_slide_index, 'int')
        self.initialize('get_slide_images', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.get_slide_images(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_slide_images', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_slide_images', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('get_slide_images', 'slide_index')

    def test_get_slide_images_invalid_password(self):
        """Test case for get_slide_images with invalid password
        """
        param_name = self.get_test_value('get_slide_images', 'name', 'str')
        param_slide_index = self.get_test_value('get_slide_images', 'slide_index', 'int')
        param_password = self.get_test_value('get_slide_images', 'password', 'str')
        param_folder = self.get_test_value('get_slide_images', 'folder', 'str')
        param_storage = self.get_test_value('get_slide_images', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_slide_images', 'password', param_password, 'str')
        self.initialize('get_slide_images', 'password', param_password)
        ok = False
        try:
            self.api.get_slide_images(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_slide_images', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_slide_images', 'password', param_password)
        if ok:
            self.assert_no_exception('get_slide_images', 'password')

    def test_get_slide_images_invalid_folder(self):
        """Test case for get_slide_images with invalid folder
        """
        param_name = self.get_test_value('get_slide_images', 'name', 'str')
        param_slide_index = self.get_test_value('get_slide_images', 'slide_index', 'int')
        param_password = self.get_test_value('get_slide_images', 'password', 'str')
        param_folder = self.get_test_value('get_slide_images', 'folder', 'str')
        param_storage = self.get_test_value('get_slide_images', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_slide_images', 'folder', param_folder, 'str')
        self.initialize('get_slide_images', 'folder', param_folder)
        ok = False
        try:
            self.api.get_slide_images(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_slide_images', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_slide_images', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_slide_images', 'folder')

    def test_get_slide_images_invalid_storage(self):
        """Test case for get_slide_images with invalid storage
        """
        param_name = self.get_test_value('get_slide_images', 'name', 'str')
        param_slide_index = self.get_test_value('get_slide_images', 'slide_index', 'int')
        param_password = self.get_test_value('get_slide_images', 'password', 'str')
        param_folder = self.get_test_value('get_slide_images', 'folder', 'str')
        param_storage = self.get_test_value('get_slide_images', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_slide_images', 'storage', param_storage, 'str')
        self.initialize('get_slide_images', 'storage', param_storage)
        ok = False
        try:
            self.api.get_slide_images(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_slide_images', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_slide_images', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_slide_images', 'storage')

    def test_get_slide_properties(self):
        """Test case for get_slide_properties
        """
        param_name = self.get_test_value('get_slide_properties', 'name', 'str')
        param_password = self.get_test_value('get_slide_properties', 'password', 'str')
        param_folder = self.get_test_value('get_slide_properties', 'folder', 'str')
        param_storage = self.get_test_value('get_slide_properties', 'storage', 'str')
        self.initialize('get_slide_properties', None, None)
        response = self.api.get_slide_properties(param_name, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_slide_properties_invalid_name(self):
        """Test case for get_slide_properties with invalid name
        """
        param_name = self.get_test_value('get_slide_properties', 'name', 'str')
        param_password = self.get_test_value('get_slide_properties', 'password', 'str')
        param_folder = self.get_test_value('get_slide_properties', 'folder', 'str')
        param_storage = self.get_test_value('get_slide_properties', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_slide_properties', 'name', param_name, 'str')
        self.initialize('get_slide_properties', 'name', param_name)
        ok = False
        try:
            self.api.get_slide_properties(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_slide_properties', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_slide_properties', 'name', param_name)
        if ok:
            self.assert_no_exception('get_slide_properties', 'name')

    def test_get_slide_properties_invalid_password(self):
        """Test case for get_slide_properties with invalid password
        """
        param_name = self.get_test_value('get_slide_properties', 'name', 'str')
        param_password = self.get_test_value('get_slide_properties', 'password', 'str')
        param_folder = self.get_test_value('get_slide_properties', 'folder', 'str')
        param_storage = self.get_test_value('get_slide_properties', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_slide_properties', 'password', param_password, 'str')
        self.initialize('get_slide_properties', 'password', param_password)
        ok = False
        try:
            self.api.get_slide_properties(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_slide_properties', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_slide_properties', 'password', param_password)
        if ok:
            self.assert_no_exception('get_slide_properties', 'password')

    def test_get_slide_properties_invalid_folder(self):
        """Test case for get_slide_properties with invalid folder
        """
        param_name = self.get_test_value('get_slide_properties', 'name', 'str')
        param_password = self.get_test_value('get_slide_properties', 'password', 'str')
        param_folder = self.get_test_value('get_slide_properties', 'folder', 'str')
        param_storage = self.get_test_value('get_slide_properties', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_slide_properties', 'folder', param_folder, 'str')
        self.initialize('get_slide_properties', 'folder', param_folder)
        ok = False
        try:
            self.api.get_slide_properties(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_slide_properties', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_slide_properties', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_slide_properties', 'folder')

    def test_get_slide_properties_invalid_storage(self):
        """Test case for get_slide_properties with invalid storage
        """
        param_name = self.get_test_value('get_slide_properties', 'name', 'str')
        param_password = self.get_test_value('get_slide_properties', 'password', 'str')
        param_folder = self.get_test_value('get_slide_properties', 'folder', 'str')
        param_storage = self.get_test_value('get_slide_properties', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_slide_properties', 'storage', param_storage, 'str')
        self.initialize('get_slide_properties', 'storage', param_storage)
        ok = False
        try:
            self.api.get_slide_properties(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_slide_properties', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_slide_properties', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_slide_properties', 'storage')

    def test_get_slide_text_items(self):
        """Test case for get_slide_text_items
        """
        param_name = self.get_test_value('get_slide_text_items', 'name', 'str')
        param_slide_index = self.get_test_value('get_slide_text_items', 'slide_index', 'int')
        param_with_empty = self.get_test_value('get_slide_text_items', 'with_empty', 'bool')
        param_password = self.get_test_value('get_slide_text_items', 'password', 'str')
        param_folder = self.get_test_value('get_slide_text_items', 'folder', 'str')
        param_storage = self.get_test_value('get_slide_text_items', 'storage', 'str')
        self.initialize('get_slide_text_items', None, None)
        response = self.api.get_slide_text_items(param_name, param_slide_index, param_with_empty, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_slide_text_items_invalid_name(self):
        """Test case for get_slide_text_items with invalid name
        """
        param_name = self.get_test_value('get_slide_text_items', 'name', 'str')
        param_slide_index = self.get_test_value('get_slide_text_items', 'slide_index', 'int')
        param_with_empty = self.get_test_value('get_slide_text_items', 'with_empty', 'bool')
        param_password = self.get_test_value('get_slide_text_items', 'password', 'str')
        param_folder = self.get_test_value('get_slide_text_items', 'folder', 'str')
        param_storage = self.get_test_value('get_slide_text_items', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_slide_text_items', 'name', param_name, 'str')
        self.initialize('get_slide_text_items', 'name', param_name)
        ok = False
        try:
            self.api.get_slide_text_items(param_name, param_slide_index, param_with_empty, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_slide_text_items', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_slide_text_items', 'name', param_name)
        if ok:
            self.assert_no_exception('get_slide_text_items', 'name')

    def test_get_slide_text_items_invalid_slide_index(self):
        """Test case for get_slide_text_items with invalid slide_index
        """
        param_name = self.get_test_value('get_slide_text_items', 'name', 'str')
        param_slide_index = self.get_test_value('get_slide_text_items', 'slide_index', 'int')
        param_with_empty = self.get_test_value('get_slide_text_items', 'with_empty', 'bool')
        param_password = self.get_test_value('get_slide_text_items', 'password', 'str')
        param_folder = self.get_test_value('get_slide_text_items', 'folder', 'str')
        param_storage = self.get_test_value('get_slide_text_items', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('get_slide_text_items', 'slide_index', param_slide_index, 'int')
        self.initialize('get_slide_text_items', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.get_slide_text_items(param_name, param_slide_index, param_with_empty, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_slide_text_items', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_slide_text_items', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('get_slide_text_items', 'slide_index')

    def test_get_slide_text_items_invalid_with_empty(self):
        """Test case for get_slide_text_items with invalid with_empty
        """
        param_name = self.get_test_value('get_slide_text_items', 'name', 'str')
        param_slide_index = self.get_test_value('get_slide_text_items', 'slide_index', 'int')
        param_with_empty = self.get_test_value('get_slide_text_items', 'with_empty', 'bool')
        param_password = self.get_test_value('get_slide_text_items', 'password', 'str')
        param_folder = self.get_test_value('get_slide_text_items', 'folder', 'str')
        param_storage = self.get_test_value('get_slide_text_items', 'storage', 'str')
        param_with_empty = self.get_invalid_test_value('get_slide_text_items', 'with_empty', param_with_empty, 'bool')
        self.initialize('get_slide_text_items', 'with_empty', param_with_empty)
        ok = False
        try:
            self.api.get_slide_text_items(param_name, param_slide_index, param_with_empty, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_slide_text_items', 'with_empty', param_with_empty)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_slide_text_items', 'with_empty', param_with_empty)
        if ok:
            self.assert_no_exception('get_slide_text_items', 'with_empty')

    def test_get_slide_text_items_invalid_password(self):
        """Test case for get_slide_text_items with invalid password
        """
        param_name = self.get_test_value('get_slide_text_items', 'name', 'str')
        param_slide_index = self.get_test_value('get_slide_text_items', 'slide_index', 'int')
        param_with_empty = self.get_test_value('get_slide_text_items', 'with_empty', 'bool')
        param_password = self.get_test_value('get_slide_text_items', 'password', 'str')
        param_folder = self.get_test_value('get_slide_text_items', 'folder', 'str')
        param_storage = self.get_test_value('get_slide_text_items', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_slide_text_items', 'password', param_password, 'str')
        self.initialize('get_slide_text_items', 'password', param_password)
        ok = False
        try:
            self.api.get_slide_text_items(param_name, param_slide_index, param_with_empty, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_slide_text_items', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_slide_text_items', 'password', param_password)
        if ok:
            self.assert_no_exception('get_slide_text_items', 'password')

    def test_get_slide_text_items_invalid_folder(self):
        """Test case for get_slide_text_items with invalid folder
        """
        param_name = self.get_test_value('get_slide_text_items', 'name', 'str')
        param_slide_index = self.get_test_value('get_slide_text_items', 'slide_index', 'int')
        param_with_empty = self.get_test_value('get_slide_text_items', 'with_empty', 'bool')
        param_password = self.get_test_value('get_slide_text_items', 'password', 'str')
        param_folder = self.get_test_value('get_slide_text_items', 'folder', 'str')
        param_storage = self.get_test_value('get_slide_text_items', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_slide_text_items', 'folder', param_folder, 'str')
        self.initialize('get_slide_text_items', 'folder', param_folder)
        ok = False
        try:
            self.api.get_slide_text_items(param_name, param_slide_index, param_with_empty, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_slide_text_items', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_slide_text_items', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_slide_text_items', 'folder')

    def test_get_slide_text_items_invalid_storage(self):
        """Test case for get_slide_text_items with invalid storage
        """
        param_name = self.get_test_value('get_slide_text_items', 'name', 'str')
        param_slide_index = self.get_test_value('get_slide_text_items', 'slide_index', 'int')
        param_with_empty = self.get_test_value('get_slide_text_items', 'with_empty', 'bool')
        param_password = self.get_test_value('get_slide_text_items', 'password', 'str')
        param_folder = self.get_test_value('get_slide_text_items', 'folder', 'str')
        param_storage = self.get_test_value('get_slide_text_items', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_slide_text_items', 'storage', param_storage, 'str')
        self.initialize('get_slide_text_items', 'storage', param_storage)
        ok = False
        try:
            self.api.get_slide_text_items(param_name, param_slide_index, param_with_empty, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_slide_text_items', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_slide_text_items', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_slide_text_items', 'storage')

    def test_get_slides(self):
        """Test case for get_slides
        """
        param_name = self.get_test_value('get_slides', 'name', 'str')
        param_password = self.get_test_value('get_slides', 'password', 'str')
        param_folder = self.get_test_value('get_slides', 'folder', 'str')
        param_storage = self.get_test_value('get_slides', 'storage', 'str')
        self.initialize('get_slides', None, None)
        response = self.api.get_slides(param_name, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_slides_invalid_name(self):
        """Test case for get_slides with invalid name
        """
        param_name = self.get_test_value('get_slides', 'name', 'str')
        param_password = self.get_test_value('get_slides', 'password', 'str')
        param_folder = self.get_test_value('get_slides', 'folder', 'str')
        param_storage = self.get_test_value('get_slides', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_slides', 'name', param_name, 'str')
        self.initialize('get_slides', 'name', param_name)
        ok = False
        try:
            self.api.get_slides(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_slides', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_slides', 'name', param_name)
        if ok:
            self.assert_no_exception('get_slides', 'name')

    def test_get_slides_invalid_password(self):
        """Test case for get_slides with invalid password
        """
        param_name = self.get_test_value('get_slides', 'name', 'str')
        param_password = self.get_test_value('get_slides', 'password', 'str')
        param_folder = self.get_test_value('get_slides', 'folder', 'str')
        param_storage = self.get_test_value('get_slides', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_slides', 'password', param_password, 'str')
        self.initialize('get_slides', 'password', param_password)
        ok = False
        try:
            self.api.get_slides(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_slides', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_slides', 'password', param_password)
        if ok:
            self.assert_no_exception('get_slides', 'password')

    def test_get_slides_invalid_folder(self):
        """Test case for get_slides with invalid folder
        """
        param_name = self.get_test_value('get_slides', 'name', 'str')
        param_password = self.get_test_value('get_slides', 'password', 'str')
        param_folder = self.get_test_value('get_slides', 'folder', 'str')
        param_storage = self.get_test_value('get_slides', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_slides', 'folder', param_folder, 'str')
        self.initialize('get_slides', 'folder', param_folder)
        ok = False
        try:
            self.api.get_slides(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_slides', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_slides', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_slides', 'folder')

    def test_get_slides_invalid_storage(self):
        """Test case for get_slides with invalid storage
        """
        param_name = self.get_test_value('get_slides', 'name', 'str')
        param_password = self.get_test_value('get_slides', 'password', 'str')
        param_folder = self.get_test_value('get_slides', 'folder', 'str')
        param_storage = self.get_test_value('get_slides', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_slides', 'storage', param_storage, 'str')
        self.initialize('get_slides', 'storage', param_storage)
        ok = False
        try:
            self.api.get_slides(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_slides', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_slides', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_slides', 'storage')

    def test_get_special_slide_animation(self):
        """Test case for get_special_slide_animation
        """
        param_name = self.get_test_value('get_special_slide_animation', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_animation', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_animation', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_animation', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_animation', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_special_slide_animation', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_animation', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_animation', 'storage', 'str')
        self.initialize('get_special_slide_animation', None, None)
        response = self.api.get_special_slide_animation(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_special_slide_animation_invalid_name(self):
        """Test case for get_special_slide_animation with invalid name
        """
        param_name = self.get_test_value('get_special_slide_animation', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_animation', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_animation', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_animation', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_animation', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_special_slide_animation', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_animation', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_animation', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_special_slide_animation', 'name', param_name, 'str')
        self.initialize('get_special_slide_animation', 'name', param_name)
        ok = False
        try:
            self.api.get_special_slide_animation(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_animation', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_animation', 'name', param_name)
        if ok:
            self.assert_no_exception('get_special_slide_animation', 'name')

    def test_get_special_slide_animation_invalid_slide_index(self):
        """Test case for get_special_slide_animation with invalid slide_index
        """
        param_name = self.get_test_value('get_special_slide_animation', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_animation', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_animation', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_animation', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_animation', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_special_slide_animation', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_animation', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_animation', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('get_special_slide_animation', 'slide_index', param_slide_index, 'int')
        self.initialize('get_special_slide_animation', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.get_special_slide_animation(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_animation', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_animation', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('get_special_slide_animation', 'slide_index')

    def test_get_special_slide_animation_invalid_slide_type(self):
        """Test case for get_special_slide_animation with invalid slide_type
        """
        param_name = self.get_test_value('get_special_slide_animation', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_animation', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_animation', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_animation', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_animation', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_special_slide_animation', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_animation', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_animation', 'storage', 'str')
        param_slide_type = self.get_invalid_test_value('get_special_slide_animation', 'slide_type', param_slide_type, 'str')
        self.initialize('get_special_slide_animation', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.get_special_slide_animation(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_animation', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_animation', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('get_special_slide_animation', 'slide_type')

    def test_get_special_slide_animation_invalid_shape_index(self):
        """Test case for get_special_slide_animation with invalid shape_index
        """
        param_name = self.get_test_value('get_special_slide_animation', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_animation', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_animation', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_animation', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_animation', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_special_slide_animation', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_animation', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_animation', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('get_special_slide_animation', 'shape_index', param_shape_index, 'int')
        self.initialize('get_special_slide_animation', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.get_special_slide_animation(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_animation', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_animation', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('get_special_slide_animation', 'shape_index')

    def test_get_special_slide_animation_invalid_paragraph_index(self):
        """Test case for get_special_slide_animation with invalid paragraph_index
        """
        param_name = self.get_test_value('get_special_slide_animation', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_animation', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_animation', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_animation', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_animation', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_special_slide_animation', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_animation', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_animation', 'storage', 'str')
        param_paragraph_index = self.get_invalid_test_value('get_special_slide_animation', 'paragraph_index', param_paragraph_index, 'int')
        self.initialize('get_special_slide_animation', 'paragraph_index', param_paragraph_index)
        ok = False
        try:
            self.api.get_special_slide_animation(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_animation', 'paragraph_index', param_paragraph_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_animation', 'paragraph_index', param_paragraph_index)
        if ok:
            self.assert_no_exception('get_special_slide_animation', 'paragraph_index')

    def test_get_special_slide_animation_invalid_password(self):
        """Test case for get_special_slide_animation with invalid password
        """
        param_name = self.get_test_value('get_special_slide_animation', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_animation', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_animation', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_animation', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_animation', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_special_slide_animation', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_animation', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_animation', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_special_slide_animation', 'password', param_password, 'str')
        self.initialize('get_special_slide_animation', 'password', param_password)
        ok = False
        try:
            self.api.get_special_slide_animation(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_animation', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_animation', 'password', param_password)
        if ok:
            self.assert_no_exception('get_special_slide_animation', 'password')

    def test_get_special_slide_animation_invalid_folder(self):
        """Test case for get_special_slide_animation with invalid folder
        """
        param_name = self.get_test_value('get_special_slide_animation', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_animation', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_animation', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_animation', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_animation', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_special_slide_animation', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_animation', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_animation', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_special_slide_animation', 'folder', param_folder, 'str')
        self.initialize('get_special_slide_animation', 'folder', param_folder)
        ok = False
        try:
            self.api.get_special_slide_animation(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_animation', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_animation', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_special_slide_animation', 'folder')

    def test_get_special_slide_animation_invalid_storage(self):
        """Test case for get_special_slide_animation with invalid storage
        """
        param_name = self.get_test_value('get_special_slide_animation', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_animation', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_animation', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_animation', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_animation', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_special_slide_animation', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_animation', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_animation', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_special_slide_animation', 'storage', param_storage, 'str')
        self.initialize('get_special_slide_animation', 'storage', param_storage)
        ok = False
        try:
            self.api.get_special_slide_animation(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_animation', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_animation', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_special_slide_animation', 'storage')

    def test_get_special_slide_paragraph(self):
        """Test case for get_special_slide_paragraph
        """
        param_name = self.get_test_value('get_special_slide_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_paragraph', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_special_slide_paragraph', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_paragraph', 'storage', 'str')
        self.initialize('get_special_slide_paragraph', None, None)
        response = self.api.get_special_slide_paragraph(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_special_slide_paragraph_invalid_name(self):
        """Test case for get_special_slide_paragraph with invalid name
        """
        param_name = self.get_test_value('get_special_slide_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_paragraph', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_special_slide_paragraph', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_paragraph', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_special_slide_paragraph', 'name', param_name, 'str')
        self.initialize('get_special_slide_paragraph', 'name', param_name)
        ok = False
        try:
            self.api.get_special_slide_paragraph(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_paragraph', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_paragraph', 'name', param_name)
        if ok:
            self.assert_no_exception('get_special_slide_paragraph', 'name')

    def test_get_special_slide_paragraph_invalid_slide_index(self):
        """Test case for get_special_slide_paragraph with invalid slide_index
        """
        param_name = self.get_test_value('get_special_slide_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_paragraph', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_special_slide_paragraph', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_paragraph', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('get_special_slide_paragraph', 'slide_index', param_slide_index, 'int')
        self.initialize('get_special_slide_paragraph', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.get_special_slide_paragraph(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_paragraph', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_paragraph', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('get_special_slide_paragraph', 'slide_index')

    def test_get_special_slide_paragraph_invalid_slide_type(self):
        """Test case for get_special_slide_paragraph with invalid slide_type
        """
        param_name = self.get_test_value('get_special_slide_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_paragraph', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_special_slide_paragraph', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_paragraph', 'storage', 'str')
        param_slide_type = self.get_invalid_test_value('get_special_slide_paragraph', 'slide_type', param_slide_type, 'str')
        self.initialize('get_special_slide_paragraph', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.get_special_slide_paragraph(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_paragraph', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_paragraph', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('get_special_slide_paragraph', 'slide_type')

    def test_get_special_slide_paragraph_invalid_shape_index(self):
        """Test case for get_special_slide_paragraph with invalid shape_index
        """
        param_name = self.get_test_value('get_special_slide_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_paragraph', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_special_slide_paragraph', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_paragraph', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('get_special_slide_paragraph', 'shape_index', param_shape_index, 'int')
        self.initialize('get_special_slide_paragraph', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.get_special_slide_paragraph(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_paragraph', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_paragraph', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('get_special_slide_paragraph', 'shape_index')

    def test_get_special_slide_paragraph_invalid_paragraph_index(self):
        """Test case for get_special_slide_paragraph with invalid paragraph_index
        """
        param_name = self.get_test_value('get_special_slide_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_paragraph', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_special_slide_paragraph', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_paragraph', 'storage', 'str')
        param_paragraph_index = self.get_invalid_test_value('get_special_slide_paragraph', 'paragraph_index', param_paragraph_index, 'int')
        self.initialize('get_special_slide_paragraph', 'paragraph_index', param_paragraph_index)
        ok = False
        try:
            self.api.get_special_slide_paragraph(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_paragraph', 'paragraph_index', param_paragraph_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_paragraph', 'paragraph_index', param_paragraph_index)
        if ok:
            self.assert_no_exception('get_special_slide_paragraph', 'paragraph_index')

    def test_get_special_slide_paragraph_invalid_password(self):
        """Test case for get_special_slide_paragraph with invalid password
        """
        param_name = self.get_test_value('get_special_slide_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_paragraph', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_special_slide_paragraph', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_paragraph', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_special_slide_paragraph', 'password', param_password, 'str')
        self.initialize('get_special_slide_paragraph', 'password', param_password)
        ok = False
        try:
            self.api.get_special_slide_paragraph(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_paragraph', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_paragraph', 'password', param_password)
        if ok:
            self.assert_no_exception('get_special_slide_paragraph', 'password')

    def test_get_special_slide_paragraph_invalid_folder(self):
        """Test case for get_special_slide_paragraph with invalid folder
        """
        param_name = self.get_test_value('get_special_slide_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_paragraph', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_special_slide_paragraph', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_paragraph', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_special_slide_paragraph', 'folder', param_folder, 'str')
        self.initialize('get_special_slide_paragraph', 'folder', param_folder)
        ok = False
        try:
            self.api.get_special_slide_paragraph(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_paragraph', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_paragraph', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_special_slide_paragraph', 'folder')

    def test_get_special_slide_paragraph_invalid_storage(self):
        """Test case for get_special_slide_paragraph with invalid storage
        """
        param_name = self.get_test_value('get_special_slide_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_paragraph', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_special_slide_paragraph', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_paragraph', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_special_slide_paragraph', 'storage', param_storage, 'str')
        self.initialize('get_special_slide_paragraph', 'storage', param_storage)
        ok = False
        try:
            self.api.get_special_slide_paragraph(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_paragraph', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_paragraph', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_special_slide_paragraph', 'storage')

    def test_get_special_slide_paragraphs(self):
        """Test case for get_special_slide_paragraphs
        """
        param_name = self.get_test_value('get_special_slide_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_paragraphs', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_paragraphs', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_paragraphs', 'shape_index', 'int')
        param_password = self.get_test_value('get_special_slide_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_paragraphs', 'storage', 'str')
        self.initialize('get_special_slide_paragraphs', None, None)
        response = self.api.get_special_slide_paragraphs(param_name, param_slide_index, param_slide_type, param_shape_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_special_slide_paragraphs_invalid_name(self):
        """Test case for get_special_slide_paragraphs with invalid name
        """
        param_name = self.get_test_value('get_special_slide_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_paragraphs', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_paragraphs', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_paragraphs', 'shape_index', 'int')
        param_password = self.get_test_value('get_special_slide_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_paragraphs', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_special_slide_paragraphs', 'name', param_name, 'str')
        self.initialize('get_special_slide_paragraphs', 'name', param_name)
        ok = False
        try:
            self.api.get_special_slide_paragraphs(param_name, param_slide_index, param_slide_type, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_paragraphs', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_paragraphs', 'name', param_name)
        if ok:
            self.assert_no_exception('get_special_slide_paragraphs', 'name')

    def test_get_special_slide_paragraphs_invalid_slide_index(self):
        """Test case for get_special_slide_paragraphs with invalid slide_index
        """
        param_name = self.get_test_value('get_special_slide_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_paragraphs', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_paragraphs', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_paragraphs', 'shape_index', 'int')
        param_password = self.get_test_value('get_special_slide_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_paragraphs', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('get_special_slide_paragraphs', 'slide_index', param_slide_index, 'int')
        self.initialize('get_special_slide_paragraphs', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.get_special_slide_paragraphs(param_name, param_slide_index, param_slide_type, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_paragraphs', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_paragraphs', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('get_special_slide_paragraphs', 'slide_index')

    def test_get_special_slide_paragraphs_invalid_slide_type(self):
        """Test case for get_special_slide_paragraphs with invalid slide_type
        """
        param_name = self.get_test_value('get_special_slide_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_paragraphs', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_paragraphs', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_paragraphs', 'shape_index', 'int')
        param_password = self.get_test_value('get_special_slide_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_paragraphs', 'storage', 'str')
        param_slide_type = self.get_invalid_test_value('get_special_slide_paragraphs', 'slide_type', param_slide_type, 'str')
        self.initialize('get_special_slide_paragraphs', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.get_special_slide_paragraphs(param_name, param_slide_index, param_slide_type, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_paragraphs', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_paragraphs', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('get_special_slide_paragraphs', 'slide_type')

    def test_get_special_slide_paragraphs_invalid_shape_index(self):
        """Test case for get_special_slide_paragraphs with invalid shape_index
        """
        param_name = self.get_test_value('get_special_slide_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_paragraphs', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_paragraphs', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_paragraphs', 'shape_index', 'int')
        param_password = self.get_test_value('get_special_slide_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_paragraphs', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('get_special_slide_paragraphs', 'shape_index', param_shape_index, 'int')
        self.initialize('get_special_slide_paragraphs', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.get_special_slide_paragraphs(param_name, param_slide_index, param_slide_type, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_paragraphs', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_paragraphs', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('get_special_slide_paragraphs', 'shape_index')

    def test_get_special_slide_paragraphs_invalid_password(self):
        """Test case for get_special_slide_paragraphs with invalid password
        """
        param_name = self.get_test_value('get_special_slide_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_paragraphs', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_paragraphs', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_paragraphs', 'shape_index', 'int')
        param_password = self.get_test_value('get_special_slide_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_paragraphs', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_special_slide_paragraphs', 'password', param_password, 'str')
        self.initialize('get_special_slide_paragraphs', 'password', param_password)
        ok = False
        try:
            self.api.get_special_slide_paragraphs(param_name, param_slide_index, param_slide_type, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_paragraphs', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_paragraphs', 'password', param_password)
        if ok:
            self.assert_no_exception('get_special_slide_paragraphs', 'password')

    def test_get_special_slide_paragraphs_invalid_folder(self):
        """Test case for get_special_slide_paragraphs with invalid folder
        """
        param_name = self.get_test_value('get_special_slide_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_paragraphs', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_paragraphs', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_paragraphs', 'shape_index', 'int')
        param_password = self.get_test_value('get_special_slide_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_paragraphs', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_special_slide_paragraphs', 'folder', param_folder, 'str')
        self.initialize('get_special_slide_paragraphs', 'folder', param_folder)
        ok = False
        try:
            self.api.get_special_slide_paragraphs(param_name, param_slide_index, param_slide_type, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_paragraphs', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_paragraphs', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_special_slide_paragraphs', 'folder')

    def test_get_special_slide_paragraphs_invalid_storage(self):
        """Test case for get_special_slide_paragraphs with invalid storage
        """
        param_name = self.get_test_value('get_special_slide_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_paragraphs', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_paragraphs', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_paragraphs', 'shape_index', 'int')
        param_password = self.get_test_value('get_special_slide_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_paragraphs', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_special_slide_paragraphs', 'storage', param_storage, 'str')
        self.initialize('get_special_slide_paragraphs', 'storage', param_storage)
        ok = False
        try:
            self.api.get_special_slide_paragraphs(param_name, param_slide_index, param_slide_type, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_paragraphs', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_paragraphs', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_special_slide_paragraphs', 'storage')

    def test_get_special_slide_portion(self):
        """Test case for get_special_slide_portion
        """
        param_name = self.get_test_value('get_special_slide_portion', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_portion', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('get_special_slide_portion', 'portion_index', 'int')
        param_password = self.get_test_value('get_special_slide_portion', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_portion', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_portion', 'storage', 'str')
        self.initialize('get_special_slide_portion', None, None)
        response = self.api.get_special_slide_portion(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_special_slide_portion_invalid_name(self):
        """Test case for get_special_slide_portion with invalid name
        """
        param_name = self.get_test_value('get_special_slide_portion', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_portion', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('get_special_slide_portion', 'portion_index', 'int')
        param_password = self.get_test_value('get_special_slide_portion', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_portion', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_portion', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_special_slide_portion', 'name', param_name, 'str')
        self.initialize('get_special_slide_portion', 'name', param_name)
        ok = False
        try:
            self.api.get_special_slide_portion(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_portion', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_portion', 'name', param_name)
        if ok:
            self.assert_no_exception('get_special_slide_portion', 'name')

    def test_get_special_slide_portion_invalid_slide_index(self):
        """Test case for get_special_slide_portion with invalid slide_index
        """
        param_name = self.get_test_value('get_special_slide_portion', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_portion', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('get_special_slide_portion', 'portion_index', 'int')
        param_password = self.get_test_value('get_special_slide_portion', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_portion', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_portion', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('get_special_slide_portion', 'slide_index', param_slide_index, 'int')
        self.initialize('get_special_slide_portion', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.get_special_slide_portion(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_portion', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_portion', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('get_special_slide_portion', 'slide_index')

    def test_get_special_slide_portion_invalid_slide_type(self):
        """Test case for get_special_slide_portion with invalid slide_type
        """
        param_name = self.get_test_value('get_special_slide_portion', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_portion', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('get_special_slide_portion', 'portion_index', 'int')
        param_password = self.get_test_value('get_special_slide_portion', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_portion', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_portion', 'storage', 'str')
        param_slide_type = self.get_invalid_test_value('get_special_slide_portion', 'slide_type', param_slide_type, 'str')
        self.initialize('get_special_slide_portion', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.get_special_slide_portion(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_portion', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_portion', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('get_special_slide_portion', 'slide_type')

    def test_get_special_slide_portion_invalid_shape_index(self):
        """Test case for get_special_slide_portion with invalid shape_index
        """
        param_name = self.get_test_value('get_special_slide_portion', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_portion', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('get_special_slide_portion', 'portion_index', 'int')
        param_password = self.get_test_value('get_special_slide_portion', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_portion', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_portion', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('get_special_slide_portion', 'shape_index', param_shape_index, 'int')
        self.initialize('get_special_slide_portion', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.get_special_slide_portion(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_portion', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_portion', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('get_special_slide_portion', 'shape_index')

    def test_get_special_slide_portion_invalid_paragraph_index(self):
        """Test case for get_special_slide_portion with invalid paragraph_index
        """
        param_name = self.get_test_value('get_special_slide_portion', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_portion', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('get_special_slide_portion', 'portion_index', 'int')
        param_password = self.get_test_value('get_special_slide_portion', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_portion', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_portion', 'storage', 'str')
        param_paragraph_index = self.get_invalid_test_value('get_special_slide_portion', 'paragraph_index', param_paragraph_index, 'int')
        self.initialize('get_special_slide_portion', 'paragraph_index', param_paragraph_index)
        ok = False
        try:
            self.api.get_special_slide_portion(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_portion', 'paragraph_index', param_paragraph_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_portion', 'paragraph_index', param_paragraph_index)
        if ok:
            self.assert_no_exception('get_special_slide_portion', 'paragraph_index')

    def test_get_special_slide_portion_invalid_portion_index(self):
        """Test case for get_special_slide_portion with invalid portion_index
        """
        param_name = self.get_test_value('get_special_slide_portion', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_portion', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('get_special_slide_portion', 'portion_index', 'int')
        param_password = self.get_test_value('get_special_slide_portion', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_portion', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_portion', 'storage', 'str')
        param_portion_index = self.get_invalid_test_value('get_special_slide_portion', 'portion_index', param_portion_index, 'int')
        self.initialize('get_special_slide_portion', 'portion_index', param_portion_index)
        ok = False
        try:
            self.api.get_special_slide_portion(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_portion', 'portion_index', param_portion_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_portion', 'portion_index', param_portion_index)
        if ok:
            self.assert_no_exception('get_special_slide_portion', 'portion_index')

    def test_get_special_slide_portion_invalid_password(self):
        """Test case for get_special_slide_portion with invalid password
        """
        param_name = self.get_test_value('get_special_slide_portion', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_portion', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('get_special_slide_portion', 'portion_index', 'int')
        param_password = self.get_test_value('get_special_slide_portion', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_portion', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_portion', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_special_slide_portion', 'password', param_password, 'str')
        self.initialize('get_special_slide_portion', 'password', param_password)
        ok = False
        try:
            self.api.get_special_slide_portion(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_portion', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_portion', 'password', param_password)
        if ok:
            self.assert_no_exception('get_special_slide_portion', 'password')

    def test_get_special_slide_portion_invalid_folder(self):
        """Test case for get_special_slide_portion with invalid folder
        """
        param_name = self.get_test_value('get_special_slide_portion', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_portion', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('get_special_slide_portion', 'portion_index', 'int')
        param_password = self.get_test_value('get_special_slide_portion', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_portion', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_portion', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_special_slide_portion', 'folder', param_folder, 'str')
        self.initialize('get_special_slide_portion', 'folder', param_folder)
        ok = False
        try:
            self.api.get_special_slide_portion(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_portion', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_portion', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_special_slide_portion', 'folder')

    def test_get_special_slide_portion_invalid_storage(self):
        """Test case for get_special_slide_portion with invalid storage
        """
        param_name = self.get_test_value('get_special_slide_portion', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_portion', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('get_special_slide_portion', 'portion_index', 'int')
        param_password = self.get_test_value('get_special_slide_portion', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_portion', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_portion', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_special_slide_portion', 'storage', param_storage, 'str')
        self.initialize('get_special_slide_portion', 'storage', param_storage)
        ok = False
        try:
            self.api.get_special_slide_portion(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_portion', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_portion', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_special_slide_portion', 'storage')

    def test_get_special_slide_portions(self):
        """Test case for get_special_slide_portions
        """
        param_name = self.get_test_value('get_special_slide_portions', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_portions', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_portions', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_portions', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_special_slide_portions', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_portions', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_portions', 'storage', 'str')
        self.initialize('get_special_slide_portions', None, None)
        response = self.api.get_special_slide_portions(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_special_slide_portions_invalid_name(self):
        """Test case for get_special_slide_portions with invalid name
        """
        param_name = self.get_test_value('get_special_slide_portions', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_portions', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_portions', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_portions', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_special_slide_portions', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_portions', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_portions', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_special_slide_portions', 'name', param_name, 'str')
        self.initialize('get_special_slide_portions', 'name', param_name)
        ok = False
        try:
            self.api.get_special_slide_portions(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_portions', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_portions', 'name', param_name)
        if ok:
            self.assert_no_exception('get_special_slide_portions', 'name')

    def test_get_special_slide_portions_invalid_slide_index(self):
        """Test case for get_special_slide_portions with invalid slide_index
        """
        param_name = self.get_test_value('get_special_slide_portions', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_portions', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_portions', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_portions', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_special_slide_portions', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_portions', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_portions', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('get_special_slide_portions', 'slide_index', param_slide_index, 'int')
        self.initialize('get_special_slide_portions', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.get_special_slide_portions(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_portions', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_portions', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('get_special_slide_portions', 'slide_index')

    def test_get_special_slide_portions_invalid_slide_type(self):
        """Test case for get_special_slide_portions with invalid slide_type
        """
        param_name = self.get_test_value('get_special_slide_portions', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_portions', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_portions', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_portions', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_special_slide_portions', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_portions', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_portions', 'storage', 'str')
        param_slide_type = self.get_invalid_test_value('get_special_slide_portions', 'slide_type', param_slide_type, 'str')
        self.initialize('get_special_slide_portions', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.get_special_slide_portions(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_portions', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_portions', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('get_special_slide_portions', 'slide_type')

    def test_get_special_slide_portions_invalid_shape_index(self):
        """Test case for get_special_slide_portions with invalid shape_index
        """
        param_name = self.get_test_value('get_special_slide_portions', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_portions', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_portions', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_portions', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_special_slide_portions', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_portions', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_portions', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('get_special_slide_portions', 'shape_index', param_shape_index, 'int')
        self.initialize('get_special_slide_portions', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.get_special_slide_portions(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_portions', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_portions', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('get_special_slide_portions', 'shape_index')

    def test_get_special_slide_portions_invalid_paragraph_index(self):
        """Test case for get_special_slide_portions with invalid paragraph_index
        """
        param_name = self.get_test_value('get_special_slide_portions', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_portions', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_portions', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_portions', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_special_slide_portions', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_portions', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_portions', 'storage', 'str')
        param_paragraph_index = self.get_invalid_test_value('get_special_slide_portions', 'paragraph_index', param_paragraph_index, 'int')
        self.initialize('get_special_slide_portions', 'paragraph_index', param_paragraph_index)
        ok = False
        try:
            self.api.get_special_slide_portions(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_portions', 'paragraph_index', param_paragraph_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_portions', 'paragraph_index', param_paragraph_index)
        if ok:
            self.assert_no_exception('get_special_slide_portions', 'paragraph_index')

    def test_get_special_slide_portions_invalid_password(self):
        """Test case for get_special_slide_portions with invalid password
        """
        param_name = self.get_test_value('get_special_slide_portions', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_portions', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_portions', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_portions', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_special_slide_portions', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_portions', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_portions', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_special_slide_portions', 'password', param_password, 'str')
        self.initialize('get_special_slide_portions', 'password', param_password)
        ok = False
        try:
            self.api.get_special_slide_portions(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_portions', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_portions', 'password', param_password)
        if ok:
            self.assert_no_exception('get_special_slide_portions', 'password')

    def test_get_special_slide_portions_invalid_folder(self):
        """Test case for get_special_slide_portions with invalid folder
        """
        param_name = self.get_test_value('get_special_slide_portions', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_portions', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_portions', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_portions', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_special_slide_portions', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_portions', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_portions', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_special_slide_portions', 'folder', param_folder, 'str')
        self.initialize('get_special_slide_portions', 'folder', param_folder)
        ok = False
        try:
            self.api.get_special_slide_portions(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_portions', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_portions', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_special_slide_portions', 'folder')

    def test_get_special_slide_portions_invalid_storage(self):
        """Test case for get_special_slide_portions with invalid storage
        """
        param_name = self.get_test_value('get_special_slide_portions', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_portions', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_portions', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_portions', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_special_slide_portions', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_portions', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_portions', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_special_slide_portions', 'storage', param_storage, 'str')
        self.initialize('get_special_slide_portions', 'storage', param_storage)
        ok = False
        try:
            self.api.get_special_slide_portions(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_portions', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_portions', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_special_slide_portions', 'storage')

    def test_get_special_slide_shape(self):
        """Test case for get_special_slide_shape
        """
        param_name = self.get_test_value('get_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_shape', 'shape_index', 'int')
        param_password = self.get_test_value('get_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_shape', 'storage', 'str')
        self.initialize('get_special_slide_shape', None, None)
        response = self.api.get_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_special_slide_shape_invalid_name(self):
        """Test case for get_special_slide_shape with invalid name
        """
        param_name = self.get_test_value('get_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_shape', 'shape_index', 'int')
        param_password = self.get_test_value('get_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_shape', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_special_slide_shape', 'name', param_name, 'str')
        self.initialize('get_special_slide_shape', 'name', param_name)
        ok = False
        try:
            self.api.get_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_shape', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_shape', 'name', param_name)
        if ok:
            self.assert_no_exception('get_special_slide_shape', 'name')

    def test_get_special_slide_shape_invalid_slide_index(self):
        """Test case for get_special_slide_shape with invalid slide_index
        """
        param_name = self.get_test_value('get_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_shape', 'shape_index', 'int')
        param_password = self.get_test_value('get_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_shape', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('get_special_slide_shape', 'slide_index', param_slide_index, 'int')
        self.initialize('get_special_slide_shape', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.get_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_shape', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_shape', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('get_special_slide_shape', 'slide_index')

    def test_get_special_slide_shape_invalid_slide_type(self):
        """Test case for get_special_slide_shape with invalid slide_type
        """
        param_name = self.get_test_value('get_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_shape', 'shape_index', 'int')
        param_password = self.get_test_value('get_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_shape', 'storage', 'str')
        param_slide_type = self.get_invalid_test_value('get_special_slide_shape', 'slide_type', param_slide_type, 'str')
        self.initialize('get_special_slide_shape', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.get_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_shape', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_shape', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('get_special_slide_shape', 'slide_type')

    def test_get_special_slide_shape_invalid_shape_index(self):
        """Test case for get_special_slide_shape with invalid shape_index
        """
        param_name = self.get_test_value('get_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_shape', 'shape_index', 'int')
        param_password = self.get_test_value('get_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_shape', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('get_special_slide_shape', 'shape_index', param_shape_index, 'int')
        self.initialize('get_special_slide_shape', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.get_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_shape', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_shape', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('get_special_slide_shape', 'shape_index')

    def test_get_special_slide_shape_invalid_password(self):
        """Test case for get_special_slide_shape with invalid password
        """
        param_name = self.get_test_value('get_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_shape', 'shape_index', 'int')
        param_password = self.get_test_value('get_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_shape', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_special_slide_shape', 'password', param_password, 'str')
        self.initialize('get_special_slide_shape', 'password', param_password)
        ok = False
        try:
            self.api.get_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_shape', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_shape', 'password', param_password)
        if ok:
            self.assert_no_exception('get_special_slide_shape', 'password')

    def test_get_special_slide_shape_invalid_folder(self):
        """Test case for get_special_slide_shape with invalid folder
        """
        param_name = self.get_test_value('get_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_shape', 'shape_index', 'int')
        param_password = self.get_test_value('get_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_shape', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_special_slide_shape', 'folder', param_folder, 'str')
        self.initialize('get_special_slide_shape', 'folder', param_folder)
        ok = False
        try:
            self.api.get_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_shape', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_shape', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_special_slide_shape', 'folder')

    def test_get_special_slide_shape_invalid_storage(self):
        """Test case for get_special_slide_shape with invalid storage
        """
        param_name = self.get_test_value('get_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('get_special_slide_shape', 'shape_index', 'int')
        param_password = self.get_test_value('get_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_shape', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_special_slide_shape', 'storage', param_storage, 'str')
        self.initialize('get_special_slide_shape', 'storage', param_storage)
        ok = False
        try:
            self.api.get_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_shape', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_shape', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_special_slide_shape', 'storage')

    def test_get_special_slide_shapes(self):
        """Test case for get_special_slide_shapes
        """
        param_name = self.get_test_value('get_special_slide_shapes', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_shapes', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_shapes', 'slide_type', 'str')
        param_password = self.get_test_value('get_special_slide_shapes', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_shapes', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_shapes', 'storage', 'str')
        self.initialize('get_special_slide_shapes', None, None)
        response = self.api.get_special_slide_shapes(param_name, param_slide_index, param_slide_type, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_special_slide_shapes_invalid_name(self):
        """Test case for get_special_slide_shapes with invalid name
        """
        param_name = self.get_test_value('get_special_slide_shapes', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_shapes', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_shapes', 'slide_type', 'str')
        param_password = self.get_test_value('get_special_slide_shapes', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_shapes', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_shapes', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_special_slide_shapes', 'name', param_name, 'str')
        self.initialize('get_special_slide_shapes', 'name', param_name)
        ok = False
        try:
            self.api.get_special_slide_shapes(param_name, param_slide_index, param_slide_type, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_shapes', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_shapes', 'name', param_name)
        if ok:
            self.assert_no_exception('get_special_slide_shapes', 'name')

    def test_get_special_slide_shapes_invalid_slide_index(self):
        """Test case for get_special_slide_shapes with invalid slide_index
        """
        param_name = self.get_test_value('get_special_slide_shapes', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_shapes', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_shapes', 'slide_type', 'str')
        param_password = self.get_test_value('get_special_slide_shapes', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_shapes', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_shapes', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('get_special_slide_shapes', 'slide_index', param_slide_index, 'int')
        self.initialize('get_special_slide_shapes', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.get_special_slide_shapes(param_name, param_slide_index, param_slide_type, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_shapes', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_shapes', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('get_special_slide_shapes', 'slide_index')

    def test_get_special_slide_shapes_invalid_slide_type(self):
        """Test case for get_special_slide_shapes with invalid slide_type
        """
        param_name = self.get_test_value('get_special_slide_shapes', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_shapes', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_shapes', 'slide_type', 'str')
        param_password = self.get_test_value('get_special_slide_shapes', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_shapes', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_shapes', 'storage', 'str')
        param_slide_type = self.get_invalid_test_value('get_special_slide_shapes', 'slide_type', param_slide_type, 'str')
        self.initialize('get_special_slide_shapes', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.get_special_slide_shapes(param_name, param_slide_index, param_slide_type, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_shapes', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_shapes', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('get_special_slide_shapes', 'slide_type')

    def test_get_special_slide_shapes_invalid_password(self):
        """Test case for get_special_slide_shapes with invalid password
        """
        param_name = self.get_test_value('get_special_slide_shapes', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_shapes', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_shapes', 'slide_type', 'str')
        param_password = self.get_test_value('get_special_slide_shapes', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_shapes', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_shapes', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_special_slide_shapes', 'password', param_password, 'str')
        self.initialize('get_special_slide_shapes', 'password', param_password)
        ok = False
        try:
            self.api.get_special_slide_shapes(param_name, param_slide_index, param_slide_type, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_shapes', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_shapes', 'password', param_password)
        if ok:
            self.assert_no_exception('get_special_slide_shapes', 'password')

    def test_get_special_slide_shapes_invalid_folder(self):
        """Test case for get_special_slide_shapes with invalid folder
        """
        param_name = self.get_test_value('get_special_slide_shapes', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_shapes', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_shapes', 'slide_type', 'str')
        param_password = self.get_test_value('get_special_slide_shapes', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_shapes', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_shapes', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_special_slide_shapes', 'folder', param_folder, 'str')
        self.initialize('get_special_slide_shapes', 'folder', param_folder)
        ok = False
        try:
            self.api.get_special_slide_shapes(param_name, param_slide_index, param_slide_type, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_shapes', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_shapes', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_special_slide_shapes', 'folder')

    def test_get_special_slide_shapes_invalid_storage(self):
        """Test case for get_special_slide_shapes with invalid storage
        """
        param_name = self.get_test_value('get_special_slide_shapes', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_shapes', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_shapes', 'slide_type', 'str')
        param_password = self.get_test_value('get_special_slide_shapes', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_shapes', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_shapes', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_special_slide_shapes', 'storage', param_storage, 'str')
        self.initialize('get_special_slide_shapes', 'storage', param_storage)
        ok = False
        try:
            self.api.get_special_slide_shapes(param_name, param_slide_index, param_slide_type, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_shapes', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_shapes', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_special_slide_shapes', 'storage')

    def test_get_special_slide_subshape(self):
        """Test case for get_special_slide_subshape
        """
        param_name = self.get_test_value('get_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('get_special_slide_subshape', 'shape_index', 'int')
        param_password = self.get_test_value('get_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshape', 'storage', 'str')
        self.initialize('get_special_slide_subshape', None, None)
        response = self.api.get_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_special_slide_subshape_invalid_name(self):
        """Test case for get_special_slide_subshape with invalid name
        """
        param_name = self.get_test_value('get_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('get_special_slide_subshape', 'shape_index', 'int')
        param_password = self.get_test_value('get_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshape', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_special_slide_subshape', 'name', param_name, 'str')
        self.initialize('get_special_slide_subshape', 'name', param_name)
        ok = False
        try:
            self.api.get_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshape', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshape', 'name', param_name)
        if ok:
            self.assert_no_exception('get_special_slide_subshape', 'name')

    def test_get_special_slide_subshape_invalid_slide_index(self):
        """Test case for get_special_slide_subshape with invalid slide_index
        """
        param_name = self.get_test_value('get_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('get_special_slide_subshape', 'shape_index', 'int')
        param_password = self.get_test_value('get_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshape', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('get_special_slide_subshape', 'slide_index', param_slide_index, 'int')
        self.initialize('get_special_slide_subshape', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.get_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshape', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshape', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('get_special_slide_subshape', 'slide_index')

    def test_get_special_slide_subshape_invalid_slide_type(self):
        """Test case for get_special_slide_subshape with invalid slide_type
        """
        param_name = self.get_test_value('get_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('get_special_slide_subshape', 'shape_index', 'int')
        param_password = self.get_test_value('get_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshape', 'storage', 'str')
        param_slide_type = self.get_invalid_test_value('get_special_slide_subshape', 'slide_type', param_slide_type, 'str')
        self.initialize('get_special_slide_subshape', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.get_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshape', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshape', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('get_special_slide_subshape', 'slide_type')

    def test_get_special_slide_subshape_invalid_path(self):
        """Test case for get_special_slide_subshape with invalid path
        """
        param_name = self.get_test_value('get_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('get_special_slide_subshape', 'shape_index', 'int')
        param_password = self.get_test_value('get_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshape', 'storage', 'str')
        param_path = self.get_invalid_test_value('get_special_slide_subshape', 'path', param_path, 'str')
        self.initialize('get_special_slide_subshape', 'path', param_path)
        ok = False
        try:
            self.api.get_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshape', 'path', param_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshape', 'path', param_path)
        if ok:
            self.assert_no_exception('get_special_slide_subshape', 'path')

    def test_get_special_slide_subshape_invalid_shape_index(self):
        """Test case for get_special_slide_subshape with invalid shape_index
        """
        param_name = self.get_test_value('get_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('get_special_slide_subshape', 'shape_index', 'int')
        param_password = self.get_test_value('get_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshape', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('get_special_slide_subshape', 'shape_index', param_shape_index, 'int')
        self.initialize('get_special_slide_subshape', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.get_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshape', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshape', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('get_special_slide_subshape', 'shape_index')

    def test_get_special_slide_subshape_invalid_password(self):
        """Test case for get_special_slide_subshape with invalid password
        """
        param_name = self.get_test_value('get_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('get_special_slide_subshape', 'shape_index', 'int')
        param_password = self.get_test_value('get_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshape', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_special_slide_subshape', 'password', param_password, 'str')
        self.initialize('get_special_slide_subshape', 'password', param_password)
        ok = False
        try:
            self.api.get_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshape', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshape', 'password', param_password)
        if ok:
            self.assert_no_exception('get_special_slide_subshape', 'password')

    def test_get_special_slide_subshape_invalid_folder(self):
        """Test case for get_special_slide_subshape with invalid folder
        """
        param_name = self.get_test_value('get_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('get_special_slide_subshape', 'shape_index', 'int')
        param_password = self.get_test_value('get_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshape', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_special_slide_subshape', 'folder', param_folder, 'str')
        self.initialize('get_special_slide_subshape', 'folder', param_folder)
        ok = False
        try:
            self.api.get_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshape', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshape', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_special_slide_subshape', 'folder')

    def test_get_special_slide_subshape_invalid_storage(self):
        """Test case for get_special_slide_subshape with invalid storage
        """
        param_name = self.get_test_value('get_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('get_special_slide_subshape', 'shape_index', 'int')
        param_password = self.get_test_value('get_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshape', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_special_slide_subshape', 'storage', param_storage, 'str')
        self.initialize('get_special_slide_subshape', 'storage', param_storage)
        ok = False
        try:
            self.api.get_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshape', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshape', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_special_slide_subshape', 'storage')

    def test_get_special_slide_subshape_paragraph(self):
        """Test case for get_special_slide_subshape_paragraph
        """
        param_name = self.get_test_value('get_special_slide_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshape_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshape_paragraph', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('get_special_slide_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_subshape_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_special_slide_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshape_paragraph', 'storage', 'str')
        self.initialize('get_special_slide_subshape_paragraph', None, None)
        response = self.api.get_special_slide_subshape_paragraph(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_special_slide_subshape_paragraph_invalid_name(self):
        """Test case for get_special_slide_subshape_paragraph with invalid name
        """
        param_name = self.get_test_value('get_special_slide_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshape_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshape_paragraph', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('get_special_slide_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_subshape_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_special_slide_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshape_paragraph', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_special_slide_subshape_paragraph', 'name', param_name, 'str')
        self.initialize('get_special_slide_subshape_paragraph', 'name', param_name)
        ok = False
        try:
            self.api.get_special_slide_subshape_paragraph(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshape_paragraph', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshape_paragraph', 'name', param_name)
        if ok:
            self.assert_no_exception('get_special_slide_subshape_paragraph', 'name')

    def test_get_special_slide_subshape_paragraph_invalid_slide_index(self):
        """Test case for get_special_slide_subshape_paragraph with invalid slide_index
        """
        param_name = self.get_test_value('get_special_slide_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshape_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshape_paragraph', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('get_special_slide_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_subshape_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_special_slide_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshape_paragraph', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('get_special_slide_subshape_paragraph', 'slide_index', param_slide_index, 'int')
        self.initialize('get_special_slide_subshape_paragraph', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.get_special_slide_subshape_paragraph(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshape_paragraph', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshape_paragraph', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('get_special_slide_subshape_paragraph', 'slide_index')

    def test_get_special_slide_subshape_paragraph_invalid_slide_type(self):
        """Test case for get_special_slide_subshape_paragraph with invalid slide_type
        """
        param_name = self.get_test_value('get_special_slide_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshape_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshape_paragraph', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('get_special_slide_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_subshape_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_special_slide_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshape_paragraph', 'storage', 'str')
        param_slide_type = self.get_invalid_test_value('get_special_slide_subshape_paragraph', 'slide_type', param_slide_type, 'str')
        self.initialize('get_special_slide_subshape_paragraph', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.get_special_slide_subshape_paragraph(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshape_paragraph', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshape_paragraph', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('get_special_slide_subshape_paragraph', 'slide_type')

    def test_get_special_slide_subshape_paragraph_invalid_path(self):
        """Test case for get_special_slide_subshape_paragraph with invalid path
        """
        param_name = self.get_test_value('get_special_slide_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshape_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshape_paragraph', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('get_special_slide_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_subshape_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_special_slide_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshape_paragraph', 'storage', 'str')
        param_path = self.get_invalid_test_value('get_special_slide_subshape_paragraph', 'path', param_path, 'str')
        self.initialize('get_special_slide_subshape_paragraph', 'path', param_path)
        ok = False
        try:
            self.api.get_special_slide_subshape_paragraph(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshape_paragraph', 'path', param_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshape_paragraph', 'path', param_path)
        if ok:
            self.assert_no_exception('get_special_slide_subshape_paragraph', 'path')

    def test_get_special_slide_subshape_paragraph_invalid_shape_index(self):
        """Test case for get_special_slide_subshape_paragraph with invalid shape_index
        """
        param_name = self.get_test_value('get_special_slide_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshape_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshape_paragraph', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('get_special_slide_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_subshape_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_special_slide_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshape_paragraph', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('get_special_slide_subshape_paragraph', 'shape_index', param_shape_index, 'int')
        self.initialize('get_special_slide_subshape_paragraph', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.get_special_slide_subshape_paragraph(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshape_paragraph', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshape_paragraph', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('get_special_slide_subshape_paragraph', 'shape_index')

    def test_get_special_slide_subshape_paragraph_invalid_paragraph_index(self):
        """Test case for get_special_slide_subshape_paragraph with invalid paragraph_index
        """
        param_name = self.get_test_value('get_special_slide_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshape_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshape_paragraph', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('get_special_slide_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_subshape_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_special_slide_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshape_paragraph', 'storage', 'str')
        param_paragraph_index = self.get_invalid_test_value('get_special_slide_subshape_paragraph', 'paragraph_index', param_paragraph_index, 'int')
        self.initialize('get_special_slide_subshape_paragraph', 'paragraph_index', param_paragraph_index)
        ok = False
        try:
            self.api.get_special_slide_subshape_paragraph(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshape_paragraph', 'paragraph_index', param_paragraph_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshape_paragraph', 'paragraph_index', param_paragraph_index)
        if ok:
            self.assert_no_exception('get_special_slide_subshape_paragraph', 'paragraph_index')

    def test_get_special_slide_subshape_paragraph_invalid_password(self):
        """Test case for get_special_slide_subshape_paragraph with invalid password
        """
        param_name = self.get_test_value('get_special_slide_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshape_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshape_paragraph', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('get_special_slide_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_subshape_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_special_slide_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshape_paragraph', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_special_slide_subshape_paragraph', 'password', param_password, 'str')
        self.initialize('get_special_slide_subshape_paragraph', 'password', param_password)
        ok = False
        try:
            self.api.get_special_slide_subshape_paragraph(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshape_paragraph', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshape_paragraph', 'password', param_password)
        if ok:
            self.assert_no_exception('get_special_slide_subshape_paragraph', 'password')

    def test_get_special_slide_subshape_paragraph_invalid_folder(self):
        """Test case for get_special_slide_subshape_paragraph with invalid folder
        """
        param_name = self.get_test_value('get_special_slide_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshape_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshape_paragraph', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('get_special_slide_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_subshape_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_special_slide_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshape_paragraph', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_special_slide_subshape_paragraph', 'folder', param_folder, 'str')
        self.initialize('get_special_slide_subshape_paragraph', 'folder', param_folder)
        ok = False
        try:
            self.api.get_special_slide_subshape_paragraph(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshape_paragraph', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshape_paragraph', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_special_slide_subshape_paragraph', 'folder')

    def test_get_special_slide_subshape_paragraph_invalid_storage(self):
        """Test case for get_special_slide_subshape_paragraph with invalid storage
        """
        param_name = self.get_test_value('get_special_slide_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshape_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshape_paragraph', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('get_special_slide_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_subshape_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_special_slide_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshape_paragraph', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_special_slide_subshape_paragraph', 'storage', param_storage, 'str')
        self.initialize('get_special_slide_subshape_paragraph', 'storage', param_storage)
        ok = False
        try:
            self.api.get_special_slide_subshape_paragraph(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshape_paragraph', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshape_paragraph', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_special_slide_subshape_paragraph', 'storage')

    def test_get_special_slide_subshape_paragraphs(self):
        """Test case for get_special_slide_subshape_paragraphs
        """
        param_name = self.get_test_value('get_special_slide_subshape_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshape_paragraphs', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshape_paragraphs', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshape_paragraphs', 'path', 'str')
        param_shape_index = self.get_test_value('get_special_slide_subshape_paragraphs', 'shape_index', 'int')
        param_password = self.get_test_value('get_special_slide_subshape_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshape_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshape_paragraphs', 'storage', 'str')
        self.initialize('get_special_slide_subshape_paragraphs', None, None)
        response = self.api.get_special_slide_subshape_paragraphs(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_special_slide_subshape_paragraphs_invalid_name(self):
        """Test case for get_special_slide_subshape_paragraphs with invalid name
        """
        param_name = self.get_test_value('get_special_slide_subshape_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshape_paragraphs', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshape_paragraphs', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshape_paragraphs', 'path', 'str')
        param_shape_index = self.get_test_value('get_special_slide_subshape_paragraphs', 'shape_index', 'int')
        param_password = self.get_test_value('get_special_slide_subshape_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshape_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshape_paragraphs', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_special_slide_subshape_paragraphs', 'name', param_name, 'str')
        self.initialize('get_special_slide_subshape_paragraphs', 'name', param_name)
        ok = False
        try:
            self.api.get_special_slide_subshape_paragraphs(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshape_paragraphs', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshape_paragraphs', 'name', param_name)
        if ok:
            self.assert_no_exception('get_special_slide_subshape_paragraphs', 'name')

    def test_get_special_slide_subshape_paragraphs_invalid_slide_index(self):
        """Test case for get_special_slide_subshape_paragraphs with invalid slide_index
        """
        param_name = self.get_test_value('get_special_slide_subshape_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshape_paragraphs', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshape_paragraphs', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshape_paragraphs', 'path', 'str')
        param_shape_index = self.get_test_value('get_special_slide_subshape_paragraphs', 'shape_index', 'int')
        param_password = self.get_test_value('get_special_slide_subshape_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshape_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshape_paragraphs', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('get_special_slide_subshape_paragraphs', 'slide_index', param_slide_index, 'int')
        self.initialize('get_special_slide_subshape_paragraphs', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.get_special_slide_subshape_paragraphs(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshape_paragraphs', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshape_paragraphs', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('get_special_slide_subshape_paragraphs', 'slide_index')

    def test_get_special_slide_subshape_paragraphs_invalid_slide_type(self):
        """Test case for get_special_slide_subshape_paragraphs with invalid slide_type
        """
        param_name = self.get_test_value('get_special_slide_subshape_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshape_paragraphs', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshape_paragraphs', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshape_paragraphs', 'path', 'str')
        param_shape_index = self.get_test_value('get_special_slide_subshape_paragraphs', 'shape_index', 'int')
        param_password = self.get_test_value('get_special_slide_subshape_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshape_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshape_paragraphs', 'storage', 'str')
        param_slide_type = self.get_invalid_test_value('get_special_slide_subshape_paragraphs', 'slide_type', param_slide_type, 'str')
        self.initialize('get_special_slide_subshape_paragraphs', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.get_special_slide_subshape_paragraphs(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshape_paragraphs', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshape_paragraphs', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('get_special_slide_subshape_paragraphs', 'slide_type')

    def test_get_special_slide_subshape_paragraphs_invalid_path(self):
        """Test case for get_special_slide_subshape_paragraphs with invalid path
        """
        param_name = self.get_test_value('get_special_slide_subshape_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshape_paragraphs', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshape_paragraphs', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshape_paragraphs', 'path', 'str')
        param_shape_index = self.get_test_value('get_special_slide_subshape_paragraphs', 'shape_index', 'int')
        param_password = self.get_test_value('get_special_slide_subshape_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshape_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshape_paragraphs', 'storage', 'str')
        param_path = self.get_invalid_test_value('get_special_slide_subshape_paragraphs', 'path', param_path, 'str')
        self.initialize('get_special_slide_subshape_paragraphs', 'path', param_path)
        ok = False
        try:
            self.api.get_special_slide_subshape_paragraphs(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshape_paragraphs', 'path', param_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshape_paragraphs', 'path', param_path)
        if ok:
            self.assert_no_exception('get_special_slide_subshape_paragraphs', 'path')

    def test_get_special_slide_subshape_paragraphs_invalid_shape_index(self):
        """Test case for get_special_slide_subshape_paragraphs with invalid shape_index
        """
        param_name = self.get_test_value('get_special_slide_subshape_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshape_paragraphs', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshape_paragraphs', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshape_paragraphs', 'path', 'str')
        param_shape_index = self.get_test_value('get_special_slide_subshape_paragraphs', 'shape_index', 'int')
        param_password = self.get_test_value('get_special_slide_subshape_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshape_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshape_paragraphs', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('get_special_slide_subshape_paragraphs', 'shape_index', param_shape_index, 'int')
        self.initialize('get_special_slide_subshape_paragraphs', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.get_special_slide_subshape_paragraphs(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshape_paragraphs', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshape_paragraphs', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('get_special_slide_subshape_paragraphs', 'shape_index')

    def test_get_special_slide_subshape_paragraphs_invalid_password(self):
        """Test case for get_special_slide_subshape_paragraphs with invalid password
        """
        param_name = self.get_test_value('get_special_slide_subshape_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshape_paragraphs', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshape_paragraphs', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshape_paragraphs', 'path', 'str')
        param_shape_index = self.get_test_value('get_special_slide_subshape_paragraphs', 'shape_index', 'int')
        param_password = self.get_test_value('get_special_slide_subshape_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshape_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshape_paragraphs', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_special_slide_subshape_paragraphs', 'password', param_password, 'str')
        self.initialize('get_special_slide_subshape_paragraphs', 'password', param_password)
        ok = False
        try:
            self.api.get_special_slide_subshape_paragraphs(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshape_paragraphs', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshape_paragraphs', 'password', param_password)
        if ok:
            self.assert_no_exception('get_special_slide_subshape_paragraphs', 'password')

    def test_get_special_slide_subshape_paragraphs_invalid_folder(self):
        """Test case for get_special_slide_subshape_paragraphs with invalid folder
        """
        param_name = self.get_test_value('get_special_slide_subshape_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshape_paragraphs', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshape_paragraphs', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshape_paragraphs', 'path', 'str')
        param_shape_index = self.get_test_value('get_special_slide_subshape_paragraphs', 'shape_index', 'int')
        param_password = self.get_test_value('get_special_slide_subshape_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshape_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshape_paragraphs', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_special_slide_subshape_paragraphs', 'folder', param_folder, 'str')
        self.initialize('get_special_slide_subshape_paragraphs', 'folder', param_folder)
        ok = False
        try:
            self.api.get_special_slide_subshape_paragraphs(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshape_paragraphs', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshape_paragraphs', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_special_slide_subshape_paragraphs', 'folder')

    def test_get_special_slide_subshape_paragraphs_invalid_storage(self):
        """Test case for get_special_slide_subshape_paragraphs with invalid storage
        """
        param_name = self.get_test_value('get_special_slide_subshape_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshape_paragraphs', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshape_paragraphs', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshape_paragraphs', 'path', 'str')
        param_shape_index = self.get_test_value('get_special_slide_subshape_paragraphs', 'shape_index', 'int')
        param_password = self.get_test_value('get_special_slide_subshape_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshape_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshape_paragraphs', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_special_slide_subshape_paragraphs', 'storage', param_storage, 'str')
        self.initialize('get_special_slide_subshape_paragraphs', 'storage', param_storage)
        ok = False
        try:
            self.api.get_special_slide_subshape_paragraphs(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshape_paragraphs', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshape_paragraphs', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_special_slide_subshape_paragraphs', 'storage')

    def test_get_special_slide_subshape_portion(self):
        """Test case for get_special_slide_subshape_portion
        """
        param_name = self.get_test_value('get_special_slide_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshape_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshape_portion', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('get_special_slide_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('get_special_slide_subshape_portion', 'portion_index', 'int')
        param_password = self.get_test_value('get_special_slide_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshape_portion', 'storage', 'str')
        self.initialize('get_special_slide_subshape_portion', None, None)
        response = self.api.get_special_slide_subshape_portion(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_special_slide_subshape_portion_invalid_name(self):
        """Test case for get_special_slide_subshape_portion with invalid name
        """
        param_name = self.get_test_value('get_special_slide_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshape_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshape_portion', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('get_special_slide_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('get_special_slide_subshape_portion', 'portion_index', 'int')
        param_password = self.get_test_value('get_special_slide_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshape_portion', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_special_slide_subshape_portion', 'name', param_name, 'str')
        self.initialize('get_special_slide_subshape_portion', 'name', param_name)
        ok = False
        try:
            self.api.get_special_slide_subshape_portion(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshape_portion', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshape_portion', 'name', param_name)
        if ok:
            self.assert_no_exception('get_special_slide_subshape_portion', 'name')

    def test_get_special_slide_subshape_portion_invalid_slide_index(self):
        """Test case for get_special_slide_subshape_portion with invalid slide_index
        """
        param_name = self.get_test_value('get_special_slide_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshape_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshape_portion', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('get_special_slide_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('get_special_slide_subshape_portion', 'portion_index', 'int')
        param_password = self.get_test_value('get_special_slide_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshape_portion', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('get_special_slide_subshape_portion', 'slide_index', param_slide_index, 'int')
        self.initialize('get_special_slide_subshape_portion', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.get_special_slide_subshape_portion(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshape_portion', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshape_portion', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('get_special_slide_subshape_portion', 'slide_index')

    def test_get_special_slide_subshape_portion_invalid_slide_type(self):
        """Test case for get_special_slide_subshape_portion with invalid slide_type
        """
        param_name = self.get_test_value('get_special_slide_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshape_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshape_portion', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('get_special_slide_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('get_special_slide_subshape_portion', 'portion_index', 'int')
        param_password = self.get_test_value('get_special_slide_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshape_portion', 'storage', 'str')
        param_slide_type = self.get_invalid_test_value('get_special_slide_subshape_portion', 'slide_type', param_slide_type, 'str')
        self.initialize('get_special_slide_subshape_portion', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.get_special_slide_subshape_portion(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshape_portion', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshape_portion', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('get_special_slide_subshape_portion', 'slide_type')

    def test_get_special_slide_subshape_portion_invalid_path(self):
        """Test case for get_special_slide_subshape_portion with invalid path
        """
        param_name = self.get_test_value('get_special_slide_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshape_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshape_portion', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('get_special_slide_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('get_special_slide_subshape_portion', 'portion_index', 'int')
        param_password = self.get_test_value('get_special_slide_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshape_portion', 'storage', 'str')
        param_path = self.get_invalid_test_value('get_special_slide_subshape_portion', 'path', param_path, 'str')
        self.initialize('get_special_slide_subshape_portion', 'path', param_path)
        ok = False
        try:
            self.api.get_special_slide_subshape_portion(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshape_portion', 'path', param_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshape_portion', 'path', param_path)
        if ok:
            self.assert_no_exception('get_special_slide_subshape_portion', 'path')

    def test_get_special_slide_subshape_portion_invalid_shape_index(self):
        """Test case for get_special_slide_subshape_portion with invalid shape_index
        """
        param_name = self.get_test_value('get_special_slide_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshape_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshape_portion', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('get_special_slide_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('get_special_slide_subshape_portion', 'portion_index', 'int')
        param_password = self.get_test_value('get_special_slide_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshape_portion', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('get_special_slide_subshape_portion', 'shape_index', param_shape_index, 'int')
        self.initialize('get_special_slide_subshape_portion', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.get_special_slide_subshape_portion(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshape_portion', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshape_portion', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('get_special_slide_subshape_portion', 'shape_index')

    def test_get_special_slide_subshape_portion_invalid_paragraph_index(self):
        """Test case for get_special_slide_subshape_portion with invalid paragraph_index
        """
        param_name = self.get_test_value('get_special_slide_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshape_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshape_portion', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('get_special_slide_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('get_special_slide_subshape_portion', 'portion_index', 'int')
        param_password = self.get_test_value('get_special_slide_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshape_portion', 'storage', 'str')
        param_paragraph_index = self.get_invalid_test_value('get_special_slide_subshape_portion', 'paragraph_index', param_paragraph_index, 'int')
        self.initialize('get_special_slide_subshape_portion', 'paragraph_index', param_paragraph_index)
        ok = False
        try:
            self.api.get_special_slide_subshape_portion(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshape_portion', 'paragraph_index', param_paragraph_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshape_portion', 'paragraph_index', param_paragraph_index)
        if ok:
            self.assert_no_exception('get_special_slide_subshape_portion', 'paragraph_index')

    def test_get_special_slide_subshape_portion_invalid_portion_index(self):
        """Test case for get_special_slide_subshape_portion with invalid portion_index
        """
        param_name = self.get_test_value('get_special_slide_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshape_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshape_portion', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('get_special_slide_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('get_special_slide_subshape_portion', 'portion_index', 'int')
        param_password = self.get_test_value('get_special_slide_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshape_portion', 'storage', 'str')
        param_portion_index = self.get_invalid_test_value('get_special_slide_subshape_portion', 'portion_index', param_portion_index, 'int')
        self.initialize('get_special_slide_subshape_portion', 'portion_index', param_portion_index)
        ok = False
        try:
            self.api.get_special_slide_subshape_portion(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshape_portion', 'portion_index', param_portion_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshape_portion', 'portion_index', param_portion_index)
        if ok:
            self.assert_no_exception('get_special_slide_subshape_portion', 'portion_index')

    def test_get_special_slide_subshape_portion_invalid_password(self):
        """Test case for get_special_slide_subshape_portion with invalid password
        """
        param_name = self.get_test_value('get_special_slide_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshape_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshape_portion', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('get_special_slide_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('get_special_slide_subshape_portion', 'portion_index', 'int')
        param_password = self.get_test_value('get_special_slide_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshape_portion', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_special_slide_subshape_portion', 'password', param_password, 'str')
        self.initialize('get_special_slide_subshape_portion', 'password', param_password)
        ok = False
        try:
            self.api.get_special_slide_subshape_portion(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshape_portion', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshape_portion', 'password', param_password)
        if ok:
            self.assert_no_exception('get_special_slide_subshape_portion', 'password')

    def test_get_special_slide_subshape_portion_invalid_folder(self):
        """Test case for get_special_slide_subshape_portion with invalid folder
        """
        param_name = self.get_test_value('get_special_slide_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshape_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshape_portion', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('get_special_slide_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('get_special_slide_subshape_portion', 'portion_index', 'int')
        param_password = self.get_test_value('get_special_slide_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshape_portion', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_special_slide_subshape_portion', 'folder', param_folder, 'str')
        self.initialize('get_special_slide_subshape_portion', 'folder', param_folder)
        ok = False
        try:
            self.api.get_special_slide_subshape_portion(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshape_portion', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshape_portion', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_special_slide_subshape_portion', 'folder')

    def test_get_special_slide_subshape_portion_invalid_storage(self):
        """Test case for get_special_slide_subshape_portion with invalid storage
        """
        param_name = self.get_test_value('get_special_slide_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshape_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshape_portion', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('get_special_slide_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('get_special_slide_subshape_portion', 'portion_index', 'int')
        param_password = self.get_test_value('get_special_slide_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshape_portion', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_special_slide_subshape_portion', 'storage', param_storage, 'str')
        self.initialize('get_special_slide_subshape_portion', 'storage', param_storage)
        ok = False
        try:
            self.api.get_special_slide_subshape_portion(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshape_portion', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshape_portion', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_special_slide_subshape_portion', 'storage')

    def test_get_special_slide_subshape_portions(self):
        """Test case for get_special_slide_subshape_portions
        """
        param_name = self.get_test_value('get_special_slide_subshape_portions', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshape_portions', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshape_portions', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshape_portions', 'path', 'str')
        param_shape_index = self.get_test_value('get_special_slide_subshape_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_subshape_portions', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_special_slide_subshape_portions', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshape_portions', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshape_portions', 'storage', 'str')
        self.initialize('get_special_slide_subshape_portions', None, None)
        response = self.api.get_special_slide_subshape_portions(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_special_slide_subshape_portions_invalid_name(self):
        """Test case for get_special_slide_subshape_portions with invalid name
        """
        param_name = self.get_test_value('get_special_slide_subshape_portions', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshape_portions', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshape_portions', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshape_portions', 'path', 'str')
        param_shape_index = self.get_test_value('get_special_slide_subshape_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_subshape_portions', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_special_slide_subshape_portions', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshape_portions', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshape_portions', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_special_slide_subshape_portions', 'name', param_name, 'str')
        self.initialize('get_special_slide_subshape_portions', 'name', param_name)
        ok = False
        try:
            self.api.get_special_slide_subshape_portions(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshape_portions', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshape_portions', 'name', param_name)
        if ok:
            self.assert_no_exception('get_special_slide_subshape_portions', 'name')

    def test_get_special_slide_subshape_portions_invalid_slide_index(self):
        """Test case for get_special_slide_subshape_portions with invalid slide_index
        """
        param_name = self.get_test_value('get_special_slide_subshape_portions', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshape_portions', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshape_portions', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshape_portions', 'path', 'str')
        param_shape_index = self.get_test_value('get_special_slide_subshape_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_subshape_portions', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_special_slide_subshape_portions', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshape_portions', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshape_portions', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('get_special_slide_subshape_portions', 'slide_index', param_slide_index, 'int')
        self.initialize('get_special_slide_subshape_portions', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.get_special_slide_subshape_portions(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshape_portions', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshape_portions', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('get_special_slide_subshape_portions', 'slide_index')

    def test_get_special_slide_subshape_portions_invalid_slide_type(self):
        """Test case for get_special_slide_subshape_portions with invalid slide_type
        """
        param_name = self.get_test_value('get_special_slide_subshape_portions', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshape_portions', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshape_portions', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshape_portions', 'path', 'str')
        param_shape_index = self.get_test_value('get_special_slide_subshape_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_subshape_portions', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_special_slide_subshape_portions', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshape_portions', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshape_portions', 'storage', 'str')
        param_slide_type = self.get_invalid_test_value('get_special_slide_subshape_portions', 'slide_type', param_slide_type, 'str')
        self.initialize('get_special_slide_subshape_portions', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.get_special_slide_subshape_portions(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshape_portions', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshape_portions', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('get_special_slide_subshape_portions', 'slide_type')

    def test_get_special_slide_subshape_portions_invalid_path(self):
        """Test case for get_special_slide_subshape_portions with invalid path
        """
        param_name = self.get_test_value('get_special_slide_subshape_portions', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshape_portions', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshape_portions', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshape_portions', 'path', 'str')
        param_shape_index = self.get_test_value('get_special_slide_subshape_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_subshape_portions', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_special_slide_subshape_portions', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshape_portions', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshape_portions', 'storage', 'str')
        param_path = self.get_invalid_test_value('get_special_slide_subshape_portions', 'path', param_path, 'str')
        self.initialize('get_special_slide_subshape_portions', 'path', param_path)
        ok = False
        try:
            self.api.get_special_slide_subshape_portions(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshape_portions', 'path', param_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshape_portions', 'path', param_path)
        if ok:
            self.assert_no_exception('get_special_slide_subshape_portions', 'path')

    def test_get_special_slide_subshape_portions_invalid_shape_index(self):
        """Test case for get_special_slide_subshape_portions with invalid shape_index
        """
        param_name = self.get_test_value('get_special_slide_subshape_portions', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshape_portions', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshape_portions', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshape_portions', 'path', 'str')
        param_shape_index = self.get_test_value('get_special_slide_subshape_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_subshape_portions', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_special_slide_subshape_portions', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshape_portions', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshape_portions', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('get_special_slide_subshape_portions', 'shape_index', param_shape_index, 'int')
        self.initialize('get_special_slide_subshape_portions', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.get_special_slide_subshape_portions(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshape_portions', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshape_portions', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('get_special_slide_subshape_portions', 'shape_index')

    def test_get_special_slide_subshape_portions_invalid_paragraph_index(self):
        """Test case for get_special_slide_subshape_portions with invalid paragraph_index
        """
        param_name = self.get_test_value('get_special_slide_subshape_portions', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshape_portions', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshape_portions', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshape_portions', 'path', 'str')
        param_shape_index = self.get_test_value('get_special_slide_subshape_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_subshape_portions', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_special_slide_subshape_portions', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshape_portions', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshape_portions', 'storage', 'str')
        param_paragraph_index = self.get_invalid_test_value('get_special_slide_subshape_portions', 'paragraph_index', param_paragraph_index, 'int')
        self.initialize('get_special_slide_subshape_portions', 'paragraph_index', param_paragraph_index)
        ok = False
        try:
            self.api.get_special_slide_subshape_portions(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshape_portions', 'paragraph_index', param_paragraph_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshape_portions', 'paragraph_index', param_paragraph_index)
        if ok:
            self.assert_no_exception('get_special_slide_subshape_portions', 'paragraph_index')

    def test_get_special_slide_subshape_portions_invalid_password(self):
        """Test case for get_special_slide_subshape_portions with invalid password
        """
        param_name = self.get_test_value('get_special_slide_subshape_portions', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshape_portions', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshape_portions', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshape_portions', 'path', 'str')
        param_shape_index = self.get_test_value('get_special_slide_subshape_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_subshape_portions', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_special_slide_subshape_portions', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshape_portions', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshape_portions', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_special_slide_subshape_portions', 'password', param_password, 'str')
        self.initialize('get_special_slide_subshape_portions', 'password', param_password)
        ok = False
        try:
            self.api.get_special_slide_subshape_portions(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshape_portions', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshape_portions', 'password', param_password)
        if ok:
            self.assert_no_exception('get_special_slide_subshape_portions', 'password')

    def test_get_special_slide_subshape_portions_invalid_folder(self):
        """Test case for get_special_slide_subshape_portions with invalid folder
        """
        param_name = self.get_test_value('get_special_slide_subshape_portions', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshape_portions', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshape_portions', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshape_portions', 'path', 'str')
        param_shape_index = self.get_test_value('get_special_slide_subshape_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_subshape_portions', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_special_slide_subshape_portions', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshape_portions', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshape_portions', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_special_slide_subshape_portions', 'folder', param_folder, 'str')
        self.initialize('get_special_slide_subshape_portions', 'folder', param_folder)
        ok = False
        try:
            self.api.get_special_slide_subshape_portions(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshape_portions', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshape_portions', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_special_slide_subshape_portions', 'folder')

    def test_get_special_slide_subshape_portions_invalid_storage(self):
        """Test case for get_special_slide_subshape_portions with invalid storage
        """
        param_name = self.get_test_value('get_special_slide_subshape_portions', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshape_portions', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshape_portions', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshape_portions', 'path', 'str')
        param_shape_index = self.get_test_value('get_special_slide_subshape_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_special_slide_subshape_portions', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_special_slide_subshape_portions', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshape_portions', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshape_portions', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_special_slide_subshape_portions', 'storage', param_storage, 'str')
        self.initialize('get_special_slide_subshape_portions', 'storage', param_storage)
        ok = False
        try:
            self.api.get_special_slide_subshape_portions(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshape_portions', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshape_portions', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_special_slide_subshape_portions', 'storage')

    def test_get_special_slide_subshapes(self):
        """Test case for get_special_slide_subshapes
        """
        param_name = self.get_test_value('get_special_slide_subshapes', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshapes', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshapes', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshapes', 'path', 'str')
        param_password = self.get_test_value('get_special_slide_subshapes', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshapes', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshapes', 'storage', 'str')
        self.initialize('get_special_slide_subshapes', None, None)
        response = self.api.get_special_slide_subshapes(param_name, param_slide_index, param_slide_type, param_path, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_special_slide_subshapes_invalid_name(self):
        """Test case for get_special_slide_subshapes with invalid name
        """
        param_name = self.get_test_value('get_special_slide_subshapes', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshapes', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshapes', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshapes', 'path', 'str')
        param_password = self.get_test_value('get_special_slide_subshapes', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshapes', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshapes', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_special_slide_subshapes', 'name', param_name, 'str')
        self.initialize('get_special_slide_subshapes', 'name', param_name)
        ok = False
        try:
            self.api.get_special_slide_subshapes(param_name, param_slide_index, param_slide_type, param_path, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshapes', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshapes', 'name', param_name)
        if ok:
            self.assert_no_exception('get_special_slide_subshapes', 'name')

    def test_get_special_slide_subshapes_invalid_slide_index(self):
        """Test case for get_special_slide_subshapes with invalid slide_index
        """
        param_name = self.get_test_value('get_special_slide_subshapes', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshapes', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshapes', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshapes', 'path', 'str')
        param_password = self.get_test_value('get_special_slide_subshapes', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshapes', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshapes', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('get_special_slide_subshapes', 'slide_index', param_slide_index, 'int')
        self.initialize('get_special_slide_subshapes', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.get_special_slide_subshapes(param_name, param_slide_index, param_slide_type, param_path, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshapes', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshapes', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('get_special_slide_subshapes', 'slide_index')

    def test_get_special_slide_subshapes_invalid_slide_type(self):
        """Test case for get_special_slide_subshapes with invalid slide_type
        """
        param_name = self.get_test_value('get_special_slide_subshapes', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshapes', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshapes', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshapes', 'path', 'str')
        param_password = self.get_test_value('get_special_slide_subshapes', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshapes', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshapes', 'storage', 'str')
        param_slide_type = self.get_invalid_test_value('get_special_slide_subshapes', 'slide_type', param_slide_type, 'str')
        self.initialize('get_special_slide_subshapes', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.get_special_slide_subshapes(param_name, param_slide_index, param_slide_type, param_path, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshapes', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshapes', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('get_special_slide_subshapes', 'slide_type')

    def test_get_special_slide_subshapes_invalid_path(self):
        """Test case for get_special_slide_subshapes with invalid path
        """
        param_name = self.get_test_value('get_special_slide_subshapes', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshapes', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshapes', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshapes', 'path', 'str')
        param_password = self.get_test_value('get_special_slide_subshapes', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshapes', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshapes', 'storage', 'str')
        param_path = self.get_invalid_test_value('get_special_slide_subshapes', 'path', param_path, 'str')
        self.initialize('get_special_slide_subshapes', 'path', param_path)
        ok = False
        try:
            self.api.get_special_slide_subshapes(param_name, param_slide_index, param_slide_type, param_path, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshapes', 'path', param_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshapes', 'path', param_path)
        if ok:
            self.assert_no_exception('get_special_slide_subshapes', 'path')

    def test_get_special_slide_subshapes_invalid_password(self):
        """Test case for get_special_slide_subshapes with invalid password
        """
        param_name = self.get_test_value('get_special_slide_subshapes', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshapes', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshapes', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshapes', 'path', 'str')
        param_password = self.get_test_value('get_special_slide_subshapes', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshapes', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshapes', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_special_slide_subshapes', 'password', param_password, 'str')
        self.initialize('get_special_slide_subshapes', 'password', param_password)
        ok = False
        try:
            self.api.get_special_slide_subshapes(param_name, param_slide_index, param_slide_type, param_path, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshapes', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshapes', 'password', param_password)
        if ok:
            self.assert_no_exception('get_special_slide_subshapes', 'password')

    def test_get_special_slide_subshapes_invalid_folder(self):
        """Test case for get_special_slide_subshapes with invalid folder
        """
        param_name = self.get_test_value('get_special_slide_subshapes', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshapes', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshapes', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshapes', 'path', 'str')
        param_password = self.get_test_value('get_special_slide_subshapes', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshapes', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshapes', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_special_slide_subshapes', 'folder', param_folder, 'str')
        self.initialize('get_special_slide_subshapes', 'folder', param_folder)
        ok = False
        try:
            self.api.get_special_slide_subshapes(param_name, param_slide_index, param_slide_type, param_path, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshapes', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshapes', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_special_slide_subshapes', 'folder')

    def test_get_special_slide_subshapes_invalid_storage(self):
        """Test case for get_special_slide_subshapes with invalid storage
        """
        param_name = self.get_test_value('get_special_slide_subshapes', 'name', 'str')
        param_slide_index = self.get_test_value('get_special_slide_subshapes', 'slide_index', 'int')
        param_slide_type = self.get_test_value('get_special_slide_subshapes', 'slide_type', 'str')
        param_path = self.get_test_value('get_special_slide_subshapes', 'path', 'str')
        param_password = self.get_test_value('get_special_slide_subshapes', 'password', 'str')
        param_folder = self.get_test_value('get_special_slide_subshapes', 'folder', 'str')
        param_storage = self.get_test_value('get_special_slide_subshapes', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_special_slide_subshapes', 'storage', param_storage, 'str')
        self.initialize('get_special_slide_subshapes', 'storage', param_storage)
        ok = False
        try:
            self.api.get_special_slide_subshapes(param_name, param_slide_index, param_slide_type, param_path, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_special_slide_subshapes', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_special_slide_subshapes', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_special_slide_subshapes', 'storage')

    def test_get_subshape(self):
        """Test case for get_subshape
        """
        param_name = self.get_test_value('get_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('get_subshape', 'shape_index', 'int')
        param_password = self.get_test_value('get_subshape', 'password', 'str')
        param_folder = self.get_test_value('get_subshape', 'folder', 'str')
        param_storage = self.get_test_value('get_subshape', 'storage', 'str')
        self.initialize('get_subshape', None, None)
        response = self.api.get_subshape(param_name, param_slide_index, param_path, param_shape_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_subshape_invalid_name(self):
        """Test case for get_subshape with invalid name
        """
        param_name = self.get_test_value('get_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('get_subshape', 'shape_index', 'int')
        param_password = self.get_test_value('get_subshape', 'password', 'str')
        param_folder = self.get_test_value('get_subshape', 'folder', 'str')
        param_storage = self.get_test_value('get_subshape', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_subshape', 'name', param_name, 'str')
        self.initialize('get_subshape', 'name', param_name)
        ok = False
        try:
            self.api.get_subshape(param_name, param_slide_index, param_path, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_subshape', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_subshape', 'name', param_name)
        if ok:
            self.assert_no_exception('get_subshape', 'name')

    def test_get_subshape_invalid_slide_index(self):
        """Test case for get_subshape with invalid slide_index
        """
        param_name = self.get_test_value('get_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('get_subshape', 'shape_index', 'int')
        param_password = self.get_test_value('get_subshape', 'password', 'str')
        param_folder = self.get_test_value('get_subshape', 'folder', 'str')
        param_storage = self.get_test_value('get_subshape', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('get_subshape', 'slide_index', param_slide_index, 'int')
        self.initialize('get_subshape', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.get_subshape(param_name, param_slide_index, param_path, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_subshape', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_subshape', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('get_subshape', 'slide_index')

    def test_get_subshape_invalid_path(self):
        """Test case for get_subshape with invalid path
        """
        param_name = self.get_test_value('get_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('get_subshape', 'shape_index', 'int')
        param_password = self.get_test_value('get_subshape', 'password', 'str')
        param_folder = self.get_test_value('get_subshape', 'folder', 'str')
        param_storage = self.get_test_value('get_subshape', 'storage', 'str')
        param_path = self.get_invalid_test_value('get_subshape', 'path', param_path, 'str')
        self.initialize('get_subshape', 'path', param_path)
        ok = False
        try:
            self.api.get_subshape(param_name, param_slide_index, param_path, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_subshape', 'path', param_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_subshape', 'path', param_path)
        if ok:
            self.assert_no_exception('get_subshape', 'path')

    def test_get_subshape_invalid_shape_index(self):
        """Test case for get_subshape with invalid shape_index
        """
        param_name = self.get_test_value('get_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('get_subshape', 'shape_index', 'int')
        param_password = self.get_test_value('get_subshape', 'password', 'str')
        param_folder = self.get_test_value('get_subshape', 'folder', 'str')
        param_storage = self.get_test_value('get_subshape', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('get_subshape', 'shape_index', param_shape_index, 'int')
        self.initialize('get_subshape', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.get_subshape(param_name, param_slide_index, param_path, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_subshape', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_subshape', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('get_subshape', 'shape_index')

    def test_get_subshape_invalid_password(self):
        """Test case for get_subshape with invalid password
        """
        param_name = self.get_test_value('get_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('get_subshape', 'shape_index', 'int')
        param_password = self.get_test_value('get_subshape', 'password', 'str')
        param_folder = self.get_test_value('get_subshape', 'folder', 'str')
        param_storage = self.get_test_value('get_subshape', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_subshape', 'password', param_password, 'str')
        self.initialize('get_subshape', 'password', param_password)
        ok = False
        try:
            self.api.get_subshape(param_name, param_slide_index, param_path, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_subshape', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_subshape', 'password', param_password)
        if ok:
            self.assert_no_exception('get_subshape', 'password')

    def test_get_subshape_invalid_folder(self):
        """Test case for get_subshape with invalid folder
        """
        param_name = self.get_test_value('get_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('get_subshape', 'shape_index', 'int')
        param_password = self.get_test_value('get_subshape', 'password', 'str')
        param_folder = self.get_test_value('get_subshape', 'folder', 'str')
        param_storage = self.get_test_value('get_subshape', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_subshape', 'folder', param_folder, 'str')
        self.initialize('get_subshape', 'folder', param_folder)
        ok = False
        try:
            self.api.get_subshape(param_name, param_slide_index, param_path, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_subshape', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_subshape', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_subshape', 'folder')

    def test_get_subshape_invalid_storage(self):
        """Test case for get_subshape with invalid storage
        """
        param_name = self.get_test_value('get_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('get_subshape', 'shape_index', 'int')
        param_password = self.get_test_value('get_subshape', 'password', 'str')
        param_folder = self.get_test_value('get_subshape', 'folder', 'str')
        param_storage = self.get_test_value('get_subshape', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_subshape', 'storage', param_storage, 'str')
        self.initialize('get_subshape', 'storage', param_storage)
        ok = False
        try:
            self.api.get_subshape(param_name, param_slide_index, param_path, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_subshape', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_subshape', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_subshape', 'storage')

    def test_get_subshape_paragraph(self):
        """Test case for get_subshape_paragraph
        """
        param_name = self.get_test_value('get_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshape_paragraph', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('get_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_subshape_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('get_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('get_subshape_paragraph', 'storage', 'str')
        self.initialize('get_subshape_paragraph', None, None)
        response = self.api.get_subshape_paragraph(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_subshape_paragraph_invalid_name(self):
        """Test case for get_subshape_paragraph with invalid name
        """
        param_name = self.get_test_value('get_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshape_paragraph', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('get_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_subshape_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('get_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('get_subshape_paragraph', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_subshape_paragraph', 'name', param_name, 'str')
        self.initialize('get_subshape_paragraph', 'name', param_name)
        ok = False
        try:
            self.api.get_subshape_paragraph(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_subshape_paragraph', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_subshape_paragraph', 'name', param_name)
        if ok:
            self.assert_no_exception('get_subshape_paragraph', 'name')

    def test_get_subshape_paragraph_invalid_slide_index(self):
        """Test case for get_subshape_paragraph with invalid slide_index
        """
        param_name = self.get_test_value('get_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshape_paragraph', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('get_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_subshape_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('get_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('get_subshape_paragraph', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('get_subshape_paragraph', 'slide_index', param_slide_index, 'int')
        self.initialize('get_subshape_paragraph', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.get_subshape_paragraph(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_subshape_paragraph', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_subshape_paragraph', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('get_subshape_paragraph', 'slide_index')

    def test_get_subshape_paragraph_invalid_path(self):
        """Test case for get_subshape_paragraph with invalid path
        """
        param_name = self.get_test_value('get_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshape_paragraph', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('get_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_subshape_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('get_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('get_subshape_paragraph', 'storage', 'str')
        param_path = self.get_invalid_test_value('get_subshape_paragraph', 'path', param_path, 'str')
        self.initialize('get_subshape_paragraph', 'path', param_path)
        ok = False
        try:
            self.api.get_subshape_paragraph(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_subshape_paragraph', 'path', param_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_subshape_paragraph', 'path', param_path)
        if ok:
            self.assert_no_exception('get_subshape_paragraph', 'path')

    def test_get_subshape_paragraph_invalid_shape_index(self):
        """Test case for get_subshape_paragraph with invalid shape_index
        """
        param_name = self.get_test_value('get_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshape_paragraph', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('get_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_subshape_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('get_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('get_subshape_paragraph', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('get_subshape_paragraph', 'shape_index', param_shape_index, 'int')
        self.initialize('get_subshape_paragraph', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.get_subshape_paragraph(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_subshape_paragraph', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_subshape_paragraph', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('get_subshape_paragraph', 'shape_index')

    def test_get_subshape_paragraph_invalid_paragraph_index(self):
        """Test case for get_subshape_paragraph with invalid paragraph_index
        """
        param_name = self.get_test_value('get_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshape_paragraph', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('get_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_subshape_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('get_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('get_subshape_paragraph', 'storage', 'str')
        param_paragraph_index = self.get_invalid_test_value('get_subshape_paragraph', 'paragraph_index', param_paragraph_index, 'int')
        self.initialize('get_subshape_paragraph', 'paragraph_index', param_paragraph_index)
        ok = False
        try:
            self.api.get_subshape_paragraph(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_subshape_paragraph', 'paragraph_index', param_paragraph_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_subshape_paragraph', 'paragraph_index', param_paragraph_index)
        if ok:
            self.assert_no_exception('get_subshape_paragraph', 'paragraph_index')

    def test_get_subshape_paragraph_invalid_password(self):
        """Test case for get_subshape_paragraph with invalid password
        """
        param_name = self.get_test_value('get_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshape_paragraph', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('get_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_subshape_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('get_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('get_subshape_paragraph', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_subshape_paragraph', 'password', param_password, 'str')
        self.initialize('get_subshape_paragraph', 'password', param_password)
        ok = False
        try:
            self.api.get_subshape_paragraph(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_subshape_paragraph', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_subshape_paragraph', 'password', param_password)
        if ok:
            self.assert_no_exception('get_subshape_paragraph', 'password')

    def test_get_subshape_paragraph_invalid_folder(self):
        """Test case for get_subshape_paragraph with invalid folder
        """
        param_name = self.get_test_value('get_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshape_paragraph', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('get_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_subshape_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('get_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('get_subshape_paragraph', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_subshape_paragraph', 'folder', param_folder, 'str')
        self.initialize('get_subshape_paragraph', 'folder', param_folder)
        ok = False
        try:
            self.api.get_subshape_paragraph(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_subshape_paragraph', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_subshape_paragraph', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_subshape_paragraph', 'folder')

    def test_get_subshape_paragraph_invalid_storage(self):
        """Test case for get_subshape_paragraph with invalid storage
        """
        param_name = self.get_test_value('get_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshape_paragraph', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('get_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_subshape_paragraph', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('get_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('get_subshape_paragraph', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_subshape_paragraph', 'storage', param_storage, 'str')
        self.initialize('get_subshape_paragraph', 'storage', param_storage)
        ok = False
        try:
            self.api.get_subshape_paragraph(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_subshape_paragraph', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_subshape_paragraph', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_subshape_paragraph', 'storage')

    def test_get_subshape_paragraphs(self):
        """Test case for get_subshape_paragraphs
        """
        param_name = self.get_test_value('get_subshape_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshape_paragraphs', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshape_paragraphs', 'path', 'str')
        param_shape_index = self.get_test_value('get_subshape_paragraphs', 'shape_index', 'int')
        param_password = self.get_test_value('get_subshape_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('get_subshape_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('get_subshape_paragraphs', 'storage', 'str')
        self.initialize('get_subshape_paragraphs', None, None)
        response = self.api.get_subshape_paragraphs(param_name, param_slide_index, param_path, param_shape_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_subshape_paragraphs_invalid_name(self):
        """Test case for get_subshape_paragraphs with invalid name
        """
        param_name = self.get_test_value('get_subshape_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshape_paragraphs', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshape_paragraphs', 'path', 'str')
        param_shape_index = self.get_test_value('get_subshape_paragraphs', 'shape_index', 'int')
        param_password = self.get_test_value('get_subshape_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('get_subshape_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('get_subshape_paragraphs', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_subshape_paragraphs', 'name', param_name, 'str')
        self.initialize('get_subshape_paragraphs', 'name', param_name)
        ok = False
        try:
            self.api.get_subshape_paragraphs(param_name, param_slide_index, param_path, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_subshape_paragraphs', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_subshape_paragraphs', 'name', param_name)
        if ok:
            self.assert_no_exception('get_subshape_paragraphs', 'name')

    def test_get_subshape_paragraphs_invalid_slide_index(self):
        """Test case for get_subshape_paragraphs with invalid slide_index
        """
        param_name = self.get_test_value('get_subshape_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshape_paragraphs', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshape_paragraphs', 'path', 'str')
        param_shape_index = self.get_test_value('get_subshape_paragraphs', 'shape_index', 'int')
        param_password = self.get_test_value('get_subshape_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('get_subshape_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('get_subshape_paragraphs', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('get_subshape_paragraphs', 'slide_index', param_slide_index, 'int')
        self.initialize('get_subshape_paragraphs', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.get_subshape_paragraphs(param_name, param_slide_index, param_path, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_subshape_paragraphs', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_subshape_paragraphs', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('get_subshape_paragraphs', 'slide_index')

    def test_get_subshape_paragraphs_invalid_path(self):
        """Test case for get_subshape_paragraphs with invalid path
        """
        param_name = self.get_test_value('get_subshape_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshape_paragraphs', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshape_paragraphs', 'path', 'str')
        param_shape_index = self.get_test_value('get_subshape_paragraphs', 'shape_index', 'int')
        param_password = self.get_test_value('get_subshape_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('get_subshape_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('get_subshape_paragraphs', 'storage', 'str')
        param_path = self.get_invalid_test_value('get_subshape_paragraphs', 'path', param_path, 'str')
        self.initialize('get_subshape_paragraphs', 'path', param_path)
        ok = False
        try:
            self.api.get_subshape_paragraphs(param_name, param_slide_index, param_path, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_subshape_paragraphs', 'path', param_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_subshape_paragraphs', 'path', param_path)
        if ok:
            self.assert_no_exception('get_subshape_paragraphs', 'path')

    def test_get_subshape_paragraphs_invalid_shape_index(self):
        """Test case for get_subshape_paragraphs with invalid shape_index
        """
        param_name = self.get_test_value('get_subshape_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshape_paragraphs', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshape_paragraphs', 'path', 'str')
        param_shape_index = self.get_test_value('get_subshape_paragraphs', 'shape_index', 'int')
        param_password = self.get_test_value('get_subshape_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('get_subshape_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('get_subshape_paragraphs', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('get_subshape_paragraphs', 'shape_index', param_shape_index, 'int')
        self.initialize('get_subshape_paragraphs', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.get_subshape_paragraphs(param_name, param_slide_index, param_path, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_subshape_paragraphs', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_subshape_paragraphs', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('get_subshape_paragraphs', 'shape_index')

    def test_get_subshape_paragraphs_invalid_password(self):
        """Test case for get_subshape_paragraphs with invalid password
        """
        param_name = self.get_test_value('get_subshape_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshape_paragraphs', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshape_paragraphs', 'path', 'str')
        param_shape_index = self.get_test_value('get_subshape_paragraphs', 'shape_index', 'int')
        param_password = self.get_test_value('get_subshape_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('get_subshape_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('get_subshape_paragraphs', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_subshape_paragraphs', 'password', param_password, 'str')
        self.initialize('get_subshape_paragraphs', 'password', param_password)
        ok = False
        try:
            self.api.get_subshape_paragraphs(param_name, param_slide_index, param_path, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_subshape_paragraphs', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_subshape_paragraphs', 'password', param_password)
        if ok:
            self.assert_no_exception('get_subshape_paragraphs', 'password')

    def test_get_subshape_paragraphs_invalid_folder(self):
        """Test case for get_subshape_paragraphs with invalid folder
        """
        param_name = self.get_test_value('get_subshape_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshape_paragraphs', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshape_paragraphs', 'path', 'str')
        param_shape_index = self.get_test_value('get_subshape_paragraphs', 'shape_index', 'int')
        param_password = self.get_test_value('get_subshape_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('get_subshape_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('get_subshape_paragraphs', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_subshape_paragraphs', 'folder', param_folder, 'str')
        self.initialize('get_subshape_paragraphs', 'folder', param_folder)
        ok = False
        try:
            self.api.get_subshape_paragraphs(param_name, param_slide_index, param_path, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_subshape_paragraphs', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_subshape_paragraphs', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_subshape_paragraphs', 'folder')

    def test_get_subshape_paragraphs_invalid_storage(self):
        """Test case for get_subshape_paragraphs with invalid storage
        """
        param_name = self.get_test_value('get_subshape_paragraphs', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshape_paragraphs', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshape_paragraphs', 'path', 'str')
        param_shape_index = self.get_test_value('get_subshape_paragraphs', 'shape_index', 'int')
        param_password = self.get_test_value('get_subshape_paragraphs', 'password', 'str')
        param_folder = self.get_test_value('get_subshape_paragraphs', 'folder', 'str')
        param_storage = self.get_test_value('get_subshape_paragraphs', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_subshape_paragraphs', 'storage', param_storage, 'str')
        self.initialize('get_subshape_paragraphs', 'storage', param_storage)
        ok = False
        try:
            self.api.get_subshape_paragraphs(param_name, param_slide_index, param_path, param_shape_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_subshape_paragraphs', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_subshape_paragraphs', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_subshape_paragraphs', 'storage')

    def test_get_subshape_portion(self):
        """Test case for get_subshape_portion
        """
        param_name = self.get_test_value('get_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshape_portion', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('get_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('get_subshape_portion', 'portion_index', 'int')
        param_password = self.get_test_value('get_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('get_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('get_subshape_portion', 'storage', 'str')
        self.initialize('get_subshape_portion', None, None)
        response = self.api.get_subshape_portion(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_subshape_portion_invalid_name(self):
        """Test case for get_subshape_portion with invalid name
        """
        param_name = self.get_test_value('get_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshape_portion', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('get_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('get_subshape_portion', 'portion_index', 'int')
        param_password = self.get_test_value('get_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('get_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('get_subshape_portion', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_subshape_portion', 'name', param_name, 'str')
        self.initialize('get_subshape_portion', 'name', param_name)
        ok = False
        try:
            self.api.get_subshape_portion(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_subshape_portion', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_subshape_portion', 'name', param_name)
        if ok:
            self.assert_no_exception('get_subshape_portion', 'name')

    def test_get_subshape_portion_invalid_slide_index(self):
        """Test case for get_subshape_portion with invalid slide_index
        """
        param_name = self.get_test_value('get_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshape_portion', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('get_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('get_subshape_portion', 'portion_index', 'int')
        param_password = self.get_test_value('get_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('get_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('get_subshape_portion', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('get_subshape_portion', 'slide_index', param_slide_index, 'int')
        self.initialize('get_subshape_portion', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.get_subshape_portion(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_subshape_portion', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_subshape_portion', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('get_subshape_portion', 'slide_index')

    def test_get_subshape_portion_invalid_path(self):
        """Test case for get_subshape_portion with invalid path
        """
        param_name = self.get_test_value('get_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshape_portion', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('get_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('get_subshape_portion', 'portion_index', 'int')
        param_password = self.get_test_value('get_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('get_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('get_subshape_portion', 'storage', 'str')
        param_path = self.get_invalid_test_value('get_subshape_portion', 'path', param_path, 'str')
        self.initialize('get_subshape_portion', 'path', param_path)
        ok = False
        try:
            self.api.get_subshape_portion(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_subshape_portion', 'path', param_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_subshape_portion', 'path', param_path)
        if ok:
            self.assert_no_exception('get_subshape_portion', 'path')

    def test_get_subshape_portion_invalid_shape_index(self):
        """Test case for get_subshape_portion with invalid shape_index
        """
        param_name = self.get_test_value('get_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshape_portion', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('get_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('get_subshape_portion', 'portion_index', 'int')
        param_password = self.get_test_value('get_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('get_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('get_subshape_portion', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('get_subshape_portion', 'shape_index', param_shape_index, 'int')
        self.initialize('get_subshape_portion', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.get_subshape_portion(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_subshape_portion', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_subshape_portion', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('get_subshape_portion', 'shape_index')

    def test_get_subshape_portion_invalid_paragraph_index(self):
        """Test case for get_subshape_portion with invalid paragraph_index
        """
        param_name = self.get_test_value('get_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshape_portion', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('get_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('get_subshape_portion', 'portion_index', 'int')
        param_password = self.get_test_value('get_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('get_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('get_subshape_portion', 'storage', 'str')
        param_paragraph_index = self.get_invalid_test_value('get_subshape_portion', 'paragraph_index', param_paragraph_index, 'int')
        self.initialize('get_subshape_portion', 'paragraph_index', param_paragraph_index)
        ok = False
        try:
            self.api.get_subshape_portion(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_subshape_portion', 'paragraph_index', param_paragraph_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_subshape_portion', 'paragraph_index', param_paragraph_index)
        if ok:
            self.assert_no_exception('get_subshape_portion', 'paragraph_index')

    def test_get_subshape_portion_invalid_portion_index(self):
        """Test case for get_subshape_portion with invalid portion_index
        """
        param_name = self.get_test_value('get_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshape_portion', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('get_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('get_subshape_portion', 'portion_index', 'int')
        param_password = self.get_test_value('get_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('get_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('get_subshape_portion', 'storage', 'str')
        param_portion_index = self.get_invalid_test_value('get_subshape_portion', 'portion_index', param_portion_index, 'int')
        self.initialize('get_subshape_portion', 'portion_index', param_portion_index)
        ok = False
        try:
            self.api.get_subshape_portion(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_subshape_portion', 'portion_index', param_portion_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_subshape_portion', 'portion_index', param_portion_index)
        if ok:
            self.assert_no_exception('get_subshape_portion', 'portion_index')

    def test_get_subshape_portion_invalid_password(self):
        """Test case for get_subshape_portion with invalid password
        """
        param_name = self.get_test_value('get_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshape_portion', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('get_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('get_subshape_portion', 'portion_index', 'int')
        param_password = self.get_test_value('get_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('get_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('get_subshape_portion', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_subshape_portion', 'password', param_password, 'str')
        self.initialize('get_subshape_portion', 'password', param_password)
        ok = False
        try:
            self.api.get_subshape_portion(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_subshape_portion', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_subshape_portion', 'password', param_password)
        if ok:
            self.assert_no_exception('get_subshape_portion', 'password')

    def test_get_subshape_portion_invalid_folder(self):
        """Test case for get_subshape_portion with invalid folder
        """
        param_name = self.get_test_value('get_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshape_portion', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('get_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('get_subshape_portion', 'portion_index', 'int')
        param_password = self.get_test_value('get_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('get_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('get_subshape_portion', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_subshape_portion', 'folder', param_folder, 'str')
        self.initialize('get_subshape_portion', 'folder', param_folder)
        ok = False
        try:
            self.api.get_subshape_portion(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_subshape_portion', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_subshape_portion', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_subshape_portion', 'folder')

    def test_get_subshape_portion_invalid_storage(self):
        """Test case for get_subshape_portion with invalid storage
        """
        param_name = self.get_test_value('get_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshape_portion', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('get_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('get_subshape_portion', 'portion_index', 'int')
        param_password = self.get_test_value('get_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('get_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('get_subshape_portion', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_subshape_portion', 'storage', param_storage, 'str')
        self.initialize('get_subshape_portion', 'storage', param_storage)
        ok = False
        try:
            self.api.get_subshape_portion(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_subshape_portion', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_subshape_portion', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_subshape_portion', 'storage')

    def test_get_subshape_portions(self):
        """Test case for get_subshape_portions
        """
        param_name = self.get_test_value('get_subshape_portions', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshape_portions', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshape_portions', 'path', 'str')
        param_shape_index = self.get_test_value('get_subshape_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_subshape_portions', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_subshape_portions', 'password', 'str')
        param_folder = self.get_test_value('get_subshape_portions', 'folder', 'str')
        param_storage = self.get_test_value('get_subshape_portions', 'storage', 'str')
        self.initialize('get_subshape_portions', None, None)
        response = self.api.get_subshape_portions(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_subshape_portions_invalid_name(self):
        """Test case for get_subshape_portions with invalid name
        """
        param_name = self.get_test_value('get_subshape_portions', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshape_portions', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshape_portions', 'path', 'str')
        param_shape_index = self.get_test_value('get_subshape_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_subshape_portions', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_subshape_portions', 'password', 'str')
        param_folder = self.get_test_value('get_subshape_portions', 'folder', 'str')
        param_storage = self.get_test_value('get_subshape_portions', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_subshape_portions', 'name', param_name, 'str')
        self.initialize('get_subshape_portions', 'name', param_name)
        ok = False
        try:
            self.api.get_subshape_portions(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_subshape_portions', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_subshape_portions', 'name', param_name)
        if ok:
            self.assert_no_exception('get_subshape_portions', 'name')

    def test_get_subshape_portions_invalid_slide_index(self):
        """Test case for get_subshape_portions with invalid slide_index
        """
        param_name = self.get_test_value('get_subshape_portions', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshape_portions', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshape_portions', 'path', 'str')
        param_shape_index = self.get_test_value('get_subshape_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_subshape_portions', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_subshape_portions', 'password', 'str')
        param_folder = self.get_test_value('get_subshape_portions', 'folder', 'str')
        param_storage = self.get_test_value('get_subshape_portions', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('get_subshape_portions', 'slide_index', param_slide_index, 'int')
        self.initialize('get_subshape_portions', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.get_subshape_portions(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_subshape_portions', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_subshape_portions', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('get_subshape_portions', 'slide_index')

    def test_get_subshape_portions_invalid_path(self):
        """Test case for get_subshape_portions with invalid path
        """
        param_name = self.get_test_value('get_subshape_portions', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshape_portions', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshape_portions', 'path', 'str')
        param_shape_index = self.get_test_value('get_subshape_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_subshape_portions', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_subshape_portions', 'password', 'str')
        param_folder = self.get_test_value('get_subshape_portions', 'folder', 'str')
        param_storage = self.get_test_value('get_subshape_portions', 'storage', 'str')
        param_path = self.get_invalid_test_value('get_subshape_portions', 'path', param_path, 'str')
        self.initialize('get_subshape_portions', 'path', param_path)
        ok = False
        try:
            self.api.get_subshape_portions(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_subshape_portions', 'path', param_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_subshape_portions', 'path', param_path)
        if ok:
            self.assert_no_exception('get_subshape_portions', 'path')

    def test_get_subshape_portions_invalid_shape_index(self):
        """Test case for get_subshape_portions with invalid shape_index
        """
        param_name = self.get_test_value('get_subshape_portions', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshape_portions', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshape_portions', 'path', 'str')
        param_shape_index = self.get_test_value('get_subshape_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_subshape_portions', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_subshape_portions', 'password', 'str')
        param_folder = self.get_test_value('get_subshape_portions', 'folder', 'str')
        param_storage = self.get_test_value('get_subshape_portions', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('get_subshape_portions', 'shape_index', param_shape_index, 'int')
        self.initialize('get_subshape_portions', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.get_subshape_portions(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_subshape_portions', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_subshape_portions', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('get_subshape_portions', 'shape_index')

    def test_get_subshape_portions_invalid_paragraph_index(self):
        """Test case for get_subshape_portions with invalid paragraph_index
        """
        param_name = self.get_test_value('get_subshape_portions', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshape_portions', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshape_portions', 'path', 'str')
        param_shape_index = self.get_test_value('get_subshape_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_subshape_portions', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_subshape_portions', 'password', 'str')
        param_folder = self.get_test_value('get_subshape_portions', 'folder', 'str')
        param_storage = self.get_test_value('get_subshape_portions', 'storage', 'str')
        param_paragraph_index = self.get_invalid_test_value('get_subshape_portions', 'paragraph_index', param_paragraph_index, 'int')
        self.initialize('get_subshape_portions', 'paragraph_index', param_paragraph_index)
        ok = False
        try:
            self.api.get_subshape_portions(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_subshape_portions', 'paragraph_index', param_paragraph_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_subshape_portions', 'paragraph_index', param_paragraph_index)
        if ok:
            self.assert_no_exception('get_subshape_portions', 'paragraph_index')

    def test_get_subshape_portions_invalid_password(self):
        """Test case for get_subshape_portions with invalid password
        """
        param_name = self.get_test_value('get_subshape_portions', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshape_portions', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshape_portions', 'path', 'str')
        param_shape_index = self.get_test_value('get_subshape_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_subshape_portions', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_subshape_portions', 'password', 'str')
        param_folder = self.get_test_value('get_subshape_portions', 'folder', 'str')
        param_storage = self.get_test_value('get_subshape_portions', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_subshape_portions', 'password', param_password, 'str')
        self.initialize('get_subshape_portions', 'password', param_password)
        ok = False
        try:
            self.api.get_subshape_portions(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_subshape_portions', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_subshape_portions', 'password', param_password)
        if ok:
            self.assert_no_exception('get_subshape_portions', 'password')

    def test_get_subshape_portions_invalid_folder(self):
        """Test case for get_subshape_portions with invalid folder
        """
        param_name = self.get_test_value('get_subshape_portions', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshape_portions', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshape_portions', 'path', 'str')
        param_shape_index = self.get_test_value('get_subshape_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_subshape_portions', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_subshape_portions', 'password', 'str')
        param_folder = self.get_test_value('get_subshape_portions', 'folder', 'str')
        param_storage = self.get_test_value('get_subshape_portions', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_subshape_portions', 'folder', param_folder, 'str')
        self.initialize('get_subshape_portions', 'folder', param_folder)
        ok = False
        try:
            self.api.get_subshape_portions(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_subshape_portions', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_subshape_portions', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_subshape_portions', 'folder')

    def test_get_subshape_portions_invalid_storage(self):
        """Test case for get_subshape_portions with invalid storage
        """
        param_name = self.get_test_value('get_subshape_portions', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshape_portions', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshape_portions', 'path', 'str')
        param_shape_index = self.get_test_value('get_subshape_portions', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('get_subshape_portions', 'paragraph_index', 'int')
        param_password = self.get_test_value('get_subshape_portions', 'password', 'str')
        param_folder = self.get_test_value('get_subshape_portions', 'folder', 'str')
        param_storage = self.get_test_value('get_subshape_portions', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_subshape_portions', 'storage', param_storage, 'str')
        self.initialize('get_subshape_portions', 'storage', param_storage)
        ok = False
        try:
            self.api.get_subshape_portions(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_subshape_portions', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_subshape_portions', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_subshape_portions', 'storage')

    def test_get_subshapes(self):
        """Test case for get_subshapes
        """
        param_name = self.get_test_value('get_subshapes', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshapes', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshapes', 'path', 'str')
        param_password = self.get_test_value('get_subshapes', 'password', 'str')
        param_folder = self.get_test_value('get_subshapes', 'folder', 'str')
        param_storage = self.get_test_value('get_subshapes', 'storage', 'str')
        self.initialize('get_subshapes', None, None)
        response = self.api.get_subshapes(param_name, param_slide_index, param_path, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_subshapes_invalid_name(self):
        """Test case for get_subshapes with invalid name
        """
        param_name = self.get_test_value('get_subshapes', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshapes', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshapes', 'path', 'str')
        param_password = self.get_test_value('get_subshapes', 'password', 'str')
        param_folder = self.get_test_value('get_subshapes', 'folder', 'str')
        param_storage = self.get_test_value('get_subshapes', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_subshapes', 'name', param_name, 'str')
        self.initialize('get_subshapes', 'name', param_name)
        ok = False
        try:
            self.api.get_subshapes(param_name, param_slide_index, param_path, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_subshapes', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_subshapes', 'name', param_name)
        if ok:
            self.assert_no_exception('get_subshapes', 'name')

    def test_get_subshapes_invalid_slide_index(self):
        """Test case for get_subshapes with invalid slide_index
        """
        param_name = self.get_test_value('get_subshapes', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshapes', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshapes', 'path', 'str')
        param_password = self.get_test_value('get_subshapes', 'password', 'str')
        param_folder = self.get_test_value('get_subshapes', 'folder', 'str')
        param_storage = self.get_test_value('get_subshapes', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('get_subshapes', 'slide_index', param_slide_index, 'int')
        self.initialize('get_subshapes', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.get_subshapes(param_name, param_slide_index, param_path, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_subshapes', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_subshapes', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('get_subshapes', 'slide_index')

    def test_get_subshapes_invalid_path(self):
        """Test case for get_subshapes with invalid path
        """
        param_name = self.get_test_value('get_subshapes', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshapes', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshapes', 'path', 'str')
        param_password = self.get_test_value('get_subshapes', 'password', 'str')
        param_folder = self.get_test_value('get_subshapes', 'folder', 'str')
        param_storage = self.get_test_value('get_subshapes', 'storage', 'str')
        param_path = self.get_invalid_test_value('get_subshapes', 'path', param_path, 'str')
        self.initialize('get_subshapes', 'path', param_path)
        ok = False
        try:
            self.api.get_subshapes(param_name, param_slide_index, param_path, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_subshapes', 'path', param_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_subshapes', 'path', param_path)
        if ok:
            self.assert_no_exception('get_subshapes', 'path')

    def test_get_subshapes_invalid_password(self):
        """Test case for get_subshapes with invalid password
        """
        param_name = self.get_test_value('get_subshapes', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshapes', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshapes', 'path', 'str')
        param_password = self.get_test_value('get_subshapes', 'password', 'str')
        param_folder = self.get_test_value('get_subshapes', 'folder', 'str')
        param_storage = self.get_test_value('get_subshapes', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_subshapes', 'password', param_password, 'str')
        self.initialize('get_subshapes', 'password', param_password)
        ok = False
        try:
            self.api.get_subshapes(param_name, param_slide_index, param_path, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_subshapes', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_subshapes', 'password', param_password)
        if ok:
            self.assert_no_exception('get_subshapes', 'password')

    def test_get_subshapes_invalid_folder(self):
        """Test case for get_subshapes with invalid folder
        """
        param_name = self.get_test_value('get_subshapes', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshapes', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshapes', 'path', 'str')
        param_password = self.get_test_value('get_subshapes', 'password', 'str')
        param_folder = self.get_test_value('get_subshapes', 'folder', 'str')
        param_storage = self.get_test_value('get_subshapes', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_subshapes', 'folder', param_folder, 'str')
        self.initialize('get_subshapes', 'folder', param_folder)
        ok = False
        try:
            self.api.get_subshapes(param_name, param_slide_index, param_path, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_subshapes', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_subshapes', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_subshapes', 'folder')

    def test_get_subshapes_invalid_storage(self):
        """Test case for get_subshapes with invalid storage
        """
        param_name = self.get_test_value('get_subshapes', 'name', 'str')
        param_slide_index = self.get_test_value('get_subshapes', 'slide_index', 'int')
        param_path = self.get_test_value('get_subshapes', 'path', 'str')
        param_password = self.get_test_value('get_subshapes', 'password', 'str')
        param_folder = self.get_test_value('get_subshapes', 'folder', 'str')
        param_storage = self.get_test_value('get_subshapes', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_subshapes', 'storage', param_storage, 'str')
        self.initialize('get_subshapes', 'storage', param_storage)
        ok = False
        try:
            self.api.get_subshapes(param_name, param_slide_index, param_path, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_subshapes', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_subshapes', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_subshapes', 'storage')

    def test_get_theme(self):
        """Test case for get_theme
        """
        param_name = self.get_test_value('get_theme', 'name', 'str')
        param_slide_index = self.get_test_value('get_theme', 'slide_index', 'int')
        param_password = self.get_test_value('get_theme', 'password', 'str')
        param_folder = self.get_test_value('get_theme', 'folder', 'str')
        param_storage = self.get_test_value('get_theme', 'storage', 'str')
        self.initialize('get_theme', None, None)
        response = self.api.get_theme(param_name, param_slide_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_theme_invalid_name(self):
        """Test case for get_theme with invalid name
        """
        param_name = self.get_test_value('get_theme', 'name', 'str')
        param_slide_index = self.get_test_value('get_theme', 'slide_index', 'int')
        param_password = self.get_test_value('get_theme', 'password', 'str')
        param_folder = self.get_test_value('get_theme', 'folder', 'str')
        param_storage = self.get_test_value('get_theme', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_theme', 'name', param_name, 'str')
        self.initialize('get_theme', 'name', param_name)
        ok = False
        try:
            self.api.get_theme(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_theme', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_theme', 'name', param_name)
        if ok:
            self.assert_no_exception('get_theme', 'name')

    def test_get_theme_invalid_slide_index(self):
        """Test case for get_theme with invalid slide_index
        """
        param_name = self.get_test_value('get_theme', 'name', 'str')
        param_slide_index = self.get_test_value('get_theme', 'slide_index', 'int')
        param_password = self.get_test_value('get_theme', 'password', 'str')
        param_folder = self.get_test_value('get_theme', 'folder', 'str')
        param_storage = self.get_test_value('get_theme', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('get_theme', 'slide_index', param_slide_index, 'int')
        self.initialize('get_theme', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.get_theme(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_theme', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_theme', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('get_theme', 'slide_index')

    def test_get_theme_invalid_password(self):
        """Test case for get_theme with invalid password
        """
        param_name = self.get_test_value('get_theme', 'name', 'str')
        param_slide_index = self.get_test_value('get_theme', 'slide_index', 'int')
        param_password = self.get_test_value('get_theme', 'password', 'str')
        param_folder = self.get_test_value('get_theme', 'folder', 'str')
        param_storage = self.get_test_value('get_theme', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_theme', 'password', param_password, 'str')
        self.initialize('get_theme', 'password', param_password)
        ok = False
        try:
            self.api.get_theme(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_theme', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_theme', 'password', param_password)
        if ok:
            self.assert_no_exception('get_theme', 'password')

    def test_get_theme_invalid_folder(self):
        """Test case for get_theme with invalid folder
        """
        param_name = self.get_test_value('get_theme', 'name', 'str')
        param_slide_index = self.get_test_value('get_theme', 'slide_index', 'int')
        param_password = self.get_test_value('get_theme', 'password', 'str')
        param_folder = self.get_test_value('get_theme', 'folder', 'str')
        param_storage = self.get_test_value('get_theme', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_theme', 'folder', param_folder, 'str')
        self.initialize('get_theme', 'folder', param_folder)
        ok = False
        try:
            self.api.get_theme(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_theme', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_theme', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_theme', 'folder')

    def test_get_theme_invalid_storage(self):
        """Test case for get_theme with invalid storage
        """
        param_name = self.get_test_value('get_theme', 'name', 'str')
        param_slide_index = self.get_test_value('get_theme', 'slide_index', 'int')
        param_password = self.get_test_value('get_theme', 'password', 'str')
        param_folder = self.get_test_value('get_theme', 'folder', 'str')
        param_storage = self.get_test_value('get_theme', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_theme', 'storage', param_storage, 'str')
        self.initialize('get_theme', 'storage', param_storage)
        ok = False
        try:
            self.api.get_theme(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_theme', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_theme', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_theme', 'storage')

    def test_get_view_properties(self):
        """Test case for get_view_properties
        """
        param_name = self.get_test_value('get_view_properties', 'name', 'str')
        param_password = self.get_test_value('get_view_properties', 'password', 'str')
        param_folder = self.get_test_value('get_view_properties', 'folder', 'str')
        param_storage = self.get_test_value('get_view_properties', 'storage', 'str')
        self.initialize('get_view_properties', None, None)
        response = self.api.get_view_properties(param_name, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_get_view_properties_invalid_name(self):
        """Test case for get_view_properties with invalid name
        """
        param_name = self.get_test_value('get_view_properties', 'name', 'str')
        param_password = self.get_test_value('get_view_properties', 'password', 'str')
        param_folder = self.get_test_value('get_view_properties', 'folder', 'str')
        param_storage = self.get_test_value('get_view_properties', 'storage', 'str')
        param_name = self.get_invalid_test_value('get_view_properties', 'name', param_name, 'str')
        self.initialize('get_view_properties', 'name', param_name)
        ok = False
        try:
            self.api.get_view_properties(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_view_properties', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_view_properties', 'name', param_name)
        if ok:
            self.assert_no_exception('get_view_properties', 'name')

    def test_get_view_properties_invalid_password(self):
        """Test case for get_view_properties with invalid password
        """
        param_name = self.get_test_value('get_view_properties', 'name', 'str')
        param_password = self.get_test_value('get_view_properties', 'password', 'str')
        param_folder = self.get_test_value('get_view_properties', 'folder', 'str')
        param_storage = self.get_test_value('get_view_properties', 'storage', 'str')
        param_password = self.get_invalid_test_value('get_view_properties', 'password', param_password, 'str')
        self.initialize('get_view_properties', 'password', param_password)
        ok = False
        try:
            self.api.get_view_properties(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_view_properties', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_view_properties', 'password', param_password)
        if ok:
            self.assert_no_exception('get_view_properties', 'password')

    def test_get_view_properties_invalid_folder(self):
        """Test case for get_view_properties with invalid folder
        """
        param_name = self.get_test_value('get_view_properties', 'name', 'str')
        param_password = self.get_test_value('get_view_properties', 'password', 'str')
        param_folder = self.get_test_value('get_view_properties', 'folder', 'str')
        param_storage = self.get_test_value('get_view_properties', 'storage', 'str')
        param_folder = self.get_invalid_test_value('get_view_properties', 'folder', param_folder, 'str')
        self.initialize('get_view_properties', 'folder', param_folder)
        ok = False
        try:
            self.api.get_view_properties(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_view_properties', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_view_properties', 'folder', param_folder)
        if ok:
            self.assert_no_exception('get_view_properties', 'folder')

    def test_get_view_properties_invalid_storage(self):
        """Test case for get_view_properties with invalid storage
        """
        param_name = self.get_test_value('get_view_properties', 'name', 'str')
        param_password = self.get_test_value('get_view_properties', 'password', 'str')
        param_folder = self.get_test_value('get_view_properties', 'folder', 'str')
        param_storage = self.get_test_value('get_view_properties', 'storage', 'str')
        param_storage = self.get_invalid_test_value('get_view_properties', 'storage', param_storage, 'str')
        self.initialize('get_view_properties', 'storage', param_storage)
        ok = False
        try:
            self.api.get_view_properties(param_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'get_view_properties', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'get_view_properties', 'storage', param_storage)
        if ok:
            self.assert_no_exception('get_view_properties', 'storage')

    def test_import_from_html(self):
        """Test case for import_from_html
        """
        param_name = self.get_test_value('import_from_html', 'name', 'str')
        param_html = self.get_test_value('import_from_html', 'html', 'str')
        param_password = self.get_test_value('import_from_html', 'password', 'str')
        param_folder = self.get_test_value('import_from_html', 'folder', 'str')
        param_storage = self.get_test_value('import_from_html', 'storage', 'str')
        self.initialize('import_from_html', None, None)
        response = self.api.import_from_html(param_name, param_html, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_import_from_html_invalid_name(self):
        """Test case for import_from_html with invalid name
        """
        param_name = self.get_test_value('import_from_html', 'name', 'str')
        param_html = self.get_test_value('import_from_html', 'html', 'str')
        param_password = self.get_test_value('import_from_html', 'password', 'str')
        param_folder = self.get_test_value('import_from_html', 'folder', 'str')
        param_storage = self.get_test_value('import_from_html', 'storage', 'str')
        param_name = self.get_invalid_test_value('import_from_html', 'name', param_name, 'str')
        self.initialize('import_from_html', 'name', param_name)
        ok = False
        try:
            self.api.import_from_html(param_name, param_html, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'import_from_html', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'import_from_html', 'name', param_name)
        if ok:
            self.assert_no_exception('import_from_html', 'name')

    def test_import_from_html_invalid_html(self):
        """Test case for import_from_html with invalid html
        """
        param_name = self.get_test_value('import_from_html', 'name', 'str')
        param_html = self.get_test_value('import_from_html', 'html', 'str')
        param_password = self.get_test_value('import_from_html', 'password', 'str')
        param_folder = self.get_test_value('import_from_html', 'folder', 'str')
        param_storage = self.get_test_value('import_from_html', 'storage', 'str')
        param_html = self.get_invalid_test_value('import_from_html', 'html', param_html, 'str')
        self.initialize('import_from_html', 'html', param_html)
        ok = False
        try:
            self.api.import_from_html(param_name, param_html, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'import_from_html', 'html', param_html)
        except ValueError as ex:
            self.assert_value_error(ex, 'import_from_html', 'html', param_html)
        if ok:
            self.assert_no_exception('import_from_html', 'html')

    def test_import_from_html_invalid_password(self):
        """Test case for import_from_html with invalid password
        """
        param_name = self.get_test_value('import_from_html', 'name', 'str')
        param_html = self.get_test_value('import_from_html', 'html', 'str')
        param_password = self.get_test_value('import_from_html', 'password', 'str')
        param_folder = self.get_test_value('import_from_html', 'folder', 'str')
        param_storage = self.get_test_value('import_from_html', 'storage', 'str')
        param_password = self.get_invalid_test_value('import_from_html', 'password', param_password, 'str')
        self.initialize('import_from_html', 'password', param_password)
        ok = False
        try:
            self.api.import_from_html(param_name, param_html, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'import_from_html', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'import_from_html', 'password', param_password)
        if ok:
            self.assert_no_exception('import_from_html', 'password')

    def test_import_from_html_invalid_folder(self):
        """Test case for import_from_html with invalid folder
        """
        param_name = self.get_test_value('import_from_html', 'name', 'str')
        param_html = self.get_test_value('import_from_html', 'html', 'str')
        param_password = self.get_test_value('import_from_html', 'password', 'str')
        param_folder = self.get_test_value('import_from_html', 'folder', 'str')
        param_storage = self.get_test_value('import_from_html', 'storage', 'str')
        param_folder = self.get_invalid_test_value('import_from_html', 'folder', param_folder, 'str')
        self.initialize('import_from_html', 'folder', param_folder)
        ok = False
        try:
            self.api.import_from_html(param_name, param_html, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'import_from_html', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'import_from_html', 'folder', param_folder)
        if ok:
            self.assert_no_exception('import_from_html', 'folder')

    def test_import_from_html_invalid_storage(self):
        """Test case for import_from_html with invalid storage
        """
        param_name = self.get_test_value('import_from_html', 'name', 'str')
        param_html = self.get_test_value('import_from_html', 'html', 'str')
        param_password = self.get_test_value('import_from_html', 'password', 'str')
        param_folder = self.get_test_value('import_from_html', 'folder', 'str')
        param_storage = self.get_test_value('import_from_html', 'storage', 'str')
        param_storage = self.get_invalid_test_value('import_from_html', 'storage', param_storage, 'str')
        self.initialize('import_from_html', 'storage', param_storage)
        ok = False
        try:
            self.api.import_from_html(param_name, param_html, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'import_from_html', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'import_from_html', 'storage', param_storage)
        if ok:
            self.assert_no_exception('import_from_html', 'storage')

    def test_import_from_pdf(self):
        """Test case for import_from_pdf
        """
        param_name = self.get_test_value('import_from_pdf', 'name', 'str')
        param_pdf = self.get_test_value('import_from_pdf', 'pdf', 'file')
        param_password = self.get_test_value('import_from_pdf', 'password', 'str')
        param_folder = self.get_test_value('import_from_pdf', 'folder', 'str')
        param_storage = self.get_test_value('import_from_pdf', 'storage', 'str')
        self.initialize('import_from_pdf', None, None)
        response = self.api.import_from_pdf(param_name, param_pdf, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_import_from_pdf_invalid_name(self):
        """Test case for import_from_pdf with invalid name
        """
        param_name = self.get_test_value('import_from_pdf', 'name', 'str')
        param_pdf = self.get_test_value('import_from_pdf', 'pdf', 'file')
        param_password = self.get_test_value('import_from_pdf', 'password', 'str')
        param_folder = self.get_test_value('import_from_pdf', 'folder', 'str')
        param_storage = self.get_test_value('import_from_pdf', 'storage', 'str')
        param_name = self.get_invalid_test_value('import_from_pdf', 'name', param_name, 'str')
        self.initialize('import_from_pdf', 'name', param_name)
        ok = False
        try:
            self.api.import_from_pdf(param_name, param_pdf, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'import_from_pdf', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'import_from_pdf', 'name', param_name)
        if ok:
            self.assert_no_exception('import_from_pdf', 'name')

    def test_import_from_pdf_invalid_pdf(self):
        """Test case for import_from_pdf with invalid pdf
        """
        param_name = self.get_test_value('import_from_pdf', 'name', 'str')
        param_pdf = self.get_test_value('import_from_pdf', 'pdf', 'file')
        param_password = self.get_test_value('import_from_pdf', 'password', 'str')
        param_folder = self.get_test_value('import_from_pdf', 'folder', 'str')
        param_storage = self.get_test_value('import_from_pdf', 'storage', 'str')
        param_pdf = self.get_invalid_test_value('import_from_pdf', 'pdf', param_pdf, 'file')
        self.initialize('import_from_pdf', 'pdf', param_pdf)
        ok = False
        try:
            self.api.import_from_pdf(param_name, param_pdf, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'import_from_pdf', 'pdf', param_pdf)
        except ValueError as ex:
            self.assert_value_error(ex, 'import_from_pdf', 'pdf', param_pdf)
        if ok:
            self.assert_no_exception('import_from_pdf', 'pdf')

    def test_import_from_pdf_invalid_password(self):
        """Test case for import_from_pdf with invalid password
        """
        param_name = self.get_test_value('import_from_pdf', 'name', 'str')
        param_pdf = self.get_test_value('import_from_pdf', 'pdf', 'file')
        param_password = self.get_test_value('import_from_pdf', 'password', 'str')
        param_folder = self.get_test_value('import_from_pdf', 'folder', 'str')
        param_storage = self.get_test_value('import_from_pdf', 'storage', 'str')
        param_password = self.get_invalid_test_value('import_from_pdf', 'password', param_password, 'str')
        self.initialize('import_from_pdf', 'password', param_password)
        ok = False
        try:
            self.api.import_from_pdf(param_name, param_pdf, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'import_from_pdf', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'import_from_pdf', 'password', param_password)
        if ok:
            self.assert_no_exception('import_from_pdf', 'password')

    def test_import_from_pdf_invalid_folder(self):
        """Test case for import_from_pdf with invalid folder
        """
        param_name = self.get_test_value('import_from_pdf', 'name', 'str')
        param_pdf = self.get_test_value('import_from_pdf', 'pdf', 'file')
        param_password = self.get_test_value('import_from_pdf', 'password', 'str')
        param_folder = self.get_test_value('import_from_pdf', 'folder', 'str')
        param_storage = self.get_test_value('import_from_pdf', 'storage', 'str')
        param_folder = self.get_invalid_test_value('import_from_pdf', 'folder', param_folder, 'str')
        self.initialize('import_from_pdf', 'folder', param_folder)
        ok = False
        try:
            self.api.import_from_pdf(param_name, param_pdf, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'import_from_pdf', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'import_from_pdf', 'folder', param_folder)
        if ok:
            self.assert_no_exception('import_from_pdf', 'folder')

    def test_import_from_pdf_invalid_storage(self):
        """Test case for import_from_pdf with invalid storage
        """
        param_name = self.get_test_value('import_from_pdf', 'name', 'str')
        param_pdf = self.get_test_value('import_from_pdf', 'pdf', 'file')
        param_password = self.get_test_value('import_from_pdf', 'password', 'str')
        param_folder = self.get_test_value('import_from_pdf', 'folder', 'str')
        param_storage = self.get_test_value('import_from_pdf', 'storage', 'str')
        param_storage = self.get_invalid_test_value('import_from_pdf', 'storage', param_storage, 'str')
        self.initialize('import_from_pdf', 'storage', param_storage)
        ok = False
        try:
            self.api.import_from_pdf(param_name, param_pdf, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'import_from_pdf', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'import_from_pdf', 'storage', param_storage)
        if ok:
            self.assert_no_exception('import_from_pdf', 'storage')

    def test_merge(self):
        """Test case for merge
        """
        param_name = self.get_test_value('merge', 'name', 'str')
        param_request = self.get_test_value('merge', 'request', 'PresentationsMergeRequest')
        param_password = self.get_test_value('merge', 'password', 'str')
        param_folder = self.get_test_value('merge', 'folder', 'str')
        param_storage = self.get_test_value('merge', 'storage', 'str')
        self.initialize('merge', None, None)
        response = self.api.merge(param_name, param_request, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_merge_invalid_name(self):
        """Test case for merge with invalid name
        """
        param_name = self.get_test_value('merge', 'name', 'str')
        param_request = self.get_test_value('merge', 'request', 'PresentationsMergeRequest')
        param_password = self.get_test_value('merge', 'password', 'str')
        param_folder = self.get_test_value('merge', 'folder', 'str')
        param_storage = self.get_test_value('merge', 'storage', 'str')
        param_name = self.get_invalid_test_value('merge', 'name', param_name, 'str')
        self.initialize('merge', 'name', param_name)
        ok = False
        try:
            self.api.merge(param_name, param_request, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'merge', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'merge', 'name', param_name)
        if ok:
            self.assert_no_exception('merge', 'name')

    def test_merge_invalid_request(self):
        """Test case for merge with invalid request
        """
        param_name = self.get_test_value('merge', 'name', 'str')
        param_request = self.get_test_value('merge', 'request', 'PresentationsMergeRequest')
        param_password = self.get_test_value('merge', 'password', 'str')
        param_folder = self.get_test_value('merge', 'folder', 'str')
        param_storage = self.get_test_value('merge', 'storage', 'str')
        param_request = self.get_invalid_test_value('merge', 'request', param_request, 'PresentationsMergeRequest')
        self.initialize('merge', 'request', param_request)
        ok = False
        try:
            self.api.merge(param_name, param_request, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'merge', 'request', param_request)
        except ValueError as ex:
            self.assert_value_error(ex, 'merge', 'request', param_request)
        if ok:
            self.assert_no_exception('merge', 'request')

    def test_merge_invalid_password(self):
        """Test case for merge with invalid password
        """
        param_name = self.get_test_value('merge', 'name', 'str')
        param_request = self.get_test_value('merge', 'request', 'PresentationsMergeRequest')
        param_password = self.get_test_value('merge', 'password', 'str')
        param_folder = self.get_test_value('merge', 'folder', 'str')
        param_storage = self.get_test_value('merge', 'storage', 'str')
        param_password = self.get_invalid_test_value('merge', 'password', param_password, 'str')
        self.initialize('merge', 'password', param_password)
        ok = False
        try:
            self.api.merge(param_name, param_request, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'merge', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'merge', 'password', param_password)
        if ok:
            self.assert_no_exception('merge', 'password')

    def test_merge_invalid_folder(self):
        """Test case for merge with invalid folder
        """
        param_name = self.get_test_value('merge', 'name', 'str')
        param_request = self.get_test_value('merge', 'request', 'PresentationsMergeRequest')
        param_password = self.get_test_value('merge', 'password', 'str')
        param_folder = self.get_test_value('merge', 'folder', 'str')
        param_storage = self.get_test_value('merge', 'storage', 'str')
        param_folder = self.get_invalid_test_value('merge', 'folder', param_folder, 'str')
        self.initialize('merge', 'folder', param_folder)
        ok = False
        try:
            self.api.merge(param_name, param_request, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'merge', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'merge', 'folder', param_folder)
        if ok:
            self.assert_no_exception('merge', 'folder')

    def test_merge_invalid_storage(self):
        """Test case for merge with invalid storage
        """
        param_name = self.get_test_value('merge', 'name', 'str')
        param_request = self.get_test_value('merge', 'request', 'PresentationsMergeRequest')
        param_password = self.get_test_value('merge', 'password', 'str')
        param_folder = self.get_test_value('merge', 'folder', 'str')
        param_storage = self.get_test_value('merge', 'storage', 'str')
        param_storage = self.get_invalid_test_value('merge', 'storage', param_storage, 'str')
        self.initialize('merge', 'storage', param_storage)
        ok = False
        try:
            self.api.merge(param_name, param_request, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'merge', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'merge', 'storage', param_storage)
        if ok:
            self.assert_no_exception('merge', 'storage')

    def test_merge_and_save_online(self):
        """Test case for merge_and_save_online
        """
        param_out_path = self.get_test_value('merge_and_save_online', 'out_path', 'str')
        param_files = self.get_test_value('merge_and_save_online', 'files', 'dict')
        param_request = self.get_test_value('merge_and_save_online', 'request', 'OrderedMergeRequest')
        param_storage = self.get_test_value('merge_and_save_online', 'storage', 'str')
        self.initialize('merge_and_save_online', None, None)
        response = self.api.merge_and_save_online(param_out_path, param_files, param_request, param_storage)
        self.assertIsNone(response)

    def test_merge_and_save_online_invalid_out_path(self):
        """Test case for merge_and_save_online with invalid out_path
        """
        param_out_path = self.get_test_value('merge_and_save_online', 'out_path', 'str')
        param_files = self.get_test_value('merge_and_save_online', 'files', 'dict')
        param_request = self.get_test_value('merge_and_save_online', 'request', 'OrderedMergeRequest')
        param_storage = self.get_test_value('merge_and_save_online', 'storage', 'str')
        param_out_path = self.get_invalid_test_value('merge_and_save_online', 'out_path', param_out_path, 'str')
        self.initialize('merge_and_save_online', 'out_path', param_out_path)
        ok = False
        try:
            self.api.merge_and_save_online(param_out_path, param_files, param_request, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'merge_and_save_online', 'out_path', param_out_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'merge_and_save_online', 'out_path', param_out_path)
        if ok:
            self.assert_no_exception('merge_and_save_online', 'out_path')

    def test_merge_and_save_online_invalid_files(self):
        """Test case for merge_and_save_online with invalid files
        """
        param_out_path = self.get_test_value('merge_and_save_online', 'out_path', 'str')
        param_files = self.get_test_value('merge_and_save_online', 'files', 'dict')
        param_request = self.get_test_value('merge_and_save_online', 'request', 'OrderedMergeRequest')
        param_storage = self.get_test_value('merge_and_save_online', 'storage', 'str')
        param_files = self.get_invalid_test_value('merge_and_save_online', 'files', param_files, 'dict')
        self.initialize('merge_and_save_online', 'files', param_files)
        ok = False
        try:
            self.api.merge_and_save_online(param_out_path, param_files, param_request, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'merge_and_save_online', 'files', param_files)
        except ValueError as ex:
            self.assert_value_error(ex, 'merge_and_save_online', 'files', param_files)
        if ok:
            self.assert_no_exception('merge_and_save_online', 'files')

    def test_merge_and_save_online_invalid_request(self):
        """Test case for merge_and_save_online with invalid request
        """
        param_out_path = self.get_test_value('merge_and_save_online', 'out_path', 'str')
        param_files = self.get_test_value('merge_and_save_online', 'files', 'dict')
        param_request = self.get_test_value('merge_and_save_online', 'request', 'OrderedMergeRequest')
        param_storage = self.get_test_value('merge_and_save_online', 'storage', 'str')
        param_request = self.get_invalid_test_value('merge_and_save_online', 'request', param_request, 'OrderedMergeRequest')
        self.initialize('merge_and_save_online', 'request', param_request)
        ok = False
        try:
            self.api.merge_and_save_online(param_out_path, param_files, param_request, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'merge_and_save_online', 'request', param_request)
        except ValueError as ex:
            self.assert_value_error(ex, 'merge_and_save_online', 'request', param_request)
        if ok:
            self.assert_no_exception('merge_and_save_online', 'request')

    def test_merge_and_save_online_invalid_storage(self):
        """Test case for merge_and_save_online with invalid storage
        """
        param_out_path = self.get_test_value('merge_and_save_online', 'out_path', 'str')
        param_files = self.get_test_value('merge_and_save_online', 'files', 'dict')
        param_request = self.get_test_value('merge_and_save_online', 'request', 'OrderedMergeRequest')
        param_storage = self.get_test_value('merge_and_save_online', 'storage', 'str')
        param_storage = self.get_invalid_test_value('merge_and_save_online', 'storage', param_storage, 'str')
        self.initialize('merge_and_save_online', 'storage', param_storage)
        ok = False
        try:
            self.api.merge_and_save_online(param_out_path, param_files, param_request, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'merge_and_save_online', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'merge_and_save_online', 'storage', param_storage)
        if ok:
            self.assert_no_exception('merge_and_save_online', 'storage')

    def test_merge_online(self):
        """Test case for merge_online
        """
        param_files = self.get_test_value('merge_online', 'files', 'dict')
        param_request = self.get_test_value('merge_online', 'request', 'OrderedMergeRequest')
        param_storage = self.get_test_value('merge_online', 'storage', 'str')
        self.initialize('merge_online', None, None)
        response = self.api.merge_online(param_files, param_request, param_storage)
        self.assertTrue(isinstance(response, str))
        self.assertTrue(len(response) > 0)

    def test_merge_online_invalid_files(self):
        """Test case for merge_online with invalid files
        """
        param_files = self.get_test_value('merge_online', 'files', 'dict')
        param_request = self.get_test_value('merge_online', 'request', 'OrderedMergeRequest')
        param_storage = self.get_test_value('merge_online', 'storage', 'str')
        param_files = self.get_invalid_test_value('merge_online', 'files', param_files, 'dict')
        self.initialize('merge_online', 'files', param_files)
        ok = False
        try:
            self.api.merge_online(param_files, param_request, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'merge_online', 'files', param_files)
        except ValueError as ex:
            self.assert_value_error(ex, 'merge_online', 'files', param_files)
        if ok:
            self.assert_no_exception('merge_online', 'files')

    def test_merge_online_invalid_request(self):
        """Test case for merge_online with invalid request
        """
        param_files = self.get_test_value('merge_online', 'files', 'dict')
        param_request = self.get_test_value('merge_online', 'request', 'OrderedMergeRequest')
        param_storage = self.get_test_value('merge_online', 'storage', 'str')
        param_request = self.get_invalid_test_value('merge_online', 'request', param_request, 'OrderedMergeRequest')
        self.initialize('merge_online', 'request', param_request)
        ok = False
        try:
            self.api.merge_online(param_files, param_request, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'merge_online', 'request', param_request)
        except ValueError as ex:
            self.assert_value_error(ex, 'merge_online', 'request', param_request)
        if ok:
            self.assert_no_exception('merge_online', 'request')

    def test_merge_online_invalid_storage(self):
        """Test case for merge_online with invalid storage
        """
        param_files = self.get_test_value('merge_online', 'files', 'dict')
        param_request = self.get_test_value('merge_online', 'request', 'OrderedMergeRequest')
        param_storage = self.get_test_value('merge_online', 'storage', 'str')
        param_storage = self.get_invalid_test_value('merge_online', 'storage', param_storage, 'str')
        self.initialize('merge_online', 'storage', param_storage)
        ok = False
        try:
            self.api.merge_online(param_files, param_request, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'merge_online', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'merge_online', 'storage', param_storage)
        if ok:
            self.assert_no_exception('merge_online', 'storage')

    def test_move_file(self):
        """Test case for move_file
        """
        param_src_path = self.get_test_value('move_file', 'src_path', 'str')
        param_dest_path = self.get_test_value('move_file', 'dest_path', 'str')
        param_src_storage_name = self.get_test_value('move_file', 'src_storage_name', 'str')
        param_dest_storage_name = self.get_test_value('move_file', 'dest_storage_name', 'str')
        param_version_id = self.get_test_value('move_file', 'version_id', 'str')
        self.initialize('move_file', None, None)
        response = self.api.move_file(param_src_path, param_dest_path, param_src_storage_name, param_dest_storage_name, param_version_id)
        self.assertIsNone(response)

    def test_move_file_invalid_src_path(self):
        """Test case for move_file with invalid src_path
        """
        param_src_path = self.get_test_value('move_file', 'src_path', 'str')
        param_dest_path = self.get_test_value('move_file', 'dest_path', 'str')
        param_src_storage_name = self.get_test_value('move_file', 'src_storage_name', 'str')
        param_dest_storage_name = self.get_test_value('move_file', 'dest_storage_name', 'str')
        param_version_id = self.get_test_value('move_file', 'version_id', 'str')
        param_src_path = self.get_invalid_test_value('move_file', 'src_path', param_src_path, 'str')
        self.initialize('move_file', 'src_path', param_src_path)
        ok = False
        try:
            self.api.move_file(param_src_path, param_dest_path, param_src_storage_name, param_dest_storage_name, param_version_id)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'move_file', 'src_path', param_src_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'move_file', 'src_path', param_src_path)
        if ok:
            self.assert_no_exception('move_file', 'src_path')

    def test_move_file_invalid_dest_path(self):
        """Test case for move_file with invalid dest_path
        """
        param_src_path = self.get_test_value('move_file', 'src_path', 'str')
        param_dest_path = self.get_test_value('move_file', 'dest_path', 'str')
        param_src_storage_name = self.get_test_value('move_file', 'src_storage_name', 'str')
        param_dest_storage_name = self.get_test_value('move_file', 'dest_storage_name', 'str')
        param_version_id = self.get_test_value('move_file', 'version_id', 'str')
        param_dest_path = self.get_invalid_test_value('move_file', 'dest_path', param_dest_path, 'str')
        self.initialize('move_file', 'dest_path', param_dest_path)
        ok = False
        try:
            self.api.move_file(param_src_path, param_dest_path, param_src_storage_name, param_dest_storage_name, param_version_id)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'move_file', 'dest_path', param_dest_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'move_file', 'dest_path', param_dest_path)
        if ok:
            self.assert_no_exception('move_file', 'dest_path')

    def test_move_file_invalid_src_storage_name(self):
        """Test case for move_file with invalid src_storage_name
        """
        param_src_path = self.get_test_value('move_file', 'src_path', 'str')
        param_dest_path = self.get_test_value('move_file', 'dest_path', 'str')
        param_src_storage_name = self.get_test_value('move_file', 'src_storage_name', 'str')
        param_dest_storage_name = self.get_test_value('move_file', 'dest_storage_name', 'str')
        param_version_id = self.get_test_value('move_file', 'version_id', 'str')
        param_src_storage_name = self.get_invalid_test_value('move_file', 'src_storage_name', param_src_storage_name, 'str')
        self.initialize('move_file', 'src_storage_name', param_src_storage_name)
        ok = False
        try:
            self.api.move_file(param_src_path, param_dest_path, param_src_storage_name, param_dest_storage_name, param_version_id)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'move_file', 'src_storage_name', param_src_storage_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'move_file', 'src_storage_name', param_src_storage_name)
        if ok:
            self.assert_no_exception('move_file', 'src_storage_name')

    def test_move_file_invalid_dest_storage_name(self):
        """Test case for move_file with invalid dest_storage_name
        """
        param_src_path = self.get_test_value('move_file', 'src_path', 'str')
        param_dest_path = self.get_test_value('move_file', 'dest_path', 'str')
        param_src_storage_name = self.get_test_value('move_file', 'src_storage_name', 'str')
        param_dest_storage_name = self.get_test_value('move_file', 'dest_storage_name', 'str')
        param_version_id = self.get_test_value('move_file', 'version_id', 'str')
        param_dest_storage_name = self.get_invalid_test_value('move_file', 'dest_storage_name', param_dest_storage_name, 'str')
        self.initialize('move_file', 'dest_storage_name', param_dest_storage_name)
        ok = False
        try:
            self.api.move_file(param_src_path, param_dest_path, param_src_storage_name, param_dest_storage_name, param_version_id)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'move_file', 'dest_storage_name', param_dest_storage_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'move_file', 'dest_storage_name', param_dest_storage_name)
        if ok:
            self.assert_no_exception('move_file', 'dest_storage_name')

    def test_move_file_invalid_version_id(self):
        """Test case for move_file with invalid version_id
        """
        param_src_path = self.get_test_value('move_file', 'src_path', 'str')
        param_dest_path = self.get_test_value('move_file', 'dest_path', 'str')
        param_src_storage_name = self.get_test_value('move_file', 'src_storage_name', 'str')
        param_dest_storage_name = self.get_test_value('move_file', 'dest_storage_name', 'str')
        param_version_id = self.get_test_value('move_file', 'version_id', 'str')
        param_version_id = self.get_invalid_test_value('move_file', 'version_id', param_version_id, 'str')
        self.initialize('move_file', 'version_id', param_version_id)
        ok = False
        try:
            self.api.move_file(param_src_path, param_dest_path, param_src_storage_name, param_dest_storage_name, param_version_id)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'move_file', 'version_id', param_version_id)
        except ValueError as ex:
            self.assert_value_error(ex, 'move_file', 'version_id', param_version_id)
        if ok:
            self.assert_no_exception('move_file', 'version_id')

    def test_move_folder(self):
        """Test case for move_folder
        """
        param_src_path = self.get_test_value('move_folder', 'src_path', 'str')
        param_dest_path = self.get_test_value('move_folder', 'dest_path', 'str')
        param_src_storage_name = self.get_test_value('move_folder', 'src_storage_name', 'str')
        param_dest_storage_name = self.get_test_value('move_folder', 'dest_storage_name', 'str')
        self.initialize('move_folder', None, None)
        response = self.api.move_folder(param_src_path, param_dest_path, param_src_storage_name, param_dest_storage_name)
        self.assertIsNone(response)

    def test_move_folder_invalid_src_path(self):
        """Test case for move_folder with invalid src_path
        """
        param_src_path = self.get_test_value('move_folder', 'src_path', 'str')
        param_dest_path = self.get_test_value('move_folder', 'dest_path', 'str')
        param_src_storage_name = self.get_test_value('move_folder', 'src_storage_name', 'str')
        param_dest_storage_name = self.get_test_value('move_folder', 'dest_storage_name', 'str')
        param_src_path = self.get_invalid_test_value('move_folder', 'src_path', param_src_path, 'str')
        self.initialize('move_folder', 'src_path', param_src_path)
        ok = False
        try:
            self.api.move_folder(param_src_path, param_dest_path, param_src_storage_name, param_dest_storage_name)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'move_folder', 'src_path', param_src_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'move_folder', 'src_path', param_src_path)
        if ok:
            self.assert_no_exception('move_folder', 'src_path')

    def test_move_folder_invalid_dest_path(self):
        """Test case for move_folder with invalid dest_path
        """
        param_src_path = self.get_test_value('move_folder', 'src_path', 'str')
        param_dest_path = self.get_test_value('move_folder', 'dest_path', 'str')
        param_src_storage_name = self.get_test_value('move_folder', 'src_storage_name', 'str')
        param_dest_storage_name = self.get_test_value('move_folder', 'dest_storage_name', 'str')
        param_dest_path = self.get_invalid_test_value('move_folder', 'dest_path', param_dest_path, 'str')
        self.initialize('move_folder', 'dest_path', param_dest_path)
        ok = False
        try:
            self.api.move_folder(param_src_path, param_dest_path, param_src_storage_name, param_dest_storage_name)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'move_folder', 'dest_path', param_dest_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'move_folder', 'dest_path', param_dest_path)
        if ok:
            self.assert_no_exception('move_folder', 'dest_path')

    def test_move_folder_invalid_src_storage_name(self):
        """Test case for move_folder with invalid src_storage_name
        """
        param_src_path = self.get_test_value('move_folder', 'src_path', 'str')
        param_dest_path = self.get_test_value('move_folder', 'dest_path', 'str')
        param_src_storage_name = self.get_test_value('move_folder', 'src_storage_name', 'str')
        param_dest_storage_name = self.get_test_value('move_folder', 'dest_storage_name', 'str')
        param_src_storage_name = self.get_invalid_test_value('move_folder', 'src_storage_name', param_src_storage_name, 'str')
        self.initialize('move_folder', 'src_storage_name', param_src_storage_name)
        ok = False
        try:
            self.api.move_folder(param_src_path, param_dest_path, param_src_storage_name, param_dest_storage_name)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'move_folder', 'src_storage_name', param_src_storage_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'move_folder', 'src_storage_name', param_src_storage_name)
        if ok:
            self.assert_no_exception('move_folder', 'src_storage_name')

    def test_move_folder_invalid_dest_storage_name(self):
        """Test case for move_folder with invalid dest_storage_name
        """
        param_src_path = self.get_test_value('move_folder', 'src_path', 'str')
        param_dest_path = self.get_test_value('move_folder', 'dest_path', 'str')
        param_src_storage_name = self.get_test_value('move_folder', 'src_storage_name', 'str')
        param_dest_storage_name = self.get_test_value('move_folder', 'dest_storage_name', 'str')
        param_dest_storage_name = self.get_invalid_test_value('move_folder', 'dest_storage_name', param_dest_storage_name, 'str')
        self.initialize('move_folder', 'dest_storage_name', param_dest_storage_name)
        ok = False
        try:
            self.api.move_folder(param_src_path, param_dest_path, param_src_storage_name, param_dest_storage_name)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'move_folder', 'dest_storage_name', param_dest_storage_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'move_folder', 'dest_storage_name', param_dest_storage_name)
        if ok:
            self.assert_no_exception('move_folder', 'dest_storage_name')

    def test_move_section(self):
        """Test case for move_section
        """
        param_name = self.get_test_value('move_section', 'name', 'str')
        param_section_index = self.get_test_value('move_section', 'section_index', 'int')
        param_new_position = self.get_test_value('move_section', 'new_position', 'int')
        param_password = self.get_test_value('move_section', 'password', 'str')
        param_folder = self.get_test_value('move_section', 'folder', 'str')
        param_storage = self.get_test_value('move_section', 'storage', 'str')
        self.initialize('move_section', None, None)
        response = self.api.move_section(param_name, param_section_index, param_new_position, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_move_section_invalid_name(self):
        """Test case for move_section with invalid name
        """
        param_name = self.get_test_value('move_section', 'name', 'str')
        param_section_index = self.get_test_value('move_section', 'section_index', 'int')
        param_new_position = self.get_test_value('move_section', 'new_position', 'int')
        param_password = self.get_test_value('move_section', 'password', 'str')
        param_folder = self.get_test_value('move_section', 'folder', 'str')
        param_storage = self.get_test_value('move_section', 'storage', 'str')
        param_name = self.get_invalid_test_value('move_section', 'name', param_name, 'str')
        self.initialize('move_section', 'name', param_name)
        ok = False
        try:
            self.api.move_section(param_name, param_section_index, param_new_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'move_section', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'move_section', 'name', param_name)
        if ok:
            self.assert_no_exception('move_section', 'name')

    def test_move_section_invalid_section_index(self):
        """Test case for move_section with invalid section_index
        """
        param_name = self.get_test_value('move_section', 'name', 'str')
        param_section_index = self.get_test_value('move_section', 'section_index', 'int')
        param_new_position = self.get_test_value('move_section', 'new_position', 'int')
        param_password = self.get_test_value('move_section', 'password', 'str')
        param_folder = self.get_test_value('move_section', 'folder', 'str')
        param_storage = self.get_test_value('move_section', 'storage', 'str')
        param_section_index = self.get_invalid_test_value('move_section', 'section_index', param_section_index, 'int')
        self.initialize('move_section', 'section_index', param_section_index)
        ok = False
        try:
            self.api.move_section(param_name, param_section_index, param_new_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'move_section', 'section_index', param_section_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'move_section', 'section_index', param_section_index)
        if ok:
            self.assert_no_exception('move_section', 'section_index')

    def test_move_section_invalid_new_position(self):
        """Test case for move_section with invalid new_position
        """
        param_name = self.get_test_value('move_section', 'name', 'str')
        param_section_index = self.get_test_value('move_section', 'section_index', 'int')
        param_new_position = self.get_test_value('move_section', 'new_position', 'int')
        param_password = self.get_test_value('move_section', 'password', 'str')
        param_folder = self.get_test_value('move_section', 'folder', 'str')
        param_storage = self.get_test_value('move_section', 'storage', 'str')
        param_new_position = self.get_invalid_test_value('move_section', 'new_position', param_new_position, 'int')
        self.initialize('move_section', 'new_position', param_new_position)
        ok = False
        try:
            self.api.move_section(param_name, param_section_index, param_new_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'move_section', 'new_position', param_new_position)
        except ValueError as ex:
            self.assert_value_error(ex, 'move_section', 'new_position', param_new_position)
        if ok:
            self.assert_no_exception('move_section', 'new_position')

    def test_move_section_invalid_password(self):
        """Test case for move_section with invalid password
        """
        param_name = self.get_test_value('move_section', 'name', 'str')
        param_section_index = self.get_test_value('move_section', 'section_index', 'int')
        param_new_position = self.get_test_value('move_section', 'new_position', 'int')
        param_password = self.get_test_value('move_section', 'password', 'str')
        param_folder = self.get_test_value('move_section', 'folder', 'str')
        param_storage = self.get_test_value('move_section', 'storage', 'str')
        param_password = self.get_invalid_test_value('move_section', 'password', param_password, 'str')
        self.initialize('move_section', 'password', param_password)
        ok = False
        try:
            self.api.move_section(param_name, param_section_index, param_new_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'move_section', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'move_section', 'password', param_password)
        if ok:
            self.assert_no_exception('move_section', 'password')

    def test_move_section_invalid_folder(self):
        """Test case for move_section with invalid folder
        """
        param_name = self.get_test_value('move_section', 'name', 'str')
        param_section_index = self.get_test_value('move_section', 'section_index', 'int')
        param_new_position = self.get_test_value('move_section', 'new_position', 'int')
        param_password = self.get_test_value('move_section', 'password', 'str')
        param_folder = self.get_test_value('move_section', 'folder', 'str')
        param_storage = self.get_test_value('move_section', 'storage', 'str')
        param_folder = self.get_invalid_test_value('move_section', 'folder', param_folder, 'str')
        self.initialize('move_section', 'folder', param_folder)
        ok = False
        try:
            self.api.move_section(param_name, param_section_index, param_new_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'move_section', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'move_section', 'folder', param_folder)
        if ok:
            self.assert_no_exception('move_section', 'folder')

    def test_move_section_invalid_storage(self):
        """Test case for move_section with invalid storage
        """
        param_name = self.get_test_value('move_section', 'name', 'str')
        param_section_index = self.get_test_value('move_section', 'section_index', 'int')
        param_new_position = self.get_test_value('move_section', 'new_position', 'int')
        param_password = self.get_test_value('move_section', 'password', 'str')
        param_folder = self.get_test_value('move_section', 'folder', 'str')
        param_storage = self.get_test_value('move_section', 'storage', 'str')
        param_storage = self.get_invalid_test_value('move_section', 'storage', param_storage, 'str')
        self.initialize('move_section', 'storage', param_storage)
        ok = False
        try:
            self.api.move_section(param_name, param_section_index, param_new_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'move_section', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'move_section', 'storage', param_storage)
        if ok:
            self.assert_no_exception('move_section', 'storage')

    def test_move_slide(self):
        """Test case for move_slide
        """
        param_name = self.get_test_value('move_slide', 'name', 'str')
        param_slide_index = self.get_test_value('move_slide', 'slide_index', 'int')
        param_new_position = self.get_test_value('move_slide', 'new_position', 'int')
        param_password = self.get_test_value('move_slide', 'password', 'str')
        param_folder = self.get_test_value('move_slide', 'folder', 'str')
        param_storage = self.get_test_value('move_slide', 'storage', 'str')
        self.initialize('move_slide', None, None)
        response = self.api.move_slide(param_name, param_slide_index, param_new_position, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_move_slide_invalid_name(self):
        """Test case for move_slide with invalid name
        """
        param_name = self.get_test_value('move_slide', 'name', 'str')
        param_slide_index = self.get_test_value('move_slide', 'slide_index', 'int')
        param_new_position = self.get_test_value('move_slide', 'new_position', 'int')
        param_password = self.get_test_value('move_slide', 'password', 'str')
        param_folder = self.get_test_value('move_slide', 'folder', 'str')
        param_storage = self.get_test_value('move_slide', 'storage', 'str')
        param_name = self.get_invalid_test_value('move_slide', 'name', param_name, 'str')
        self.initialize('move_slide', 'name', param_name)
        ok = False
        try:
            self.api.move_slide(param_name, param_slide_index, param_new_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'move_slide', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'move_slide', 'name', param_name)
        if ok:
            self.assert_no_exception('move_slide', 'name')

    def test_move_slide_invalid_slide_index(self):
        """Test case for move_slide with invalid slide_index
        """
        param_name = self.get_test_value('move_slide', 'name', 'str')
        param_slide_index = self.get_test_value('move_slide', 'slide_index', 'int')
        param_new_position = self.get_test_value('move_slide', 'new_position', 'int')
        param_password = self.get_test_value('move_slide', 'password', 'str')
        param_folder = self.get_test_value('move_slide', 'folder', 'str')
        param_storage = self.get_test_value('move_slide', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('move_slide', 'slide_index', param_slide_index, 'int')
        self.initialize('move_slide', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.move_slide(param_name, param_slide_index, param_new_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'move_slide', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'move_slide', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('move_slide', 'slide_index')

    def test_move_slide_invalid_new_position(self):
        """Test case for move_slide with invalid new_position
        """
        param_name = self.get_test_value('move_slide', 'name', 'str')
        param_slide_index = self.get_test_value('move_slide', 'slide_index', 'int')
        param_new_position = self.get_test_value('move_slide', 'new_position', 'int')
        param_password = self.get_test_value('move_slide', 'password', 'str')
        param_folder = self.get_test_value('move_slide', 'folder', 'str')
        param_storage = self.get_test_value('move_slide', 'storage', 'str')
        param_new_position = self.get_invalid_test_value('move_slide', 'new_position', param_new_position, 'int')
        self.initialize('move_slide', 'new_position', param_new_position)
        ok = False
        try:
            self.api.move_slide(param_name, param_slide_index, param_new_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'move_slide', 'new_position', param_new_position)
        except ValueError as ex:
            self.assert_value_error(ex, 'move_slide', 'new_position', param_new_position)
        if ok:
            self.assert_no_exception('move_slide', 'new_position')

    def test_move_slide_invalid_password(self):
        """Test case for move_slide with invalid password
        """
        param_name = self.get_test_value('move_slide', 'name', 'str')
        param_slide_index = self.get_test_value('move_slide', 'slide_index', 'int')
        param_new_position = self.get_test_value('move_slide', 'new_position', 'int')
        param_password = self.get_test_value('move_slide', 'password', 'str')
        param_folder = self.get_test_value('move_slide', 'folder', 'str')
        param_storage = self.get_test_value('move_slide', 'storage', 'str')
        param_password = self.get_invalid_test_value('move_slide', 'password', param_password, 'str')
        self.initialize('move_slide', 'password', param_password)
        ok = False
        try:
            self.api.move_slide(param_name, param_slide_index, param_new_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'move_slide', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'move_slide', 'password', param_password)
        if ok:
            self.assert_no_exception('move_slide', 'password')

    def test_move_slide_invalid_folder(self):
        """Test case for move_slide with invalid folder
        """
        param_name = self.get_test_value('move_slide', 'name', 'str')
        param_slide_index = self.get_test_value('move_slide', 'slide_index', 'int')
        param_new_position = self.get_test_value('move_slide', 'new_position', 'int')
        param_password = self.get_test_value('move_slide', 'password', 'str')
        param_folder = self.get_test_value('move_slide', 'folder', 'str')
        param_storage = self.get_test_value('move_slide', 'storage', 'str')
        param_folder = self.get_invalid_test_value('move_slide', 'folder', param_folder, 'str')
        self.initialize('move_slide', 'folder', param_folder)
        ok = False
        try:
            self.api.move_slide(param_name, param_slide_index, param_new_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'move_slide', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'move_slide', 'folder', param_folder)
        if ok:
            self.assert_no_exception('move_slide', 'folder')

    def test_move_slide_invalid_storage(self):
        """Test case for move_slide with invalid storage
        """
        param_name = self.get_test_value('move_slide', 'name', 'str')
        param_slide_index = self.get_test_value('move_slide', 'slide_index', 'int')
        param_new_position = self.get_test_value('move_slide', 'new_position', 'int')
        param_password = self.get_test_value('move_slide', 'password', 'str')
        param_folder = self.get_test_value('move_slide', 'folder', 'str')
        param_storage = self.get_test_value('move_slide', 'storage', 'str')
        param_storage = self.get_invalid_test_value('move_slide', 'storage', param_storage, 'str')
        self.initialize('move_slide', 'storage', param_storage)
        ok = False
        try:
            self.api.move_slide(param_name, param_slide_index, param_new_position, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'move_slide', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'move_slide', 'storage', param_storage)
        if ok:
            self.assert_no_exception('move_slide', 'storage')

    def test_notes_slide_exists(self):
        """Test case for notes_slide_exists
        """
        param_name = self.get_test_value('notes_slide_exists', 'name', 'str')
        param_slide_index = self.get_test_value('notes_slide_exists', 'slide_index', 'int')
        param_password = self.get_test_value('notes_slide_exists', 'password', 'str')
        param_folder = self.get_test_value('notes_slide_exists', 'folder', 'str')
        param_storage = self.get_test_value('notes_slide_exists', 'storage', 'str')
        self.initialize('notes_slide_exists', None, None)
        response = self.api.notes_slide_exists(param_name, param_slide_index, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_notes_slide_exists_invalid_name(self):
        """Test case for notes_slide_exists with invalid name
        """
        param_name = self.get_test_value('notes_slide_exists', 'name', 'str')
        param_slide_index = self.get_test_value('notes_slide_exists', 'slide_index', 'int')
        param_password = self.get_test_value('notes_slide_exists', 'password', 'str')
        param_folder = self.get_test_value('notes_slide_exists', 'folder', 'str')
        param_storage = self.get_test_value('notes_slide_exists', 'storage', 'str')
        param_name = self.get_invalid_test_value('notes_slide_exists', 'name', param_name, 'str')
        self.initialize('notes_slide_exists', 'name', param_name)
        ok = False
        try:
            self.api.notes_slide_exists(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'notes_slide_exists', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'notes_slide_exists', 'name', param_name)
        if ok:
            self.assert_no_exception('notes_slide_exists', 'name')

    def test_notes_slide_exists_invalid_slide_index(self):
        """Test case for notes_slide_exists with invalid slide_index
        """
        param_name = self.get_test_value('notes_slide_exists', 'name', 'str')
        param_slide_index = self.get_test_value('notes_slide_exists', 'slide_index', 'int')
        param_password = self.get_test_value('notes_slide_exists', 'password', 'str')
        param_folder = self.get_test_value('notes_slide_exists', 'folder', 'str')
        param_storage = self.get_test_value('notes_slide_exists', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('notes_slide_exists', 'slide_index', param_slide_index, 'int')
        self.initialize('notes_slide_exists', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.notes_slide_exists(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'notes_slide_exists', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'notes_slide_exists', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('notes_slide_exists', 'slide_index')

    def test_notes_slide_exists_invalid_password(self):
        """Test case for notes_slide_exists with invalid password
        """
        param_name = self.get_test_value('notes_slide_exists', 'name', 'str')
        param_slide_index = self.get_test_value('notes_slide_exists', 'slide_index', 'int')
        param_password = self.get_test_value('notes_slide_exists', 'password', 'str')
        param_folder = self.get_test_value('notes_slide_exists', 'folder', 'str')
        param_storage = self.get_test_value('notes_slide_exists', 'storage', 'str')
        param_password = self.get_invalid_test_value('notes_slide_exists', 'password', param_password, 'str')
        self.initialize('notes_slide_exists', 'password', param_password)
        ok = False
        try:
            self.api.notes_slide_exists(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'notes_slide_exists', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'notes_slide_exists', 'password', param_password)
        if ok:
            self.assert_no_exception('notes_slide_exists', 'password')

    def test_notes_slide_exists_invalid_folder(self):
        """Test case for notes_slide_exists with invalid folder
        """
        param_name = self.get_test_value('notes_slide_exists', 'name', 'str')
        param_slide_index = self.get_test_value('notes_slide_exists', 'slide_index', 'int')
        param_password = self.get_test_value('notes_slide_exists', 'password', 'str')
        param_folder = self.get_test_value('notes_slide_exists', 'folder', 'str')
        param_storage = self.get_test_value('notes_slide_exists', 'storage', 'str')
        param_folder = self.get_invalid_test_value('notes_slide_exists', 'folder', param_folder, 'str')
        self.initialize('notes_slide_exists', 'folder', param_folder)
        ok = False
        try:
            self.api.notes_slide_exists(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'notes_slide_exists', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'notes_slide_exists', 'folder', param_folder)
        if ok:
            self.assert_no_exception('notes_slide_exists', 'folder')

    def test_notes_slide_exists_invalid_storage(self):
        """Test case for notes_slide_exists with invalid storage
        """
        param_name = self.get_test_value('notes_slide_exists', 'name', 'str')
        param_slide_index = self.get_test_value('notes_slide_exists', 'slide_index', 'int')
        param_password = self.get_test_value('notes_slide_exists', 'password', 'str')
        param_folder = self.get_test_value('notes_slide_exists', 'folder', 'str')
        param_storage = self.get_test_value('notes_slide_exists', 'storage', 'str')
        param_storage = self.get_invalid_test_value('notes_slide_exists', 'storage', param_storage, 'str')
        self.initialize('notes_slide_exists', 'storage', param_storage)
        ok = False
        try:
            self.api.notes_slide_exists(param_name, param_slide_index, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'notes_slide_exists', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'notes_slide_exists', 'storage', param_storage)
        if ok:
            self.assert_no_exception('notes_slide_exists', 'storage')

    def test_notes_slide_exists_online(self):
        """Test case for notes_slide_exists_online
        """
        param_document = self.get_test_value('notes_slide_exists_online', 'document', 'file')
        param_slide_index = self.get_test_value('notes_slide_exists_online', 'slide_index', 'int')
        param_password = self.get_test_value('notes_slide_exists_online', 'password', 'str')
        self.initialize('notes_slide_exists_online', None, None)
        response = self.api.notes_slide_exists_online(param_document, param_slide_index, param_password)
        self.assertIsNotNone(response)

    def test_notes_slide_exists_online_invalid_document(self):
        """Test case for notes_slide_exists_online with invalid document
        """
        param_document = self.get_test_value('notes_slide_exists_online', 'document', 'file')
        param_slide_index = self.get_test_value('notes_slide_exists_online', 'slide_index', 'int')
        param_password = self.get_test_value('notes_slide_exists_online', 'password', 'str')
        param_document = self.get_invalid_test_value('notes_slide_exists_online', 'document', param_document, 'file')
        self.initialize('notes_slide_exists_online', 'document', param_document)
        ok = False
        try:
            self.api.notes_slide_exists_online(param_document, param_slide_index, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'notes_slide_exists_online', 'document', param_document)
        except ValueError as ex:
            self.assert_value_error(ex, 'notes_slide_exists_online', 'document', param_document)
        if ok:
            self.assert_no_exception('notes_slide_exists_online', 'document')

    def test_notes_slide_exists_online_invalid_slide_index(self):
        """Test case for notes_slide_exists_online with invalid slide_index
        """
        param_document = self.get_test_value('notes_slide_exists_online', 'document', 'file')
        param_slide_index = self.get_test_value('notes_slide_exists_online', 'slide_index', 'int')
        param_password = self.get_test_value('notes_slide_exists_online', 'password', 'str')
        param_slide_index = self.get_invalid_test_value('notes_slide_exists_online', 'slide_index', param_slide_index, 'int')
        self.initialize('notes_slide_exists_online', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.notes_slide_exists_online(param_document, param_slide_index, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'notes_slide_exists_online', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'notes_slide_exists_online', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('notes_slide_exists_online', 'slide_index')

    def test_notes_slide_exists_online_invalid_password(self):
        """Test case for notes_slide_exists_online with invalid password
        """
        param_document = self.get_test_value('notes_slide_exists_online', 'document', 'file')
        param_slide_index = self.get_test_value('notes_slide_exists_online', 'slide_index', 'int')
        param_password = self.get_test_value('notes_slide_exists_online', 'password', 'str')
        param_password = self.get_invalid_test_value('notes_slide_exists_online', 'password', param_password, 'str')
        self.initialize('notes_slide_exists_online', 'password', param_password)
        ok = False
        try:
            self.api.notes_slide_exists_online(param_document, param_slide_index, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'notes_slide_exists_online', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'notes_slide_exists_online', 'password', param_password)
        if ok:
            self.assert_no_exception('notes_slide_exists_online', 'password')

    def test_object_exists(self):
        """Test case for object_exists
        """
        param_path = self.get_test_value('object_exists', 'path', 'str')
        param_storage_name = self.get_test_value('object_exists', 'storage_name', 'str')
        param_version_id = self.get_test_value('object_exists', 'version_id', 'str')
        self.initialize('object_exists', None, None)
        response = self.api.object_exists(param_path, param_storage_name, param_version_id)
        self.assertIsNotNone(response)

    def test_object_exists_invalid_path(self):
        """Test case for object_exists with invalid path
        """
        param_path = self.get_test_value('object_exists', 'path', 'str')
        param_storage_name = self.get_test_value('object_exists', 'storage_name', 'str')
        param_version_id = self.get_test_value('object_exists', 'version_id', 'str')
        param_path = self.get_invalid_test_value('object_exists', 'path', param_path, 'str')
        self.initialize('object_exists', 'path', param_path)
        ok = False
        try:
            self.api.object_exists(param_path, param_storage_name, param_version_id)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'object_exists', 'path', param_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'object_exists', 'path', param_path)
        if ok:
            self.assert_no_exception('object_exists', 'path')

    def test_object_exists_invalid_storage_name(self):
        """Test case for object_exists with invalid storage_name
        """
        param_path = self.get_test_value('object_exists', 'path', 'str')
        param_storage_name = self.get_test_value('object_exists', 'storage_name', 'str')
        param_version_id = self.get_test_value('object_exists', 'version_id', 'str')
        param_storage_name = self.get_invalid_test_value('object_exists', 'storage_name', param_storage_name, 'str')
        self.initialize('object_exists', 'storage_name', param_storage_name)
        ok = False
        try:
            self.api.object_exists(param_path, param_storage_name, param_version_id)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'object_exists', 'storage_name', param_storage_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'object_exists', 'storage_name', param_storage_name)
        if ok:
            self.assert_no_exception('object_exists', 'storage_name')

    def test_object_exists_invalid_version_id(self):
        """Test case for object_exists with invalid version_id
        """
        param_path = self.get_test_value('object_exists', 'path', 'str')
        param_storage_name = self.get_test_value('object_exists', 'storage_name', 'str')
        param_version_id = self.get_test_value('object_exists', 'version_id', 'str')
        param_version_id = self.get_invalid_test_value('object_exists', 'version_id', param_version_id, 'str')
        self.initialize('object_exists', 'version_id', param_version_id)
        ok = False
        try:
            self.api.object_exists(param_path, param_storage_name, param_version_id)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'object_exists', 'version_id', param_version_id)
        except ValueError as ex:
            self.assert_value_error(ex, 'object_exists', 'version_id', param_version_id)
        if ok:
            self.assert_no_exception('object_exists', 'version_id')

    def test_ordered_merge(self):
        """Test case for ordered_merge
        """
        param_name = self.get_test_value('ordered_merge', 'name', 'str')
        param_request = self.get_test_value('ordered_merge', 'request', 'OrderedMergeRequest')
        param_password = self.get_test_value('ordered_merge', 'password', 'str')
        param_folder = self.get_test_value('ordered_merge', 'folder', 'str')
        param_storage = self.get_test_value('ordered_merge', 'storage', 'str')
        self.initialize('ordered_merge', None, None)
        response = self.api.ordered_merge(param_name, param_request, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_ordered_merge_invalid_name(self):
        """Test case for ordered_merge with invalid name
        """
        param_name = self.get_test_value('ordered_merge', 'name', 'str')
        param_request = self.get_test_value('ordered_merge', 'request', 'OrderedMergeRequest')
        param_password = self.get_test_value('ordered_merge', 'password', 'str')
        param_folder = self.get_test_value('ordered_merge', 'folder', 'str')
        param_storage = self.get_test_value('ordered_merge', 'storage', 'str')
        param_name = self.get_invalid_test_value('ordered_merge', 'name', param_name, 'str')
        self.initialize('ordered_merge', 'name', param_name)
        ok = False
        try:
            self.api.ordered_merge(param_name, param_request, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'ordered_merge', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'ordered_merge', 'name', param_name)
        if ok:
            self.assert_no_exception('ordered_merge', 'name')

    def test_ordered_merge_invalid_request(self):
        """Test case for ordered_merge with invalid request
        """
        param_name = self.get_test_value('ordered_merge', 'name', 'str')
        param_request = self.get_test_value('ordered_merge', 'request', 'OrderedMergeRequest')
        param_password = self.get_test_value('ordered_merge', 'password', 'str')
        param_folder = self.get_test_value('ordered_merge', 'folder', 'str')
        param_storage = self.get_test_value('ordered_merge', 'storage', 'str')
        param_request = self.get_invalid_test_value('ordered_merge', 'request', param_request, 'OrderedMergeRequest')
        self.initialize('ordered_merge', 'request', param_request)
        ok = False
        try:
            self.api.ordered_merge(param_name, param_request, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'ordered_merge', 'request', param_request)
        except ValueError as ex:
            self.assert_value_error(ex, 'ordered_merge', 'request', param_request)
        if ok:
            self.assert_no_exception('ordered_merge', 'request')

    def test_ordered_merge_invalid_password(self):
        """Test case for ordered_merge with invalid password
        """
        param_name = self.get_test_value('ordered_merge', 'name', 'str')
        param_request = self.get_test_value('ordered_merge', 'request', 'OrderedMergeRequest')
        param_password = self.get_test_value('ordered_merge', 'password', 'str')
        param_folder = self.get_test_value('ordered_merge', 'folder', 'str')
        param_storage = self.get_test_value('ordered_merge', 'storage', 'str')
        param_password = self.get_invalid_test_value('ordered_merge', 'password', param_password, 'str')
        self.initialize('ordered_merge', 'password', param_password)
        ok = False
        try:
            self.api.ordered_merge(param_name, param_request, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'ordered_merge', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'ordered_merge', 'password', param_password)
        if ok:
            self.assert_no_exception('ordered_merge', 'password')

    def test_ordered_merge_invalid_folder(self):
        """Test case for ordered_merge with invalid folder
        """
        param_name = self.get_test_value('ordered_merge', 'name', 'str')
        param_request = self.get_test_value('ordered_merge', 'request', 'OrderedMergeRequest')
        param_password = self.get_test_value('ordered_merge', 'password', 'str')
        param_folder = self.get_test_value('ordered_merge', 'folder', 'str')
        param_storage = self.get_test_value('ordered_merge', 'storage', 'str')
        param_folder = self.get_invalid_test_value('ordered_merge', 'folder', param_folder, 'str')
        self.initialize('ordered_merge', 'folder', param_folder)
        ok = False
        try:
            self.api.ordered_merge(param_name, param_request, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'ordered_merge', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'ordered_merge', 'folder', param_folder)
        if ok:
            self.assert_no_exception('ordered_merge', 'folder')

    def test_ordered_merge_invalid_storage(self):
        """Test case for ordered_merge with invalid storage
        """
        param_name = self.get_test_value('ordered_merge', 'name', 'str')
        param_request = self.get_test_value('ordered_merge', 'request', 'OrderedMergeRequest')
        param_password = self.get_test_value('ordered_merge', 'password', 'str')
        param_folder = self.get_test_value('ordered_merge', 'folder', 'str')
        param_storage = self.get_test_value('ordered_merge', 'storage', 'str')
        param_storage = self.get_invalid_test_value('ordered_merge', 'storage', param_storage, 'str')
        self.initialize('ordered_merge', 'storage', param_storage)
        ok = False
        try:
            self.api.ordered_merge(param_name, param_request, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'ordered_merge', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'ordered_merge', 'storage', param_storage)
        if ok:
            self.assert_no_exception('ordered_merge', 'storage')

    def test_pipeline(self):
        """Test case for pipeline
        """
        param_pipeline = self.get_test_value('pipeline', 'pipeline', 'Pipeline')
        param_files = self.get_test_value('pipeline', 'files', 'dict')
        self.initialize('pipeline', None, None)
        response = self.api.pipeline(param_pipeline, param_files)
        self.assertTrue(isinstance(response, str))
        self.assertTrue(len(response) > 0)

    def test_pipeline_invalid_pipeline(self):
        """Test case for pipeline with invalid pipeline
        """
        param_pipeline = self.get_test_value('pipeline', 'pipeline', 'Pipeline')
        param_files = self.get_test_value('pipeline', 'files', 'dict')
        param_pipeline = self.get_invalid_test_value('pipeline', 'pipeline', param_pipeline, 'Pipeline')
        self.initialize('pipeline', 'pipeline', param_pipeline)
        ok = False
        try:
            self.api.pipeline(param_pipeline, param_files)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'pipeline', 'pipeline', param_pipeline)
        except ValueError as ex:
            self.assert_value_error(ex, 'pipeline', 'pipeline', param_pipeline)
        if ok:
            self.assert_no_exception('pipeline', 'pipeline')

    def test_pipeline_invalid_files(self):
        """Test case for pipeline with invalid files
        """
        param_pipeline = self.get_test_value('pipeline', 'pipeline', 'Pipeline')
        param_files = self.get_test_value('pipeline', 'files', 'dict')
        param_files = self.get_invalid_test_value('pipeline', 'files', param_files, 'dict')
        self.initialize('pipeline', 'files', param_files)
        ok = False
        try:
            self.api.pipeline(param_pipeline, param_files)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'pipeline', 'files', param_files)
        except ValueError as ex:
            self.assert_value_error(ex, 'pipeline', 'files', param_files)
        if ok:
            self.assert_no_exception('pipeline', 'files')

    def test_reorder_slides(self):
        """Test case for reorder_slides
        """
        param_name = self.get_test_value('reorder_slides', 'name', 'str')
        param_old_positions = self.get_test_value('reorder_slides', 'old_positions', 'list[int]')
        param_new_positions = self.get_test_value('reorder_slides', 'new_positions', 'list[int]')
        param_password = self.get_test_value('reorder_slides', 'password', 'str')
        param_folder = self.get_test_value('reorder_slides', 'folder', 'str')
        param_storage = self.get_test_value('reorder_slides', 'storage', 'str')
        self.initialize('reorder_slides', None, None)
        response = self.api.reorder_slides(param_name, param_old_positions, param_new_positions, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_reorder_slides_invalid_name(self):
        """Test case for reorder_slides with invalid name
        """
        param_name = self.get_test_value('reorder_slides', 'name', 'str')
        param_old_positions = self.get_test_value('reorder_slides', 'old_positions', 'list[int]')
        param_new_positions = self.get_test_value('reorder_slides', 'new_positions', 'list[int]')
        param_password = self.get_test_value('reorder_slides', 'password', 'str')
        param_folder = self.get_test_value('reorder_slides', 'folder', 'str')
        param_storage = self.get_test_value('reorder_slides', 'storage', 'str')
        param_name = self.get_invalid_test_value('reorder_slides', 'name', param_name, 'str')
        self.initialize('reorder_slides', 'name', param_name)
        ok = False
        try:
            self.api.reorder_slides(param_name, param_old_positions, param_new_positions, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'reorder_slides', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'reorder_slides', 'name', param_name)
        if ok:
            self.assert_no_exception('reorder_slides', 'name')

    def test_reorder_slides_invalid_old_positions(self):
        """Test case for reorder_slides with invalid old_positions
        """
        param_name = self.get_test_value('reorder_slides', 'name', 'str')
        param_old_positions = self.get_test_value('reorder_slides', 'old_positions', 'list[int]')
        param_new_positions = self.get_test_value('reorder_slides', 'new_positions', 'list[int]')
        param_password = self.get_test_value('reorder_slides', 'password', 'str')
        param_folder = self.get_test_value('reorder_slides', 'folder', 'str')
        param_storage = self.get_test_value('reorder_slides', 'storage', 'str')
        param_old_positions = self.get_invalid_test_value('reorder_slides', 'old_positions', param_old_positions, 'list[int]')
        self.initialize('reorder_slides', 'old_positions', param_old_positions)
        ok = False
        try:
            self.api.reorder_slides(param_name, param_old_positions, param_new_positions, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'reorder_slides', 'old_positions', param_old_positions)
        except ValueError as ex:
            self.assert_value_error(ex, 'reorder_slides', 'old_positions', param_old_positions)
        if ok:
            self.assert_no_exception('reorder_slides', 'old_positions')

    def test_reorder_slides_invalid_new_positions(self):
        """Test case for reorder_slides with invalid new_positions
        """
        param_name = self.get_test_value('reorder_slides', 'name', 'str')
        param_old_positions = self.get_test_value('reorder_slides', 'old_positions', 'list[int]')
        param_new_positions = self.get_test_value('reorder_slides', 'new_positions', 'list[int]')
        param_password = self.get_test_value('reorder_slides', 'password', 'str')
        param_folder = self.get_test_value('reorder_slides', 'folder', 'str')
        param_storage = self.get_test_value('reorder_slides', 'storage', 'str')
        param_new_positions = self.get_invalid_test_value('reorder_slides', 'new_positions', param_new_positions, 'list[int]')
        self.initialize('reorder_slides', 'new_positions', param_new_positions)
        ok = False
        try:
            self.api.reorder_slides(param_name, param_old_positions, param_new_positions, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'reorder_slides', 'new_positions', param_new_positions)
        except ValueError as ex:
            self.assert_value_error(ex, 'reorder_slides', 'new_positions', param_new_positions)
        if ok:
            self.assert_no_exception('reorder_slides', 'new_positions')

    def test_reorder_slides_invalid_password(self):
        """Test case for reorder_slides with invalid password
        """
        param_name = self.get_test_value('reorder_slides', 'name', 'str')
        param_old_positions = self.get_test_value('reorder_slides', 'old_positions', 'list[int]')
        param_new_positions = self.get_test_value('reorder_slides', 'new_positions', 'list[int]')
        param_password = self.get_test_value('reorder_slides', 'password', 'str')
        param_folder = self.get_test_value('reorder_slides', 'folder', 'str')
        param_storage = self.get_test_value('reorder_slides', 'storage', 'str')
        param_password = self.get_invalid_test_value('reorder_slides', 'password', param_password, 'str')
        self.initialize('reorder_slides', 'password', param_password)
        ok = False
        try:
            self.api.reorder_slides(param_name, param_old_positions, param_new_positions, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'reorder_slides', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'reorder_slides', 'password', param_password)
        if ok:
            self.assert_no_exception('reorder_slides', 'password')

    def test_reorder_slides_invalid_folder(self):
        """Test case for reorder_slides with invalid folder
        """
        param_name = self.get_test_value('reorder_slides', 'name', 'str')
        param_old_positions = self.get_test_value('reorder_slides', 'old_positions', 'list[int]')
        param_new_positions = self.get_test_value('reorder_slides', 'new_positions', 'list[int]')
        param_password = self.get_test_value('reorder_slides', 'password', 'str')
        param_folder = self.get_test_value('reorder_slides', 'folder', 'str')
        param_storage = self.get_test_value('reorder_slides', 'storage', 'str')
        param_folder = self.get_invalid_test_value('reorder_slides', 'folder', param_folder, 'str')
        self.initialize('reorder_slides', 'folder', param_folder)
        ok = False
        try:
            self.api.reorder_slides(param_name, param_old_positions, param_new_positions, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'reorder_slides', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'reorder_slides', 'folder', param_folder)
        if ok:
            self.assert_no_exception('reorder_slides', 'folder')

    def test_reorder_slides_invalid_storage(self):
        """Test case for reorder_slides with invalid storage
        """
        param_name = self.get_test_value('reorder_slides', 'name', 'str')
        param_old_positions = self.get_test_value('reorder_slides', 'old_positions', 'list[int]')
        param_new_positions = self.get_test_value('reorder_slides', 'new_positions', 'list[int]')
        param_password = self.get_test_value('reorder_slides', 'password', 'str')
        param_folder = self.get_test_value('reorder_slides', 'folder', 'str')
        param_storage = self.get_test_value('reorder_slides', 'storage', 'str')
        param_storage = self.get_invalid_test_value('reorder_slides', 'storage', param_storage, 'str')
        self.initialize('reorder_slides', 'storage', param_storage)
        ok = False
        try:
            self.api.reorder_slides(param_name, param_old_positions, param_new_positions, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'reorder_slides', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'reorder_slides', 'storage', param_storage)
        if ok:
            self.assert_no_exception('reorder_slides', 'storage')

    def test_replace_presentation_text(self):
        """Test case for replace_presentation_text
        """
        param_name = self.get_test_value('replace_presentation_text', 'name', 'str')
        param_old_value = self.get_test_value('replace_presentation_text', 'old_value', 'str')
        param_new_value = self.get_test_value('replace_presentation_text', 'new_value', 'str')
        param_ignore_case = self.get_test_value('replace_presentation_text', 'ignore_case', 'bool')
        param_password = self.get_test_value('replace_presentation_text', 'password', 'str')
        param_folder = self.get_test_value('replace_presentation_text', 'folder', 'str')
        param_storage = self.get_test_value('replace_presentation_text', 'storage', 'str')
        self.initialize('replace_presentation_text', None, None)
        response = self.api.replace_presentation_text(param_name, param_old_value, param_new_value, param_ignore_case, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_replace_presentation_text_invalid_name(self):
        """Test case for replace_presentation_text with invalid name
        """
        param_name = self.get_test_value('replace_presentation_text', 'name', 'str')
        param_old_value = self.get_test_value('replace_presentation_text', 'old_value', 'str')
        param_new_value = self.get_test_value('replace_presentation_text', 'new_value', 'str')
        param_ignore_case = self.get_test_value('replace_presentation_text', 'ignore_case', 'bool')
        param_password = self.get_test_value('replace_presentation_text', 'password', 'str')
        param_folder = self.get_test_value('replace_presentation_text', 'folder', 'str')
        param_storage = self.get_test_value('replace_presentation_text', 'storage', 'str')
        param_name = self.get_invalid_test_value('replace_presentation_text', 'name', param_name, 'str')
        self.initialize('replace_presentation_text', 'name', param_name)
        ok = False
        try:
            self.api.replace_presentation_text(param_name, param_old_value, param_new_value, param_ignore_case, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'replace_presentation_text', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'replace_presentation_text', 'name', param_name)
        if ok:
            self.assert_no_exception('replace_presentation_text', 'name')

    def test_replace_presentation_text_invalid_old_value(self):
        """Test case for replace_presentation_text with invalid old_value
        """
        param_name = self.get_test_value('replace_presentation_text', 'name', 'str')
        param_old_value = self.get_test_value('replace_presentation_text', 'old_value', 'str')
        param_new_value = self.get_test_value('replace_presentation_text', 'new_value', 'str')
        param_ignore_case = self.get_test_value('replace_presentation_text', 'ignore_case', 'bool')
        param_password = self.get_test_value('replace_presentation_text', 'password', 'str')
        param_folder = self.get_test_value('replace_presentation_text', 'folder', 'str')
        param_storage = self.get_test_value('replace_presentation_text', 'storage', 'str')
        param_old_value = self.get_invalid_test_value('replace_presentation_text', 'old_value', param_old_value, 'str')
        self.initialize('replace_presentation_text', 'old_value', param_old_value)
        ok = False
        try:
            self.api.replace_presentation_text(param_name, param_old_value, param_new_value, param_ignore_case, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'replace_presentation_text', 'old_value', param_old_value)
        except ValueError as ex:
            self.assert_value_error(ex, 'replace_presentation_text', 'old_value', param_old_value)
        if ok:
            self.assert_no_exception('replace_presentation_text', 'old_value')

    def test_replace_presentation_text_invalid_new_value(self):
        """Test case for replace_presentation_text with invalid new_value
        """
        param_name = self.get_test_value('replace_presentation_text', 'name', 'str')
        param_old_value = self.get_test_value('replace_presentation_text', 'old_value', 'str')
        param_new_value = self.get_test_value('replace_presentation_text', 'new_value', 'str')
        param_ignore_case = self.get_test_value('replace_presentation_text', 'ignore_case', 'bool')
        param_password = self.get_test_value('replace_presentation_text', 'password', 'str')
        param_folder = self.get_test_value('replace_presentation_text', 'folder', 'str')
        param_storage = self.get_test_value('replace_presentation_text', 'storage', 'str')
        param_new_value = self.get_invalid_test_value('replace_presentation_text', 'new_value', param_new_value, 'str')
        self.initialize('replace_presentation_text', 'new_value', param_new_value)
        ok = False
        try:
            self.api.replace_presentation_text(param_name, param_old_value, param_new_value, param_ignore_case, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'replace_presentation_text', 'new_value', param_new_value)
        except ValueError as ex:
            self.assert_value_error(ex, 'replace_presentation_text', 'new_value', param_new_value)
        if ok:
            self.assert_no_exception('replace_presentation_text', 'new_value')

    def test_replace_presentation_text_invalid_ignore_case(self):
        """Test case for replace_presentation_text with invalid ignore_case
        """
        param_name = self.get_test_value('replace_presentation_text', 'name', 'str')
        param_old_value = self.get_test_value('replace_presentation_text', 'old_value', 'str')
        param_new_value = self.get_test_value('replace_presentation_text', 'new_value', 'str')
        param_ignore_case = self.get_test_value('replace_presentation_text', 'ignore_case', 'bool')
        param_password = self.get_test_value('replace_presentation_text', 'password', 'str')
        param_folder = self.get_test_value('replace_presentation_text', 'folder', 'str')
        param_storage = self.get_test_value('replace_presentation_text', 'storage', 'str')
        param_ignore_case = self.get_invalid_test_value('replace_presentation_text', 'ignore_case', param_ignore_case, 'bool')
        self.initialize('replace_presentation_text', 'ignore_case', param_ignore_case)
        ok = False
        try:
            self.api.replace_presentation_text(param_name, param_old_value, param_new_value, param_ignore_case, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'replace_presentation_text', 'ignore_case', param_ignore_case)
        except ValueError as ex:
            self.assert_value_error(ex, 'replace_presentation_text', 'ignore_case', param_ignore_case)
        if ok:
            self.assert_no_exception('replace_presentation_text', 'ignore_case')

    def test_replace_presentation_text_invalid_password(self):
        """Test case for replace_presentation_text with invalid password
        """
        param_name = self.get_test_value('replace_presentation_text', 'name', 'str')
        param_old_value = self.get_test_value('replace_presentation_text', 'old_value', 'str')
        param_new_value = self.get_test_value('replace_presentation_text', 'new_value', 'str')
        param_ignore_case = self.get_test_value('replace_presentation_text', 'ignore_case', 'bool')
        param_password = self.get_test_value('replace_presentation_text', 'password', 'str')
        param_folder = self.get_test_value('replace_presentation_text', 'folder', 'str')
        param_storage = self.get_test_value('replace_presentation_text', 'storage', 'str')
        param_password = self.get_invalid_test_value('replace_presentation_text', 'password', param_password, 'str')
        self.initialize('replace_presentation_text', 'password', param_password)
        ok = False
        try:
            self.api.replace_presentation_text(param_name, param_old_value, param_new_value, param_ignore_case, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'replace_presentation_text', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'replace_presentation_text', 'password', param_password)
        if ok:
            self.assert_no_exception('replace_presentation_text', 'password')

    def test_replace_presentation_text_invalid_folder(self):
        """Test case for replace_presentation_text with invalid folder
        """
        param_name = self.get_test_value('replace_presentation_text', 'name', 'str')
        param_old_value = self.get_test_value('replace_presentation_text', 'old_value', 'str')
        param_new_value = self.get_test_value('replace_presentation_text', 'new_value', 'str')
        param_ignore_case = self.get_test_value('replace_presentation_text', 'ignore_case', 'bool')
        param_password = self.get_test_value('replace_presentation_text', 'password', 'str')
        param_folder = self.get_test_value('replace_presentation_text', 'folder', 'str')
        param_storage = self.get_test_value('replace_presentation_text', 'storage', 'str')
        param_folder = self.get_invalid_test_value('replace_presentation_text', 'folder', param_folder, 'str')
        self.initialize('replace_presentation_text', 'folder', param_folder)
        ok = False
        try:
            self.api.replace_presentation_text(param_name, param_old_value, param_new_value, param_ignore_case, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'replace_presentation_text', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'replace_presentation_text', 'folder', param_folder)
        if ok:
            self.assert_no_exception('replace_presentation_text', 'folder')

    def test_replace_presentation_text_invalid_storage(self):
        """Test case for replace_presentation_text with invalid storage
        """
        param_name = self.get_test_value('replace_presentation_text', 'name', 'str')
        param_old_value = self.get_test_value('replace_presentation_text', 'old_value', 'str')
        param_new_value = self.get_test_value('replace_presentation_text', 'new_value', 'str')
        param_ignore_case = self.get_test_value('replace_presentation_text', 'ignore_case', 'bool')
        param_password = self.get_test_value('replace_presentation_text', 'password', 'str')
        param_folder = self.get_test_value('replace_presentation_text', 'folder', 'str')
        param_storage = self.get_test_value('replace_presentation_text', 'storage', 'str')
        param_storage = self.get_invalid_test_value('replace_presentation_text', 'storage', param_storage, 'str')
        self.initialize('replace_presentation_text', 'storage', param_storage)
        ok = False
        try:
            self.api.replace_presentation_text(param_name, param_old_value, param_new_value, param_ignore_case, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'replace_presentation_text', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'replace_presentation_text', 'storage', param_storage)
        if ok:
            self.assert_no_exception('replace_presentation_text', 'storage')

    def test_replace_presentation_text_online(self):
        """Test case for replace_presentation_text_online
        """
        param_document = self.get_test_value('replace_presentation_text_online', 'document', 'file')
        param_old_value = self.get_test_value('replace_presentation_text_online', 'old_value', 'str')
        param_new_value = self.get_test_value('replace_presentation_text_online', 'new_value', 'str')
        param_ignore_case = self.get_test_value('replace_presentation_text_online', 'ignore_case', 'bool')
        param_password = self.get_test_value('replace_presentation_text_online', 'password', 'str')
        self.initialize('replace_presentation_text_online', None, None)
        response = self.api.replace_presentation_text_online(param_document, param_old_value, param_new_value, param_ignore_case, param_password)
        self.assertTrue(isinstance(response, str))
        self.assertTrue(len(response) > 0)

    def test_replace_presentation_text_online_invalid_document(self):
        """Test case for replace_presentation_text_online with invalid document
        """
        param_document = self.get_test_value('replace_presentation_text_online', 'document', 'file')
        param_old_value = self.get_test_value('replace_presentation_text_online', 'old_value', 'str')
        param_new_value = self.get_test_value('replace_presentation_text_online', 'new_value', 'str')
        param_ignore_case = self.get_test_value('replace_presentation_text_online', 'ignore_case', 'bool')
        param_password = self.get_test_value('replace_presentation_text_online', 'password', 'str')
        param_document = self.get_invalid_test_value('replace_presentation_text_online', 'document', param_document, 'file')
        self.initialize('replace_presentation_text_online', 'document', param_document)
        ok = False
        try:
            self.api.replace_presentation_text_online(param_document, param_old_value, param_new_value, param_ignore_case, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'replace_presentation_text_online', 'document', param_document)
        except ValueError as ex:
            self.assert_value_error(ex, 'replace_presentation_text_online', 'document', param_document)
        if ok:
            self.assert_no_exception('replace_presentation_text_online', 'document')

    def test_replace_presentation_text_online_invalid_old_value(self):
        """Test case for replace_presentation_text_online with invalid old_value
        """
        param_document = self.get_test_value('replace_presentation_text_online', 'document', 'file')
        param_old_value = self.get_test_value('replace_presentation_text_online', 'old_value', 'str')
        param_new_value = self.get_test_value('replace_presentation_text_online', 'new_value', 'str')
        param_ignore_case = self.get_test_value('replace_presentation_text_online', 'ignore_case', 'bool')
        param_password = self.get_test_value('replace_presentation_text_online', 'password', 'str')
        param_old_value = self.get_invalid_test_value('replace_presentation_text_online', 'old_value', param_old_value, 'str')
        self.initialize('replace_presentation_text_online', 'old_value', param_old_value)
        ok = False
        try:
            self.api.replace_presentation_text_online(param_document, param_old_value, param_new_value, param_ignore_case, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'replace_presentation_text_online', 'old_value', param_old_value)
        except ValueError as ex:
            self.assert_value_error(ex, 'replace_presentation_text_online', 'old_value', param_old_value)
        if ok:
            self.assert_no_exception('replace_presentation_text_online', 'old_value')

    def test_replace_presentation_text_online_invalid_new_value(self):
        """Test case for replace_presentation_text_online with invalid new_value
        """
        param_document = self.get_test_value('replace_presentation_text_online', 'document', 'file')
        param_old_value = self.get_test_value('replace_presentation_text_online', 'old_value', 'str')
        param_new_value = self.get_test_value('replace_presentation_text_online', 'new_value', 'str')
        param_ignore_case = self.get_test_value('replace_presentation_text_online', 'ignore_case', 'bool')
        param_password = self.get_test_value('replace_presentation_text_online', 'password', 'str')
        param_new_value = self.get_invalid_test_value('replace_presentation_text_online', 'new_value', param_new_value, 'str')
        self.initialize('replace_presentation_text_online', 'new_value', param_new_value)
        ok = False
        try:
            self.api.replace_presentation_text_online(param_document, param_old_value, param_new_value, param_ignore_case, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'replace_presentation_text_online', 'new_value', param_new_value)
        except ValueError as ex:
            self.assert_value_error(ex, 'replace_presentation_text_online', 'new_value', param_new_value)
        if ok:
            self.assert_no_exception('replace_presentation_text_online', 'new_value')

    def test_replace_presentation_text_online_invalid_ignore_case(self):
        """Test case for replace_presentation_text_online with invalid ignore_case
        """
        param_document = self.get_test_value('replace_presentation_text_online', 'document', 'file')
        param_old_value = self.get_test_value('replace_presentation_text_online', 'old_value', 'str')
        param_new_value = self.get_test_value('replace_presentation_text_online', 'new_value', 'str')
        param_ignore_case = self.get_test_value('replace_presentation_text_online', 'ignore_case', 'bool')
        param_password = self.get_test_value('replace_presentation_text_online', 'password', 'str')
        param_ignore_case = self.get_invalid_test_value('replace_presentation_text_online', 'ignore_case', param_ignore_case, 'bool')
        self.initialize('replace_presentation_text_online', 'ignore_case', param_ignore_case)
        ok = False
        try:
            self.api.replace_presentation_text_online(param_document, param_old_value, param_new_value, param_ignore_case, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'replace_presentation_text_online', 'ignore_case', param_ignore_case)
        except ValueError as ex:
            self.assert_value_error(ex, 'replace_presentation_text_online', 'ignore_case', param_ignore_case)
        if ok:
            self.assert_no_exception('replace_presentation_text_online', 'ignore_case')

    def test_replace_presentation_text_online_invalid_password(self):
        """Test case for replace_presentation_text_online with invalid password
        """
        param_document = self.get_test_value('replace_presentation_text_online', 'document', 'file')
        param_old_value = self.get_test_value('replace_presentation_text_online', 'old_value', 'str')
        param_new_value = self.get_test_value('replace_presentation_text_online', 'new_value', 'str')
        param_ignore_case = self.get_test_value('replace_presentation_text_online', 'ignore_case', 'bool')
        param_password = self.get_test_value('replace_presentation_text_online', 'password', 'str')
        param_password = self.get_invalid_test_value('replace_presentation_text_online', 'password', param_password, 'str')
        self.initialize('replace_presentation_text_online', 'password', param_password)
        ok = False
        try:
            self.api.replace_presentation_text_online(param_document, param_old_value, param_new_value, param_ignore_case, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'replace_presentation_text_online', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'replace_presentation_text_online', 'password', param_password)
        if ok:
            self.assert_no_exception('replace_presentation_text_online', 'password')

    def test_replace_slide_text(self):
        """Test case for replace_slide_text
        """
        param_name = self.get_test_value('replace_slide_text', 'name', 'str')
        param_slide_index = self.get_test_value('replace_slide_text', 'slide_index', 'int')
        param_old_value = self.get_test_value('replace_slide_text', 'old_value', 'str')
        param_new_value = self.get_test_value('replace_slide_text', 'new_value', 'str')
        param_ignore_case = self.get_test_value('replace_slide_text', 'ignore_case', 'bool')
        param_password = self.get_test_value('replace_slide_text', 'password', 'str')
        param_folder = self.get_test_value('replace_slide_text', 'folder', 'str')
        param_storage = self.get_test_value('replace_slide_text', 'storage', 'str')
        self.initialize('replace_slide_text', None, None)
        response = self.api.replace_slide_text(param_name, param_slide_index, param_old_value, param_new_value, param_ignore_case, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_replace_slide_text_invalid_name(self):
        """Test case for replace_slide_text with invalid name
        """
        param_name = self.get_test_value('replace_slide_text', 'name', 'str')
        param_slide_index = self.get_test_value('replace_slide_text', 'slide_index', 'int')
        param_old_value = self.get_test_value('replace_slide_text', 'old_value', 'str')
        param_new_value = self.get_test_value('replace_slide_text', 'new_value', 'str')
        param_ignore_case = self.get_test_value('replace_slide_text', 'ignore_case', 'bool')
        param_password = self.get_test_value('replace_slide_text', 'password', 'str')
        param_folder = self.get_test_value('replace_slide_text', 'folder', 'str')
        param_storage = self.get_test_value('replace_slide_text', 'storage', 'str')
        param_name = self.get_invalid_test_value('replace_slide_text', 'name', param_name, 'str')
        self.initialize('replace_slide_text', 'name', param_name)
        ok = False
        try:
            self.api.replace_slide_text(param_name, param_slide_index, param_old_value, param_new_value, param_ignore_case, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'replace_slide_text', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'replace_slide_text', 'name', param_name)
        if ok:
            self.assert_no_exception('replace_slide_text', 'name')

    def test_replace_slide_text_invalid_slide_index(self):
        """Test case for replace_slide_text with invalid slide_index
        """
        param_name = self.get_test_value('replace_slide_text', 'name', 'str')
        param_slide_index = self.get_test_value('replace_slide_text', 'slide_index', 'int')
        param_old_value = self.get_test_value('replace_slide_text', 'old_value', 'str')
        param_new_value = self.get_test_value('replace_slide_text', 'new_value', 'str')
        param_ignore_case = self.get_test_value('replace_slide_text', 'ignore_case', 'bool')
        param_password = self.get_test_value('replace_slide_text', 'password', 'str')
        param_folder = self.get_test_value('replace_slide_text', 'folder', 'str')
        param_storage = self.get_test_value('replace_slide_text', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('replace_slide_text', 'slide_index', param_slide_index, 'int')
        self.initialize('replace_slide_text', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.replace_slide_text(param_name, param_slide_index, param_old_value, param_new_value, param_ignore_case, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'replace_slide_text', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'replace_slide_text', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('replace_slide_text', 'slide_index')

    def test_replace_slide_text_invalid_old_value(self):
        """Test case for replace_slide_text with invalid old_value
        """
        param_name = self.get_test_value('replace_slide_text', 'name', 'str')
        param_slide_index = self.get_test_value('replace_slide_text', 'slide_index', 'int')
        param_old_value = self.get_test_value('replace_slide_text', 'old_value', 'str')
        param_new_value = self.get_test_value('replace_slide_text', 'new_value', 'str')
        param_ignore_case = self.get_test_value('replace_slide_text', 'ignore_case', 'bool')
        param_password = self.get_test_value('replace_slide_text', 'password', 'str')
        param_folder = self.get_test_value('replace_slide_text', 'folder', 'str')
        param_storage = self.get_test_value('replace_slide_text', 'storage', 'str')
        param_old_value = self.get_invalid_test_value('replace_slide_text', 'old_value', param_old_value, 'str')
        self.initialize('replace_slide_text', 'old_value', param_old_value)
        ok = False
        try:
            self.api.replace_slide_text(param_name, param_slide_index, param_old_value, param_new_value, param_ignore_case, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'replace_slide_text', 'old_value', param_old_value)
        except ValueError as ex:
            self.assert_value_error(ex, 'replace_slide_text', 'old_value', param_old_value)
        if ok:
            self.assert_no_exception('replace_slide_text', 'old_value')

    def test_replace_slide_text_invalid_new_value(self):
        """Test case for replace_slide_text with invalid new_value
        """
        param_name = self.get_test_value('replace_slide_text', 'name', 'str')
        param_slide_index = self.get_test_value('replace_slide_text', 'slide_index', 'int')
        param_old_value = self.get_test_value('replace_slide_text', 'old_value', 'str')
        param_new_value = self.get_test_value('replace_slide_text', 'new_value', 'str')
        param_ignore_case = self.get_test_value('replace_slide_text', 'ignore_case', 'bool')
        param_password = self.get_test_value('replace_slide_text', 'password', 'str')
        param_folder = self.get_test_value('replace_slide_text', 'folder', 'str')
        param_storage = self.get_test_value('replace_slide_text', 'storage', 'str')
        param_new_value = self.get_invalid_test_value('replace_slide_text', 'new_value', param_new_value, 'str')
        self.initialize('replace_slide_text', 'new_value', param_new_value)
        ok = False
        try:
            self.api.replace_slide_text(param_name, param_slide_index, param_old_value, param_new_value, param_ignore_case, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'replace_slide_text', 'new_value', param_new_value)
        except ValueError as ex:
            self.assert_value_error(ex, 'replace_slide_text', 'new_value', param_new_value)
        if ok:
            self.assert_no_exception('replace_slide_text', 'new_value')

    def test_replace_slide_text_invalid_ignore_case(self):
        """Test case for replace_slide_text with invalid ignore_case
        """
        param_name = self.get_test_value('replace_slide_text', 'name', 'str')
        param_slide_index = self.get_test_value('replace_slide_text', 'slide_index', 'int')
        param_old_value = self.get_test_value('replace_slide_text', 'old_value', 'str')
        param_new_value = self.get_test_value('replace_slide_text', 'new_value', 'str')
        param_ignore_case = self.get_test_value('replace_slide_text', 'ignore_case', 'bool')
        param_password = self.get_test_value('replace_slide_text', 'password', 'str')
        param_folder = self.get_test_value('replace_slide_text', 'folder', 'str')
        param_storage = self.get_test_value('replace_slide_text', 'storage', 'str')
        param_ignore_case = self.get_invalid_test_value('replace_slide_text', 'ignore_case', param_ignore_case, 'bool')
        self.initialize('replace_slide_text', 'ignore_case', param_ignore_case)
        ok = False
        try:
            self.api.replace_slide_text(param_name, param_slide_index, param_old_value, param_new_value, param_ignore_case, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'replace_slide_text', 'ignore_case', param_ignore_case)
        except ValueError as ex:
            self.assert_value_error(ex, 'replace_slide_text', 'ignore_case', param_ignore_case)
        if ok:
            self.assert_no_exception('replace_slide_text', 'ignore_case')

    def test_replace_slide_text_invalid_password(self):
        """Test case for replace_slide_text with invalid password
        """
        param_name = self.get_test_value('replace_slide_text', 'name', 'str')
        param_slide_index = self.get_test_value('replace_slide_text', 'slide_index', 'int')
        param_old_value = self.get_test_value('replace_slide_text', 'old_value', 'str')
        param_new_value = self.get_test_value('replace_slide_text', 'new_value', 'str')
        param_ignore_case = self.get_test_value('replace_slide_text', 'ignore_case', 'bool')
        param_password = self.get_test_value('replace_slide_text', 'password', 'str')
        param_folder = self.get_test_value('replace_slide_text', 'folder', 'str')
        param_storage = self.get_test_value('replace_slide_text', 'storage', 'str')
        param_password = self.get_invalid_test_value('replace_slide_text', 'password', param_password, 'str')
        self.initialize('replace_slide_text', 'password', param_password)
        ok = False
        try:
            self.api.replace_slide_text(param_name, param_slide_index, param_old_value, param_new_value, param_ignore_case, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'replace_slide_text', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'replace_slide_text', 'password', param_password)
        if ok:
            self.assert_no_exception('replace_slide_text', 'password')

    def test_replace_slide_text_invalid_folder(self):
        """Test case for replace_slide_text with invalid folder
        """
        param_name = self.get_test_value('replace_slide_text', 'name', 'str')
        param_slide_index = self.get_test_value('replace_slide_text', 'slide_index', 'int')
        param_old_value = self.get_test_value('replace_slide_text', 'old_value', 'str')
        param_new_value = self.get_test_value('replace_slide_text', 'new_value', 'str')
        param_ignore_case = self.get_test_value('replace_slide_text', 'ignore_case', 'bool')
        param_password = self.get_test_value('replace_slide_text', 'password', 'str')
        param_folder = self.get_test_value('replace_slide_text', 'folder', 'str')
        param_storage = self.get_test_value('replace_slide_text', 'storage', 'str')
        param_folder = self.get_invalid_test_value('replace_slide_text', 'folder', param_folder, 'str')
        self.initialize('replace_slide_text', 'folder', param_folder)
        ok = False
        try:
            self.api.replace_slide_text(param_name, param_slide_index, param_old_value, param_new_value, param_ignore_case, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'replace_slide_text', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'replace_slide_text', 'folder', param_folder)
        if ok:
            self.assert_no_exception('replace_slide_text', 'folder')

    def test_replace_slide_text_invalid_storage(self):
        """Test case for replace_slide_text with invalid storage
        """
        param_name = self.get_test_value('replace_slide_text', 'name', 'str')
        param_slide_index = self.get_test_value('replace_slide_text', 'slide_index', 'int')
        param_old_value = self.get_test_value('replace_slide_text', 'old_value', 'str')
        param_new_value = self.get_test_value('replace_slide_text', 'new_value', 'str')
        param_ignore_case = self.get_test_value('replace_slide_text', 'ignore_case', 'bool')
        param_password = self.get_test_value('replace_slide_text', 'password', 'str')
        param_folder = self.get_test_value('replace_slide_text', 'folder', 'str')
        param_storage = self.get_test_value('replace_slide_text', 'storage', 'str')
        param_storage = self.get_invalid_test_value('replace_slide_text', 'storage', param_storage, 'str')
        self.initialize('replace_slide_text', 'storage', param_storage)
        ok = False
        try:
            self.api.replace_slide_text(param_name, param_slide_index, param_old_value, param_new_value, param_ignore_case, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'replace_slide_text', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'replace_slide_text', 'storage', param_storage)
        if ok:
            self.assert_no_exception('replace_slide_text', 'storage')

    def test_replace_slide_text_online(self):
        """Test case for replace_slide_text_online
        """
        param_document = self.get_test_value('replace_slide_text_online', 'document', 'file')
        param_slide_index = self.get_test_value('replace_slide_text_online', 'slide_index', 'int')
        param_old_value = self.get_test_value('replace_slide_text_online', 'old_value', 'str')
        param_new_value = self.get_test_value('replace_slide_text_online', 'new_value', 'str')
        param_ignore_case = self.get_test_value('replace_slide_text_online', 'ignore_case', 'bool')
        param_password = self.get_test_value('replace_slide_text_online', 'password', 'str')
        self.initialize('replace_slide_text_online', None, None)
        response = self.api.replace_slide_text_online(param_document, param_slide_index, param_old_value, param_new_value, param_ignore_case, param_password)
        self.assertTrue(isinstance(response, str))
        self.assertTrue(len(response) > 0)

    def test_replace_slide_text_online_invalid_document(self):
        """Test case for replace_slide_text_online with invalid document
        """
        param_document = self.get_test_value('replace_slide_text_online', 'document', 'file')
        param_slide_index = self.get_test_value('replace_slide_text_online', 'slide_index', 'int')
        param_old_value = self.get_test_value('replace_slide_text_online', 'old_value', 'str')
        param_new_value = self.get_test_value('replace_slide_text_online', 'new_value', 'str')
        param_ignore_case = self.get_test_value('replace_slide_text_online', 'ignore_case', 'bool')
        param_password = self.get_test_value('replace_slide_text_online', 'password', 'str')
        param_document = self.get_invalid_test_value('replace_slide_text_online', 'document', param_document, 'file')
        self.initialize('replace_slide_text_online', 'document', param_document)
        ok = False
        try:
            self.api.replace_slide_text_online(param_document, param_slide_index, param_old_value, param_new_value, param_ignore_case, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'replace_slide_text_online', 'document', param_document)
        except ValueError as ex:
            self.assert_value_error(ex, 'replace_slide_text_online', 'document', param_document)
        if ok:
            self.assert_no_exception('replace_slide_text_online', 'document')

    def test_replace_slide_text_online_invalid_slide_index(self):
        """Test case for replace_slide_text_online with invalid slide_index
        """
        param_document = self.get_test_value('replace_slide_text_online', 'document', 'file')
        param_slide_index = self.get_test_value('replace_slide_text_online', 'slide_index', 'int')
        param_old_value = self.get_test_value('replace_slide_text_online', 'old_value', 'str')
        param_new_value = self.get_test_value('replace_slide_text_online', 'new_value', 'str')
        param_ignore_case = self.get_test_value('replace_slide_text_online', 'ignore_case', 'bool')
        param_password = self.get_test_value('replace_slide_text_online', 'password', 'str')
        param_slide_index = self.get_invalid_test_value('replace_slide_text_online', 'slide_index', param_slide_index, 'int')
        self.initialize('replace_slide_text_online', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.replace_slide_text_online(param_document, param_slide_index, param_old_value, param_new_value, param_ignore_case, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'replace_slide_text_online', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'replace_slide_text_online', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('replace_slide_text_online', 'slide_index')

    def test_replace_slide_text_online_invalid_old_value(self):
        """Test case for replace_slide_text_online with invalid old_value
        """
        param_document = self.get_test_value('replace_slide_text_online', 'document', 'file')
        param_slide_index = self.get_test_value('replace_slide_text_online', 'slide_index', 'int')
        param_old_value = self.get_test_value('replace_slide_text_online', 'old_value', 'str')
        param_new_value = self.get_test_value('replace_slide_text_online', 'new_value', 'str')
        param_ignore_case = self.get_test_value('replace_slide_text_online', 'ignore_case', 'bool')
        param_password = self.get_test_value('replace_slide_text_online', 'password', 'str')
        param_old_value = self.get_invalid_test_value('replace_slide_text_online', 'old_value', param_old_value, 'str')
        self.initialize('replace_slide_text_online', 'old_value', param_old_value)
        ok = False
        try:
            self.api.replace_slide_text_online(param_document, param_slide_index, param_old_value, param_new_value, param_ignore_case, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'replace_slide_text_online', 'old_value', param_old_value)
        except ValueError as ex:
            self.assert_value_error(ex, 'replace_slide_text_online', 'old_value', param_old_value)
        if ok:
            self.assert_no_exception('replace_slide_text_online', 'old_value')

    def test_replace_slide_text_online_invalid_new_value(self):
        """Test case for replace_slide_text_online with invalid new_value
        """
        param_document = self.get_test_value('replace_slide_text_online', 'document', 'file')
        param_slide_index = self.get_test_value('replace_slide_text_online', 'slide_index', 'int')
        param_old_value = self.get_test_value('replace_slide_text_online', 'old_value', 'str')
        param_new_value = self.get_test_value('replace_slide_text_online', 'new_value', 'str')
        param_ignore_case = self.get_test_value('replace_slide_text_online', 'ignore_case', 'bool')
        param_password = self.get_test_value('replace_slide_text_online', 'password', 'str')
        param_new_value = self.get_invalid_test_value('replace_slide_text_online', 'new_value', param_new_value, 'str')
        self.initialize('replace_slide_text_online', 'new_value', param_new_value)
        ok = False
        try:
            self.api.replace_slide_text_online(param_document, param_slide_index, param_old_value, param_new_value, param_ignore_case, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'replace_slide_text_online', 'new_value', param_new_value)
        except ValueError as ex:
            self.assert_value_error(ex, 'replace_slide_text_online', 'new_value', param_new_value)
        if ok:
            self.assert_no_exception('replace_slide_text_online', 'new_value')

    def test_replace_slide_text_online_invalid_ignore_case(self):
        """Test case for replace_slide_text_online with invalid ignore_case
        """
        param_document = self.get_test_value('replace_slide_text_online', 'document', 'file')
        param_slide_index = self.get_test_value('replace_slide_text_online', 'slide_index', 'int')
        param_old_value = self.get_test_value('replace_slide_text_online', 'old_value', 'str')
        param_new_value = self.get_test_value('replace_slide_text_online', 'new_value', 'str')
        param_ignore_case = self.get_test_value('replace_slide_text_online', 'ignore_case', 'bool')
        param_password = self.get_test_value('replace_slide_text_online', 'password', 'str')
        param_ignore_case = self.get_invalid_test_value('replace_slide_text_online', 'ignore_case', param_ignore_case, 'bool')
        self.initialize('replace_slide_text_online', 'ignore_case', param_ignore_case)
        ok = False
        try:
            self.api.replace_slide_text_online(param_document, param_slide_index, param_old_value, param_new_value, param_ignore_case, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'replace_slide_text_online', 'ignore_case', param_ignore_case)
        except ValueError as ex:
            self.assert_value_error(ex, 'replace_slide_text_online', 'ignore_case', param_ignore_case)
        if ok:
            self.assert_no_exception('replace_slide_text_online', 'ignore_case')

    def test_replace_slide_text_online_invalid_password(self):
        """Test case for replace_slide_text_online with invalid password
        """
        param_document = self.get_test_value('replace_slide_text_online', 'document', 'file')
        param_slide_index = self.get_test_value('replace_slide_text_online', 'slide_index', 'int')
        param_old_value = self.get_test_value('replace_slide_text_online', 'old_value', 'str')
        param_new_value = self.get_test_value('replace_slide_text_online', 'new_value', 'str')
        param_ignore_case = self.get_test_value('replace_slide_text_online', 'ignore_case', 'bool')
        param_password = self.get_test_value('replace_slide_text_online', 'password', 'str')
        param_password = self.get_invalid_test_value('replace_slide_text_online', 'password', param_password, 'str')
        self.initialize('replace_slide_text_online', 'password', param_password)
        ok = False
        try:
            self.api.replace_slide_text_online(param_document, param_slide_index, param_old_value, param_new_value, param_ignore_case, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'replace_slide_text_online', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'replace_slide_text_online', 'password', param_password)
        if ok:
            self.assert_no_exception('replace_slide_text_online', 'password')

    def test_save_portion_as_math_ml(self):
        """Test case for save_portion_as_math_ml
        """
        param_name = self.get_test_value('save_portion_as_math_ml', 'name', 'str')
        param_slide_index = self.get_test_value('save_portion_as_math_ml', 'slide_index', 'int')
        param_shape_index = self.get_test_value('save_portion_as_math_ml', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('save_portion_as_math_ml', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('save_portion_as_math_ml', 'portion_index', 'int')
        param_out_path = self.get_test_value('save_portion_as_math_ml', 'out_path', 'str')
        param_password = self.get_test_value('save_portion_as_math_ml', 'password', 'str')
        param_folder = self.get_test_value('save_portion_as_math_ml', 'folder', 'str')
        param_storage = self.get_test_value('save_portion_as_math_ml', 'storage', 'str')
        self.initialize('save_portion_as_math_ml', None, None)
        response = self.api.save_portion_as_math_ml(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portion_index, param_out_path, param_password, param_folder, param_storage)
        self.assertIsNone(response)

    def test_save_portion_as_math_ml_invalid_name(self):
        """Test case for save_portion_as_math_ml with invalid name
        """
        param_name = self.get_test_value('save_portion_as_math_ml', 'name', 'str')
        param_slide_index = self.get_test_value('save_portion_as_math_ml', 'slide_index', 'int')
        param_shape_index = self.get_test_value('save_portion_as_math_ml', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('save_portion_as_math_ml', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('save_portion_as_math_ml', 'portion_index', 'int')
        param_out_path = self.get_test_value('save_portion_as_math_ml', 'out_path', 'str')
        param_password = self.get_test_value('save_portion_as_math_ml', 'password', 'str')
        param_folder = self.get_test_value('save_portion_as_math_ml', 'folder', 'str')
        param_storage = self.get_test_value('save_portion_as_math_ml', 'storage', 'str')
        param_name = self.get_invalid_test_value('save_portion_as_math_ml', 'name', param_name, 'str')
        self.initialize('save_portion_as_math_ml', 'name', param_name)
        ok = False
        try:
            self.api.save_portion_as_math_ml(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portion_index, param_out_path, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_portion_as_math_ml', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_portion_as_math_ml', 'name', param_name)
        if ok:
            self.assert_no_exception('save_portion_as_math_ml', 'name')

    def test_save_portion_as_math_ml_invalid_slide_index(self):
        """Test case for save_portion_as_math_ml with invalid slide_index
        """
        param_name = self.get_test_value('save_portion_as_math_ml', 'name', 'str')
        param_slide_index = self.get_test_value('save_portion_as_math_ml', 'slide_index', 'int')
        param_shape_index = self.get_test_value('save_portion_as_math_ml', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('save_portion_as_math_ml', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('save_portion_as_math_ml', 'portion_index', 'int')
        param_out_path = self.get_test_value('save_portion_as_math_ml', 'out_path', 'str')
        param_password = self.get_test_value('save_portion_as_math_ml', 'password', 'str')
        param_folder = self.get_test_value('save_portion_as_math_ml', 'folder', 'str')
        param_storage = self.get_test_value('save_portion_as_math_ml', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('save_portion_as_math_ml', 'slide_index', param_slide_index, 'int')
        self.initialize('save_portion_as_math_ml', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.save_portion_as_math_ml(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portion_index, param_out_path, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_portion_as_math_ml', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_portion_as_math_ml', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('save_portion_as_math_ml', 'slide_index')

    def test_save_portion_as_math_ml_invalid_shape_index(self):
        """Test case for save_portion_as_math_ml with invalid shape_index
        """
        param_name = self.get_test_value('save_portion_as_math_ml', 'name', 'str')
        param_slide_index = self.get_test_value('save_portion_as_math_ml', 'slide_index', 'int')
        param_shape_index = self.get_test_value('save_portion_as_math_ml', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('save_portion_as_math_ml', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('save_portion_as_math_ml', 'portion_index', 'int')
        param_out_path = self.get_test_value('save_portion_as_math_ml', 'out_path', 'str')
        param_password = self.get_test_value('save_portion_as_math_ml', 'password', 'str')
        param_folder = self.get_test_value('save_portion_as_math_ml', 'folder', 'str')
        param_storage = self.get_test_value('save_portion_as_math_ml', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('save_portion_as_math_ml', 'shape_index', param_shape_index, 'int')
        self.initialize('save_portion_as_math_ml', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.save_portion_as_math_ml(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portion_index, param_out_path, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_portion_as_math_ml', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_portion_as_math_ml', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('save_portion_as_math_ml', 'shape_index')

    def test_save_portion_as_math_ml_invalid_paragraph_index(self):
        """Test case for save_portion_as_math_ml with invalid paragraph_index
        """
        param_name = self.get_test_value('save_portion_as_math_ml', 'name', 'str')
        param_slide_index = self.get_test_value('save_portion_as_math_ml', 'slide_index', 'int')
        param_shape_index = self.get_test_value('save_portion_as_math_ml', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('save_portion_as_math_ml', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('save_portion_as_math_ml', 'portion_index', 'int')
        param_out_path = self.get_test_value('save_portion_as_math_ml', 'out_path', 'str')
        param_password = self.get_test_value('save_portion_as_math_ml', 'password', 'str')
        param_folder = self.get_test_value('save_portion_as_math_ml', 'folder', 'str')
        param_storage = self.get_test_value('save_portion_as_math_ml', 'storage', 'str')
        param_paragraph_index = self.get_invalid_test_value('save_portion_as_math_ml', 'paragraph_index', param_paragraph_index, 'int')
        self.initialize('save_portion_as_math_ml', 'paragraph_index', param_paragraph_index)
        ok = False
        try:
            self.api.save_portion_as_math_ml(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portion_index, param_out_path, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_portion_as_math_ml', 'paragraph_index', param_paragraph_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_portion_as_math_ml', 'paragraph_index', param_paragraph_index)
        if ok:
            self.assert_no_exception('save_portion_as_math_ml', 'paragraph_index')

    def test_save_portion_as_math_ml_invalid_portion_index(self):
        """Test case for save_portion_as_math_ml with invalid portion_index
        """
        param_name = self.get_test_value('save_portion_as_math_ml', 'name', 'str')
        param_slide_index = self.get_test_value('save_portion_as_math_ml', 'slide_index', 'int')
        param_shape_index = self.get_test_value('save_portion_as_math_ml', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('save_portion_as_math_ml', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('save_portion_as_math_ml', 'portion_index', 'int')
        param_out_path = self.get_test_value('save_portion_as_math_ml', 'out_path', 'str')
        param_password = self.get_test_value('save_portion_as_math_ml', 'password', 'str')
        param_folder = self.get_test_value('save_portion_as_math_ml', 'folder', 'str')
        param_storage = self.get_test_value('save_portion_as_math_ml', 'storage', 'str')
        param_portion_index = self.get_invalid_test_value('save_portion_as_math_ml', 'portion_index', param_portion_index, 'int')
        self.initialize('save_portion_as_math_ml', 'portion_index', param_portion_index)
        ok = False
        try:
            self.api.save_portion_as_math_ml(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portion_index, param_out_path, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_portion_as_math_ml', 'portion_index', param_portion_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_portion_as_math_ml', 'portion_index', param_portion_index)
        if ok:
            self.assert_no_exception('save_portion_as_math_ml', 'portion_index')

    def test_save_portion_as_math_ml_invalid_out_path(self):
        """Test case for save_portion_as_math_ml with invalid out_path
        """
        param_name = self.get_test_value('save_portion_as_math_ml', 'name', 'str')
        param_slide_index = self.get_test_value('save_portion_as_math_ml', 'slide_index', 'int')
        param_shape_index = self.get_test_value('save_portion_as_math_ml', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('save_portion_as_math_ml', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('save_portion_as_math_ml', 'portion_index', 'int')
        param_out_path = self.get_test_value('save_portion_as_math_ml', 'out_path', 'str')
        param_password = self.get_test_value('save_portion_as_math_ml', 'password', 'str')
        param_folder = self.get_test_value('save_portion_as_math_ml', 'folder', 'str')
        param_storage = self.get_test_value('save_portion_as_math_ml', 'storage', 'str')
        param_out_path = self.get_invalid_test_value('save_portion_as_math_ml', 'out_path', param_out_path, 'str')
        self.initialize('save_portion_as_math_ml', 'out_path', param_out_path)
        ok = False
        try:
            self.api.save_portion_as_math_ml(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portion_index, param_out_path, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_portion_as_math_ml', 'out_path', param_out_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_portion_as_math_ml', 'out_path', param_out_path)
        if ok:
            self.assert_no_exception('save_portion_as_math_ml', 'out_path')

    def test_save_portion_as_math_ml_invalid_password(self):
        """Test case for save_portion_as_math_ml with invalid password
        """
        param_name = self.get_test_value('save_portion_as_math_ml', 'name', 'str')
        param_slide_index = self.get_test_value('save_portion_as_math_ml', 'slide_index', 'int')
        param_shape_index = self.get_test_value('save_portion_as_math_ml', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('save_portion_as_math_ml', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('save_portion_as_math_ml', 'portion_index', 'int')
        param_out_path = self.get_test_value('save_portion_as_math_ml', 'out_path', 'str')
        param_password = self.get_test_value('save_portion_as_math_ml', 'password', 'str')
        param_folder = self.get_test_value('save_portion_as_math_ml', 'folder', 'str')
        param_storage = self.get_test_value('save_portion_as_math_ml', 'storage', 'str')
        param_password = self.get_invalid_test_value('save_portion_as_math_ml', 'password', param_password, 'str')
        self.initialize('save_portion_as_math_ml', 'password', param_password)
        ok = False
        try:
            self.api.save_portion_as_math_ml(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portion_index, param_out_path, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_portion_as_math_ml', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_portion_as_math_ml', 'password', param_password)
        if ok:
            self.assert_no_exception('save_portion_as_math_ml', 'password')

    def test_save_portion_as_math_ml_invalid_folder(self):
        """Test case for save_portion_as_math_ml with invalid folder
        """
        param_name = self.get_test_value('save_portion_as_math_ml', 'name', 'str')
        param_slide_index = self.get_test_value('save_portion_as_math_ml', 'slide_index', 'int')
        param_shape_index = self.get_test_value('save_portion_as_math_ml', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('save_portion_as_math_ml', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('save_portion_as_math_ml', 'portion_index', 'int')
        param_out_path = self.get_test_value('save_portion_as_math_ml', 'out_path', 'str')
        param_password = self.get_test_value('save_portion_as_math_ml', 'password', 'str')
        param_folder = self.get_test_value('save_portion_as_math_ml', 'folder', 'str')
        param_storage = self.get_test_value('save_portion_as_math_ml', 'storage', 'str')
        param_folder = self.get_invalid_test_value('save_portion_as_math_ml', 'folder', param_folder, 'str')
        self.initialize('save_portion_as_math_ml', 'folder', param_folder)
        ok = False
        try:
            self.api.save_portion_as_math_ml(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portion_index, param_out_path, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_portion_as_math_ml', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_portion_as_math_ml', 'folder', param_folder)
        if ok:
            self.assert_no_exception('save_portion_as_math_ml', 'folder')

    def test_save_portion_as_math_ml_invalid_storage(self):
        """Test case for save_portion_as_math_ml with invalid storage
        """
        param_name = self.get_test_value('save_portion_as_math_ml', 'name', 'str')
        param_slide_index = self.get_test_value('save_portion_as_math_ml', 'slide_index', 'int')
        param_shape_index = self.get_test_value('save_portion_as_math_ml', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('save_portion_as_math_ml', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('save_portion_as_math_ml', 'portion_index', 'int')
        param_out_path = self.get_test_value('save_portion_as_math_ml', 'out_path', 'str')
        param_password = self.get_test_value('save_portion_as_math_ml', 'password', 'str')
        param_folder = self.get_test_value('save_portion_as_math_ml', 'folder', 'str')
        param_storage = self.get_test_value('save_portion_as_math_ml', 'storage', 'str')
        param_storage = self.get_invalid_test_value('save_portion_as_math_ml', 'storage', param_storage, 'str')
        self.initialize('save_portion_as_math_ml', 'storage', param_storage)
        ok = False
        try:
            self.api.save_portion_as_math_ml(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portion_index, param_out_path, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_portion_as_math_ml', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_portion_as_math_ml', 'storage', param_storage)
        if ok:
            self.assert_no_exception('save_portion_as_math_ml', 'storage')

    def test_save_presentation(self):
        """Test case for save_presentation
        """
        param_name = self.get_test_value('save_presentation', 'name', 'str')
        param_format = self.get_test_value('save_presentation', 'format', 'str')
        param_out_path = self.get_test_value('save_presentation', 'out_path', 'str')
        param_options = self.get_test_value('save_presentation', 'options', 'ExportOptions')
        param_password = self.get_test_value('save_presentation', 'password', 'str')
        param_folder = self.get_test_value('save_presentation', 'folder', 'str')
        param_storage = self.get_test_value('save_presentation', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_presentation', 'fonts_folder', 'str')
        param_slides = self.get_test_value('save_presentation', 'slides', 'list[int]')
        self.initialize('save_presentation', None, None)
        response = self.api.save_presentation(param_name, param_format, param_out_path, param_options, param_password, param_folder, param_storage, param_fonts_folder, param_slides)
        self.assertIsNone(response)

    def test_save_presentation_invalid_name(self):
        """Test case for save_presentation with invalid name
        """
        param_name = self.get_test_value('save_presentation', 'name', 'str')
        param_format = self.get_test_value('save_presentation', 'format', 'str')
        param_out_path = self.get_test_value('save_presentation', 'out_path', 'str')
        param_options = self.get_test_value('save_presentation', 'options', 'ExportOptions')
        param_password = self.get_test_value('save_presentation', 'password', 'str')
        param_folder = self.get_test_value('save_presentation', 'folder', 'str')
        param_storage = self.get_test_value('save_presentation', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_presentation', 'fonts_folder', 'str')
        param_slides = self.get_test_value('save_presentation', 'slides', 'list[int]')
        param_name = self.get_invalid_test_value('save_presentation', 'name', param_name, 'str')
        self.initialize('save_presentation', 'name', param_name)
        ok = False
        try:
            self.api.save_presentation(param_name, param_format, param_out_path, param_options, param_password, param_folder, param_storage, param_fonts_folder, param_slides)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_presentation', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_presentation', 'name', param_name)
        if ok:
            self.assert_no_exception('save_presentation', 'name')

    def test_save_presentation_invalid_format(self):
        """Test case for save_presentation with invalid format
        """
        param_name = self.get_test_value('save_presentation', 'name', 'str')
        param_format = self.get_test_value('save_presentation', 'format', 'str')
        param_out_path = self.get_test_value('save_presentation', 'out_path', 'str')
        param_options = self.get_test_value('save_presentation', 'options', 'ExportOptions')
        param_password = self.get_test_value('save_presentation', 'password', 'str')
        param_folder = self.get_test_value('save_presentation', 'folder', 'str')
        param_storage = self.get_test_value('save_presentation', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_presentation', 'fonts_folder', 'str')
        param_slides = self.get_test_value('save_presentation', 'slides', 'list[int]')
        param_format = self.get_invalid_test_value('save_presentation', 'format', param_format, 'str')
        self.initialize('save_presentation', 'format', param_format)
        ok = False
        try:
            self.api.save_presentation(param_name, param_format, param_out_path, param_options, param_password, param_folder, param_storage, param_fonts_folder, param_slides)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_presentation', 'format', param_format)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_presentation', 'format', param_format)
        if ok:
            self.assert_no_exception('save_presentation', 'format')

    def test_save_presentation_invalid_out_path(self):
        """Test case for save_presentation with invalid out_path
        """
        param_name = self.get_test_value('save_presentation', 'name', 'str')
        param_format = self.get_test_value('save_presentation', 'format', 'str')
        param_out_path = self.get_test_value('save_presentation', 'out_path', 'str')
        param_options = self.get_test_value('save_presentation', 'options', 'ExportOptions')
        param_password = self.get_test_value('save_presentation', 'password', 'str')
        param_folder = self.get_test_value('save_presentation', 'folder', 'str')
        param_storage = self.get_test_value('save_presentation', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_presentation', 'fonts_folder', 'str')
        param_slides = self.get_test_value('save_presentation', 'slides', 'list[int]')
        param_out_path = self.get_invalid_test_value('save_presentation', 'out_path', param_out_path, 'str')
        self.initialize('save_presentation', 'out_path', param_out_path)
        ok = False
        try:
            self.api.save_presentation(param_name, param_format, param_out_path, param_options, param_password, param_folder, param_storage, param_fonts_folder, param_slides)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_presentation', 'out_path', param_out_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_presentation', 'out_path', param_out_path)
        if ok:
            self.assert_no_exception('save_presentation', 'out_path')

    def test_save_presentation_invalid_options(self):
        """Test case for save_presentation with invalid options
        """
        param_name = self.get_test_value('save_presentation', 'name', 'str')
        param_format = self.get_test_value('save_presentation', 'format', 'str')
        param_out_path = self.get_test_value('save_presentation', 'out_path', 'str')
        param_options = self.get_test_value('save_presentation', 'options', 'ExportOptions')
        param_password = self.get_test_value('save_presentation', 'password', 'str')
        param_folder = self.get_test_value('save_presentation', 'folder', 'str')
        param_storage = self.get_test_value('save_presentation', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_presentation', 'fonts_folder', 'str')
        param_slides = self.get_test_value('save_presentation', 'slides', 'list[int]')
        param_options = self.get_invalid_test_value('save_presentation', 'options', param_options, 'ExportOptions')
        self.initialize('save_presentation', 'options', param_options)
        ok = False
        try:
            self.api.save_presentation(param_name, param_format, param_out_path, param_options, param_password, param_folder, param_storage, param_fonts_folder, param_slides)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_presentation', 'options', param_options)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_presentation', 'options', param_options)
        if ok:
            self.assert_no_exception('save_presentation', 'options')

    def test_save_presentation_invalid_password(self):
        """Test case for save_presentation with invalid password
        """
        param_name = self.get_test_value('save_presentation', 'name', 'str')
        param_format = self.get_test_value('save_presentation', 'format', 'str')
        param_out_path = self.get_test_value('save_presentation', 'out_path', 'str')
        param_options = self.get_test_value('save_presentation', 'options', 'ExportOptions')
        param_password = self.get_test_value('save_presentation', 'password', 'str')
        param_folder = self.get_test_value('save_presentation', 'folder', 'str')
        param_storage = self.get_test_value('save_presentation', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_presentation', 'fonts_folder', 'str')
        param_slides = self.get_test_value('save_presentation', 'slides', 'list[int]')
        param_password = self.get_invalid_test_value('save_presentation', 'password', param_password, 'str')
        self.initialize('save_presentation', 'password', param_password)
        ok = False
        try:
            self.api.save_presentation(param_name, param_format, param_out_path, param_options, param_password, param_folder, param_storage, param_fonts_folder, param_slides)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_presentation', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_presentation', 'password', param_password)
        if ok:
            self.assert_no_exception('save_presentation', 'password')

    def test_save_presentation_invalid_folder(self):
        """Test case for save_presentation with invalid folder
        """
        param_name = self.get_test_value('save_presentation', 'name', 'str')
        param_format = self.get_test_value('save_presentation', 'format', 'str')
        param_out_path = self.get_test_value('save_presentation', 'out_path', 'str')
        param_options = self.get_test_value('save_presentation', 'options', 'ExportOptions')
        param_password = self.get_test_value('save_presentation', 'password', 'str')
        param_folder = self.get_test_value('save_presentation', 'folder', 'str')
        param_storage = self.get_test_value('save_presentation', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_presentation', 'fonts_folder', 'str')
        param_slides = self.get_test_value('save_presentation', 'slides', 'list[int]')
        param_folder = self.get_invalid_test_value('save_presentation', 'folder', param_folder, 'str')
        self.initialize('save_presentation', 'folder', param_folder)
        ok = False
        try:
            self.api.save_presentation(param_name, param_format, param_out_path, param_options, param_password, param_folder, param_storage, param_fonts_folder, param_slides)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_presentation', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_presentation', 'folder', param_folder)
        if ok:
            self.assert_no_exception('save_presentation', 'folder')

    def test_save_presentation_invalid_storage(self):
        """Test case for save_presentation with invalid storage
        """
        param_name = self.get_test_value('save_presentation', 'name', 'str')
        param_format = self.get_test_value('save_presentation', 'format', 'str')
        param_out_path = self.get_test_value('save_presentation', 'out_path', 'str')
        param_options = self.get_test_value('save_presentation', 'options', 'ExportOptions')
        param_password = self.get_test_value('save_presentation', 'password', 'str')
        param_folder = self.get_test_value('save_presentation', 'folder', 'str')
        param_storage = self.get_test_value('save_presentation', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_presentation', 'fonts_folder', 'str')
        param_slides = self.get_test_value('save_presentation', 'slides', 'list[int]')
        param_storage = self.get_invalid_test_value('save_presentation', 'storage', param_storage, 'str')
        self.initialize('save_presentation', 'storage', param_storage)
        ok = False
        try:
            self.api.save_presentation(param_name, param_format, param_out_path, param_options, param_password, param_folder, param_storage, param_fonts_folder, param_slides)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_presentation', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_presentation', 'storage', param_storage)
        if ok:
            self.assert_no_exception('save_presentation', 'storage')

    def test_save_presentation_invalid_fonts_folder(self):
        """Test case for save_presentation with invalid fonts_folder
        """
        param_name = self.get_test_value('save_presentation', 'name', 'str')
        param_format = self.get_test_value('save_presentation', 'format', 'str')
        param_out_path = self.get_test_value('save_presentation', 'out_path', 'str')
        param_options = self.get_test_value('save_presentation', 'options', 'ExportOptions')
        param_password = self.get_test_value('save_presentation', 'password', 'str')
        param_folder = self.get_test_value('save_presentation', 'folder', 'str')
        param_storage = self.get_test_value('save_presentation', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_presentation', 'fonts_folder', 'str')
        param_slides = self.get_test_value('save_presentation', 'slides', 'list[int]')
        param_fonts_folder = self.get_invalid_test_value('save_presentation', 'fonts_folder', param_fonts_folder, 'str')
        self.initialize('save_presentation', 'fonts_folder', param_fonts_folder)
        ok = False
        try:
            self.api.save_presentation(param_name, param_format, param_out_path, param_options, param_password, param_folder, param_storage, param_fonts_folder, param_slides)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_presentation', 'fonts_folder', param_fonts_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_presentation', 'fonts_folder', param_fonts_folder)
        if ok:
            self.assert_no_exception('save_presentation', 'fonts_folder')

    def test_save_presentation_invalid_slides(self):
        """Test case for save_presentation with invalid slides
        """
        param_name = self.get_test_value('save_presentation', 'name', 'str')
        param_format = self.get_test_value('save_presentation', 'format', 'str')
        param_out_path = self.get_test_value('save_presentation', 'out_path', 'str')
        param_options = self.get_test_value('save_presentation', 'options', 'ExportOptions')
        param_password = self.get_test_value('save_presentation', 'password', 'str')
        param_folder = self.get_test_value('save_presentation', 'folder', 'str')
        param_storage = self.get_test_value('save_presentation', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_presentation', 'fonts_folder', 'str')
        param_slides = self.get_test_value('save_presentation', 'slides', 'list[int]')
        param_slides = self.get_invalid_test_value('save_presentation', 'slides', param_slides, 'list[int]')
        self.initialize('save_presentation', 'slides', param_slides)
        ok = False
        try:
            self.api.save_presentation(param_name, param_format, param_out_path, param_options, param_password, param_folder, param_storage, param_fonts_folder, param_slides)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_presentation', 'slides', param_slides)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_presentation', 'slides', param_slides)
        if ok:
            self.assert_no_exception('save_presentation', 'slides')

    def test_save_shape(self):
        """Test case for save_shape
        """
        param_name = self.get_test_value('save_shape', 'name', 'str')
        param_slide_index = self.get_test_value('save_shape', 'slide_index', 'int')
        param_shape_index = self.get_test_value('save_shape', 'shape_index', 'int')
        param_format = self.get_test_value('save_shape', 'format', 'str')
        param_out_path = self.get_test_value('save_shape', 'out_path', 'str')
        param_options = self.get_test_value('save_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_shape', 'bounds', 'str')
        param_password = self.get_test_value('save_shape', 'password', 'str')
        param_folder = self.get_test_value('save_shape', 'folder', 'str')
        param_storage = self.get_test_value('save_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_shape', 'fonts_folder', 'str')
        self.initialize('save_shape', None, None)
        response = self.api.save_shape(param_name, param_slide_index, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
        self.assertIsNone(response)

    def test_save_shape_invalid_name(self):
        """Test case for save_shape with invalid name
        """
        param_name = self.get_test_value('save_shape', 'name', 'str')
        param_slide_index = self.get_test_value('save_shape', 'slide_index', 'int')
        param_shape_index = self.get_test_value('save_shape', 'shape_index', 'int')
        param_format = self.get_test_value('save_shape', 'format', 'str')
        param_out_path = self.get_test_value('save_shape', 'out_path', 'str')
        param_options = self.get_test_value('save_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_shape', 'bounds', 'str')
        param_password = self.get_test_value('save_shape', 'password', 'str')
        param_folder = self.get_test_value('save_shape', 'folder', 'str')
        param_storage = self.get_test_value('save_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_shape', 'fonts_folder', 'str')
        param_name = self.get_invalid_test_value('save_shape', 'name', param_name, 'str')
        self.initialize('save_shape', 'name', param_name)
        ok = False
        try:
            self.api.save_shape(param_name, param_slide_index, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_shape', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_shape', 'name', param_name)
        if ok:
            self.assert_no_exception('save_shape', 'name')

    def test_save_shape_invalid_slide_index(self):
        """Test case for save_shape with invalid slide_index
        """
        param_name = self.get_test_value('save_shape', 'name', 'str')
        param_slide_index = self.get_test_value('save_shape', 'slide_index', 'int')
        param_shape_index = self.get_test_value('save_shape', 'shape_index', 'int')
        param_format = self.get_test_value('save_shape', 'format', 'str')
        param_out_path = self.get_test_value('save_shape', 'out_path', 'str')
        param_options = self.get_test_value('save_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_shape', 'bounds', 'str')
        param_password = self.get_test_value('save_shape', 'password', 'str')
        param_folder = self.get_test_value('save_shape', 'folder', 'str')
        param_storage = self.get_test_value('save_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_shape', 'fonts_folder', 'str')
        param_slide_index = self.get_invalid_test_value('save_shape', 'slide_index', param_slide_index, 'int')
        self.initialize('save_shape', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.save_shape(param_name, param_slide_index, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_shape', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_shape', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('save_shape', 'slide_index')

    def test_save_shape_invalid_shape_index(self):
        """Test case for save_shape with invalid shape_index
        """
        param_name = self.get_test_value('save_shape', 'name', 'str')
        param_slide_index = self.get_test_value('save_shape', 'slide_index', 'int')
        param_shape_index = self.get_test_value('save_shape', 'shape_index', 'int')
        param_format = self.get_test_value('save_shape', 'format', 'str')
        param_out_path = self.get_test_value('save_shape', 'out_path', 'str')
        param_options = self.get_test_value('save_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_shape', 'bounds', 'str')
        param_password = self.get_test_value('save_shape', 'password', 'str')
        param_folder = self.get_test_value('save_shape', 'folder', 'str')
        param_storage = self.get_test_value('save_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_shape', 'fonts_folder', 'str')
        param_shape_index = self.get_invalid_test_value('save_shape', 'shape_index', param_shape_index, 'int')
        self.initialize('save_shape', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.save_shape(param_name, param_slide_index, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_shape', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_shape', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('save_shape', 'shape_index')

    def test_save_shape_invalid_format(self):
        """Test case for save_shape with invalid format
        """
        param_name = self.get_test_value('save_shape', 'name', 'str')
        param_slide_index = self.get_test_value('save_shape', 'slide_index', 'int')
        param_shape_index = self.get_test_value('save_shape', 'shape_index', 'int')
        param_format = self.get_test_value('save_shape', 'format', 'str')
        param_out_path = self.get_test_value('save_shape', 'out_path', 'str')
        param_options = self.get_test_value('save_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_shape', 'bounds', 'str')
        param_password = self.get_test_value('save_shape', 'password', 'str')
        param_folder = self.get_test_value('save_shape', 'folder', 'str')
        param_storage = self.get_test_value('save_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_shape', 'fonts_folder', 'str')
        param_format = self.get_invalid_test_value('save_shape', 'format', param_format, 'str')
        self.initialize('save_shape', 'format', param_format)
        ok = False
        try:
            self.api.save_shape(param_name, param_slide_index, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_shape', 'format', param_format)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_shape', 'format', param_format)
        if ok:
            self.assert_no_exception('save_shape', 'format')

    def test_save_shape_invalid_out_path(self):
        """Test case for save_shape with invalid out_path
        """
        param_name = self.get_test_value('save_shape', 'name', 'str')
        param_slide_index = self.get_test_value('save_shape', 'slide_index', 'int')
        param_shape_index = self.get_test_value('save_shape', 'shape_index', 'int')
        param_format = self.get_test_value('save_shape', 'format', 'str')
        param_out_path = self.get_test_value('save_shape', 'out_path', 'str')
        param_options = self.get_test_value('save_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_shape', 'bounds', 'str')
        param_password = self.get_test_value('save_shape', 'password', 'str')
        param_folder = self.get_test_value('save_shape', 'folder', 'str')
        param_storage = self.get_test_value('save_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_shape', 'fonts_folder', 'str')
        param_out_path = self.get_invalid_test_value('save_shape', 'out_path', param_out_path, 'str')
        self.initialize('save_shape', 'out_path', param_out_path)
        ok = False
        try:
            self.api.save_shape(param_name, param_slide_index, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_shape', 'out_path', param_out_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_shape', 'out_path', param_out_path)
        if ok:
            self.assert_no_exception('save_shape', 'out_path')

    def test_save_shape_invalid_options(self):
        """Test case for save_shape with invalid options
        """
        param_name = self.get_test_value('save_shape', 'name', 'str')
        param_slide_index = self.get_test_value('save_shape', 'slide_index', 'int')
        param_shape_index = self.get_test_value('save_shape', 'shape_index', 'int')
        param_format = self.get_test_value('save_shape', 'format', 'str')
        param_out_path = self.get_test_value('save_shape', 'out_path', 'str')
        param_options = self.get_test_value('save_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_shape', 'bounds', 'str')
        param_password = self.get_test_value('save_shape', 'password', 'str')
        param_folder = self.get_test_value('save_shape', 'folder', 'str')
        param_storage = self.get_test_value('save_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_shape', 'fonts_folder', 'str')
        param_options = self.get_invalid_test_value('save_shape', 'options', param_options, 'IShapeExportOptions')
        self.initialize('save_shape', 'options', param_options)
        ok = False
        try:
            self.api.save_shape(param_name, param_slide_index, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_shape', 'options', param_options)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_shape', 'options', param_options)
        if ok:
            self.assert_no_exception('save_shape', 'options')

    def test_save_shape_invalid_scale_x(self):
        """Test case for save_shape with invalid scale_x
        """
        param_name = self.get_test_value('save_shape', 'name', 'str')
        param_slide_index = self.get_test_value('save_shape', 'slide_index', 'int')
        param_shape_index = self.get_test_value('save_shape', 'shape_index', 'int')
        param_format = self.get_test_value('save_shape', 'format', 'str')
        param_out_path = self.get_test_value('save_shape', 'out_path', 'str')
        param_options = self.get_test_value('save_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_shape', 'bounds', 'str')
        param_password = self.get_test_value('save_shape', 'password', 'str')
        param_folder = self.get_test_value('save_shape', 'folder', 'str')
        param_storage = self.get_test_value('save_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_shape', 'fonts_folder', 'str')
        param_scale_x = self.get_invalid_test_value('save_shape', 'scale_x', param_scale_x, 'float')
        self.initialize('save_shape', 'scale_x', param_scale_x)
        ok = False
        try:
            self.api.save_shape(param_name, param_slide_index, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_shape', 'scale_x', param_scale_x)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_shape', 'scale_x', param_scale_x)
        if ok:
            self.assert_no_exception('save_shape', 'scale_x')

    def test_save_shape_invalid_scale_y(self):
        """Test case for save_shape with invalid scale_y
        """
        param_name = self.get_test_value('save_shape', 'name', 'str')
        param_slide_index = self.get_test_value('save_shape', 'slide_index', 'int')
        param_shape_index = self.get_test_value('save_shape', 'shape_index', 'int')
        param_format = self.get_test_value('save_shape', 'format', 'str')
        param_out_path = self.get_test_value('save_shape', 'out_path', 'str')
        param_options = self.get_test_value('save_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_shape', 'bounds', 'str')
        param_password = self.get_test_value('save_shape', 'password', 'str')
        param_folder = self.get_test_value('save_shape', 'folder', 'str')
        param_storage = self.get_test_value('save_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_shape', 'fonts_folder', 'str')
        param_scale_y = self.get_invalid_test_value('save_shape', 'scale_y', param_scale_y, 'float')
        self.initialize('save_shape', 'scale_y', param_scale_y)
        ok = False
        try:
            self.api.save_shape(param_name, param_slide_index, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_shape', 'scale_y', param_scale_y)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_shape', 'scale_y', param_scale_y)
        if ok:
            self.assert_no_exception('save_shape', 'scale_y')

    def test_save_shape_invalid_bounds(self):
        """Test case for save_shape with invalid bounds
        """
        param_name = self.get_test_value('save_shape', 'name', 'str')
        param_slide_index = self.get_test_value('save_shape', 'slide_index', 'int')
        param_shape_index = self.get_test_value('save_shape', 'shape_index', 'int')
        param_format = self.get_test_value('save_shape', 'format', 'str')
        param_out_path = self.get_test_value('save_shape', 'out_path', 'str')
        param_options = self.get_test_value('save_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_shape', 'bounds', 'str')
        param_password = self.get_test_value('save_shape', 'password', 'str')
        param_folder = self.get_test_value('save_shape', 'folder', 'str')
        param_storage = self.get_test_value('save_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_shape', 'fonts_folder', 'str')
        param_bounds = self.get_invalid_test_value('save_shape', 'bounds', param_bounds, 'str')
        self.initialize('save_shape', 'bounds', param_bounds)
        ok = False
        try:
            self.api.save_shape(param_name, param_slide_index, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_shape', 'bounds', param_bounds)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_shape', 'bounds', param_bounds)
        if ok:
            self.assert_no_exception('save_shape', 'bounds')

    def test_save_shape_invalid_password(self):
        """Test case for save_shape with invalid password
        """
        param_name = self.get_test_value('save_shape', 'name', 'str')
        param_slide_index = self.get_test_value('save_shape', 'slide_index', 'int')
        param_shape_index = self.get_test_value('save_shape', 'shape_index', 'int')
        param_format = self.get_test_value('save_shape', 'format', 'str')
        param_out_path = self.get_test_value('save_shape', 'out_path', 'str')
        param_options = self.get_test_value('save_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_shape', 'bounds', 'str')
        param_password = self.get_test_value('save_shape', 'password', 'str')
        param_folder = self.get_test_value('save_shape', 'folder', 'str')
        param_storage = self.get_test_value('save_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_shape', 'fonts_folder', 'str')
        param_password = self.get_invalid_test_value('save_shape', 'password', param_password, 'str')
        self.initialize('save_shape', 'password', param_password)
        ok = False
        try:
            self.api.save_shape(param_name, param_slide_index, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_shape', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_shape', 'password', param_password)
        if ok:
            self.assert_no_exception('save_shape', 'password')

    def test_save_shape_invalid_folder(self):
        """Test case for save_shape with invalid folder
        """
        param_name = self.get_test_value('save_shape', 'name', 'str')
        param_slide_index = self.get_test_value('save_shape', 'slide_index', 'int')
        param_shape_index = self.get_test_value('save_shape', 'shape_index', 'int')
        param_format = self.get_test_value('save_shape', 'format', 'str')
        param_out_path = self.get_test_value('save_shape', 'out_path', 'str')
        param_options = self.get_test_value('save_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_shape', 'bounds', 'str')
        param_password = self.get_test_value('save_shape', 'password', 'str')
        param_folder = self.get_test_value('save_shape', 'folder', 'str')
        param_storage = self.get_test_value('save_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_shape', 'fonts_folder', 'str')
        param_folder = self.get_invalid_test_value('save_shape', 'folder', param_folder, 'str')
        self.initialize('save_shape', 'folder', param_folder)
        ok = False
        try:
            self.api.save_shape(param_name, param_slide_index, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_shape', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_shape', 'folder', param_folder)
        if ok:
            self.assert_no_exception('save_shape', 'folder')

    def test_save_shape_invalid_storage(self):
        """Test case for save_shape with invalid storage
        """
        param_name = self.get_test_value('save_shape', 'name', 'str')
        param_slide_index = self.get_test_value('save_shape', 'slide_index', 'int')
        param_shape_index = self.get_test_value('save_shape', 'shape_index', 'int')
        param_format = self.get_test_value('save_shape', 'format', 'str')
        param_out_path = self.get_test_value('save_shape', 'out_path', 'str')
        param_options = self.get_test_value('save_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_shape', 'bounds', 'str')
        param_password = self.get_test_value('save_shape', 'password', 'str')
        param_folder = self.get_test_value('save_shape', 'folder', 'str')
        param_storage = self.get_test_value('save_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_shape', 'fonts_folder', 'str')
        param_storage = self.get_invalid_test_value('save_shape', 'storage', param_storage, 'str')
        self.initialize('save_shape', 'storage', param_storage)
        ok = False
        try:
            self.api.save_shape(param_name, param_slide_index, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_shape', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_shape', 'storage', param_storage)
        if ok:
            self.assert_no_exception('save_shape', 'storage')

    def test_save_shape_invalid_fonts_folder(self):
        """Test case for save_shape with invalid fonts_folder
        """
        param_name = self.get_test_value('save_shape', 'name', 'str')
        param_slide_index = self.get_test_value('save_shape', 'slide_index', 'int')
        param_shape_index = self.get_test_value('save_shape', 'shape_index', 'int')
        param_format = self.get_test_value('save_shape', 'format', 'str')
        param_out_path = self.get_test_value('save_shape', 'out_path', 'str')
        param_options = self.get_test_value('save_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_shape', 'bounds', 'str')
        param_password = self.get_test_value('save_shape', 'password', 'str')
        param_folder = self.get_test_value('save_shape', 'folder', 'str')
        param_storage = self.get_test_value('save_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_shape', 'fonts_folder', 'str')
        param_fonts_folder = self.get_invalid_test_value('save_shape', 'fonts_folder', param_fonts_folder, 'str')
        self.initialize('save_shape', 'fonts_folder', param_fonts_folder)
        ok = False
        try:
            self.api.save_shape(param_name, param_slide_index, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_shape', 'fonts_folder', param_fonts_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_shape', 'fonts_folder', param_fonts_folder)
        if ok:
            self.assert_no_exception('save_shape', 'fonts_folder')

    def test_save_shape_online(self):
        """Test case for save_shape_online
        """
        param_document = self.get_test_value('save_shape_online', 'document', 'file')
        param_slide_index = self.get_test_value('save_shape_online', 'slide_index', 'int')
        param_shape_index = self.get_test_value('save_shape_online', 'shape_index', 'int')
        param_format = self.get_test_value('save_shape_online', 'format', 'str')
        param_out_path = self.get_test_value('save_shape_online', 'out_path', 'str')
        param_scale_x = self.get_test_value('save_shape_online', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_shape_online', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_shape_online', 'bounds', 'str')
        param_password = self.get_test_value('save_shape_online', 'password', 'str')
        param_storage = self.get_test_value('save_shape_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_shape_online', 'fonts_folder', 'str')
        param_options = self.get_test_value('save_shape_online', 'options', 'IShapeExportOptions')
        self.initialize('save_shape_online', None, None)
        response = self.api.save_shape_online(param_document, param_slide_index, param_shape_index, param_format, param_out_path, param_scale_x, param_scale_y, param_bounds, param_password, param_storage, param_fonts_folder, param_options)
        self.assertIsNone(response)

    def test_save_shape_online_invalid_document(self):
        """Test case for save_shape_online with invalid document
        """
        param_document = self.get_test_value('save_shape_online', 'document', 'file')
        param_slide_index = self.get_test_value('save_shape_online', 'slide_index', 'int')
        param_shape_index = self.get_test_value('save_shape_online', 'shape_index', 'int')
        param_format = self.get_test_value('save_shape_online', 'format', 'str')
        param_out_path = self.get_test_value('save_shape_online', 'out_path', 'str')
        param_scale_x = self.get_test_value('save_shape_online', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_shape_online', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_shape_online', 'bounds', 'str')
        param_password = self.get_test_value('save_shape_online', 'password', 'str')
        param_storage = self.get_test_value('save_shape_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_shape_online', 'fonts_folder', 'str')
        param_options = self.get_test_value('save_shape_online', 'options', 'IShapeExportOptions')
        param_document = self.get_invalid_test_value('save_shape_online', 'document', param_document, 'file')
        self.initialize('save_shape_online', 'document', param_document)
        ok = False
        try:
            self.api.save_shape_online(param_document, param_slide_index, param_shape_index, param_format, param_out_path, param_scale_x, param_scale_y, param_bounds, param_password, param_storage, param_fonts_folder, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_shape_online', 'document', param_document)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_shape_online', 'document', param_document)
        if ok:
            self.assert_no_exception('save_shape_online', 'document')

    def test_save_shape_online_invalid_slide_index(self):
        """Test case for save_shape_online with invalid slide_index
        """
        param_document = self.get_test_value('save_shape_online', 'document', 'file')
        param_slide_index = self.get_test_value('save_shape_online', 'slide_index', 'int')
        param_shape_index = self.get_test_value('save_shape_online', 'shape_index', 'int')
        param_format = self.get_test_value('save_shape_online', 'format', 'str')
        param_out_path = self.get_test_value('save_shape_online', 'out_path', 'str')
        param_scale_x = self.get_test_value('save_shape_online', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_shape_online', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_shape_online', 'bounds', 'str')
        param_password = self.get_test_value('save_shape_online', 'password', 'str')
        param_storage = self.get_test_value('save_shape_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_shape_online', 'fonts_folder', 'str')
        param_options = self.get_test_value('save_shape_online', 'options', 'IShapeExportOptions')
        param_slide_index = self.get_invalid_test_value('save_shape_online', 'slide_index', param_slide_index, 'int')
        self.initialize('save_shape_online', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.save_shape_online(param_document, param_slide_index, param_shape_index, param_format, param_out_path, param_scale_x, param_scale_y, param_bounds, param_password, param_storage, param_fonts_folder, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_shape_online', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_shape_online', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('save_shape_online', 'slide_index')

    def test_save_shape_online_invalid_shape_index(self):
        """Test case for save_shape_online with invalid shape_index
        """
        param_document = self.get_test_value('save_shape_online', 'document', 'file')
        param_slide_index = self.get_test_value('save_shape_online', 'slide_index', 'int')
        param_shape_index = self.get_test_value('save_shape_online', 'shape_index', 'int')
        param_format = self.get_test_value('save_shape_online', 'format', 'str')
        param_out_path = self.get_test_value('save_shape_online', 'out_path', 'str')
        param_scale_x = self.get_test_value('save_shape_online', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_shape_online', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_shape_online', 'bounds', 'str')
        param_password = self.get_test_value('save_shape_online', 'password', 'str')
        param_storage = self.get_test_value('save_shape_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_shape_online', 'fonts_folder', 'str')
        param_options = self.get_test_value('save_shape_online', 'options', 'IShapeExportOptions')
        param_shape_index = self.get_invalid_test_value('save_shape_online', 'shape_index', param_shape_index, 'int')
        self.initialize('save_shape_online', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.save_shape_online(param_document, param_slide_index, param_shape_index, param_format, param_out_path, param_scale_x, param_scale_y, param_bounds, param_password, param_storage, param_fonts_folder, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_shape_online', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_shape_online', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('save_shape_online', 'shape_index')

    def test_save_shape_online_invalid_format(self):
        """Test case for save_shape_online with invalid format
        """
        param_document = self.get_test_value('save_shape_online', 'document', 'file')
        param_slide_index = self.get_test_value('save_shape_online', 'slide_index', 'int')
        param_shape_index = self.get_test_value('save_shape_online', 'shape_index', 'int')
        param_format = self.get_test_value('save_shape_online', 'format', 'str')
        param_out_path = self.get_test_value('save_shape_online', 'out_path', 'str')
        param_scale_x = self.get_test_value('save_shape_online', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_shape_online', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_shape_online', 'bounds', 'str')
        param_password = self.get_test_value('save_shape_online', 'password', 'str')
        param_storage = self.get_test_value('save_shape_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_shape_online', 'fonts_folder', 'str')
        param_options = self.get_test_value('save_shape_online', 'options', 'IShapeExportOptions')
        param_format = self.get_invalid_test_value('save_shape_online', 'format', param_format, 'str')
        self.initialize('save_shape_online', 'format', param_format)
        ok = False
        try:
            self.api.save_shape_online(param_document, param_slide_index, param_shape_index, param_format, param_out_path, param_scale_x, param_scale_y, param_bounds, param_password, param_storage, param_fonts_folder, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_shape_online', 'format', param_format)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_shape_online', 'format', param_format)
        if ok:
            self.assert_no_exception('save_shape_online', 'format')

    def test_save_shape_online_invalid_out_path(self):
        """Test case for save_shape_online with invalid out_path
        """
        param_document = self.get_test_value('save_shape_online', 'document', 'file')
        param_slide_index = self.get_test_value('save_shape_online', 'slide_index', 'int')
        param_shape_index = self.get_test_value('save_shape_online', 'shape_index', 'int')
        param_format = self.get_test_value('save_shape_online', 'format', 'str')
        param_out_path = self.get_test_value('save_shape_online', 'out_path', 'str')
        param_scale_x = self.get_test_value('save_shape_online', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_shape_online', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_shape_online', 'bounds', 'str')
        param_password = self.get_test_value('save_shape_online', 'password', 'str')
        param_storage = self.get_test_value('save_shape_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_shape_online', 'fonts_folder', 'str')
        param_options = self.get_test_value('save_shape_online', 'options', 'IShapeExportOptions')
        param_out_path = self.get_invalid_test_value('save_shape_online', 'out_path', param_out_path, 'str')
        self.initialize('save_shape_online', 'out_path', param_out_path)
        ok = False
        try:
            self.api.save_shape_online(param_document, param_slide_index, param_shape_index, param_format, param_out_path, param_scale_x, param_scale_y, param_bounds, param_password, param_storage, param_fonts_folder, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_shape_online', 'out_path', param_out_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_shape_online', 'out_path', param_out_path)
        if ok:
            self.assert_no_exception('save_shape_online', 'out_path')

    def test_save_shape_online_invalid_scale_x(self):
        """Test case for save_shape_online with invalid scale_x
        """
        param_document = self.get_test_value('save_shape_online', 'document', 'file')
        param_slide_index = self.get_test_value('save_shape_online', 'slide_index', 'int')
        param_shape_index = self.get_test_value('save_shape_online', 'shape_index', 'int')
        param_format = self.get_test_value('save_shape_online', 'format', 'str')
        param_out_path = self.get_test_value('save_shape_online', 'out_path', 'str')
        param_scale_x = self.get_test_value('save_shape_online', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_shape_online', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_shape_online', 'bounds', 'str')
        param_password = self.get_test_value('save_shape_online', 'password', 'str')
        param_storage = self.get_test_value('save_shape_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_shape_online', 'fonts_folder', 'str')
        param_options = self.get_test_value('save_shape_online', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_invalid_test_value('save_shape_online', 'scale_x', param_scale_x, 'float')
        self.initialize('save_shape_online', 'scale_x', param_scale_x)
        ok = False
        try:
            self.api.save_shape_online(param_document, param_slide_index, param_shape_index, param_format, param_out_path, param_scale_x, param_scale_y, param_bounds, param_password, param_storage, param_fonts_folder, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_shape_online', 'scale_x', param_scale_x)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_shape_online', 'scale_x', param_scale_x)
        if ok:
            self.assert_no_exception('save_shape_online', 'scale_x')

    def test_save_shape_online_invalid_scale_y(self):
        """Test case for save_shape_online with invalid scale_y
        """
        param_document = self.get_test_value('save_shape_online', 'document', 'file')
        param_slide_index = self.get_test_value('save_shape_online', 'slide_index', 'int')
        param_shape_index = self.get_test_value('save_shape_online', 'shape_index', 'int')
        param_format = self.get_test_value('save_shape_online', 'format', 'str')
        param_out_path = self.get_test_value('save_shape_online', 'out_path', 'str')
        param_scale_x = self.get_test_value('save_shape_online', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_shape_online', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_shape_online', 'bounds', 'str')
        param_password = self.get_test_value('save_shape_online', 'password', 'str')
        param_storage = self.get_test_value('save_shape_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_shape_online', 'fonts_folder', 'str')
        param_options = self.get_test_value('save_shape_online', 'options', 'IShapeExportOptions')
        param_scale_y = self.get_invalid_test_value('save_shape_online', 'scale_y', param_scale_y, 'float')
        self.initialize('save_shape_online', 'scale_y', param_scale_y)
        ok = False
        try:
            self.api.save_shape_online(param_document, param_slide_index, param_shape_index, param_format, param_out_path, param_scale_x, param_scale_y, param_bounds, param_password, param_storage, param_fonts_folder, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_shape_online', 'scale_y', param_scale_y)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_shape_online', 'scale_y', param_scale_y)
        if ok:
            self.assert_no_exception('save_shape_online', 'scale_y')

    def test_save_shape_online_invalid_bounds(self):
        """Test case for save_shape_online with invalid bounds
        """
        param_document = self.get_test_value('save_shape_online', 'document', 'file')
        param_slide_index = self.get_test_value('save_shape_online', 'slide_index', 'int')
        param_shape_index = self.get_test_value('save_shape_online', 'shape_index', 'int')
        param_format = self.get_test_value('save_shape_online', 'format', 'str')
        param_out_path = self.get_test_value('save_shape_online', 'out_path', 'str')
        param_scale_x = self.get_test_value('save_shape_online', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_shape_online', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_shape_online', 'bounds', 'str')
        param_password = self.get_test_value('save_shape_online', 'password', 'str')
        param_storage = self.get_test_value('save_shape_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_shape_online', 'fonts_folder', 'str')
        param_options = self.get_test_value('save_shape_online', 'options', 'IShapeExportOptions')
        param_bounds = self.get_invalid_test_value('save_shape_online', 'bounds', param_bounds, 'str')
        self.initialize('save_shape_online', 'bounds', param_bounds)
        ok = False
        try:
            self.api.save_shape_online(param_document, param_slide_index, param_shape_index, param_format, param_out_path, param_scale_x, param_scale_y, param_bounds, param_password, param_storage, param_fonts_folder, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_shape_online', 'bounds', param_bounds)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_shape_online', 'bounds', param_bounds)
        if ok:
            self.assert_no_exception('save_shape_online', 'bounds')

    def test_save_shape_online_invalid_password(self):
        """Test case for save_shape_online with invalid password
        """
        param_document = self.get_test_value('save_shape_online', 'document', 'file')
        param_slide_index = self.get_test_value('save_shape_online', 'slide_index', 'int')
        param_shape_index = self.get_test_value('save_shape_online', 'shape_index', 'int')
        param_format = self.get_test_value('save_shape_online', 'format', 'str')
        param_out_path = self.get_test_value('save_shape_online', 'out_path', 'str')
        param_scale_x = self.get_test_value('save_shape_online', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_shape_online', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_shape_online', 'bounds', 'str')
        param_password = self.get_test_value('save_shape_online', 'password', 'str')
        param_storage = self.get_test_value('save_shape_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_shape_online', 'fonts_folder', 'str')
        param_options = self.get_test_value('save_shape_online', 'options', 'IShapeExportOptions')
        param_password = self.get_invalid_test_value('save_shape_online', 'password', param_password, 'str')
        self.initialize('save_shape_online', 'password', param_password)
        ok = False
        try:
            self.api.save_shape_online(param_document, param_slide_index, param_shape_index, param_format, param_out_path, param_scale_x, param_scale_y, param_bounds, param_password, param_storage, param_fonts_folder, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_shape_online', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_shape_online', 'password', param_password)
        if ok:
            self.assert_no_exception('save_shape_online', 'password')

    def test_save_shape_online_invalid_storage(self):
        """Test case for save_shape_online with invalid storage
        """
        param_document = self.get_test_value('save_shape_online', 'document', 'file')
        param_slide_index = self.get_test_value('save_shape_online', 'slide_index', 'int')
        param_shape_index = self.get_test_value('save_shape_online', 'shape_index', 'int')
        param_format = self.get_test_value('save_shape_online', 'format', 'str')
        param_out_path = self.get_test_value('save_shape_online', 'out_path', 'str')
        param_scale_x = self.get_test_value('save_shape_online', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_shape_online', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_shape_online', 'bounds', 'str')
        param_password = self.get_test_value('save_shape_online', 'password', 'str')
        param_storage = self.get_test_value('save_shape_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_shape_online', 'fonts_folder', 'str')
        param_options = self.get_test_value('save_shape_online', 'options', 'IShapeExportOptions')
        param_storage = self.get_invalid_test_value('save_shape_online', 'storage', param_storage, 'str')
        self.initialize('save_shape_online', 'storage', param_storage)
        ok = False
        try:
            self.api.save_shape_online(param_document, param_slide_index, param_shape_index, param_format, param_out_path, param_scale_x, param_scale_y, param_bounds, param_password, param_storage, param_fonts_folder, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_shape_online', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_shape_online', 'storage', param_storage)
        if ok:
            self.assert_no_exception('save_shape_online', 'storage')

    def test_save_shape_online_invalid_fonts_folder(self):
        """Test case for save_shape_online with invalid fonts_folder
        """
        param_document = self.get_test_value('save_shape_online', 'document', 'file')
        param_slide_index = self.get_test_value('save_shape_online', 'slide_index', 'int')
        param_shape_index = self.get_test_value('save_shape_online', 'shape_index', 'int')
        param_format = self.get_test_value('save_shape_online', 'format', 'str')
        param_out_path = self.get_test_value('save_shape_online', 'out_path', 'str')
        param_scale_x = self.get_test_value('save_shape_online', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_shape_online', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_shape_online', 'bounds', 'str')
        param_password = self.get_test_value('save_shape_online', 'password', 'str')
        param_storage = self.get_test_value('save_shape_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_shape_online', 'fonts_folder', 'str')
        param_options = self.get_test_value('save_shape_online', 'options', 'IShapeExportOptions')
        param_fonts_folder = self.get_invalid_test_value('save_shape_online', 'fonts_folder', param_fonts_folder, 'str')
        self.initialize('save_shape_online', 'fonts_folder', param_fonts_folder)
        ok = False
        try:
            self.api.save_shape_online(param_document, param_slide_index, param_shape_index, param_format, param_out_path, param_scale_x, param_scale_y, param_bounds, param_password, param_storage, param_fonts_folder, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_shape_online', 'fonts_folder', param_fonts_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_shape_online', 'fonts_folder', param_fonts_folder)
        if ok:
            self.assert_no_exception('save_shape_online', 'fonts_folder')

    def test_save_shape_online_invalid_options(self):
        """Test case for save_shape_online with invalid options
        """
        param_document = self.get_test_value('save_shape_online', 'document', 'file')
        param_slide_index = self.get_test_value('save_shape_online', 'slide_index', 'int')
        param_shape_index = self.get_test_value('save_shape_online', 'shape_index', 'int')
        param_format = self.get_test_value('save_shape_online', 'format', 'str')
        param_out_path = self.get_test_value('save_shape_online', 'out_path', 'str')
        param_scale_x = self.get_test_value('save_shape_online', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_shape_online', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_shape_online', 'bounds', 'str')
        param_password = self.get_test_value('save_shape_online', 'password', 'str')
        param_storage = self.get_test_value('save_shape_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_shape_online', 'fonts_folder', 'str')
        param_options = self.get_test_value('save_shape_online', 'options', 'IShapeExportOptions')
        param_options = self.get_invalid_test_value('save_shape_online', 'options', param_options, 'IShapeExportOptions')
        self.initialize('save_shape_online', 'options', param_options)
        ok = False
        try:
            self.api.save_shape_online(param_document, param_slide_index, param_shape_index, param_format, param_out_path, param_scale_x, param_scale_y, param_bounds, param_password, param_storage, param_fonts_folder, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_shape_online', 'options', param_options)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_shape_online', 'options', param_options)
        if ok:
            self.assert_no_exception('save_shape_online', 'options')

    def test_save_slide(self):
        """Test case for save_slide
        """
        param_name = self.get_test_value('save_slide', 'name', 'str')
        param_slide_index = self.get_test_value('save_slide', 'slide_index', 'int')
        param_format = self.get_test_value('save_slide', 'format', 'str')
        param_out_path = self.get_test_value('save_slide', 'out_path', 'str')
        param_options = self.get_test_value('save_slide', 'options', 'ExportOptions')
        param_width = self.get_test_value('save_slide', 'width', 'int')
        param_height = self.get_test_value('save_slide', 'height', 'int')
        param_password = self.get_test_value('save_slide', 'password', 'str')
        param_folder = self.get_test_value('save_slide', 'folder', 'str')
        param_storage = self.get_test_value('save_slide', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_slide', 'fonts_folder', 'str')
        self.initialize('save_slide', None, None)
        response = self.api.save_slide(param_name, param_slide_index, param_format, param_out_path, param_options, param_width, param_height, param_password, param_folder, param_storage, param_fonts_folder)
        self.assertIsNone(response)

    def test_save_slide_invalid_name(self):
        """Test case for save_slide with invalid name
        """
        param_name = self.get_test_value('save_slide', 'name', 'str')
        param_slide_index = self.get_test_value('save_slide', 'slide_index', 'int')
        param_format = self.get_test_value('save_slide', 'format', 'str')
        param_out_path = self.get_test_value('save_slide', 'out_path', 'str')
        param_options = self.get_test_value('save_slide', 'options', 'ExportOptions')
        param_width = self.get_test_value('save_slide', 'width', 'int')
        param_height = self.get_test_value('save_slide', 'height', 'int')
        param_password = self.get_test_value('save_slide', 'password', 'str')
        param_folder = self.get_test_value('save_slide', 'folder', 'str')
        param_storage = self.get_test_value('save_slide', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_slide', 'fonts_folder', 'str')
        param_name = self.get_invalid_test_value('save_slide', 'name', param_name, 'str')
        self.initialize('save_slide', 'name', param_name)
        ok = False
        try:
            self.api.save_slide(param_name, param_slide_index, param_format, param_out_path, param_options, param_width, param_height, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_slide', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_slide', 'name', param_name)
        if ok:
            self.assert_no_exception('save_slide', 'name')

    def test_save_slide_invalid_slide_index(self):
        """Test case for save_slide with invalid slide_index
        """
        param_name = self.get_test_value('save_slide', 'name', 'str')
        param_slide_index = self.get_test_value('save_slide', 'slide_index', 'int')
        param_format = self.get_test_value('save_slide', 'format', 'str')
        param_out_path = self.get_test_value('save_slide', 'out_path', 'str')
        param_options = self.get_test_value('save_slide', 'options', 'ExportOptions')
        param_width = self.get_test_value('save_slide', 'width', 'int')
        param_height = self.get_test_value('save_slide', 'height', 'int')
        param_password = self.get_test_value('save_slide', 'password', 'str')
        param_folder = self.get_test_value('save_slide', 'folder', 'str')
        param_storage = self.get_test_value('save_slide', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_slide', 'fonts_folder', 'str')
        param_slide_index = self.get_invalid_test_value('save_slide', 'slide_index', param_slide_index, 'int')
        self.initialize('save_slide', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.save_slide(param_name, param_slide_index, param_format, param_out_path, param_options, param_width, param_height, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_slide', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_slide', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('save_slide', 'slide_index')

    def test_save_slide_invalid_format(self):
        """Test case for save_slide with invalid format
        """
        param_name = self.get_test_value('save_slide', 'name', 'str')
        param_slide_index = self.get_test_value('save_slide', 'slide_index', 'int')
        param_format = self.get_test_value('save_slide', 'format', 'str')
        param_out_path = self.get_test_value('save_slide', 'out_path', 'str')
        param_options = self.get_test_value('save_slide', 'options', 'ExportOptions')
        param_width = self.get_test_value('save_slide', 'width', 'int')
        param_height = self.get_test_value('save_slide', 'height', 'int')
        param_password = self.get_test_value('save_slide', 'password', 'str')
        param_folder = self.get_test_value('save_slide', 'folder', 'str')
        param_storage = self.get_test_value('save_slide', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_slide', 'fonts_folder', 'str')
        param_format = self.get_invalid_test_value('save_slide', 'format', param_format, 'str')
        self.initialize('save_slide', 'format', param_format)
        ok = False
        try:
            self.api.save_slide(param_name, param_slide_index, param_format, param_out_path, param_options, param_width, param_height, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_slide', 'format', param_format)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_slide', 'format', param_format)
        if ok:
            self.assert_no_exception('save_slide', 'format')

    def test_save_slide_invalid_out_path(self):
        """Test case for save_slide with invalid out_path
        """
        param_name = self.get_test_value('save_slide', 'name', 'str')
        param_slide_index = self.get_test_value('save_slide', 'slide_index', 'int')
        param_format = self.get_test_value('save_slide', 'format', 'str')
        param_out_path = self.get_test_value('save_slide', 'out_path', 'str')
        param_options = self.get_test_value('save_slide', 'options', 'ExportOptions')
        param_width = self.get_test_value('save_slide', 'width', 'int')
        param_height = self.get_test_value('save_slide', 'height', 'int')
        param_password = self.get_test_value('save_slide', 'password', 'str')
        param_folder = self.get_test_value('save_slide', 'folder', 'str')
        param_storage = self.get_test_value('save_slide', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_slide', 'fonts_folder', 'str')
        param_out_path = self.get_invalid_test_value('save_slide', 'out_path', param_out_path, 'str')
        self.initialize('save_slide', 'out_path', param_out_path)
        ok = False
        try:
            self.api.save_slide(param_name, param_slide_index, param_format, param_out_path, param_options, param_width, param_height, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_slide', 'out_path', param_out_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_slide', 'out_path', param_out_path)
        if ok:
            self.assert_no_exception('save_slide', 'out_path')

    def test_save_slide_invalid_options(self):
        """Test case for save_slide with invalid options
        """
        param_name = self.get_test_value('save_slide', 'name', 'str')
        param_slide_index = self.get_test_value('save_slide', 'slide_index', 'int')
        param_format = self.get_test_value('save_slide', 'format', 'str')
        param_out_path = self.get_test_value('save_slide', 'out_path', 'str')
        param_options = self.get_test_value('save_slide', 'options', 'ExportOptions')
        param_width = self.get_test_value('save_slide', 'width', 'int')
        param_height = self.get_test_value('save_slide', 'height', 'int')
        param_password = self.get_test_value('save_slide', 'password', 'str')
        param_folder = self.get_test_value('save_slide', 'folder', 'str')
        param_storage = self.get_test_value('save_slide', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_slide', 'fonts_folder', 'str')
        param_options = self.get_invalid_test_value('save_slide', 'options', param_options, 'ExportOptions')
        self.initialize('save_slide', 'options', param_options)
        ok = False
        try:
            self.api.save_slide(param_name, param_slide_index, param_format, param_out_path, param_options, param_width, param_height, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_slide', 'options', param_options)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_slide', 'options', param_options)
        if ok:
            self.assert_no_exception('save_slide', 'options')

    def test_save_slide_invalid_width(self):
        """Test case for save_slide with invalid width
        """
        param_name = self.get_test_value('save_slide', 'name', 'str')
        param_slide_index = self.get_test_value('save_slide', 'slide_index', 'int')
        param_format = self.get_test_value('save_slide', 'format', 'str')
        param_out_path = self.get_test_value('save_slide', 'out_path', 'str')
        param_options = self.get_test_value('save_slide', 'options', 'ExportOptions')
        param_width = self.get_test_value('save_slide', 'width', 'int')
        param_height = self.get_test_value('save_slide', 'height', 'int')
        param_password = self.get_test_value('save_slide', 'password', 'str')
        param_folder = self.get_test_value('save_slide', 'folder', 'str')
        param_storage = self.get_test_value('save_slide', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_slide', 'fonts_folder', 'str')
        param_width = self.get_invalid_test_value('save_slide', 'width', param_width, 'int')
        self.initialize('save_slide', 'width', param_width)
        ok = False
        try:
            self.api.save_slide(param_name, param_slide_index, param_format, param_out_path, param_options, param_width, param_height, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_slide', 'width', param_width)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_slide', 'width', param_width)
        if ok:
            self.assert_no_exception('save_slide', 'width')

    def test_save_slide_invalid_height(self):
        """Test case for save_slide with invalid height
        """
        param_name = self.get_test_value('save_slide', 'name', 'str')
        param_slide_index = self.get_test_value('save_slide', 'slide_index', 'int')
        param_format = self.get_test_value('save_slide', 'format', 'str')
        param_out_path = self.get_test_value('save_slide', 'out_path', 'str')
        param_options = self.get_test_value('save_slide', 'options', 'ExportOptions')
        param_width = self.get_test_value('save_slide', 'width', 'int')
        param_height = self.get_test_value('save_slide', 'height', 'int')
        param_password = self.get_test_value('save_slide', 'password', 'str')
        param_folder = self.get_test_value('save_slide', 'folder', 'str')
        param_storage = self.get_test_value('save_slide', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_slide', 'fonts_folder', 'str')
        param_height = self.get_invalid_test_value('save_slide', 'height', param_height, 'int')
        self.initialize('save_slide', 'height', param_height)
        ok = False
        try:
            self.api.save_slide(param_name, param_slide_index, param_format, param_out_path, param_options, param_width, param_height, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_slide', 'height', param_height)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_slide', 'height', param_height)
        if ok:
            self.assert_no_exception('save_slide', 'height')

    def test_save_slide_invalid_password(self):
        """Test case for save_slide with invalid password
        """
        param_name = self.get_test_value('save_slide', 'name', 'str')
        param_slide_index = self.get_test_value('save_slide', 'slide_index', 'int')
        param_format = self.get_test_value('save_slide', 'format', 'str')
        param_out_path = self.get_test_value('save_slide', 'out_path', 'str')
        param_options = self.get_test_value('save_slide', 'options', 'ExportOptions')
        param_width = self.get_test_value('save_slide', 'width', 'int')
        param_height = self.get_test_value('save_slide', 'height', 'int')
        param_password = self.get_test_value('save_slide', 'password', 'str')
        param_folder = self.get_test_value('save_slide', 'folder', 'str')
        param_storage = self.get_test_value('save_slide', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_slide', 'fonts_folder', 'str')
        param_password = self.get_invalid_test_value('save_slide', 'password', param_password, 'str')
        self.initialize('save_slide', 'password', param_password)
        ok = False
        try:
            self.api.save_slide(param_name, param_slide_index, param_format, param_out_path, param_options, param_width, param_height, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_slide', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_slide', 'password', param_password)
        if ok:
            self.assert_no_exception('save_slide', 'password')

    def test_save_slide_invalid_folder(self):
        """Test case for save_slide with invalid folder
        """
        param_name = self.get_test_value('save_slide', 'name', 'str')
        param_slide_index = self.get_test_value('save_slide', 'slide_index', 'int')
        param_format = self.get_test_value('save_slide', 'format', 'str')
        param_out_path = self.get_test_value('save_slide', 'out_path', 'str')
        param_options = self.get_test_value('save_slide', 'options', 'ExportOptions')
        param_width = self.get_test_value('save_slide', 'width', 'int')
        param_height = self.get_test_value('save_slide', 'height', 'int')
        param_password = self.get_test_value('save_slide', 'password', 'str')
        param_folder = self.get_test_value('save_slide', 'folder', 'str')
        param_storage = self.get_test_value('save_slide', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_slide', 'fonts_folder', 'str')
        param_folder = self.get_invalid_test_value('save_slide', 'folder', param_folder, 'str')
        self.initialize('save_slide', 'folder', param_folder)
        ok = False
        try:
            self.api.save_slide(param_name, param_slide_index, param_format, param_out_path, param_options, param_width, param_height, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_slide', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_slide', 'folder', param_folder)
        if ok:
            self.assert_no_exception('save_slide', 'folder')

    def test_save_slide_invalid_storage(self):
        """Test case for save_slide with invalid storage
        """
        param_name = self.get_test_value('save_slide', 'name', 'str')
        param_slide_index = self.get_test_value('save_slide', 'slide_index', 'int')
        param_format = self.get_test_value('save_slide', 'format', 'str')
        param_out_path = self.get_test_value('save_slide', 'out_path', 'str')
        param_options = self.get_test_value('save_slide', 'options', 'ExportOptions')
        param_width = self.get_test_value('save_slide', 'width', 'int')
        param_height = self.get_test_value('save_slide', 'height', 'int')
        param_password = self.get_test_value('save_slide', 'password', 'str')
        param_folder = self.get_test_value('save_slide', 'folder', 'str')
        param_storage = self.get_test_value('save_slide', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_slide', 'fonts_folder', 'str')
        param_storage = self.get_invalid_test_value('save_slide', 'storage', param_storage, 'str')
        self.initialize('save_slide', 'storage', param_storage)
        ok = False
        try:
            self.api.save_slide(param_name, param_slide_index, param_format, param_out_path, param_options, param_width, param_height, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_slide', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_slide', 'storage', param_storage)
        if ok:
            self.assert_no_exception('save_slide', 'storage')

    def test_save_slide_invalid_fonts_folder(self):
        """Test case for save_slide with invalid fonts_folder
        """
        param_name = self.get_test_value('save_slide', 'name', 'str')
        param_slide_index = self.get_test_value('save_slide', 'slide_index', 'int')
        param_format = self.get_test_value('save_slide', 'format', 'str')
        param_out_path = self.get_test_value('save_slide', 'out_path', 'str')
        param_options = self.get_test_value('save_slide', 'options', 'ExportOptions')
        param_width = self.get_test_value('save_slide', 'width', 'int')
        param_height = self.get_test_value('save_slide', 'height', 'int')
        param_password = self.get_test_value('save_slide', 'password', 'str')
        param_folder = self.get_test_value('save_slide', 'folder', 'str')
        param_storage = self.get_test_value('save_slide', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_slide', 'fonts_folder', 'str')
        param_fonts_folder = self.get_invalid_test_value('save_slide', 'fonts_folder', param_fonts_folder, 'str')
        self.initialize('save_slide', 'fonts_folder', param_fonts_folder)
        ok = False
        try:
            self.api.save_slide(param_name, param_slide_index, param_format, param_out_path, param_options, param_width, param_height, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_slide', 'fonts_folder', param_fonts_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_slide', 'fonts_folder', param_fonts_folder)
        if ok:
            self.assert_no_exception('save_slide', 'fonts_folder')

    def test_save_slide_online(self):
        """Test case for save_slide_online
        """
        param_document = self.get_test_value('save_slide_online', 'document', 'file')
        param_slide_index = self.get_test_value('save_slide_online', 'slide_index', 'int')
        param_format = self.get_test_value('save_slide_online', 'format', 'str')
        param_out_path = self.get_test_value('save_slide_online', 'out_path', 'str')
        param_width = self.get_test_value('save_slide_online', 'width', 'int')
        param_height = self.get_test_value('save_slide_online', 'height', 'int')
        param_password = self.get_test_value('save_slide_online', 'password', 'str')
        param_storage = self.get_test_value('save_slide_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_slide_online', 'fonts_folder', 'str')
        param_options = self.get_test_value('save_slide_online', 'options', 'ExportOptions')
        self.initialize('save_slide_online', None, None)
        response = self.api.save_slide_online(param_document, param_slide_index, param_format, param_out_path, param_width, param_height, param_password, param_storage, param_fonts_folder, param_options)
        self.assertIsNone(response)

    def test_save_slide_online_invalid_document(self):
        """Test case for save_slide_online with invalid document
        """
        param_document = self.get_test_value('save_slide_online', 'document', 'file')
        param_slide_index = self.get_test_value('save_slide_online', 'slide_index', 'int')
        param_format = self.get_test_value('save_slide_online', 'format', 'str')
        param_out_path = self.get_test_value('save_slide_online', 'out_path', 'str')
        param_width = self.get_test_value('save_slide_online', 'width', 'int')
        param_height = self.get_test_value('save_slide_online', 'height', 'int')
        param_password = self.get_test_value('save_slide_online', 'password', 'str')
        param_storage = self.get_test_value('save_slide_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_slide_online', 'fonts_folder', 'str')
        param_options = self.get_test_value('save_slide_online', 'options', 'ExportOptions')
        param_document = self.get_invalid_test_value('save_slide_online', 'document', param_document, 'file')
        self.initialize('save_slide_online', 'document', param_document)
        ok = False
        try:
            self.api.save_slide_online(param_document, param_slide_index, param_format, param_out_path, param_width, param_height, param_password, param_storage, param_fonts_folder, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_slide_online', 'document', param_document)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_slide_online', 'document', param_document)
        if ok:
            self.assert_no_exception('save_slide_online', 'document')

    def test_save_slide_online_invalid_slide_index(self):
        """Test case for save_slide_online with invalid slide_index
        """
        param_document = self.get_test_value('save_slide_online', 'document', 'file')
        param_slide_index = self.get_test_value('save_slide_online', 'slide_index', 'int')
        param_format = self.get_test_value('save_slide_online', 'format', 'str')
        param_out_path = self.get_test_value('save_slide_online', 'out_path', 'str')
        param_width = self.get_test_value('save_slide_online', 'width', 'int')
        param_height = self.get_test_value('save_slide_online', 'height', 'int')
        param_password = self.get_test_value('save_slide_online', 'password', 'str')
        param_storage = self.get_test_value('save_slide_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_slide_online', 'fonts_folder', 'str')
        param_options = self.get_test_value('save_slide_online', 'options', 'ExportOptions')
        param_slide_index = self.get_invalid_test_value('save_slide_online', 'slide_index', param_slide_index, 'int')
        self.initialize('save_slide_online', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.save_slide_online(param_document, param_slide_index, param_format, param_out_path, param_width, param_height, param_password, param_storage, param_fonts_folder, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_slide_online', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_slide_online', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('save_slide_online', 'slide_index')

    def test_save_slide_online_invalid_format(self):
        """Test case for save_slide_online with invalid format
        """
        param_document = self.get_test_value('save_slide_online', 'document', 'file')
        param_slide_index = self.get_test_value('save_slide_online', 'slide_index', 'int')
        param_format = self.get_test_value('save_slide_online', 'format', 'str')
        param_out_path = self.get_test_value('save_slide_online', 'out_path', 'str')
        param_width = self.get_test_value('save_slide_online', 'width', 'int')
        param_height = self.get_test_value('save_slide_online', 'height', 'int')
        param_password = self.get_test_value('save_slide_online', 'password', 'str')
        param_storage = self.get_test_value('save_slide_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_slide_online', 'fonts_folder', 'str')
        param_options = self.get_test_value('save_slide_online', 'options', 'ExportOptions')
        param_format = self.get_invalid_test_value('save_slide_online', 'format', param_format, 'str')
        self.initialize('save_slide_online', 'format', param_format)
        ok = False
        try:
            self.api.save_slide_online(param_document, param_slide_index, param_format, param_out_path, param_width, param_height, param_password, param_storage, param_fonts_folder, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_slide_online', 'format', param_format)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_slide_online', 'format', param_format)
        if ok:
            self.assert_no_exception('save_slide_online', 'format')

    def test_save_slide_online_invalid_out_path(self):
        """Test case for save_slide_online with invalid out_path
        """
        param_document = self.get_test_value('save_slide_online', 'document', 'file')
        param_slide_index = self.get_test_value('save_slide_online', 'slide_index', 'int')
        param_format = self.get_test_value('save_slide_online', 'format', 'str')
        param_out_path = self.get_test_value('save_slide_online', 'out_path', 'str')
        param_width = self.get_test_value('save_slide_online', 'width', 'int')
        param_height = self.get_test_value('save_slide_online', 'height', 'int')
        param_password = self.get_test_value('save_slide_online', 'password', 'str')
        param_storage = self.get_test_value('save_slide_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_slide_online', 'fonts_folder', 'str')
        param_options = self.get_test_value('save_slide_online', 'options', 'ExportOptions')
        param_out_path = self.get_invalid_test_value('save_slide_online', 'out_path', param_out_path, 'str')
        self.initialize('save_slide_online', 'out_path', param_out_path)
        ok = False
        try:
            self.api.save_slide_online(param_document, param_slide_index, param_format, param_out_path, param_width, param_height, param_password, param_storage, param_fonts_folder, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_slide_online', 'out_path', param_out_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_slide_online', 'out_path', param_out_path)
        if ok:
            self.assert_no_exception('save_slide_online', 'out_path')

    def test_save_slide_online_invalid_width(self):
        """Test case for save_slide_online with invalid width
        """
        param_document = self.get_test_value('save_slide_online', 'document', 'file')
        param_slide_index = self.get_test_value('save_slide_online', 'slide_index', 'int')
        param_format = self.get_test_value('save_slide_online', 'format', 'str')
        param_out_path = self.get_test_value('save_slide_online', 'out_path', 'str')
        param_width = self.get_test_value('save_slide_online', 'width', 'int')
        param_height = self.get_test_value('save_slide_online', 'height', 'int')
        param_password = self.get_test_value('save_slide_online', 'password', 'str')
        param_storage = self.get_test_value('save_slide_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_slide_online', 'fonts_folder', 'str')
        param_options = self.get_test_value('save_slide_online', 'options', 'ExportOptions')
        param_width = self.get_invalid_test_value('save_slide_online', 'width', param_width, 'int')
        self.initialize('save_slide_online', 'width', param_width)
        ok = False
        try:
            self.api.save_slide_online(param_document, param_slide_index, param_format, param_out_path, param_width, param_height, param_password, param_storage, param_fonts_folder, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_slide_online', 'width', param_width)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_slide_online', 'width', param_width)
        if ok:
            self.assert_no_exception('save_slide_online', 'width')

    def test_save_slide_online_invalid_height(self):
        """Test case for save_slide_online with invalid height
        """
        param_document = self.get_test_value('save_slide_online', 'document', 'file')
        param_slide_index = self.get_test_value('save_slide_online', 'slide_index', 'int')
        param_format = self.get_test_value('save_slide_online', 'format', 'str')
        param_out_path = self.get_test_value('save_slide_online', 'out_path', 'str')
        param_width = self.get_test_value('save_slide_online', 'width', 'int')
        param_height = self.get_test_value('save_slide_online', 'height', 'int')
        param_password = self.get_test_value('save_slide_online', 'password', 'str')
        param_storage = self.get_test_value('save_slide_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_slide_online', 'fonts_folder', 'str')
        param_options = self.get_test_value('save_slide_online', 'options', 'ExportOptions')
        param_height = self.get_invalid_test_value('save_slide_online', 'height', param_height, 'int')
        self.initialize('save_slide_online', 'height', param_height)
        ok = False
        try:
            self.api.save_slide_online(param_document, param_slide_index, param_format, param_out_path, param_width, param_height, param_password, param_storage, param_fonts_folder, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_slide_online', 'height', param_height)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_slide_online', 'height', param_height)
        if ok:
            self.assert_no_exception('save_slide_online', 'height')

    def test_save_slide_online_invalid_password(self):
        """Test case for save_slide_online with invalid password
        """
        param_document = self.get_test_value('save_slide_online', 'document', 'file')
        param_slide_index = self.get_test_value('save_slide_online', 'slide_index', 'int')
        param_format = self.get_test_value('save_slide_online', 'format', 'str')
        param_out_path = self.get_test_value('save_slide_online', 'out_path', 'str')
        param_width = self.get_test_value('save_slide_online', 'width', 'int')
        param_height = self.get_test_value('save_slide_online', 'height', 'int')
        param_password = self.get_test_value('save_slide_online', 'password', 'str')
        param_storage = self.get_test_value('save_slide_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_slide_online', 'fonts_folder', 'str')
        param_options = self.get_test_value('save_slide_online', 'options', 'ExportOptions')
        param_password = self.get_invalid_test_value('save_slide_online', 'password', param_password, 'str')
        self.initialize('save_slide_online', 'password', param_password)
        ok = False
        try:
            self.api.save_slide_online(param_document, param_slide_index, param_format, param_out_path, param_width, param_height, param_password, param_storage, param_fonts_folder, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_slide_online', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_slide_online', 'password', param_password)
        if ok:
            self.assert_no_exception('save_slide_online', 'password')

    def test_save_slide_online_invalid_storage(self):
        """Test case for save_slide_online with invalid storage
        """
        param_document = self.get_test_value('save_slide_online', 'document', 'file')
        param_slide_index = self.get_test_value('save_slide_online', 'slide_index', 'int')
        param_format = self.get_test_value('save_slide_online', 'format', 'str')
        param_out_path = self.get_test_value('save_slide_online', 'out_path', 'str')
        param_width = self.get_test_value('save_slide_online', 'width', 'int')
        param_height = self.get_test_value('save_slide_online', 'height', 'int')
        param_password = self.get_test_value('save_slide_online', 'password', 'str')
        param_storage = self.get_test_value('save_slide_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_slide_online', 'fonts_folder', 'str')
        param_options = self.get_test_value('save_slide_online', 'options', 'ExportOptions')
        param_storage = self.get_invalid_test_value('save_slide_online', 'storage', param_storage, 'str')
        self.initialize('save_slide_online', 'storage', param_storage)
        ok = False
        try:
            self.api.save_slide_online(param_document, param_slide_index, param_format, param_out_path, param_width, param_height, param_password, param_storage, param_fonts_folder, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_slide_online', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_slide_online', 'storage', param_storage)
        if ok:
            self.assert_no_exception('save_slide_online', 'storage')

    def test_save_slide_online_invalid_fonts_folder(self):
        """Test case for save_slide_online with invalid fonts_folder
        """
        param_document = self.get_test_value('save_slide_online', 'document', 'file')
        param_slide_index = self.get_test_value('save_slide_online', 'slide_index', 'int')
        param_format = self.get_test_value('save_slide_online', 'format', 'str')
        param_out_path = self.get_test_value('save_slide_online', 'out_path', 'str')
        param_width = self.get_test_value('save_slide_online', 'width', 'int')
        param_height = self.get_test_value('save_slide_online', 'height', 'int')
        param_password = self.get_test_value('save_slide_online', 'password', 'str')
        param_storage = self.get_test_value('save_slide_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_slide_online', 'fonts_folder', 'str')
        param_options = self.get_test_value('save_slide_online', 'options', 'ExportOptions')
        param_fonts_folder = self.get_invalid_test_value('save_slide_online', 'fonts_folder', param_fonts_folder, 'str')
        self.initialize('save_slide_online', 'fonts_folder', param_fonts_folder)
        ok = False
        try:
            self.api.save_slide_online(param_document, param_slide_index, param_format, param_out_path, param_width, param_height, param_password, param_storage, param_fonts_folder, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_slide_online', 'fonts_folder', param_fonts_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_slide_online', 'fonts_folder', param_fonts_folder)
        if ok:
            self.assert_no_exception('save_slide_online', 'fonts_folder')

    def test_save_slide_online_invalid_options(self):
        """Test case for save_slide_online with invalid options
        """
        param_document = self.get_test_value('save_slide_online', 'document', 'file')
        param_slide_index = self.get_test_value('save_slide_online', 'slide_index', 'int')
        param_format = self.get_test_value('save_slide_online', 'format', 'str')
        param_out_path = self.get_test_value('save_slide_online', 'out_path', 'str')
        param_width = self.get_test_value('save_slide_online', 'width', 'int')
        param_height = self.get_test_value('save_slide_online', 'height', 'int')
        param_password = self.get_test_value('save_slide_online', 'password', 'str')
        param_storage = self.get_test_value('save_slide_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_slide_online', 'fonts_folder', 'str')
        param_options = self.get_test_value('save_slide_online', 'options', 'ExportOptions')
        param_options = self.get_invalid_test_value('save_slide_online', 'options', param_options, 'ExportOptions')
        self.initialize('save_slide_online', 'options', param_options)
        ok = False
        try:
            self.api.save_slide_online(param_document, param_slide_index, param_format, param_out_path, param_width, param_height, param_password, param_storage, param_fonts_folder, param_options)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_slide_online', 'options', param_options)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_slide_online', 'options', param_options)
        if ok:
            self.assert_no_exception('save_slide_online', 'options')

    def test_save_special_slide_shape(self):
        """Test case for save_special_slide_shape
        """
        param_name = self.get_test_value('save_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('save_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('save_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('save_special_slide_shape', 'shape_index', 'int')
        param_format = self.get_test_value('save_special_slide_shape', 'format', 'str')
        param_out_path = self.get_test_value('save_special_slide_shape', 'out_path', 'str')
        param_options = self.get_test_value('save_special_slide_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_special_slide_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_special_slide_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_special_slide_shape', 'bounds', 'str')
        param_password = self.get_test_value('save_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('save_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('save_special_slide_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_special_slide_shape', 'fonts_folder', 'str')
        self.initialize('save_special_slide_shape', None, None)
        response = self.api.save_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
        self.assertIsNone(response)

    def test_save_special_slide_shape_invalid_name(self):
        """Test case for save_special_slide_shape with invalid name
        """
        param_name = self.get_test_value('save_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('save_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('save_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('save_special_slide_shape', 'shape_index', 'int')
        param_format = self.get_test_value('save_special_slide_shape', 'format', 'str')
        param_out_path = self.get_test_value('save_special_slide_shape', 'out_path', 'str')
        param_options = self.get_test_value('save_special_slide_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_special_slide_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_special_slide_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_special_slide_shape', 'bounds', 'str')
        param_password = self.get_test_value('save_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('save_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('save_special_slide_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_special_slide_shape', 'fonts_folder', 'str')
        param_name = self.get_invalid_test_value('save_special_slide_shape', 'name', param_name, 'str')
        self.initialize('save_special_slide_shape', 'name', param_name)
        ok = False
        try:
            self.api.save_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_special_slide_shape', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_special_slide_shape', 'name', param_name)
        if ok:
            self.assert_no_exception('save_special_slide_shape', 'name')

    def test_save_special_slide_shape_invalid_slide_index(self):
        """Test case for save_special_slide_shape with invalid slide_index
        """
        param_name = self.get_test_value('save_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('save_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('save_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('save_special_slide_shape', 'shape_index', 'int')
        param_format = self.get_test_value('save_special_slide_shape', 'format', 'str')
        param_out_path = self.get_test_value('save_special_slide_shape', 'out_path', 'str')
        param_options = self.get_test_value('save_special_slide_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_special_slide_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_special_slide_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_special_slide_shape', 'bounds', 'str')
        param_password = self.get_test_value('save_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('save_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('save_special_slide_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_special_slide_shape', 'fonts_folder', 'str')
        param_slide_index = self.get_invalid_test_value('save_special_slide_shape', 'slide_index', param_slide_index, 'int')
        self.initialize('save_special_slide_shape', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.save_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_special_slide_shape', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_special_slide_shape', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('save_special_slide_shape', 'slide_index')

    def test_save_special_slide_shape_invalid_slide_type(self):
        """Test case for save_special_slide_shape with invalid slide_type
        """
        param_name = self.get_test_value('save_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('save_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('save_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('save_special_slide_shape', 'shape_index', 'int')
        param_format = self.get_test_value('save_special_slide_shape', 'format', 'str')
        param_out_path = self.get_test_value('save_special_slide_shape', 'out_path', 'str')
        param_options = self.get_test_value('save_special_slide_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_special_slide_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_special_slide_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_special_slide_shape', 'bounds', 'str')
        param_password = self.get_test_value('save_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('save_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('save_special_slide_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_special_slide_shape', 'fonts_folder', 'str')
        param_slide_type = self.get_invalid_test_value('save_special_slide_shape', 'slide_type', param_slide_type, 'str')
        self.initialize('save_special_slide_shape', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.save_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_special_slide_shape', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_special_slide_shape', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('save_special_slide_shape', 'slide_type')

    def test_save_special_slide_shape_invalid_shape_index(self):
        """Test case for save_special_slide_shape with invalid shape_index
        """
        param_name = self.get_test_value('save_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('save_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('save_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('save_special_slide_shape', 'shape_index', 'int')
        param_format = self.get_test_value('save_special_slide_shape', 'format', 'str')
        param_out_path = self.get_test_value('save_special_slide_shape', 'out_path', 'str')
        param_options = self.get_test_value('save_special_slide_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_special_slide_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_special_slide_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_special_slide_shape', 'bounds', 'str')
        param_password = self.get_test_value('save_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('save_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('save_special_slide_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_special_slide_shape', 'fonts_folder', 'str')
        param_shape_index = self.get_invalid_test_value('save_special_slide_shape', 'shape_index', param_shape_index, 'int')
        self.initialize('save_special_slide_shape', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.save_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_special_slide_shape', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_special_slide_shape', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('save_special_slide_shape', 'shape_index')

    def test_save_special_slide_shape_invalid_format(self):
        """Test case for save_special_slide_shape with invalid format
        """
        param_name = self.get_test_value('save_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('save_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('save_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('save_special_slide_shape', 'shape_index', 'int')
        param_format = self.get_test_value('save_special_slide_shape', 'format', 'str')
        param_out_path = self.get_test_value('save_special_slide_shape', 'out_path', 'str')
        param_options = self.get_test_value('save_special_slide_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_special_slide_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_special_slide_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_special_slide_shape', 'bounds', 'str')
        param_password = self.get_test_value('save_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('save_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('save_special_slide_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_special_slide_shape', 'fonts_folder', 'str')
        param_format = self.get_invalid_test_value('save_special_slide_shape', 'format', param_format, 'str')
        self.initialize('save_special_slide_shape', 'format', param_format)
        ok = False
        try:
            self.api.save_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_special_slide_shape', 'format', param_format)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_special_slide_shape', 'format', param_format)
        if ok:
            self.assert_no_exception('save_special_slide_shape', 'format')

    def test_save_special_slide_shape_invalid_out_path(self):
        """Test case for save_special_slide_shape with invalid out_path
        """
        param_name = self.get_test_value('save_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('save_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('save_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('save_special_slide_shape', 'shape_index', 'int')
        param_format = self.get_test_value('save_special_slide_shape', 'format', 'str')
        param_out_path = self.get_test_value('save_special_slide_shape', 'out_path', 'str')
        param_options = self.get_test_value('save_special_slide_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_special_slide_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_special_slide_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_special_slide_shape', 'bounds', 'str')
        param_password = self.get_test_value('save_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('save_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('save_special_slide_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_special_slide_shape', 'fonts_folder', 'str')
        param_out_path = self.get_invalid_test_value('save_special_slide_shape', 'out_path', param_out_path, 'str')
        self.initialize('save_special_slide_shape', 'out_path', param_out_path)
        ok = False
        try:
            self.api.save_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_special_slide_shape', 'out_path', param_out_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_special_slide_shape', 'out_path', param_out_path)
        if ok:
            self.assert_no_exception('save_special_slide_shape', 'out_path')

    def test_save_special_slide_shape_invalid_options(self):
        """Test case for save_special_slide_shape with invalid options
        """
        param_name = self.get_test_value('save_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('save_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('save_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('save_special_slide_shape', 'shape_index', 'int')
        param_format = self.get_test_value('save_special_slide_shape', 'format', 'str')
        param_out_path = self.get_test_value('save_special_slide_shape', 'out_path', 'str')
        param_options = self.get_test_value('save_special_slide_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_special_slide_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_special_slide_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_special_slide_shape', 'bounds', 'str')
        param_password = self.get_test_value('save_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('save_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('save_special_slide_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_special_slide_shape', 'fonts_folder', 'str')
        param_options = self.get_invalid_test_value('save_special_slide_shape', 'options', param_options, 'IShapeExportOptions')
        self.initialize('save_special_slide_shape', 'options', param_options)
        ok = False
        try:
            self.api.save_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_special_slide_shape', 'options', param_options)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_special_slide_shape', 'options', param_options)
        if ok:
            self.assert_no_exception('save_special_slide_shape', 'options')

    def test_save_special_slide_shape_invalid_scale_x(self):
        """Test case for save_special_slide_shape with invalid scale_x
        """
        param_name = self.get_test_value('save_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('save_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('save_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('save_special_slide_shape', 'shape_index', 'int')
        param_format = self.get_test_value('save_special_slide_shape', 'format', 'str')
        param_out_path = self.get_test_value('save_special_slide_shape', 'out_path', 'str')
        param_options = self.get_test_value('save_special_slide_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_special_slide_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_special_slide_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_special_slide_shape', 'bounds', 'str')
        param_password = self.get_test_value('save_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('save_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('save_special_slide_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_special_slide_shape', 'fonts_folder', 'str')
        param_scale_x = self.get_invalid_test_value('save_special_slide_shape', 'scale_x', param_scale_x, 'float')
        self.initialize('save_special_slide_shape', 'scale_x', param_scale_x)
        ok = False
        try:
            self.api.save_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_special_slide_shape', 'scale_x', param_scale_x)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_special_slide_shape', 'scale_x', param_scale_x)
        if ok:
            self.assert_no_exception('save_special_slide_shape', 'scale_x')

    def test_save_special_slide_shape_invalid_scale_y(self):
        """Test case for save_special_slide_shape with invalid scale_y
        """
        param_name = self.get_test_value('save_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('save_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('save_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('save_special_slide_shape', 'shape_index', 'int')
        param_format = self.get_test_value('save_special_slide_shape', 'format', 'str')
        param_out_path = self.get_test_value('save_special_slide_shape', 'out_path', 'str')
        param_options = self.get_test_value('save_special_slide_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_special_slide_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_special_slide_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_special_slide_shape', 'bounds', 'str')
        param_password = self.get_test_value('save_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('save_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('save_special_slide_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_special_slide_shape', 'fonts_folder', 'str')
        param_scale_y = self.get_invalid_test_value('save_special_slide_shape', 'scale_y', param_scale_y, 'float')
        self.initialize('save_special_slide_shape', 'scale_y', param_scale_y)
        ok = False
        try:
            self.api.save_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_special_slide_shape', 'scale_y', param_scale_y)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_special_slide_shape', 'scale_y', param_scale_y)
        if ok:
            self.assert_no_exception('save_special_slide_shape', 'scale_y')

    def test_save_special_slide_shape_invalid_bounds(self):
        """Test case for save_special_slide_shape with invalid bounds
        """
        param_name = self.get_test_value('save_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('save_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('save_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('save_special_slide_shape', 'shape_index', 'int')
        param_format = self.get_test_value('save_special_slide_shape', 'format', 'str')
        param_out_path = self.get_test_value('save_special_slide_shape', 'out_path', 'str')
        param_options = self.get_test_value('save_special_slide_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_special_slide_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_special_slide_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_special_slide_shape', 'bounds', 'str')
        param_password = self.get_test_value('save_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('save_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('save_special_slide_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_special_slide_shape', 'fonts_folder', 'str')
        param_bounds = self.get_invalid_test_value('save_special_slide_shape', 'bounds', param_bounds, 'str')
        self.initialize('save_special_slide_shape', 'bounds', param_bounds)
        ok = False
        try:
            self.api.save_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_special_slide_shape', 'bounds', param_bounds)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_special_slide_shape', 'bounds', param_bounds)
        if ok:
            self.assert_no_exception('save_special_slide_shape', 'bounds')

    def test_save_special_slide_shape_invalid_password(self):
        """Test case for save_special_slide_shape with invalid password
        """
        param_name = self.get_test_value('save_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('save_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('save_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('save_special_slide_shape', 'shape_index', 'int')
        param_format = self.get_test_value('save_special_slide_shape', 'format', 'str')
        param_out_path = self.get_test_value('save_special_slide_shape', 'out_path', 'str')
        param_options = self.get_test_value('save_special_slide_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_special_slide_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_special_slide_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_special_slide_shape', 'bounds', 'str')
        param_password = self.get_test_value('save_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('save_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('save_special_slide_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_special_slide_shape', 'fonts_folder', 'str')
        param_password = self.get_invalid_test_value('save_special_slide_shape', 'password', param_password, 'str')
        self.initialize('save_special_slide_shape', 'password', param_password)
        ok = False
        try:
            self.api.save_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_special_slide_shape', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_special_slide_shape', 'password', param_password)
        if ok:
            self.assert_no_exception('save_special_slide_shape', 'password')

    def test_save_special_slide_shape_invalid_folder(self):
        """Test case for save_special_slide_shape with invalid folder
        """
        param_name = self.get_test_value('save_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('save_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('save_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('save_special_slide_shape', 'shape_index', 'int')
        param_format = self.get_test_value('save_special_slide_shape', 'format', 'str')
        param_out_path = self.get_test_value('save_special_slide_shape', 'out_path', 'str')
        param_options = self.get_test_value('save_special_slide_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_special_slide_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_special_slide_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_special_slide_shape', 'bounds', 'str')
        param_password = self.get_test_value('save_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('save_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('save_special_slide_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_special_slide_shape', 'fonts_folder', 'str')
        param_folder = self.get_invalid_test_value('save_special_slide_shape', 'folder', param_folder, 'str')
        self.initialize('save_special_slide_shape', 'folder', param_folder)
        ok = False
        try:
            self.api.save_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_special_slide_shape', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_special_slide_shape', 'folder', param_folder)
        if ok:
            self.assert_no_exception('save_special_slide_shape', 'folder')

    def test_save_special_slide_shape_invalid_storage(self):
        """Test case for save_special_slide_shape with invalid storage
        """
        param_name = self.get_test_value('save_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('save_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('save_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('save_special_slide_shape', 'shape_index', 'int')
        param_format = self.get_test_value('save_special_slide_shape', 'format', 'str')
        param_out_path = self.get_test_value('save_special_slide_shape', 'out_path', 'str')
        param_options = self.get_test_value('save_special_slide_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_special_slide_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_special_slide_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_special_slide_shape', 'bounds', 'str')
        param_password = self.get_test_value('save_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('save_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('save_special_slide_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_special_slide_shape', 'fonts_folder', 'str')
        param_storage = self.get_invalid_test_value('save_special_slide_shape', 'storage', param_storage, 'str')
        self.initialize('save_special_slide_shape', 'storage', param_storage)
        ok = False
        try:
            self.api.save_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_special_slide_shape', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_special_slide_shape', 'storage', param_storage)
        if ok:
            self.assert_no_exception('save_special_slide_shape', 'storage')

    def test_save_special_slide_shape_invalid_fonts_folder(self):
        """Test case for save_special_slide_shape with invalid fonts_folder
        """
        param_name = self.get_test_value('save_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('save_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('save_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('save_special_slide_shape', 'shape_index', 'int')
        param_format = self.get_test_value('save_special_slide_shape', 'format', 'str')
        param_out_path = self.get_test_value('save_special_slide_shape', 'out_path', 'str')
        param_options = self.get_test_value('save_special_slide_shape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_special_slide_shape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_special_slide_shape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_special_slide_shape', 'bounds', 'str')
        param_password = self.get_test_value('save_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('save_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('save_special_slide_shape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_special_slide_shape', 'fonts_folder', 'str')
        param_fonts_folder = self.get_invalid_test_value('save_special_slide_shape', 'fonts_folder', param_fonts_folder, 'str')
        self.initialize('save_special_slide_shape', 'fonts_folder', param_fonts_folder)
        ok = False
        try:
            self.api.save_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_special_slide_shape', 'fonts_folder', param_fonts_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_special_slide_shape', 'fonts_folder', param_fonts_folder)
        if ok:
            self.assert_no_exception('save_special_slide_shape', 'fonts_folder')

    def test_save_special_slide_subshape(self):
        """Test case for save_special_slide_subshape
        """
        param_name = self.get_test_value('save_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('save_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('save_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('save_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('save_special_slide_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('save_special_slide_subshape', 'format', 'str')
        param_out_path = self.get_test_value('save_special_slide_subshape', 'out_path', 'str')
        param_options = self.get_test_value('save_special_slide_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_special_slide_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_special_slide_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_special_slide_subshape', 'bounds', 'str')
        param_password = self.get_test_value('save_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('save_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('save_special_slide_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_special_slide_subshape', 'fonts_folder', 'str')
        self.initialize('save_special_slide_subshape', None, None)
        response = self.api.save_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
        self.assertIsNone(response)

    def test_save_special_slide_subshape_invalid_name(self):
        """Test case for save_special_slide_subshape with invalid name
        """
        param_name = self.get_test_value('save_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('save_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('save_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('save_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('save_special_slide_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('save_special_slide_subshape', 'format', 'str')
        param_out_path = self.get_test_value('save_special_slide_subshape', 'out_path', 'str')
        param_options = self.get_test_value('save_special_slide_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_special_slide_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_special_slide_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_special_slide_subshape', 'bounds', 'str')
        param_password = self.get_test_value('save_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('save_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('save_special_slide_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_special_slide_subshape', 'fonts_folder', 'str')
        param_name = self.get_invalid_test_value('save_special_slide_subshape', 'name', param_name, 'str')
        self.initialize('save_special_slide_subshape', 'name', param_name)
        ok = False
        try:
            self.api.save_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_special_slide_subshape', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_special_slide_subshape', 'name', param_name)
        if ok:
            self.assert_no_exception('save_special_slide_subshape', 'name')

    def test_save_special_slide_subshape_invalid_slide_index(self):
        """Test case for save_special_slide_subshape with invalid slide_index
        """
        param_name = self.get_test_value('save_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('save_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('save_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('save_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('save_special_slide_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('save_special_slide_subshape', 'format', 'str')
        param_out_path = self.get_test_value('save_special_slide_subshape', 'out_path', 'str')
        param_options = self.get_test_value('save_special_slide_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_special_slide_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_special_slide_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_special_slide_subshape', 'bounds', 'str')
        param_password = self.get_test_value('save_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('save_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('save_special_slide_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_special_slide_subshape', 'fonts_folder', 'str')
        param_slide_index = self.get_invalid_test_value('save_special_slide_subshape', 'slide_index', param_slide_index, 'int')
        self.initialize('save_special_slide_subshape', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.save_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_special_slide_subshape', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_special_slide_subshape', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('save_special_slide_subshape', 'slide_index')

    def test_save_special_slide_subshape_invalid_slide_type(self):
        """Test case for save_special_slide_subshape with invalid slide_type
        """
        param_name = self.get_test_value('save_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('save_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('save_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('save_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('save_special_slide_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('save_special_slide_subshape', 'format', 'str')
        param_out_path = self.get_test_value('save_special_slide_subshape', 'out_path', 'str')
        param_options = self.get_test_value('save_special_slide_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_special_slide_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_special_slide_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_special_slide_subshape', 'bounds', 'str')
        param_password = self.get_test_value('save_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('save_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('save_special_slide_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_special_slide_subshape', 'fonts_folder', 'str')
        param_slide_type = self.get_invalid_test_value('save_special_slide_subshape', 'slide_type', param_slide_type, 'str')
        self.initialize('save_special_slide_subshape', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.save_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_special_slide_subshape', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_special_slide_subshape', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('save_special_slide_subshape', 'slide_type')

    def test_save_special_slide_subshape_invalid_path(self):
        """Test case for save_special_slide_subshape with invalid path
        """
        param_name = self.get_test_value('save_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('save_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('save_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('save_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('save_special_slide_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('save_special_slide_subshape', 'format', 'str')
        param_out_path = self.get_test_value('save_special_slide_subshape', 'out_path', 'str')
        param_options = self.get_test_value('save_special_slide_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_special_slide_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_special_slide_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_special_slide_subshape', 'bounds', 'str')
        param_password = self.get_test_value('save_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('save_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('save_special_slide_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_special_slide_subshape', 'fonts_folder', 'str')
        param_path = self.get_invalid_test_value('save_special_slide_subshape', 'path', param_path, 'str')
        self.initialize('save_special_slide_subshape', 'path', param_path)
        ok = False
        try:
            self.api.save_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_special_slide_subshape', 'path', param_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_special_slide_subshape', 'path', param_path)
        if ok:
            self.assert_no_exception('save_special_slide_subshape', 'path')

    def test_save_special_slide_subshape_invalid_shape_index(self):
        """Test case for save_special_slide_subshape with invalid shape_index
        """
        param_name = self.get_test_value('save_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('save_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('save_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('save_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('save_special_slide_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('save_special_slide_subshape', 'format', 'str')
        param_out_path = self.get_test_value('save_special_slide_subshape', 'out_path', 'str')
        param_options = self.get_test_value('save_special_slide_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_special_slide_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_special_slide_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_special_slide_subshape', 'bounds', 'str')
        param_password = self.get_test_value('save_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('save_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('save_special_slide_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_special_slide_subshape', 'fonts_folder', 'str')
        param_shape_index = self.get_invalid_test_value('save_special_slide_subshape', 'shape_index', param_shape_index, 'int')
        self.initialize('save_special_slide_subshape', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.save_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_special_slide_subshape', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_special_slide_subshape', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('save_special_slide_subshape', 'shape_index')

    def test_save_special_slide_subshape_invalid_format(self):
        """Test case for save_special_slide_subshape with invalid format
        """
        param_name = self.get_test_value('save_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('save_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('save_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('save_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('save_special_slide_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('save_special_slide_subshape', 'format', 'str')
        param_out_path = self.get_test_value('save_special_slide_subshape', 'out_path', 'str')
        param_options = self.get_test_value('save_special_slide_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_special_slide_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_special_slide_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_special_slide_subshape', 'bounds', 'str')
        param_password = self.get_test_value('save_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('save_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('save_special_slide_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_special_slide_subshape', 'fonts_folder', 'str')
        param_format = self.get_invalid_test_value('save_special_slide_subshape', 'format', param_format, 'str')
        self.initialize('save_special_slide_subshape', 'format', param_format)
        ok = False
        try:
            self.api.save_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_special_slide_subshape', 'format', param_format)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_special_slide_subshape', 'format', param_format)
        if ok:
            self.assert_no_exception('save_special_slide_subshape', 'format')

    def test_save_special_slide_subshape_invalid_out_path(self):
        """Test case for save_special_slide_subshape with invalid out_path
        """
        param_name = self.get_test_value('save_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('save_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('save_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('save_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('save_special_slide_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('save_special_slide_subshape', 'format', 'str')
        param_out_path = self.get_test_value('save_special_slide_subshape', 'out_path', 'str')
        param_options = self.get_test_value('save_special_slide_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_special_slide_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_special_slide_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_special_slide_subshape', 'bounds', 'str')
        param_password = self.get_test_value('save_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('save_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('save_special_slide_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_special_slide_subshape', 'fonts_folder', 'str')
        param_out_path = self.get_invalid_test_value('save_special_slide_subshape', 'out_path', param_out_path, 'str')
        self.initialize('save_special_slide_subshape', 'out_path', param_out_path)
        ok = False
        try:
            self.api.save_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_special_slide_subshape', 'out_path', param_out_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_special_slide_subshape', 'out_path', param_out_path)
        if ok:
            self.assert_no_exception('save_special_slide_subshape', 'out_path')

    def test_save_special_slide_subshape_invalid_options(self):
        """Test case for save_special_slide_subshape with invalid options
        """
        param_name = self.get_test_value('save_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('save_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('save_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('save_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('save_special_slide_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('save_special_slide_subshape', 'format', 'str')
        param_out_path = self.get_test_value('save_special_slide_subshape', 'out_path', 'str')
        param_options = self.get_test_value('save_special_slide_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_special_slide_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_special_slide_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_special_slide_subshape', 'bounds', 'str')
        param_password = self.get_test_value('save_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('save_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('save_special_slide_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_special_slide_subshape', 'fonts_folder', 'str')
        param_options = self.get_invalid_test_value('save_special_slide_subshape', 'options', param_options, 'IShapeExportOptions')
        self.initialize('save_special_slide_subshape', 'options', param_options)
        ok = False
        try:
            self.api.save_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_special_slide_subshape', 'options', param_options)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_special_slide_subshape', 'options', param_options)
        if ok:
            self.assert_no_exception('save_special_slide_subshape', 'options')

    def test_save_special_slide_subshape_invalid_scale_x(self):
        """Test case for save_special_slide_subshape with invalid scale_x
        """
        param_name = self.get_test_value('save_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('save_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('save_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('save_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('save_special_slide_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('save_special_slide_subshape', 'format', 'str')
        param_out_path = self.get_test_value('save_special_slide_subshape', 'out_path', 'str')
        param_options = self.get_test_value('save_special_slide_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_special_slide_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_special_slide_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_special_slide_subshape', 'bounds', 'str')
        param_password = self.get_test_value('save_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('save_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('save_special_slide_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_special_slide_subshape', 'fonts_folder', 'str')
        param_scale_x = self.get_invalid_test_value('save_special_slide_subshape', 'scale_x', param_scale_x, 'float')
        self.initialize('save_special_slide_subshape', 'scale_x', param_scale_x)
        ok = False
        try:
            self.api.save_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_special_slide_subshape', 'scale_x', param_scale_x)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_special_slide_subshape', 'scale_x', param_scale_x)
        if ok:
            self.assert_no_exception('save_special_slide_subshape', 'scale_x')

    def test_save_special_slide_subshape_invalid_scale_y(self):
        """Test case for save_special_slide_subshape with invalid scale_y
        """
        param_name = self.get_test_value('save_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('save_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('save_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('save_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('save_special_slide_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('save_special_slide_subshape', 'format', 'str')
        param_out_path = self.get_test_value('save_special_slide_subshape', 'out_path', 'str')
        param_options = self.get_test_value('save_special_slide_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_special_slide_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_special_slide_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_special_slide_subshape', 'bounds', 'str')
        param_password = self.get_test_value('save_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('save_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('save_special_slide_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_special_slide_subshape', 'fonts_folder', 'str')
        param_scale_y = self.get_invalid_test_value('save_special_slide_subshape', 'scale_y', param_scale_y, 'float')
        self.initialize('save_special_slide_subshape', 'scale_y', param_scale_y)
        ok = False
        try:
            self.api.save_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_special_slide_subshape', 'scale_y', param_scale_y)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_special_slide_subshape', 'scale_y', param_scale_y)
        if ok:
            self.assert_no_exception('save_special_slide_subshape', 'scale_y')

    def test_save_special_slide_subshape_invalid_bounds(self):
        """Test case for save_special_slide_subshape with invalid bounds
        """
        param_name = self.get_test_value('save_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('save_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('save_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('save_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('save_special_slide_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('save_special_slide_subshape', 'format', 'str')
        param_out_path = self.get_test_value('save_special_slide_subshape', 'out_path', 'str')
        param_options = self.get_test_value('save_special_slide_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_special_slide_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_special_slide_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_special_slide_subshape', 'bounds', 'str')
        param_password = self.get_test_value('save_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('save_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('save_special_slide_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_special_slide_subshape', 'fonts_folder', 'str')
        param_bounds = self.get_invalid_test_value('save_special_slide_subshape', 'bounds', param_bounds, 'str')
        self.initialize('save_special_slide_subshape', 'bounds', param_bounds)
        ok = False
        try:
            self.api.save_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_special_slide_subshape', 'bounds', param_bounds)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_special_slide_subshape', 'bounds', param_bounds)
        if ok:
            self.assert_no_exception('save_special_slide_subshape', 'bounds')

    def test_save_special_slide_subshape_invalid_password(self):
        """Test case for save_special_slide_subshape with invalid password
        """
        param_name = self.get_test_value('save_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('save_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('save_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('save_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('save_special_slide_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('save_special_slide_subshape', 'format', 'str')
        param_out_path = self.get_test_value('save_special_slide_subshape', 'out_path', 'str')
        param_options = self.get_test_value('save_special_slide_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_special_slide_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_special_slide_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_special_slide_subshape', 'bounds', 'str')
        param_password = self.get_test_value('save_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('save_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('save_special_slide_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_special_slide_subshape', 'fonts_folder', 'str')
        param_password = self.get_invalid_test_value('save_special_slide_subshape', 'password', param_password, 'str')
        self.initialize('save_special_slide_subshape', 'password', param_password)
        ok = False
        try:
            self.api.save_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_special_slide_subshape', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_special_slide_subshape', 'password', param_password)
        if ok:
            self.assert_no_exception('save_special_slide_subshape', 'password')

    def test_save_special_slide_subshape_invalid_folder(self):
        """Test case for save_special_slide_subshape with invalid folder
        """
        param_name = self.get_test_value('save_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('save_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('save_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('save_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('save_special_slide_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('save_special_slide_subshape', 'format', 'str')
        param_out_path = self.get_test_value('save_special_slide_subshape', 'out_path', 'str')
        param_options = self.get_test_value('save_special_slide_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_special_slide_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_special_slide_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_special_slide_subshape', 'bounds', 'str')
        param_password = self.get_test_value('save_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('save_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('save_special_slide_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_special_slide_subshape', 'fonts_folder', 'str')
        param_folder = self.get_invalid_test_value('save_special_slide_subshape', 'folder', param_folder, 'str')
        self.initialize('save_special_slide_subshape', 'folder', param_folder)
        ok = False
        try:
            self.api.save_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_special_slide_subshape', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_special_slide_subshape', 'folder', param_folder)
        if ok:
            self.assert_no_exception('save_special_slide_subshape', 'folder')

    def test_save_special_slide_subshape_invalid_storage(self):
        """Test case for save_special_slide_subshape with invalid storage
        """
        param_name = self.get_test_value('save_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('save_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('save_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('save_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('save_special_slide_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('save_special_slide_subshape', 'format', 'str')
        param_out_path = self.get_test_value('save_special_slide_subshape', 'out_path', 'str')
        param_options = self.get_test_value('save_special_slide_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_special_slide_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_special_slide_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_special_slide_subshape', 'bounds', 'str')
        param_password = self.get_test_value('save_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('save_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('save_special_slide_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_special_slide_subshape', 'fonts_folder', 'str')
        param_storage = self.get_invalid_test_value('save_special_slide_subshape', 'storage', param_storage, 'str')
        self.initialize('save_special_slide_subshape', 'storage', param_storage)
        ok = False
        try:
            self.api.save_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_special_slide_subshape', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_special_slide_subshape', 'storage', param_storage)
        if ok:
            self.assert_no_exception('save_special_slide_subshape', 'storage')

    def test_save_special_slide_subshape_invalid_fonts_folder(self):
        """Test case for save_special_slide_subshape with invalid fonts_folder
        """
        param_name = self.get_test_value('save_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('save_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('save_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('save_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('save_special_slide_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('save_special_slide_subshape', 'format', 'str')
        param_out_path = self.get_test_value('save_special_slide_subshape', 'out_path', 'str')
        param_options = self.get_test_value('save_special_slide_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_special_slide_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_special_slide_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_special_slide_subshape', 'bounds', 'str')
        param_password = self.get_test_value('save_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('save_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('save_special_slide_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_special_slide_subshape', 'fonts_folder', 'str')
        param_fonts_folder = self.get_invalid_test_value('save_special_slide_subshape', 'fonts_folder', param_fonts_folder, 'str')
        self.initialize('save_special_slide_subshape', 'fonts_folder', param_fonts_folder)
        ok = False
        try:
            self.api.save_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_special_slide_subshape', 'fonts_folder', param_fonts_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_special_slide_subshape', 'fonts_folder', param_fonts_folder)
        if ok:
            self.assert_no_exception('save_special_slide_subshape', 'fonts_folder')

    def test_save_subshape(self):
        """Test case for save_subshape
        """
        param_name = self.get_test_value('save_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('save_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('save_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('save_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('save_subshape', 'format', 'str')
        param_out_path = self.get_test_value('save_subshape', 'out_path', 'str')
        param_options = self.get_test_value('save_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_subshape', 'bounds', 'str')
        param_password = self.get_test_value('save_subshape', 'password', 'str')
        param_folder = self.get_test_value('save_subshape', 'folder', 'str')
        param_storage = self.get_test_value('save_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_subshape', 'fonts_folder', 'str')
        self.initialize('save_subshape', None, None)
        response = self.api.save_subshape(param_name, param_slide_index, param_path, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
        self.assertIsNone(response)

    def test_save_subshape_invalid_name(self):
        """Test case for save_subshape with invalid name
        """
        param_name = self.get_test_value('save_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('save_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('save_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('save_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('save_subshape', 'format', 'str')
        param_out_path = self.get_test_value('save_subshape', 'out_path', 'str')
        param_options = self.get_test_value('save_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_subshape', 'bounds', 'str')
        param_password = self.get_test_value('save_subshape', 'password', 'str')
        param_folder = self.get_test_value('save_subshape', 'folder', 'str')
        param_storage = self.get_test_value('save_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_subshape', 'fonts_folder', 'str')
        param_name = self.get_invalid_test_value('save_subshape', 'name', param_name, 'str')
        self.initialize('save_subshape', 'name', param_name)
        ok = False
        try:
            self.api.save_subshape(param_name, param_slide_index, param_path, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_subshape', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_subshape', 'name', param_name)
        if ok:
            self.assert_no_exception('save_subshape', 'name')

    def test_save_subshape_invalid_slide_index(self):
        """Test case for save_subshape with invalid slide_index
        """
        param_name = self.get_test_value('save_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('save_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('save_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('save_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('save_subshape', 'format', 'str')
        param_out_path = self.get_test_value('save_subshape', 'out_path', 'str')
        param_options = self.get_test_value('save_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_subshape', 'bounds', 'str')
        param_password = self.get_test_value('save_subshape', 'password', 'str')
        param_folder = self.get_test_value('save_subshape', 'folder', 'str')
        param_storage = self.get_test_value('save_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_subshape', 'fonts_folder', 'str')
        param_slide_index = self.get_invalid_test_value('save_subshape', 'slide_index', param_slide_index, 'int')
        self.initialize('save_subshape', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.save_subshape(param_name, param_slide_index, param_path, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_subshape', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_subshape', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('save_subshape', 'slide_index')

    def test_save_subshape_invalid_path(self):
        """Test case for save_subshape with invalid path
        """
        param_name = self.get_test_value('save_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('save_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('save_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('save_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('save_subshape', 'format', 'str')
        param_out_path = self.get_test_value('save_subshape', 'out_path', 'str')
        param_options = self.get_test_value('save_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_subshape', 'bounds', 'str')
        param_password = self.get_test_value('save_subshape', 'password', 'str')
        param_folder = self.get_test_value('save_subshape', 'folder', 'str')
        param_storage = self.get_test_value('save_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_subshape', 'fonts_folder', 'str')
        param_path = self.get_invalid_test_value('save_subshape', 'path', param_path, 'str')
        self.initialize('save_subshape', 'path', param_path)
        ok = False
        try:
            self.api.save_subshape(param_name, param_slide_index, param_path, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_subshape', 'path', param_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_subshape', 'path', param_path)
        if ok:
            self.assert_no_exception('save_subshape', 'path')

    def test_save_subshape_invalid_shape_index(self):
        """Test case for save_subshape with invalid shape_index
        """
        param_name = self.get_test_value('save_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('save_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('save_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('save_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('save_subshape', 'format', 'str')
        param_out_path = self.get_test_value('save_subshape', 'out_path', 'str')
        param_options = self.get_test_value('save_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_subshape', 'bounds', 'str')
        param_password = self.get_test_value('save_subshape', 'password', 'str')
        param_folder = self.get_test_value('save_subshape', 'folder', 'str')
        param_storage = self.get_test_value('save_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_subshape', 'fonts_folder', 'str')
        param_shape_index = self.get_invalid_test_value('save_subshape', 'shape_index', param_shape_index, 'int')
        self.initialize('save_subshape', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.save_subshape(param_name, param_slide_index, param_path, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_subshape', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_subshape', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('save_subshape', 'shape_index')

    def test_save_subshape_invalid_format(self):
        """Test case for save_subshape with invalid format
        """
        param_name = self.get_test_value('save_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('save_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('save_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('save_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('save_subshape', 'format', 'str')
        param_out_path = self.get_test_value('save_subshape', 'out_path', 'str')
        param_options = self.get_test_value('save_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_subshape', 'bounds', 'str')
        param_password = self.get_test_value('save_subshape', 'password', 'str')
        param_folder = self.get_test_value('save_subshape', 'folder', 'str')
        param_storage = self.get_test_value('save_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_subshape', 'fonts_folder', 'str')
        param_format = self.get_invalid_test_value('save_subshape', 'format', param_format, 'str')
        self.initialize('save_subshape', 'format', param_format)
        ok = False
        try:
            self.api.save_subshape(param_name, param_slide_index, param_path, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_subshape', 'format', param_format)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_subshape', 'format', param_format)
        if ok:
            self.assert_no_exception('save_subshape', 'format')

    def test_save_subshape_invalid_out_path(self):
        """Test case for save_subshape with invalid out_path
        """
        param_name = self.get_test_value('save_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('save_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('save_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('save_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('save_subshape', 'format', 'str')
        param_out_path = self.get_test_value('save_subshape', 'out_path', 'str')
        param_options = self.get_test_value('save_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_subshape', 'bounds', 'str')
        param_password = self.get_test_value('save_subshape', 'password', 'str')
        param_folder = self.get_test_value('save_subshape', 'folder', 'str')
        param_storage = self.get_test_value('save_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_subshape', 'fonts_folder', 'str')
        param_out_path = self.get_invalid_test_value('save_subshape', 'out_path', param_out_path, 'str')
        self.initialize('save_subshape', 'out_path', param_out_path)
        ok = False
        try:
            self.api.save_subshape(param_name, param_slide_index, param_path, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_subshape', 'out_path', param_out_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_subshape', 'out_path', param_out_path)
        if ok:
            self.assert_no_exception('save_subshape', 'out_path')

    def test_save_subshape_invalid_options(self):
        """Test case for save_subshape with invalid options
        """
        param_name = self.get_test_value('save_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('save_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('save_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('save_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('save_subshape', 'format', 'str')
        param_out_path = self.get_test_value('save_subshape', 'out_path', 'str')
        param_options = self.get_test_value('save_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_subshape', 'bounds', 'str')
        param_password = self.get_test_value('save_subshape', 'password', 'str')
        param_folder = self.get_test_value('save_subshape', 'folder', 'str')
        param_storage = self.get_test_value('save_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_subshape', 'fonts_folder', 'str')
        param_options = self.get_invalid_test_value('save_subshape', 'options', param_options, 'IShapeExportOptions')
        self.initialize('save_subshape', 'options', param_options)
        ok = False
        try:
            self.api.save_subshape(param_name, param_slide_index, param_path, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_subshape', 'options', param_options)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_subshape', 'options', param_options)
        if ok:
            self.assert_no_exception('save_subshape', 'options')

    def test_save_subshape_invalid_scale_x(self):
        """Test case for save_subshape with invalid scale_x
        """
        param_name = self.get_test_value('save_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('save_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('save_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('save_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('save_subshape', 'format', 'str')
        param_out_path = self.get_test_value('save_subshape', 'out_path', 'str')
        param_options = self.get_test_value('save_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_subshape', 'bounds', 'str')
        param_password = self.get_test_value('save_subshape', 'password', 'str')
        param_folder = self.get_test_value('save_subshape', 'folder', 'str')
        param_storage = self.get_test_value('save_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_subshape', 'fonts_folder', 'str')
        param_scale_x = self.get_invalid_test_value('save_subshape', 'scale_x', param_scale_x, 'float')
        self.initialize('save_subshape', 'scale_x', param_scale_x)
        ok = False
        try:
            self.api.save_subshape(param_name, param_slide_index, param_path, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_subshape', 'scale_x', param_scale_x)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_subshape', 'scale_x', param_scale_x)
        if ok:
            self.assert_no_exception('save_subshape', 'scale_x')

    def test_save_subshape_invalid_scale_y(self):
        """Test case for save_subshape with invalid scale_y
        """
        param_name = self.get_test_value('save_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('save_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('save_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('save_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('save_subshape', 'format', 'str')
        param_out_path = self.get_test_value('save_subshape', 'out_path', 'str')
        param_options = self.get_test_value('save_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_subshape', 'bounds', 'str')
        param_password = self.get_test_value('save_subshape', 'password', 'str')
        param_folder = self.get_test_value('save_subshape', 'folder', 'str')
        param_storage = self.get_test_value('save_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_subshape', 'fonts_folder', 'str')
        param_scale_y = self.get_invalid_test_value('save_subshape', 'scale_y', param_scale_y, 'float')
        self.initialize('save_subshape', 'scale_y', param_scale_y)
        ok = False
        try:
            self.api.save_subshape(param_name, param_slide_index, param_path, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_subshape', 'scale_y', param_scale_y)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_subshape', 'scale_y', param_scale_y)
        if ok:
            self.assert_no_exception('save_subshape', 'scale_y')

    def test_save_subshape_invalid_bounds(self):
        """Test case for save_subshape with invalid bounds
        """
        param_name = self.get_test_value('save_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('save_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('save_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('save_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('save_subshape', 'format', 'str')
        param_out_path = self.get_test_value('save_subshape', 'out_path', 'str')
        param_options = self.get_test_value('save_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_subshape', 'bounds', 'str')
        param_password = self.get_test_value('save_subshape', 'password', 'str')
        param_folder = self.get_test_value('save_subshape', 'folder', 'str')
        param_storage = self.get_test_value('save_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_subshape', 'fonts_folder', 'str')
        param_bounds = self.get_invalid_test_value('save_subshape', 'bounds', param_bounds, 'str')
        self.initialize('save_subshape', 'bounds', param_bounds)
        ok = False
        try:
            self.api.save_subshape(param_name, param_slide_index, param_path, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_subshape', 'bounds', param_bounds)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_subshape', 'bounds', param_bounds)
        if ok:
            self.assert_no_exception('save_subshape', 'bounds')

    def test_save_subshape_invalid_password(self):
        """Test case for save_subshape with invalid password
        """
        param_name = self.get_test_value('save_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('save_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('save_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('save_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('save_subshape', 'format', 'str')
        param_out_path = self.get_test_value('save_subshape', 'out_path', 'str')
        param_options = self.get_test_value('save_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_subshape', 'bounds', 'str')
        param_password = self.get_test_value('save_subshape', 'password', 'str')
        param_folder = self.get_test_value('save_subshape', 'folder', 'str')
        param_storage = self.get_test_value('save_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_subshape', 'fonts_folder', 'str')
        param_password = self.get_invalid_test_value('save_subshape', 'password', param_password, 'str')
        self.initialize('save_subshape', 'password', param_password)
        ok = False
        try:
            self.api.save_subshape(param_name, param_slide_index, param_path, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_subshape', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_subshape', 'password', param_password)
        if ok:
            self.assert_no_exception('save_subshape', 'password')

    def test_save_subshape_invalid_folder(self):
        """Test case for save_subshape with invalid folder
        """
        param_name = self.get_test_value('save_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('save_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('save_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('save_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('save_subshape', 'format', 'str')
        param_out_path = self.get_test_value('save_subshape', 'out_path', 'str')
        param_options = self.get_test_value('save_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_subshape', 'bounds', 'str')
        param_password = self.get_test_value('save_subshape', 'password', 'str')
        param_folder = self.get_test_value('save_subshape', 'folder', 'str')
        param_storage = self.get_test_value('save_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_subshape', 'fonts_folder', 'str')
        param_folder = self.get_invalid_test_value('save_subshape', 'folder', param_folder, 'str')
        self.initialize('save_subshape', 'folder', param_folder)
        ok = False
        try:
            self.api.save_subshape(param_name, param_slide_index, param_path, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_subshape', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_subshape', 'folder', param_folder)
        if ok:
            self.assert_no_exception('save_subshape', 'folder')

    def test_save_subshape_invalid_storage(self):
        """Test case for save_subshape with invalid storage
        """
        param_name = self.get_test_value('save_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('save_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('save_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('save_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('save_subshape', 'format', 'str')
        param_out_path = self.get_test_value('save_subshape', 'out_path', 'str')
        param_options = self.get_test_value('save_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_subshape', 'bounds', 'str')
        param_password = self.get_test_value('save_subshape', 'password', 'str')
        param_folder = self.get_test_value('save_subshape', 'folder', 'str')
        param_storage = self.get_test_value('save_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_subshape', 'fonts_folder', 'str')
        param_storage = self.get_invalid_test_value('save_subshape', 'storage', param_storage, 'str')
        self.initialize('save_subshape', 'storage', param_storage)
        ok = False
        try:
            self.api.save_subshape(param_name, param_slide_index, param_path, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_subshape', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_subshape', 'storage', param_storage)
        if ok:
            self.assert_no_exception('save_subshape', 'storage')

    def test_save_subshape_invalid_fonts_folder(self):
        """Test case for save_subshape with invalid fonts_folder
        """
        param_name = self.get_test_value('save_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('save_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('save_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('save_subshape', 'shape_index', 'int')
        param_format = self.get_test_value('save_subshape', 'format', 'str')
        param_out_path = self.get_test_value('save_subshape', 'out_path', 'str')
        param_options = self.get_test_value('save_subshape', 'options', 'IShapeExportOptions')
        param_scale_x = self.get_test_value('save_subshape', 'scale_x', 'float')
        param_scale_y = self.get_test_value('save_subshape', 'scale_y', 'float')
        param_bounds = self.get_test_value('save_subshape', 'bounds', 'str')
        param_password = self.get_test_value('save_subshape', 'password', 'str')
        param_folder = self.get_test_value('save_subshape', 'folder', 'str')
        param_storage = self.get_test_value('save_subshape', 'storage', 'str')
        param_fonts_folder = self.get_test_value('save_subshape', 'fonts_folder', 'str')
        param_fonts_folder = self.get_invalid_test_value('save_subshape', 'fonts_folder', param_fonts_folder, 'str')
        self.initialize('save_subshape', 'fonts_folder', param_fonts_folder)
        ok = False
        try:
            self.api.save_subshape(param_name, param_slide_index, param_path, param_shape_index, param_format, param_out_path, param_options, param_scale_x, param_scale_y, param_bounds, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'save_subshape', 'fonts_folder', param_fonts_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'save_subshape', 'fonts_folder', param_fonts_folder)
        if ok:
            self.assert_no_exception('save_subshape', 'fonts_folder')

    def test_set_animation(self):
        """Test case for set_animation
        """
        param_name = self.get_test_value('set_animation', 'name', 'str')
        param_slide_index = self.get_test_value('set_animation', 'slide_index', 'int')
        param_animation = self.get_test_value('set_animation', 'animation', 'SlideAnimation')
        param_password = self.get_test_value('set_animation', 'password', 'str')
        param_folder = self.get_test_value('set_animation', 'folder', 'str')
        param_storage = self.get_test_value('set_animation', 'storage', 'str')
        self.initialize('set_animation', None, None)
        response = self.api.set_animation(param_name, param_slide_index, param_animation, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_set_animation_invalid_name(self):
        """Test case for set_animation with invalid name
        """
        param_name = self.get_test_value('set_animation', 'name', 'str')
        param_slide_index = self.get_test_value('set_animation', 'slide_index', 'int')
        param_animation = self.get_test_value('set_animation', 'animation', 'SlideAnimation')
        param_password = self.get_test_value('set_animation', 'password', 'str')
        param_folder = self.get_test_value('set_animation', 'folder', 'str')
        param_storage = self.get_test_value('set_animation', 'storage', 'str')
        param_name = self.get_invalid_test_value('set_animation', 'name', param_name, 'str')
        self.initialize('set_animation', 'name', param_name)
        ok = False
        try:
            self.api.set_animation(param_name, param_slide_index, param_animation, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_animation', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_animation', 'name', param_name)
        if ok:
            self.assert_no_exception('set_animation', 'name')

    def test_set_animation_invalid_slide_index(self):
        """Test case for set_animation with invalid slide_index
        """
        param_name = self.get_test_value('set_animation', 'name', 'str')
        param_slide_index = self.get_test_value('set_animation', 'slide_index', 'int')
        param_animation = self.get_test_value('set_animation', 'animation', 'SlideAnimation')
        param_password = self.get_test_value('set_animation', 'password', 'str')
        param_folder = self.get_test_value('set_animation', 'folder', 'str')
        param_storage = self.get_test_value('set_animation', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('set_animation', 'slide_index', param_slide_index, 'int')
        self.initialize('set_animation', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.set_animation(param_name, param_slide_index, param_animation, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_animation', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_animation', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('set_animation', 'slide_index')

    def test_set_animation_invalid_animation(self):
        """Test case for set_animation with invalid animation
        """
        param_name = self.get_test_value('set_animation', 'name', 'str')
        param_slide_index = self.get_test_value('set_animation', 'slide_index', 'int')
        param_animation = self.get_test_value('set_animation', 'animation', 'SlideAnimation')
        param_password = self.get_test_value('set_animation', 'password', 'str')
        param_folder = self.get_test_value('set_animation', 'folder', 'str')
        param_storage = self.get_test_value('set_animation', 'storage', 'str')
        param_animation = self.get_invalid_test_value('set_animation', 'animation', param_animation, 'SlideAnimation')
        self.initialize('set_animation', 'animation', param_animation)
        ok = False
        try:
            self.api.set_animation(param_name, param_slide_index, param_animation, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_animation', 'animation', param_animation)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_animation', 'animation', param_animation)
        if ok:
            self.assert_no_exception('set_animation', 'animation')

    def test_set_animation_invalid_password(self):
        """Test case for set_animation with invalid password
        """
        param_name = self.get_test_value('set_animation', 'name', 'str')
        param_slide_index = self.get_test_value('set_animation', 'slide_index', 'int')
        param_animation = self.get_test_value('set_animation', 'animation', 'SlideAnimation')
        param_password = self.get_test_value('set_animation', 'password', 'str')
        param_folder = self.get_test_value('set_animation', 'folder', 'str')
        param_storage = self.get_test_value('set_animation', 'storage', 'str')
        param_password = self.get_invalid_test_value('set_animation', 'password', param_password, 'str')
        self.initialize('set_animation', 'password', param_password)
        ok = False
        try:
            self.api.set_animation(param_name, param_slide_index, param_animation, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_animation', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_animation', 'password', param_password)
        if ok:
            self.assert_no_exception('set_animation', 'password')

    def test_set_animation_invalid_folder(self):
        """Test case for set_animation with invalid folder
        """
        param_name = self.get_test_value('set_animation', 'name', 'str')
        param_slide_index = self.get_test_value('set_animation', 'slide_index', 'int')
        param_animation = self.get_test_value('set_animation', 'animation', 'SlideAnimation')
        param_password = self.get_test_value('set_animation', 'password', 'str')
        param_folder = self.get_test_value('set_animation', 'folder', 'str')
        param_storage = self.get_test_value('set_animation', 'storage', 'str')
        param_folder = self.get_invalid_test_value('set_animation', 'folder', param_folder, 'str')
        self.initialize('set_animation', 'folder', param_folder)
        ok = False
        try:
            self.api.set_animation(param_name, param_slide_index, param_animation, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_animation', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_animation', 'folder', param_folder)
        if ok:
            self.assert_no_exception('set_animation', 'folder')

    def test_set_animation_invalid_storage(self):
        """Test case for set_animation with invalid storage
        """
        param_name = self.get_test_value('set_animation', 'name', 'str')
        param_slide_index = self.get_test_value('set_animation', 'slide_index', 'int')
        param_animation = self.get_test_value('set_animation', 'animation', 'SlideAnimation')
        param_password = self.get_test_value('set_animation', 'password', 'str')
        param_folder = self.get_test_value('set_animation', 'folder', 'str')
        param_storage = self.get_test_value('set_animation', 'storage', 'str')
        param_storage = self.get_invalid_test_value('set_animation', 'storage', param_storage, 'str')
        self.initialize('set_animation', 'storage', param_storage)
        ok = False
        try:
            self.api.set_animation(param_name, param_slide_index, param_animation, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_animation', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_animation', 'storage', param_storage)
        if ok:
            self.assert_no_exception('set_animation', 'storage')

    def test_set_background(self):
        """Test case for set_background
        """
        param_name = self.get_test_value('set_background', 'name', 'str')
        param_slide_index = self.get_test_value('set_background', 'slide_index', 'int')
        param_background = self.get_test_value('set_background', 'background', 'SlideBackground')
        param_password = self.get_test_value('set_background', 'password', 'str')
        param_folder = self.get_test_value('set_background', 'folder', 'str')
        param_storage = self.get_test_value('set_background', 'storage', 'str')
        self.initialize('set_background', None, None)
        response = self.api.set_background(param_name, param_slide_index, param_background, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_set_background_invalid_name(self):
        """Test case for set_background with invalid name
        """
        param_name = self.get_test_value('set_background', 'name', 'str')
        param_slide_index = self.get_test_value('set_background', 'slide_index', 'int')
        param_background = self.get_test_value('set_background', 'background', 'SlideBackground')
        param_password = self.get_test_value('set_background', 'password', 'str')
        param_folder = self.get_test_value('set_background', 'folder', 'str')
        param_storage = self.get_test_value('set_background', 'storage', 'str')
        param_name = self.get_invalid_test_value('set_background', 'name', param_name, 'str')
        self.initialize('set_background', 'name', param_name)
        ok = False
        try:
            self.api.set_background(param_name, param_slide_index, param_background, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_background', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_background', 'name', param_name)
        if ok:
            self.assert_no_exception('set_background', 'name')

    def test_set_background_invalid_slide_index(self):
        """Test case for set_background with invalid slide_index
        """
        param_name = self.get_test_value('set_background', 'name', 'str')
        param_slide_index = self.get_test_value('set_background', 'slide_index', 'int')
        param_background = self.get_test_value('set_background', 'background', 'SlideBackground')
        param_password = self.get_test_value('set_background', 'password', 'str')
        param_folder = self.get_test_value('set_background', 'folder', 'str')
        param_storage = self.get_test_value('set_background', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('set_background', 'slide_index', param_slide_index, 'int')
        self.initialize('set_background', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.set_background(param_name, param_slide_index, param_background, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_background', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_background', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('set_background', 'slide_index')

    def test_set_background_invalid_background(self):
        """Test case for set_background with invalid background
        """
        param_name = self.get_test_value('set_background', 'name', 'str')
        param_slide_index = self.get_test_value('set_background', 'slide_index', 'int')
        param_background = self.get_test_value('set_background', 'background', 'SlideBackground')
        param_password = self.get_test_value('set_background', 'password', 'str')
        param_folder = self.get_test_value('set_background', 'folder', 'str')
        param_storage = self.get_test_value('set_background', 'storage', 'str')
        param_background = self.get_invalid_test_value('set_background', 'background', param_background, 'SlideBackground')
        self.initialize('set_background', 'background', param_background)
        ok = False
        try:
            self.api.set_background(param_name, param_slide_index, param_background, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_background', 'background', param_background)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_background', 'background', param_background)
        if ok:
            self.assert_no_exception('set_background', 'background')

    def test_set_background_invalid_password(self):
        """Test case for set_background with invalid password
        """
        param_name = self.get_test_value('set_background', 'name', 'str')
        param_slide_index = self.get_test_value('set_background', 'slide_index', 'int')
        param_background = self.get_test_value('set_background', 'background', 'SlideBackground')
        param_password = self.get_test_value('set_background', 'password', 'str')
        param_folder = self.get_test_value('set_background', 'folder', 'str')
        param_storage = self.get_test_value('set_background', 'storage', 'str')
        param_password = self.get_invalid_test_value('set_background', 'password', param_password, 'str')
        self.initialize('set_background', 'password', param_password)
        ok = False
        try:
            self.api.set_background(param_name, param_slide_index, param_background, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_background', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_background', 'password', param_password)
        if ok:
            self.assert_no_exception('set_background', 'password')

    def test_set_background_invalid_folder(self):
        """Test case for set_background with invalid folder
        """
        param_name = self.get_test_value('set_background', 'name', 'str')
        param_slide_index = self.get_test_value('set_background', 'slide_index', 'int')
        param_background = self.get_test_value('set_background', 'background', 'SlideBackground')
        param_password = self.get_test_value('set_background', 'password', 'str')
        param_folder = self.get_test_value('set_background', 'folder', 'str')
        param_storage = self.get_test_value('set_background', 'storage', 'str')
        param_folder = self.get_invalid_test_value('set_background', 'folder', param_folder, 'str')
        self.initialize('set_background', 'folder', param_folder)
        ok = False
        try:
            self.api.set_background(param_name, param_slide_index, param_background, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_background', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_background', 'folder', param_folder)
        if ok:
            self.assert_no_exception('set_background', 'folder')

    def test_set_background_invalid_storage(self):
        """Test case for set_background with invalid storage
        """
        param_name = self.get_test_value('set_background', 'name', 'str')
        param_slide_index = self.get_test_value('set_background', 'slide_index', 'int')
        param_background = self.get_test_value('set_background', 'background', 'SlideBackground')
        param_password = self.get_test_value('set_background', 'password', 'str')
        param_folder = self.get_test_value('set_background', 'folder', 'str')
        param_storage = self.get_test_value('set_background', 'storage', 'str')
        param_storage = self.get_invalid_test_value('set_background', 'storage', param_storage, 'str')
        self.initialize('set_background', 'storage', param_storage)
        ok = False
        try:
            self.api.set_background(param_name, param_slide_index, param_background, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_background', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_background', 'storage', param_storage)
        if ok:
            self.assert_no_exception('set_background', 'storage')

    def test_set_background_color(self):
        """Test case for set_background_color
        """
        param_name = self.get_test_value('set_background_color', 'name', 'str')
        param_slide_index = self.get_test_value('set_background_color', 'slide_index', 'int')
        param_color = self.get_test_value('set_background_color', 'color', 'str')
        param_password = self.get_test_value('set_background_color', 'password', 'str')
        param_folder = self.get_test_value('set_background_color', 'folder', 'str')
        param_storage = self.get_test_value('set_background_color', 'storage', 'str')
        self.initialize('set_background_color', None, None)
        response = self.api.set_background_color(param_name, param_slide_index, param_color, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_set_background_color_invalid_name(self):
        """Test case for set_background_color with invalid name
        """
        param_name = self.get_test_value('set_background_color', 'name', 'str')
        param_slide_index = self.get_test_value('set_background_color', 'slide_index', 'int')
        param_color = self.get_test_value('set_background_color', 'color', 'str')
        param_password = self.get_test_value('set_background_color', 'password', 'str')
        param_folder = self.get_test_value('set_background_color', 'folder', 'str')
        param_storage = self.get_test_value('set_background_color', 'storage', 'str')
        param_name = self.get_invalid_test_value('set_background_color', 'name', param_name, 'str')
        self.initialize('set_background_color', 'name', param_name)
        ok = False
        try:
            self.api.set_background_color(param_name, param_slide_index, param_color, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_background_color', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_background_color', 'name', param_name)
        if ok:
            self.assert_no_exception('set_background_color', 'name')

    def test_set_background_color_invalid_slide_index(self):
        """Test case for set_background_color with invalid slide_index
        """
        param_name = self.get_test_value('set_background_color', 'name', 'str')
        param_slide_index = self.get_test_value('set_background_color', 'slide_index', 'int')
        param_color = self.get_test_value('set_background_color', 'color', 'str')
        param_password = self.get_test_value('set_background_color', 'password', 'str')
        param_folder = self.get_test_value('set_background_color', 'folder', 'str')
        param_storage = self.get_test_value('set_background_color', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('set_background_color', 'slide_index', param_slide_index, 'int')
        self.initialize('set_background_color', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.set_background_color(param_name, param_slide_index, param_color, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_background_color', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_background_color', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('set_background_color', 'slide_index')

    def test_set_background_color_invalid_color(self):
        """Test case for set_background_color with invalid color
        """
        param_name = self.get_test_value('set_background_color', 'name', 'str')
        param_slide_index = self.get_test_value('set_background_color', 'slide_index', 'int')
        param_color = self.get_test_value('set_background_color', 'color', 'str')
        param_password = self.get_test_value('set_background_color', 'password', 'str')
        param_folder = self.get_test_value('set_background_color', 'folder', 'str')
        param_storage = self.get_test_value('set_background_color', 'storage', 'str')
        param_color = self.get_invalid_test_value('set_background_color', 'color', param_color, 'str')
        self.initialize('set_background_color', 'color', param_color)
        ok = False
        try:
            self.api.set_background_color(param_name, param_slide_index, param_color, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_background_color', 'color', param_color)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_background_color', 'color', param_color)
        if ok:
            self.assert_no_exception('set_background_color', 'color')

    def test_set_background_color_invalid_password(self):
        """Test case for set_background_color with invalid password
        """
        param_name = self.get_test_value('set_background_color', 'name', 'str')
        param_slide_index = self.get_test_value('set_background_color', 'slide_index', 'int')
        param_color = self.get_test_value('set_background_color', 'color', 'str')
        param_password = self.get_test_value('set_background_color', 'password', 'str')
        param_folder = self.get_test_value('set_background_color', 'folder', 'str')
        param_storage = self.get_test_value('set_background_color', 'storage', 'str')
        param_password = self.get_invalid_test_value('set_background_color', 'password', param_password, 'str')
        self.initialize('set_background_color', 'password', param_password)
        ok = False
        try:
            self.api.set_background_color(param_name, param_slide_index, param_color, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_background_color', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_background_color', 'password', param_password)
        if ok:
            self.assert_no_exception('set_background_color', 'password')

    def test_set_background_color_invalid_folder(self):
        """Test case for set_background_color with invalid folder
        """
        param_name = self.get_test_value('set_background_color', 'name', 'str')
        param_slide_index = self.get_test_value('set_background_color', 'slide_index', 'int')
        param_color = self.get_test_value('set_background_color', 'color', 'str')
        param_password = self.get_test_value('set_background_color', 'password', 'str')
        param_folder = self.get_test_value('set_background_color', 'folder', 'str')
        param_storage = self.get_test_value('set_background_color', 'storage', 'str')
        param_folder = self.get_invalid_test_value('set_background_color', 'folder', param_folder, 'str')
        self.initialize('set_background_color', 'folder', param_folder)
        ok = False
        try:
            self.api.set_background_color(param_name, param_slide_index, param_color, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_background_color', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_background_color', 'folder', param_folder)
        if ok:
            self.assert_no_exception('set_background_color', 'folder')

    def test_set_background_color_invalid_storage(self):
        """Test case for set_background_color with invalid storage
        """
        param_name = self.get_test_value('set_background_color', 'name', 'str')
        param_slide_index = self.get_test_value('set_background_color', 'slide_index', 'int')
        param_color = self.get_test_value('set_background_color', 'color', 'str')
        param_password = self.get_test_value('set_background_color', 'password', 'str')
        param_folder = self.get_test_value('set_background_color', 'folder', 'str')
        param_storage = self.get_test_value('set_background_color', 'storage', 'str')
        param_storage = self.get_invalid_test_value('set_background_color', 'storage', param_storage, 'str')
        self.initialize('set_background_color', 'storage', param_storage)
        ok = False
        try:
            self.api.set_background_color(param_name, param_slide_index, param_color, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_background_color', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_background_color', 'storage', param_storage)
        if ok:
            self.assert_no_exception('set_background_color', 'storage')

    def test_set_document_properties(self):
        """Test case for set_document_properties
        """
        param_name = self.get_test_value('set_document_properties', 'name', 'str')
        param_properties = self.get_test_value('set_document_properties', 'properties', 'DocumentProperties')
        param_password = self.get_test_value('set_document_properties', 'password', 'str')
        param_folder = self.get_test_value('set_document_properties', 'folder', 'str')
        param_storage = self.get_test_value('set_document_properties', 'storage', 'str')
        self.initialize('set_document_properties', None, None)
        response = self.api.set_document_properties(param_name, param_properties, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_set_document_properties_invalid_name(self):
        """Test case for set_document_properties with invalid name
        """
        param_name = self.get_test_value('set_document_properties', 'name', 'str')
        param_properties = self.get_test_value('set_document_properties', 'properties', 'DocumentProperties')
        param_password = self.get_test_value('set_document_properties', 'password', 'str')
        param_folder = self.get_test_value('set_document_properties', 'folder', 'str')
        param_storage = self.get_test_value('set_document_properties', 'storage', 'str')
        param_name = self.get_invalid_test_value('set_document_properties', 'name', param_name, 'str')
        self.initialize('set_document_properties', 'name', param_name)
        ok = False
        try:
            self.api.set_document_properties(param_name, param_properties, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_document_properties', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_document_properties', 'name', param_name)
        if ok:
            self.assert_no_exception('set_document_properties', 'name')

    def test_set_document_properties_invalid_properties(self):
        """Test case for set_document_properties with invalid properties
        """
        param_name = self.get_test_value('set_document_properties', 'name', 'str')
        param_properties = self.get_test_value('set_document_properties', 'properties', 'DocumentProperties')
        param_password = self.get_test_value('set_document_properties', 'password', 'str')
        param_folder = self.get_test_value('set_document_properties', 'folder', 'str')
        param_storage = self.get_test_value('set_document_properties', 'storage', 'str')
        param_properties = self.get_invalid_test_value('set_document_properties', 'properties', param_properties, 'DocumentProperties')
        self.initialize('set_document_properties', 'properties', param_properties)
        ok = False
        try:
            self.api.set_document_properties(param_name, param_properties, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_document_properties', 'properties', param_properties)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_document_properties', 'properties', param_properties)
        if ok:
            self.assert_no_exception('set_document_properties', 'properties')

    def test_set_document_properties_invalid_password(self):
        """Test case for set_document_properties with invalid password
        """
        param_name = self.get_test_value('set_document_properties', 'name', 'str')
        param_properties = self.get_test_value('set_document_properties', 'properties', 'DocumentProperties')
        param_password = self.get_test_value('set_document_properties', 'password', 'str')
        param_folder = self.get_test_value('set_document_properties', 'folder', 'str')
        param_storage = self.get_test_value('set_document_properties', 'storage', 'str')
        param_password = self.get_invalid_test_value('set_document_properties', 'password', param_password, 'str')
        self.initialize('set_document_properties', 'password', param_password)
        ok = False
        try:
            self.api.set_document_properties(param_name, param_properties, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_document_properties', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_document_properties', 'password', param_password)
        if ok:
            self.assert_no_exception('set_document_properties', 'password')

    def test_set_document_properties_invalid_folder(self):
        """Test case for set_document_properties with invalid folder
        """
        param_name = self.get_test_value('set_document_properties', 'name', 'str')
        param_properties = self.get_test_value('set_document_properties', 'properties', 'DocumentProperties')
        param_password = self.get_test_value('set_document_properties', 'password', 'str')
        param_folder = self.get_test_value('set_document_properties', 'folder', 'str')
        param_storage = self.get_test_value('set_document_properties', 'storage', 'str')
        param_folder = self.get_invalid_test_value('set_document_properties', 'folder', param_folder, 'str')
        self.initialize('set_document_properties', 'folder', param_folder)
        ok = False
        try:
            self.api.set_document_properties(param_name, param_properties, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_document_properties', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_document_properties', 'folder', param_folder)
        if ok:
            self.assert_no_exception('set_document_properties', 'folder')

    def test_set_document_properties_invalid_storage(self):
        """Test case for set_document_properties with invalid storage
        """
        param_name = self.get_test_value('set_document_properties', 'name', 'str')
        param_properties = self.get_test_value('set_document_properties', 'properties', 'DocumentProperties')
        param_password = self.get_test_value('set_document_properties', 'password', 'str')
        param_folder = self.get_test_value('set_document_properties', 'folder', 'str')
        param_storage = self.get_test_value('set_document_properties', 'storage', 'str')
        param_storage = self.get_invalid_test_value('set_document_properties', 'storage', param_storage, 'str')
        self.initialize('set_document_properties', 'storage', param_storage)
        ok = False
        try:
            self.api.set_document_properties(param_name, param_properties, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_document_properties', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_document_properties', 'storage', param_storage)
        if ok:
            self.assert_no_exception('set_document_properties', 'storage')

    def test_set_document_property(self):
        """Test case for set_document_property
        """
        param_name = self.get_test_value('set_document_property', 'name', 'str')
        param_property_name = self.get_test_value('set_document_property', 'property_name', 'str')
        param__property = self.get_test_value('set_document_property', '_property', 'DocumentProperty')
        param_password = self.get_test_value('set_document_property', 'password', 'str')
        param_folder = self.get_test_value('set_document_property', 'folder', 'str')
        param_storage = self.get_test_value('set_document_property', 'storage', 'str')
        self.initialize('set_document_property', None, None)
        response = self.api.set_document_property(param_name, param_property_name, param__property, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_set_document_property_invalid_name(self):
        """Test case for set_document_property with invalid name
        """
        param_name = self.get_test_value('set_document_property', 'name', 'str')
        param_property_name = self.get_test_value('set_document_property', 'property_name', 'str')
        param__property = self.get_test_value('set_document_property', '_property', 'DocumentProperty')
        param_password = self.get_test_value('set_document_property', 'password', 'str')
        param_folder = self.get_test_value('set_document_property', 'folder', 'str')
        param_storage = self.get_test_value('set_document_property', 'storage', 'str')
        param_name = self.get_invalid_test_value('set_document_property', 'name', param_name, 'str')
        self.initialize('set_document_property', 'name', param_name)
        ok = False
        try:
            self.api.set_document_property(param_name, param_property_name, param__property, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_document_property', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_document_property', 'name', param_name)
        if ok:
            self.assert_no_exception('set_document_property', 'name')

    def test_set_document_property_invalid_property_name(self):
        """Test case for set_document_property with invalid property_name
        """
        param_name = self.get_test_value('set_document_property', 'name', 'str')
        param_property_name = self.get_test_value('set_document_property', 'property_name', 'str')
        param__property = self.get_test_value('set_document_property', '_property', 'DocumentProperty')
        param_password = self.get_test_value('set_document_property', 'password', 'str')
        param_folder = self.get_test_value('set_document_property', 'folder', 'str')
        param_storage = self.get_test_value('set_document_property', 'storage', 'str')
        param_property_name = self.get_invalid_test_value('set_document_property', 'property_name', param_property_name, 'str')
        self.initialize('set_document_property', 'property_name', param_property_name)
        ok = False
        try:
            self.api.set_document_property(param_name, param_property_name, param__property, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_document_property', 'property_name', param_property_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_document_property', 'property_name', param_property_name)
        if ok:
            self.assert_no_exception('set_document_property', 'property_name')

    def test_set_document_property_invalid__property(self):
        """Test case for set_document_property with invalid _property
        """
        param_name = self.get_test_value('set_document_property', 'name', 'str')
        param_property_name = self.get_test_value('set_document_property', 'property_name', 'str')
        param__property = self.get_test_value('set_document_property', '_property', 'DocumentProperty')
        param_password = self.get_test_value('set_document_property', 'password', 'str')
        param_folder = self.get_test_value('set_document_property', 'folder', 'str')
        param_storage = self.get_test_value('set_document_property', 'storage', 'str')
        param__property = self.get_invalid_test_value('set_document_property', '_property', param__property, 'DocumentProperty')
        self.initialize('set_document_property', '_property', param__property)
        ok = False
        try:
            self.api.set_document_property(param_name, param_property_name, param__property, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_document_property', '_property', param__property)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_document_property', '_property', param__property)
        if ok:
            self.assert_no_exception('set_document_property', '_property')

    def test_set_document_property_invalid_password(self):
        """Test case for set_document_property with invalid password
        """
        param_name = self.get_test_value('set_document_property', 'name', 'str')
        param_property_name = self.get_test_value('set_document_property', 'property_name', 'str')
        param__property = self.get_test_value('set_document_property', '_property', 'DocumentProperty')
        param_password = self.get_test_value('set_document_property', 'password', 'str')
        param_folder = self.get_test_value('set_document_property', 'folder', 'str')
        param_storage = self.get_test_value('set_document_property', 'storage', 'str')
        param_password = self.get_invalid_test_value('set_document_property', 'password', param_password, 'str')
        self.initialize('set_document_property', 'password', param_password)
        ok = False
        try:
            self.api.set_document_property(param_name, param_property_name, param__property, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_document_property', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_document_property', 'password', param_password)
        if ok:
            self.assert_no_exception('set_document_property', 'password')

    def test_set_document_property_invalid_folder(self):
        """Test case for set_document_property with invalid folder
        """
        param_name = self.get_test_value('set_document_property', 'name', 'str')
        param_property_name = self.get_test_value('set_document_property', 'property_name', 'str')
        param__property = self.get_test_value('set_document_property', '_property', 'DocumentProperty')
        param_password = self.get_test_value('set_document_property', 'password', 'str')
        param_folder = self.get_test_value('set_document_property', 'folder', 'str')
        param_storage = self.get_test_value('set_document_property', 'storage', 'str')
        param_folder = self.get_invalid_test_value('set_document_property', 'folder', param_folder, 'str')
        self.initialize('set_document_property', 'folder', param_folder)
        ok = False
        try:
            self.api.set_document_property(param_name, param_property_name, param__property, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_document_property', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_document_property', 'folder', param_folder)
        if ok:
            self.assert_no_exception('set_document_property', 'folder')

    def test_set_document_property_invalid_storage(self):
        """Test case for set_document_property with invalid storage
        """
        param_name = self.get_test_value('set_document_property', 'name', 'str')
        param_property_name = self.get_test_value('set_document_property', 'property_name', 'str')
        param__property = self.get_test_value('set_document_property', '_property', 'DocumentProperty')
        param_password = self.get_test_value('set_document_property', 'password', 'str')
        param_folder = self.get_test_value('set_document_property', 'folder', 'str')
        param_storage = self.get_test_value('set_document_property', 'storage', 'str')
        param_storage = self.get_invalid_test_value('set_document_property', 'storage', param_storage, 'str')
        self.initialize('set_document_property', 'storage', param_storage)
        ok = False
        try:
            self.api.set_document_property(param_name, param_property_name, param__property, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_document_property', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_document_property', 'storage', param_storage)
        if ok:
            self.assert_no_exception('set_document_property', 'storage')

    def test_set_notes_slide_header_footer(self):
        """Test case for set_notes_slide_header_footer
        """
        param_name = self.get_test_value('set_notes_slide_header_footer', 'name', 'str')
        param_slide_index = self.get_test_value('set_notes_slide_header_footer', 'slide_index', 'int')
        param_dto = self.get_test_value('set_notes_slide_header_footer', 'dto', 'NotesSlideHeaderFooter')
        param_password = self.get_test_value('set_notes_slide_header_footer', 'password', 'str')
        param_folder = self.get_test_value('set_notes_slide_header_footer', 'folder', 'str')
        param_storage = self.get_test_value('set_notes_slide_header_footer', 'storage', 'str')
        self.initialize('set_notes_slide_header_footer', None, None)
        response = self.api.set_notes_slide_header_footer(param_name, param_slide_index, param_dto, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_set_notes_slide_header_footer_invalid_name(self):
        """Test case for set_notes_slide_header_footer with invalid name
        """
        param_name = self.get_test_value('set_notes_slide_header_footer', 'name', 'str')
        param_slide_index = self.get_test_value('set_notes_slide_header_footer', 'slide_index', 'int')
        param_dto = self.get_test_value('set_notes_slide_header_footer', 'dto', 'NotesSlideHeaderFooter')
        param_password = self.get_test_value('set_notes_slide_header_footer', 'password', 'str')
        param_folder = self.get_test_value('set_notes_slide_header_footer', 'folder', 'str')
        param_storage = self.get_test_value('set_notes_slide_header_footer', 'storage', 'str')
        param_name = self.get_invalid_test_value('set_notes_slide_header_footer', 'name', param_name, 'str')
        self.initialize('set_notes_slide_header_footer', 'name', param_name)
        ok = False
        try:
            self.api.set_notes_slide_header_footer(param_name, param_slide_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_notes_slide_header_footer', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_notes_slide_header_footer', 'name', param_name)
        if ok:
            self.assert_no_exception('set_notes_slide_header_footer', 'name')

    def test_set_notes_slide_header_footer_invalid_slide_index(self):
        """Test case for set_notes_slide_header_footer with invalid slide_index
        """
        param_name = self.get_test_value('set_notes_slide_header_footer', 'name', 'str')
        param_slide_index = self.get_test_value('set_notes_slide_header_footer', 'slide_index', 'int')
        param_dto = self.get_test_value('set_notes_slide_header_footer', 'dto', 'NotesSlideHeaderFooter')
        param_password = self.get_test_value('set_notes_slide_header_footer', 'password', 'str')
        param_folder = self.get_test_value('set_notes_slide_header_footer', 'folder', 'str')
        param_storage = self.get_test_value('set_notes_slide_header_footer', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('set_notes_slide_header_footer', 'slide_index', param_slide_index, 'int')
        self.initialize('set_notes_slide_header_footer', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.set_notes_slide_header_footer(param_name, param_slide_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_notes_slide_header_footer', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_notes_slide_header_footer', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('set_notes_slide_header_footer', 'slide_index')

    def test_set_notes_slide_header_footer_invalid_dto(self):
        """Test case for set_notes_slide_header_footer with invalid dto
        """
        param_name = self.get_test_value('set_notes_slide_header_footer', 'name', 'str')
        param_slide_index = self.get_test_value('set_notes_slide_header_footer', 'slide_index', 'int')
        param_dto = self.get_test_value('set_notes_slide_header_footer', 'dto', 'NotesSlideHeaderFooter')
        param_password = self.get_test_value('set_notes_slide_header_footer', 'password', 'str')
        param_folder = self.get_test_value('set_notes_slide_header_footer', 'folder', 'str')
        param_storage = self.get_test_value('set_notes_slide_header_footer', 'storage', 'str')
        param_dto = self.get_invalid_test_value('set_notes_slide_header_footer', 'dto', param_dto, 'NotesSlideHeaderFooter')
        self.initialize('set_notes_slide_header_footer', 'dto', param_dto)
        ok = False
        try:
            self.api.set_notes_slide_header_footer(param_name, param_slide_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_notes_slide_header_footer', 'dto', param_dto)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_notes_slide_header_footer', 'dto', param_dto)
        if ok:
            self.assert_no_exception('set_notes_slide_header_footer', 'dto')

    def test_set_notes_slide_header_footer_invalid_password(self):
        """Test case for set_notes_slide_header_footer with invalid password
        """
        param_name = self.get_test_value('set_notes_slide_header_footer', 'name', 'str')
        param_slide_index = self.get_test_value('set_notes_slide_header_footer', 'slide_index', 'int')
        param_dto = self.get_test_value('set_notes_slide_header_footer', 'dto', 'NotesSlideHeaderFooter')
        param_password = self.get_test_value('set_notes_slide_header_footer', 'password', 'str')
        param_folder = self.get_test_value('set_notes_slide_header_footer', 'folder', 'str')
        param_storage = self.get_test_value('set_notes_slide_header_footer', 'storage', 'str')
        param_password = self.get_invalid_test_value('set_notes_slide_header_footer', 'password', param_password, 'str')
        self.initialize('set_notes_slide_header_footer', 'password', param_password)
        ok = False
        try:
            self.api.set_notes_slide_header_footer(param_name, param_slide_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_notes_slide_header_footer', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_notes_slide_header_footer', 'password', param_password)
        if ok:
            self.assert_no_exception('set_notes_slide_header_footer', 'password')

    def test_set_notes_slide_header_footer_invalid_folder(self):
        """Test case for set_notes_slide_header_footer with invalid folder
        """
        param_name = self.get_test_value('set_notes_slide_header_footer', 'name', 'str')
        param_slide_index = self.get_test_value('set_notes_slide_header_footer', 'slide_index', 'int')
        param_dto = self.get_test_value('set_notes_slide_header_footer', 'dto', 'NotesSlideHeaderFooter')
        param_password = self.get_test_value('set_notes_slide_header_footer', 'password', 'str')
        param_folder = self.get_test_value('set_notes_slide_header_footer', 'folder', 'str')
        param_storage = self.get_test_value('set_notes_slide_header_footer', 'storage', 'str')
        param_folder = self.get_invalid_test_value('set_notes_slide_header_footer', 'folder', param_folder, 'str')
        self.initialize('set_notes_slide_header_footer', 'folder', param_folder)
        ok = False
        try:
            self.api.set_notes_slide_header_footer(param_name, param_slide_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_notes_slide_header_footer', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_notes_slide_header_footer', 'folder', param_folder)
        if ok:
            self.assert_no_exception('set_notes_slide_header_footer', 'folder')

    def test_set_notes_slide_header_footer_invalid_storage(self):
        """Test case for set_notes_slide_header_footer with invalid storage
        """
        param_name = self.get_test_value('set_notes_slide_header_footer', 'name', 'str')
        param_slide_index = self.get_test_value('set_notes_slide_header_footer', 'slide_index', 'int')
        param_dto = self.get_test_value('set_notes_slide_header_footer', 'dto', 'NotesSlideHeaderFooter')
        param_password = self.get_test_value('set_notes_slide_header_footer', 'password', 'str')
        param_folder = self.get_test_value('set_notes_slide_header_footer', 'folder', 'str')
        param_storage = self.get_test_value('set_notes_slide_header_footer', 'storage', 'str')
        param_storage = self.get_invalid_test_value('set_notes_slide_header_footer', 'storage', param_storage, 'str')
        self.initialize('set_notes_slide_header_footer', 'storage', param_storage)
        ok = False
        try:
            self.api.set_notes_slide_header_footer(param_name, param_slide_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_notes_slide_header_footer', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_notes_slide_header_footer', 'storage', param_storage)
        if ok:
            self.assert_no_exception('set_notes_slide_header_footer', 'storage')

    def test_set_presentation_header_footer(self):
        """Test case for set_presentation_header_footer
        """
        param_name = self.get_test_value('set_presentation_header_footer', 'name', 'str')
        param_dto = self.get_test_value('set_presentation_header_footer', 'dto', 'HeaderFooter')
        param_password = self.get_test_value('set_presentation_header_footer', 'password', 'str')
        param_folder = self.get_test_value('set_presentation_header_footer', 'folder', 'str')
        param_storage = self.get_test_value('set_presentation_header_footer', 'storage', 'str')
        self.initialize('set_presentation_header_footer', None, None)
        response = self.api.set_presentation_header_footer(param_name, param_dto, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_set_presentation_header_footer_invalid_name(self):
        """Test case for set_presentation_header_footer with invalid name
        """
        param_name = self.get_test_value('set_presentation_header_footer', 'name', 'str')
        param_dto = self.get_test_value('set_presentation_header_footer', 'dto', 'HeaderFooter')
        param_password = self.get_test_value('set_presentation_header_footer', 'password', 'str')
        param_folder = self.get_test_value('set_presentation_header_footer', 'folder', 'str')
        param_storage = self.get_test_value('set_presentation_header_footer', 'storage', 'str')
        param_name = self.get_invalid_test_value('set_presentation_header_footer', 'name', param_name, 'str')
        self.initialize('set_presentation_header_footer', 'name', param_name)
        ok = False
        try:
            self.api.set_presentation_header_footer(param_name, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_presentation_header_footer', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_presentation_header_footer', 'name', param_name)
        if ok:
            self.assert_no_exception('set_presentation_header_footer', 'name')

    def test_set_presentation_header_footer_invalid_dto(self):
        """Test case for set_presentation_header_footer with invalid dto
        """
        param_name = self.get_test_value('set_presentation_header_footer', 'name', 'str')
        param_dto = self.get_test_value('set_presentation_header_footer', 'dto', 'HeaderFooter')
        param_password = self.get_test_value('set_presentation_header_footer', 'password', 'str')
        param_folder = self.get_test_value('set_presentation_header_footer', 'folder', 'str')
        param_storage = self.get_test_value('set_presentation_header_footer', 'storage', 'str')
        param_dto = self.get_invalid_test_value('set_presentation_header_footer', 'dto', param_dto, 'HeaderFooter')
        self.initialize('set_presentation_header_footer', 'dto', param_dto)
        ok = False
        try:
            self.api.set_presentation_header_footer(param_name, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_presentation_header_footer', 'dto', param_dto)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_presentation_header_footer', 'dto', param_dto)
        if ok:
            self.assert_no_exception('set_presentation_header_footer', 'dto')

    def test_set_presentation_header_footer_invalid_password(self):
        """Test case for set_presentation_header_footer with invalid password
        """
        param_name = self.get_test_value('set_presentation_header_footer', 'name', 'str')
        param_dto = self.get_test_value('set_presentation_header_footer', 'dto', 'HeaderFooter')
        param_password = self.get_test_value('set_presentation_header_footer', 'password', 'str')
        param_folder = self.get_test_value('set_presentation_header_footer', 'folder', 'str')
        param_storage = self.get_test_value('set_presentation_header_footer', 'storage', 'str')
        param_password = self.get_invalid_test_value('set_presentation_header_footer', 'password', param_password, 'str')
        self.initialize('set_presentation_header_footer', 'password', param_password)
        ok = False
        try:
            self.api.set_presentation_header_footer(param_name, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_presentation_header_footer', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_presentation_header_footer', 'password', param_password)
        if ok:
            self.assert_no_exception('set_presentation_header_footer', 'password')

    def test_set_presentation_header_footer_invalid_folder(self):
        """Test case for set_presentation_header_footer with invalid folder
        """
        param_name = self.get_test_value('set_presentation_header_footer', 'name', 'str')
        param_dto = self.get_test_value('set_presentation_header_footer', 'dto', 'HeaderFooter')
        param_password = self.get_test_value('set_presentation_header_footer', 'password', 'str')
        param_folder = self.get_test_value('set_presentation_header_footer', 'folder', 'str')
        param_storage = self.get_test_value('set_presentation_header_footer', 'storage', 'str')
        param_folder = self.get_invalid_test_value('set_presentation_header_footer', 'folder', param_folder, 'str')
        self.initialize('set_presentation_header_footer', 'folder', param_folder)
        ok = False
        try:
            self.api.set_presentation_header_footer(param_name, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_presentation_header_footer', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_presentation_header_footer', 'folder', param_folder)
        if ok:
            self.assert_no_exception('set_presentation_header_footer', 'folder')

    def test_set_presentation_header_footer_invalid_storage(self):
        """Test case for set_presentation_header_footer with invalid storage
        """
        param_name = self.get_test_value('set_presentation_header_footer', 'name', 'str')
        param_dto = self.get_test_value('set_presentation_header_footer', 'dto', 'HeaderFooter')
        param_password = self.get_test_value('set_presentation_header_footer', 'password', 'str')
        param_folder = self.get_test_value('set_presentation_header_footer', 'folder', 'str')
        param_storage = self.get_test_value('set_presentation_header_footer', 'storage', 'str')
        param_storage = self.get_invalid_test_value('set_presentation_header_footer', 'storage', param_storage, 'str')
        self.initialize('set_presentation_header_footer', 'storage', param_storage)
        ok = False
        try:
            self.api.set_presentation_header_footer(param_name, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_presentation_header_footer', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_presentation_header_footer', 'storage', param_storage)
        if ok:
            self.assert_no_exception('set_presentation_header_footer', 'storage')

    def test_set_protection(self):
        """Test case for set_protection
        """
        param_name = self.get_test_value('set_protection', 'name', 'str')
        param_dto = self.get_test_value('set_protection', 'dto', 'ProtectionProperties')
        param_password = self.get_test_value('set_protection', 'password', 'str')
        param_folder = self.get_test_value('set_protection', 'folder', 'str')
        param_storage = self.get_test_value('set_protection', 'storage', 'str')
        self.initialize('set_protection', None, None)
        response = self.api.set_protection(param_name, param_dto, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_set_protection_invalid_name(self):
        """Test case for set_protection with invalid name
        """
        param_name = self.get_test_value('set_protection', 'name', 'str')
        param_dto = self.get_test_value('set_protection', 'dto', 'ProtectionProperties')
        param_password = self.get_test_value('set_protection', 'password', 'str')
        param_folder = self.get_test_value('set_protection', 'folder', 'str')
        param_storage = self.get_test_value('set_protection', 'storage', 'str')
        param_name = self.get_invalid_test_value('set_protection', 'name', param_name, 'str')
        self.initialize('set_protection', 'name', param_name)
        ok = False
        try:
            self.api.set_protection(param_name, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_protection', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_protection', 'name', param_name)
        if ok:
            self.assert_no_exception('set_protection', 'name')

    def test_set_protection_invalid_dto(self):
        """Test case for set_protection with invalid dto
        """
        param_name = self.get_test_value('set_protection', 'name', 'str')
        param_dto = self.get_test_value('set_protection', 'dto', 'ProtectionProperties')
        param_password = self.get_test_value('set_protection', 'password', 'str')
        param_folder = self.get_test_value('set_protection', 'folder', 'str')
        param_storage = self.get_test_value('set_protection', 'storage', 'str')
        param_dto = self.get_invalid_test_value('set_protection', 'dto', param_dto, 'ProtectionProperties')
        self.initialize('set_protection', 'dto', param_dto)
        ok = False
        try:
            self.api.set_protection(param_name, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_protection', 'dto', param_dto)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_protection', 'dto', param_dto)
        if ok:
            self.assert_no_exception('set_protection', 'dto')

    def test_set_protection_invalid_password(self):
        """Test case for set_protection with invalid password
        """
        param_name = self.get_test_value('set_protection', 'name', 'str')
        param_dto = self.get_test_value('set_protection', 'dto', 'ProtectionProperties')
        param_password = self.get_test_value('set_protection', 'password', 'str')
        param_folder = self.get_test_value('set_protection', 'folder', 'str')
        param_storage = self.get_test_value('set_protection', 'storage', 'str')
        param_password = self.get_invalid_test_value('set_protection', 'password', param_password, 'str')
        self.initialize('set_protection', 'password', param_password)
        ok = False
        try:
            self.api.set_protection(param_name, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_protection', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_protection', 'password', param_password)
        if ok:
            self.assert_no_exception('set_protection', 'password')

    def test_set_protection_invalid_folder(self):
        """Test case for set_protection with invalid folder
        """
        param_name = self.get_test_value('set_protection', 'name', 'str')
        param_dto = self.get_test_value('set_protection', 'dto', 'ProtectionProperties')
        param_password = self.get_test_value('set_protection', 'password', 'str')
        param_folder = self.get_test_value('set_protection', 'folder', 'str')
        param_storage = self.get_test_value('set_protection', 'storage', 'str')
        param_folder = self.get_invalid_test_value('set_protection', 'folder', param_folder, 'str')
        self.initialize('set_protection', 'folder', param_folder)
        ok = False
        try:
            self.api.set_protection(param_name, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_protection', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_protection', 'folder', param_folder)
        if ok:
            self.assert_no_exception('set_protection', 'folder')

    def test_set_protection_invalid_storage(self):
        """Test case for set_protection with invalid storage
        """
        param_name = self.get_test_value('set_protection', 'name', 'str')
        param_dto = self.get_test_value('set_protection', 'dto', 'ProtectionProperties')
        param_password = self.get_test_value('set_protection', 'password', 'str')
        param_folder = self.get_test_value('set_protection', 'folder', 'str')
        param_storage = self.get_test_value('set_protection', 'storage', 'str')
        param_storage = self.get_invalid_test_value('set_protection', 'storage', param_storage, 'str')
        self.initialize('set_protection', 'storage', param_storage)
        ok = False
        try:
            self.api.set_protection(param_name, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_protection', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_protection', 'storage', param_storage)
        if ok:
            self.assert_no_exception('set_protection', 'storage')

    def test_set_protection_online(self):
        """Test case for set_protection_online
        """
        param_document = self.get_test_value('set_protection_online', 'document', 'file')
        param_dto = self.get_test_value('set_protection_online', 'dto', 'ProtectionProperties')
        param_password = self.get_test_value('set_protection_online', 'password', 'str')
        self.initialize('set_protection_online', None, None)
        response = self.api.set_protection_online(param_document, param_dto, param_password)
        self.assertTrue(isinstance(response, str))
        self.assertTrue(len(response) > 0)

    def test_set_protection_online_invalid_document(self):
        """Test case for set_protection_online with invalid document
        """
        param_document = self.get_test_value('set_protection_online', 'document', 'file')
        param_dto = self.get_test_value('set_protection_online', 'dto', 'ProtectionProperties')
        param_password = self.get_test_value('set_protection_online', 'password', 'str')
        param_document = self.get_invalid_test_value('set_protection_online', 'document', param_document, 'file')
        self.initialize('set_protection_online', 'document', param_document)
        ok = False
        try:
            self.api.set_protection_online(param_document, param_dto, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_protection_online', 'document', param_document)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_protection_online', 'document', param_document)
        if ok:
            self.assert_no_exception('set_protection_online', 'document')

    def test_set_protection_online_invalid_dto(self):
        """Test case for set_protection_online with invalid dto
        """
        param_document = self.get_test_value('set_protection_online', 'document', 'file')
        param_dto = self.get_test_value('set_protection_online', 'dto', 'ProtectionProperties')
        param_password = self.get_test_value('set_protection_online', 'password', 'str')
        param_dto = self.get_invalid_test_value('set_protection_online', 'dto', param_dto, 'ProtectionProperties')
        self.initialize('set_protection_online', 'dto', param_dto)
        ok = False
        try:
            self.api.set_protection_online(param_document, param_dto, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_protection_online', 'dto', param_dto)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_protection_online', 'dto', param_dto)
        if ok:
            self.assert_no_exception('set_protection_online', 'dto')

    def test_set_protection_online_invalid_password(self):
        """Test case for set_protection_online with invalid password
        """
        param_document = self.get_test_value('set_protection_online', 'document', 'file')
        param_dto = self.get_test_value('set_protection_online', 'dto', 'ProtectionProperties')
        param_password = self.get_test_value('set_protection_online', 'password', 'str')
        param_password = self.get_invalid_test_value('set_protection_online', 'password', param_password, 'str')
        self.initialize('set_protection_online', 'password', param_password)
        ok = False
        try:
            self.api.set_protection_online(param_document, param_dto, param_password)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_protection_online', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_protection_online', 'password', param_password)
        if ok:
            self.assert_no_exception('set_protection_online', 'password')

    def test_set_sections(self):
        """Test case for set_sections
        """
        param_name = self.get_test_value('set_sections', 'name', 'str')
        param_sections = self.get_test_value('set_sections', 'sections', 'Sections')
        param_password = self.get_test_value('set_sections', 'password', 'str')
        param_folder = self.get_test_value('set_sections', 'folder', 'str')
        param_storage = self.get_test_value('set_sections', 'storage', 'str')
        self.initialize('set_sections', None, None)
        response = self.api.set_sections(param_name, param_sections, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_set_sections_invalid_name(self):
        """Test case for set_sections with invalid name
        """
        param_name = self.get_test_value('set_sections', 'name', 'str')
        param_sections = self.get_test_value('set_sections', 'sections', 'Sections')
        param_password = self.get_test_value('set_sections', 'password', 'str')
        param_folder = self.get_test_value('set_sections', 'folder', 'str')
        param_storage = self.get_test_value('set_sections', 'storage', 'str')
        param_name = self.get_invalid_test_value('set_sections', 'name', param_name, 'str')
        self.initialize('set_sections', 'name', param_name)
        ok = False
        try:
            self.api.set_sections(param_name, param_sections, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_sections', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_sections', 'name', param_name)
        if ok:
            self.assert_no_exception('set_sections', 'name')

    def test_set_sections_invalid_sections(self):
        """Test case for set_sections with invalid sections
        """
        param_name = self.get_test_value('set_sections', 'name', 'str')
        param_sections = self.get_test_value('set_sections', 'sections', 'Sections')
        param_password = self.get_test_value('set_sections', 'password', 'str')
        param_folder = self.get_test_value('set_sections', 'folder', 'str')
        param_storage = self.get_test_value('set_sections', 'storage', 'str')
        param_sections = self.get_invalid_test_value('set_sections', 'sections', param_sections, 'Sections')
        self.initialize('set_sections', 'sections', param_sections)
        ok = False
        try:
            self.api.set_sections(param_name, param_sections, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_sections', 'sections', param_sections)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_sections', 'sections', param_sections)
        if ok:
            self.assert_no_exception('set_sections', 'sections')

    def test_set_sections_invalid_password(self):
        """Test case for set_sections with invalid password
        """
        param_name = self.get_test_value('set_sections', 'name', 'str')
        param_sections = self.get_test_value('set_sections', 'sections', 'Sections')
        param_password = self.get_test_value('set_sections', 'password', 'str')
        param_folder = self.get_test_value('set_sections', 'folder', 'str')
        param_storage = self.get_test_value('set_sections', 'storage', 'str')
        param_password = self.get_invalid_test_value('set_sections', 'password', param_password, 'str')
        self.initialize('set_sections', 'password', param_password)
        ok = False
        try:
            self.api.set_sections(param_name, param_sections, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_sections', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_sections', 'password', param_password)
        if ok:
            self.assert_no_exception('set_sections', 'password')

    def test_set_sections_invalid_folder(self):
        """Test case for set_sections with invalid folder
        """
        param_name = self.get_test_value('set_sections', 'name', 'str')
        param_sections = self.get_test_value('set_sections', 'sections', 'Sections')
        param_password = self.get_test_value('set_sections', 'password', 'str')
        param_folder = self.get_test_value('set_sections', 'folder', 'str')
        param_storage = self.get_test_value('set_sections', 'storage', 'str')
        param_folder = self.get_invalid_test_value('set_sections', 'folder', param_folder, 'str')
        self.initialize('set_sections', 'folder', param_folder)
        ok = False
        try:
            self.api.set_sections(param_name, param_sections, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_sections', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_sections', 'folder', param_folder)
        if ok:
            self.assert_no_exception('set_sections', 'folder')

    def test_set_sections_invalid_storage(self):
        """Test case for set_sections with invalid storage
        """
        param_name = self.get_test_value('set_sections', 'name', 'str')
        param_sections = self.get_test_value('set_sections', 'sections', 'Sections')
        param_password = self.get_test_value('set_sections', 'password', 'str')
        param_folder = self.get_test_value('set_sections', 'folder', 'str')
        param_storage = self.get_test_value('set_sections', 'storage', 'str')
        param_storage = self.get_invalid_test_value('set_sections', 'storage', param_storage, 'str')
        self.initialize('set_sections', 'storage', param_storage)
        ok = False
        try:
            self.api.set_sections(param_name, param_sections, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_sections', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_sections', 'storage', param_storage)
        if ok:
            self.assert_no_exception('set_sections', 'storage')

    def test_set_shape_geometry_path(self):
        """Test case for set_shape_geometry_path
        """
        param_name = self.get_test_value('set_shape_geometry_path', 'name', 'str')
        param_slide_index = self.get_test_value('set_shape_geometry_path', 'slide_index', 'int')
        param_shape_index = self.get_test_value('set_shape_geometry_path', 'shape_index', 'int')
        param_dto = self.get_test_value('set_shape_geometry_path', 'dto', 'GeometryPaths')
        param_password = self.get_test_value('set_shape_geometry_path', 'password', 'str')
        param_folder = self.get_test_value('set_shape_geometry_path', 'folder', 'str')
        param_storage = self.get_test_value('set_shape_geometry_path', 'storage', 'str')
        self.initialize('set_shape_geometry_path', None, None)
        response = self.api.set_shape_geometry_path(param_name, param_slide_index, param_shape_index, param_dto, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_set_shape_geometry_path_invalid_name(self):
        """Test case for set_shape_geometry_path with invalid name
        """
        param_name = self.get_test_value('set_shape_geometry_path', 'name', 'str')
        param_slide_index = self.get_test_value('set_shape_geometry_path', 'slide_index', 'int')
        param_shape_index = self.get_test_value('set_shape_geometry_path', 'shape_index', 'int')
        param_dto = self.get_test_value('set_shape_geometry_path', 'dto', 'GeometryPaths')
        param_password = self.get_test_value('set_shape_geometry_path', 'password', 'str')
        param_folder = self.get_test_value('set_shape_geometry_path', 'folder', 'str')
        param_storage = self.get_test_value('set_shape_geometry_path', 'storage', 'str')
        param_name = self.get_invalid_test_value('set_shape_geometry_path', 'name', param_name, 'str')
        self.initialize('set_shape_geometry_path', 'name', param_name)
        ok = False
        try:
            self.api.set_shape_geometry_path(param_name, param_slide_index, param_shape_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_shape_geometry_path', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_shape_geometry_path', 'name', param_name)
        if ok:
            self.assert_no_exception('set_shape_geometry_path', 'name')

    def test_set_shape_geometry_path_invalid_slide_index(self):
        """Test case for set_shape_geometry_path with invalid slide_index
        """
        param_name = self.get_test_value('set_shape_geometry_path', 'name', 'str')
        param_slide_index = self.get_test_value('set_shape_geometry_path', 'slide_index', 'int')
        param_shape_index = self.get_test_value('set_shape_geometry_path', 'shape_index', 'int')
        param_dto = self.get_test_value('set_shape_geometry_path', 'dto', 'GeometryPaths')
        param_password = self.get_test_value('set_shape_geometry_path', 'password', 'str')
        param_folder = self.get_test_value('set_shape_geometry_path', 'folder', 'str')
        param_storage = self.get_test_value('set_shape_geometry_path', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('set_shape_geometry_path', 'slide_index', param_slide_index, 'int')
        self.initialize('set_shape_geometry_path', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.set_shape_geometry_path(param_name, param_slide_index, param_shape_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_shape_geometry_path', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_shape_geometry_path', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('set_shape_geometry_path', 'slide_index')

    def test_set_shape_geometry_path_invalid_shape_index(self):
        """Test case for set_shape_geometry_path with invalid shape_index
        """
        param_name = self.get_test_value('set_shape_geometry_path', 'name', 'str')
        param_slide_index = self.get_test_value('set_shape_geometry_path', 'slide_index', 'int')
        param_shape_index = self.get_test_value('set_shape_geometry_path', 'shape_index', 'int')
        param_dto = self.get_test_value('set_shape_geometry_path', 'dto', 'GeometryPaths')
        param_password = self.get_test_value('set_shape_geometry_path', 'password', 'str')
        param_folder = self.get_test_value('set_shape_geometry_path', 'folder', 'str')
        param_storage = self.get_test_value('set_shape_geometry_path', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('set_shape_geometry_path', 'shape_index', param_shape_index, 'int')
        self.initialize('set_shape_geometry_path', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.set_shape_geometry_path(param_name, param_slide_index, param_shape_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_shape_geometry_path', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_shape_geometry_path', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('set_shape_geometry_path', 'shape_index')

    def test_set_shape_geometry_path_invalid_dto(self):
        """Test case for set_shape_geometry_path with invalid dto
        """
        param_name = self.get_test_value('set_shape_geometry_path', 'name', 'str')
        param_slide_index = self.get_test_value('set_shape_geometry_path', 'slide_index', 'int')
        param_shape_index = self.get_test_value('set_shape_geometry_path', 'shape_index', 'int')
        param_dto = self.get_test_value('set_shape_geometry_path', 'dto', 'GeometryPaths')
        param_password = self.get_test_value('set_shape_geometry_path', 'password', 'str')
        param_folder = self.get_test_value('set_shape_geometry_path', 'folder', 'str')
        param_storage = self.get_test_value('set_shape_geometry_path', 'storage', 'str')
        param_dto = self.get_invalid_test_value('set_shape_geometry_path', 'dto', param_dto, 'GeometryPaths')
        self.initialize('set_shape_geometry_path', 'dto', param_dto)
        ok = False
        try:
            self.api.set_shape_geometry_path(param_name, param_slide_index, param_shape_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_shape_geometry_path', 'dto', param_dto)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_shape_geometry_path', 'dto', param_dto)
        if ok:
            self.assert_no_exception('set_shape_geometry_path', 'dto')

    def test_set_shape_geometry_path_invalid_password(self):
        """Test case for set_shape_geometry_path with invalid password
        """
        param_name = self.get_test_value('set_shape_geometry_path', 'name', 'str')
        param_slide_index = self.get_test_value('set_shape_geometry_path', 'slide_index', 'int')
        param_shape_index = self.get_test_value('set_shape_geometry_path', 'shape_index', 'int')
        param_dto = self.get_test_value('set_shape_geometry_path', 'dto', 'GeometryPaths')
        param_password = self.get_test_value('set_shape_geometry_path', 'password', 'str')
        param_folder = self.get_test_value('set_shape_geometry_path', 'folder', 'str')
        param_storage = self.get_test_value('set_shape_geometry_path', 'storage', 'str')
        param_password = self.get_invalid_test_value('set_shape_geometry_path', 'password', param_password, 'str')
        self.initialize('set_shape_geometry_path', 'password', param_password)
        ok = False
        try:
            self.api.set_shape_geometry_path(param_name, param_slide_index, param_shape_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_shape_geometry_path', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_shape_geometry_path', 'password', param_password)
        if ok:
            self.assert_no_exception('set_shape_geometry_path', 'password')

    def test_set_shape_geometry_path_invalid_folder(self):
        """Test case for set_shape_geometry_path with invalid folder
        """
        param_name = self.get_test_value('set_shape_geometry_path', 'name', 'str')
        param_slide_index = self.get_test_value('set_shape_geometry_path', 'slide_index', 'int')
        param_shape_index = self.get_test_value('set_shape_geometry_path', 'shape_index', 'int')
        param_dto = self.get_test_value('set_shape_geometry_path', 'dto', 'GeometryPaths')
        param_password = self.get_test_value('set_shape_geometry_path', 'password', 'str')
        param_folder = self.get_test_value('set_shape_geometry_path', 'folder', 'str')
        param_storage = self.get_test_value('set_shape_geometry_path', 'storage', 'str')
        param_folder = self.get_invalid_test_value('set_shape_geometry_path', 'folder', param_folder, 'str')
        self.initialize('set_shape_geometry_path', 'folder', param_folder)
        ok = False
        try:
            self.api.set_shape_geometry_path(param_name, param_slide_index, param_shape_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_shape_geometry_path', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_shape_geometry_path', 'folder', param_folder)
        if ok:
            self.assert_no_exception('set_shape_geometry_path', 'folder')

    def test_set_shape_geometry_path_invalid_storage(self):
        """Test case for set_shape_geometry_path with invalid storage
        """
        param_name = self.get_test_value('set_shape_geometry_path', 'name', 'str')
        param_slide_index = self.get_test_value('set_shape_geometry_path', 'slide_index', 'int')
        param_shape_index = self.get_test_value('set_shape_geometry_path', 'shape_index', 'int')
        param_dto = self.get_test_value('set_shape_geometry_path', 'dto', 'GeometryPaths')
        param_password = self.get_test_value('set_shape_geometry_path', 'password', 'str')
        param_folder = self.get_test_value('set_shape_geometry_path', 'folder', 'str')
        param_storage = self.get_test_value('set_shape_geometry_path', 'storage', 'str')
        param_storage = self.get_invalid_test_value('set_shape_geometry_path', 'storage', param_storage, 'str')
        self.initialize('set_shape_geometry_path', 'storage', param_storage)
        ok = False
        try:
            self.api.set_shape_geometry_path(param_name, param_slide_index, param_shape_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_shape_geometry_path', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_shape_geometry_path', 'storage', param_storage)
        if ok:
            self.assert_no_exception('set_shape_geometry_path', 'storage')

    def test_set_slide_header_footer(self):
        """Test case for set_slide_header_footer
        """
        param_name = self.get_test_value('set_slide_header_footer', 'name', 'str')
        param_slide_index = self.get_test_value('set_slide_header_footer', 'slide_index', 'int')
        param_dto = self.get_test_value('set_slide_header_footer', 'dto', 'HeaderFooter')
        param_password = self.get_test_value('set_slide_header_footer', 'password', 'str')
        param_folder = self.get_test_value('set_slide_header_footer', 'folder', 'str')
        param_storage = self.get_test_value('set_slide_header_footer', 'storage', 'str')
        self.initialize('set_slide_header_footer', None, None)
        response = self.api.set_slide_header_footer(param_name, param_slide_index, param_dto, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_set_slide_header_footer_invalid_name(self):
        """Test case for set_slide_header_footer with invalid name
        """
        param_name = self.get_test_value('set_slide_header_footer', 'name', 'str')
        param_slide_index = self.get_test_value('set_slide_header_footer', 'slide_index', 'int')
        param_dto = self.get_test_value('set_slide_header_footer', 'dto', 'HeaderFooter')
        param_password = self.get_test_value('set_slide_header_footer', 'password', 'str')
        param_folder = self.get_test_value('set_slide_header_footer', 'folder', 'str')
        param_storage = self.get_test_value('set_slide_header_footer', 'storage', 'str')
        param_name = self.get_invalid_test_value('set_slide_header_footer', 'name', param_name, 'str')
        self.initialize('set_slide_header_footer', 'name', param_name)
        ok = False
        try:
            self.api.set_slide_header_footer(param_name, param_slide_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_slide_header_footer', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_slide_header_footer', 'name', param_name)
        if ok:
            self.assert_no_exception('set_slide_header_footer', 'name')

    def test_set_slide_header_footer_invalid_slide_index(self):
        """Test case for set_slide_header_footer with invalid slide_index
        """
        param_name = self.get_test_value('set_slide_header_footer', 'name', 'str')
        param_slide_index = self.get_test_value('set_slide_header_footer', 'slide_index', 'int')
        param_dto = self.get_test_value('set_slide_header_footer', 'dto', 'HeaderFooter')
        param_password = self.get_test_value('set_slide_header_footer', 'password', 'str')
        param_folder = self.get_test_value('set_slide_header_footer', 'folder', 'str')
        param_storage = self.get_test_value('set_slide_header_footer', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('set_slide_header_footer', 'slide_index', param_slide_index, 'int')
        self.initialize('set_slide_header_footer', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.set_slide_header_footer(param_name, param_slide_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_slide_header_footer', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_slide_header_footer', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('set_slide_header_footer', 'slide_index')

    def test_set_slide_header_footer_invalid_dto(self):
        """Test case for set_slide_header_footer with invalid dto
        """
        param_name = self.get_test_value('set_slide_header_footer', 'name', 'str')
        param_slide_index = self.get_test_value('set_slide_header_footer', 'slide_index', 'int')
        param_dto = self.get_test_value('set_slide_header_footer', 'dto', 'HeaderFooter')
        param_password = self.get_test_value('set_slide_header_footer', 'password', 'str')
        param_folder = self.get_test_value('set_slide_header_footer', 'folder', 'str')
        param_storage = self.get_test_value('set_slide_header_footer', 'storage', 'str')
        param_dto = self.get_invalid_test_value('set_slide_header_footer', 'dto', param_dto, 'HeaderFooter')
        self.initialize('set_slide_header_footer', 'dto', param_dto)
        ok = False
        try:
            self.api.set_slide_header_footer(param_name, param_slide_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_slide_header_footer', 'dto', param_dto)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_slide_header_footer', 'dto', param_dto)
        if ok:
            self.assert_no_exception('set_slide_header_footer', 'dto')

    def test_set_slide_header_footer_invalid_password(self):
        """Test case for set_slide_header_footer with invalid password
        """
        param_name = self.get_test_value('set_slide_header_footer', 'name', 'str')
        param_slide_index = self.get_test_value('set_slide_header_footer', 'slide_index', 'int')
        param_dto = self.get_test_value('set_slide_header_footer', 'dto', 'HeaderFooter')
        param_password = self.get_test_value('set_slide_header_footer', 'password', 'str')
        param_folder = self.get_test_value('set_slide_header_footer', 'folder', 'str')
        param_storage = self.get_test_value('set_slide_header_footer', 'storage', 'str')
        param_password = self.get_invalid_test_value('set_slide_header_footer', 'password', param_password, 'str')
        self.initialize('set_slide_header_footer', 'password', param_password)
        ok = False
        try:
            self.api.set_slide_header_footer(param_name, param_slide_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_slide_header_footer', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_slide_header_footer', 'password', param_password)
        if ok:
            self.assert_no_exception('set_slide_header_footer', 'password')

    def test_set_slide_header_footer_invalid_folder(self):
        """Test case for set_slide_header_footer with invalid folder
        """
        param_name = self.get_test_value('set_slide_header_footer', 'name', 'str')
        param_slide_index = self.get_test_value('set_slide_header_footer', 'slide_index', 'int')
        param_dto = self.get_test_value('set_slide_header_footer', 'dto', 'HeaderFooter')
        param_password = self.get_test_value('set_slide_header_footer', 'password', 'str')
        param_folder = self.get_test_value('set_slide_header_footer', 'folder', 'str')
        param_storage = self.get_test_value('set_slide_header_footer', 'storage', 'str')
        param_folder = self.get_invalid_test_value('set_slide_header_footer', 'folder', param_folder, 'str')
        self.initialize('set_slide_header_footer', 'folder', param_folder)
        ok = False
        try:
            self.api.set_slide_header_footer(param_name, param_slide_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_slide_header_footer', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_slide_header_footer', 'folder', param_folder)
        if ok:
            self.assert_no_exception('set_slide_header_footer', 'folder')

    def test_set_slide_header_footer_invalid_storage(self):
        """Test case for set_slide_header_footer with invalid storage
        """
        param_name = self.get_test_value('set_slide_header_footer', 'name', 'str')
        param_slide_index = self.get_test_value('set_slide_header_footer', 'slide_index', 'int')
        param_dto = self.get_test_value('set_slide_header_footer', 'dto', 'HeaderFooter')
        param_password = self.get_test_value('set_slide_header_footer', 'password', 'str')
        param_folder = self.get_test_value('set_slide_header_footer', 'folder', 'str')
        param_storage = self.get_test_value('set_slide_header_footer', 'storage', 'str')
        param_storage = self.get_invalid_test_value('set_slide_header_footer', 'storage', param_storage, 'str')
        self.initialize('set_slide_header_footer', 'storage', param_storage)
        ok = False
        try:
            self.api.set_slide_header_footer(param_name, param_slide_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_slide_header_footer', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_slide_header_footer', 'storage', param_storage)
        if ok:
            self.assert_no_exception('set_slide_header_footer', 'storage')

    def test_set_slide_properties(self):
        """Test case for set_slide_properties
        """
        param_name = self.get_test_value('set_slide_properties', 'name', 'str')
        param_dto = self.get_test_value('set_slide_properties', 'dto', 'SlideProperties')
        param_password = self.get_test_value('set_slide_properties', 'password', 'str')
        param_folder = self.get_test_value('set_slide_properties', 'folder', 'str')
        param_storage = self.get_test_value('set_slide_properties', 'storage', 'str')
        self.initialize('set_slide_properties', None, None)
        response = self.api.set_slide_properties(param_name, param_dto, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_set_slide_properties_invalid_name(self):
        """Test case for set_slide_properties with invalid name
        """
        param_name = self.get_test_value('set_slide_properties', 'name', 'str')
        param_dto = self.get_test_value('set_slide_properties', 'dto', 'SlideProperties')
        param_password = self.get_test_value('set_slide_properties', 'password', 'str')
        param_folder = self.get_test_value('set_slide_properties', 'folder', 'str')
        param_storage = self.get_test_value('set_slide_properties', 'storage', 'str')
        param_name = self.get_invalid_test_value('set_slide_properties', 'name', param_name, 'str')
        self.initialize('set_slide_properties', 'name', param_name)
        ok = False
        try:
            self.api.set_slide_properties(param_name, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_slide_properties', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_slide_properties', 'name', param_name)
        if ok:
            self.assert_no_exception('set_slide_properties', 'name')

    def test_set_slide_properties_invalid_dto(self):
        """Test case for set_slide_properties with invalid dto
        """
        param_name = self.get_test_value('set_slide_properties', 'name', 'str')
        param_dto = self.get_test_value('set_slide_properties', 'dto', 'SlideProperties')
        param_password = self.get_test_value('set_slide_properties', 'password', 'str')
        param_folder = self.get_test_value('set_slide_properties', 'folder', 'str')
        param_storage = self.get_test_value('set_slide_properties', 'storage', 'str')
        param_dto = self.get_invalid_test_value('set_slide_properties', 'dto', param_dto, 'SlideProperties')
        self.initialize('set_slide_properties', 'dto', param_dto)
        ok = False
        try:
            self.api.set_slide_properties(param_name, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_slide_properties', 'dto', param_dto)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_slide_properties', 'dto', param_dto)
        if ok:
            self.assert_no_exception('set_slide_properties', 'dto')

    def test_set_slide_properties_invalid_password(self):
        """Test case for set_slide_properties with invalid password
        """
        param_name = self.get_test_value('set_slide_properties', 'name', 'str')
        param_dto = self.get_test_value('set_slide_properties', 'dto', 'SlideProperties')
        param_password = self.get_test_value('set_slide_properties', 'password', 'str')
        param_folder = self.get_test_value('set_slide_properties', 'folder', 'str')
        param_storage = self.get_test_value('set_slide_properties', 'storage', 'str')
        param_password = self.get_invalid_test_value('set_slide_properties', 'password', param_password, 'str')
        self.initialize('set_slide_properties', 'password', param_password)
        ok = False
        try:
            self.api.set_slide_properties(param_name, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_slide_properties', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_slide_properties', 'password', param_password)
        if ok:
            self.assert_no_exception('set_slide_properties', 'password')

    def test_set_slide_properties_invalid_folder(self):
        """Test case for set_slide_properties with invalid folder
        """
        param_name = self.get_test_value('set_slide_properties', 'name', 'str')
        param_dto = self.get_test_value('set_slide_properties', 'dto', 'SlideProperties')
        param_password = self.get_test_value('set_slide_properties', 'password', 'str')
        param_folder = self.get_test_value('set_slide_properties', 'folder', 'str')
        param_storage = self.get_test_value('set_slide_properties', 'storage', 'str')
        param_folder = self.get_invalid_test_value('set_slide_properties', 'folder', param_folder, 'str')
        self.initialize('set_slide_properties', 'folder', param_folder)
        ok = False
        try:
            self.api.set_slide_properties(param_name, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_slide_properties', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_slide_properties', 'folder', param_folder)
        if ok:
            self.assert_no_exception('set_slide_properties', 'folder')

    def test_set_slide_properties_invalid_storage(self):
        """Test case for set_slide_properties with invalid storage
        """
        param_name = self.get_test_value('set_slide_properties', 'name', 'str')
        param_dto = self.get_test_value('set_slide_properties', 'dto', 'SlideProperties')
        param_password = self.get_test_value('set_slide_properties', 'password', 'str')
        param_folder = self.get_test_value('set_slide_properties', 'folder', 'str')
        param_storage = self.get_test_value('set_slide_properties', 'storage', 'str')
        param_storage = self.get_invalid_test_value('set_slide_properties', 'storage', param_storage, 'str')
        self.initialize('set_slide_properties', 'storage', param_storage)
        ok = False
        try:
            self.api.set_slide_properties(param_name, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_slide_properties', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_slide_properties', 'storage', param_storage)
        if ok:
            self.assert_no_exception('set_slide_properties', 'storage')

    def test_set_special_slide_animation(self):
        """Test case for set_special_slide_animation
        """
        param_name = self.get_test_value('set_special_slide_animation', 'name', 'str')
        param_slide_index = self.get_test_value('set_special_slide_animation', 'slide_index', 'int')
        param_slide_type = self.get_test_value('set_special_slide_animation', 'slide_type', 'str')
        param_animation = self.get_test_value('set_special_slide_animation', 'animation', 'SlideAnimation')
        param_password = self.get_test_value('set_special_slide_animation', 'password', 'str')
        param_folder = self.get_test_value('set_special_slide_animation', 'folder', 'str')
        param_storage = self.get_test_value('set_special_slide_animation', 'storage', 'str')
        self.initialize('set_special_slide_animation', None, None)
        response = self.api.set_special_slide_animation(param_name, param_slide_index, param_slide_type, param_animation, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_set_special_slide_animation_invalid_name(self):
        """Test case for set_special_slide_animation with invalid name
        """
        param_name = self.get_test_value('set_special_slide_animation', 'name', 'str')
        param_slide_index = self.get_test_value('set_special_slide_animation', 'slide_index', 'int')
        param_slide_type = self.get_test_value('set_special_slide_animation', 'slide_type', 'str')
        param_animation = self.get_test_value('set_special_slide_animation', 'animation', 'SlideAnimation')
        param_password = self.get_test_value('set_special_slide_animation', 'password', 'str')
        param_folder = self.get_test_value('set_special_slide_animation', 'folder', 'str')
        param_storage = self.get_test_value('set_special_slide_animation', 'storage', 'str')
        param_name = self.get_invalid_test_value('set_special_slide_animation', 'name', param_name, 'str')
        self.initialize('set_special_slide_animation', 'name', param_name)
        ok = False
        try:
            self.api.set_special_slide_animation(param_name, param_slide_index, param_slide_type, param_animation, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_special_slide_animation', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_special_slide_animation', 'name', param_name)
        if ok:
            self.assert_no_exception('set_special_slide_animation', 'name')

    def test_set_special_slide_animation_invalid_slide_index(self):
        """Test case for set_special_slide_animation with invalid slide_index
        """
        param_name = self.get_test_value('set_special_slide_animation', 'name', 'str')
        param_slide_index = self.get_test_value('set_special_slide_animation', 'slide_index', 'int')
        param_slide_type = self.get_test_value('set_special_slide_animation', 'slide_type', 'str')
        param_animation = self.get_test_value('set_special_slide_animation', 'animation', 'SlideAnimation')
        param_password = self.get_test_value('set_special_slide_animation', 'password', 'str')
        param_folder = self.get_test_value('set_special_slide_animation', 'folder', 'str')
        param_storage = self.get_test_value('set_special_slide_animation', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('set_special_slide_animation', 'slide_index', param_slide_index, 'int')
        self.initialize('set_special_slide_animation', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.set_special_slide_animation(param_name, param_slide_index, param_slide_type, param_animation, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_special_slide_animation', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_special_slide_animation', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('set_special_slide_animation', 'slide_index')

    def test_set_special_slide_animation_invalid_slide_type(self):
        """Test case for set_special_slide_animation with invalid slide_type
        """
        param_name = self.get_test_value('set_special_slide_animation', 'name', 'str')
        param_slide_index = self.get_test_value('set_special_slide_animation', 'slide_index', 'int')
        param_slide_type = self.get_test_value('set_special_slide_animation', 'slide_type', 'str')
        param_animation = self.get_test_value('set_special_slide_animation', 'animation', 'SlideAnimation')
        param_password = self.get_test_value('set_special_slide_animation', 'password', 'str')
        param_folder = self.get_test_value('set_special_slide_animation', 'folder', 'str')
        param_storage = self.get_test_value('set_special_slide_animation', 'storage', 'str')
        param_slide_type = self.get_invalid_test_value('set_special_slide_animation', 'slide_type', param_slide_type, 'str')
        self.initialize('set_special_slide_animation', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.set_special_slide_animation(param_name, param_slide_index, param_slide_type, param_animation, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_special_slide_animation', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_special_slide_animation', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('set_special_slide_animation', 'slide_type')

    def test_set_special_slide_animation_invalid_animation(self):
        """Test case for set_special_slide_animation with invalid animation
        """
        param_name = self.get_test_value('set_special_slide_animation', 'name', 'str')
        param_slide_index = self.get_test_value('set_special_slide_animation', 'slide_index', 'int')
        param_slide_type = self.get_test_value('set_special_slide_animation', 'slide_type', 'str')
        param_animation = self.get_test_value('set_special_slide_animation', 'animation', 'SlideAnimation')
        param_password = self.get_test_value('set_special_slide_animation', 'password', 'str')
        param_folder = self.get_test_value('set_special_slide_animation', 'folder', 'str')
        param_storage = self.get_test_value('set_special_slide_animation', 'storage', 'str')
        param_animation = self.get_invalid_test_value('set_special_slide_animation', 'animation', param_animation, 'SlideAnimation')
        self.initialize('set_special_slide_animation', 'animation', param_animation)
        ok = False
        try:
            self.api.set_special_slide_animation(param_name, param_slide_index, param_slide_type, param_animation, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_special_slide_animation', 'animation', param_animation)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_special_slide_animation', 'animation', param_animation)
        if ok:
            self.assert_no_exception('set_special_slide_animation', 'animation')

    def test_set_special_slide_animation_invalid_password(self):
        """Test case for set_special_slide_animation with invalid password
        """
        param_name = self.get_test_value('set_special_slide_animation', 'name', 'str')
        param_slide_index = self.get_test_value('set_special_slide_animation', 'slide_index', 'int')
        param_slide_type = self.get_test_value('set_special_slide_animation', 'slide_type', 'str')
        param_animation = self.get_test_value('set_special_slide_animation', 'animation', 'SlideAnimation')
        param_password = self.get_test_value('set_special_slide_animation', 'password', 'str')
        param_folder = self.get_test_value('set_special_slide_animation', 'folder', 'str')
        param_storage = self.get_test_value('set_special_slide_animation', 'storage', 'str')
        param_password = self.get_invalid_test_value('set_special_slide_animation', 'password', param_password, 'str')
        self.initialize('set_special_slide_animation', 'password', param_password)
        ok = False
        try:
            self.api.set_special_slide_animation(param_name, param_slide_index, param_slide_type, param_animation, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_special_slide_animation', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_special_slide_animation', 'password', param_password)
        if ok:
            self.assert_no_exception('set_special_slide_animation', 'password')

    def test_set_special_slide_animation_invalid_folder(self):
        """Test case for set_special_slide_animation with invalid folder
        """
        param_name = self.get_test_value('set_special_slide_animation', 'name', 'str')
        param_slide_index = self.get_test_value('set_special_slide_animation', 'slide_index', 'int')
        param_slide_type = self.get_test_value('set_special_slide_animation', 'slide_type', 'str')
        param_animation = self.get_test_value('set_special_slide_animation', 'animation', 'SlideAnimation')
        param_password = self.get_test_value('set_special_slide_animation', 'password', 'str')
        param_folder = self.get_test_value('set_special_slide_animation', 'folder', 'str')
        param_storage = self.get_test_value('set_special_slide_animation', 'storage', 'str')
        param_folder = self.get_invalid_test_value('set_special_slide_animation', 'folder', param_folder, 'str')
        self.initialize('set_special_slide_animation', 'folder', param_folder)
        ok = False
        try:
            self.api.set_special_slide_animation(param_name, param_slide_index, param_slide_type, param_animation, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_special_slide_animation', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_special_slide_animation', 'folder', param_folder)
        if ok:
            self.assert_no_exception('set_special_slide_animation', 'folder')

    def test_set_special_slide_animation_invalid_storage(self):
        """Test case for set_special_slide_animation with invalid storage
        """
        param_name = self.get_test_value('set_special_slide_animation', 'name', 'str')
        param_slide_index = self.get_test_value('set_special_slide_animation', 'slide_index', 'int')
        param_slide_type = self.get_test_value('set_special_slide_animation', 'slide_type', 'str')
        param_animation = self.get_test_value('set_special_slide_animation', 'animation', 'SlideAnimation')
        param_password = self.get_test_value('set_special_slide_animation', 'password', 'str')
        param_folder = self.get_test_value('set_special_slide_animation', 'folder', 'str')
        param_storage = self.get_test_value('set_special_slide_animation', 'storage', 'str')
        param_storage = self.get_invalid_test_value('set_special_slide_animation', 'storage', param_storage, 'str')
        self.initialize('set_special_slide_animation', 'storage', param_storage)
        ok = False
        try:
            self.api.set_special_slide_animation(param_name, param_slide_index, param_slide_type, param_animation, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_special_slide_animation', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_special_slide_animation', 'storage', param_storage)
        if ok:
            self.assert_no_exception('set_special_slide_animation', 'storage')

    def test_set_view_properties(self):
        """Test case for set_view_properties
        """
        param_name = self.get_test_value('set_view_properties', 'name', 'str')
        param_dto = self.get_test_value('set_view_properties', 'dto', 'ViewProperties')
        param_password = self.get_test_value('set_view_properties', 'password', 'str')
        param_folder = self.get_test_value('set_view_properties', 'folder', 'str')
        param_storage = self.get_test_value('set_view_properties', 'storage', 'str')
        self.initialize('set_view_properties', None, None)
        response = self.api.set_view_properties(param_name, param_dto, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_set_view_properties_invalid_name(self):
        """Test case for set_view_properties with invalid name
        """
        param_name = self.get_test_value('set_view_properties', 'name', 'str')
        param_dto = self.get_test_value('set_view_properties', 'dto', 'ViewProperties')
        param_password = self.get_test_value('set_view_properties', 'password', 'str')
        param_folder = self.get_test_value('set_view_properties', 'folder', 'str')
        param_storage = self.get_test_value('set_view_properties', 'storage', 'str')
        param_name = self.get_invalid_test_value('set_view_properties', 'name', param_name, 'str')
        self.initialize('set_view_properties', 'name', param_name)
        ok = False
        try:
            self.api.set_view_properties(param_name, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_view_properties', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_view_properties', 'name', param_name)
        if ok:
            self.assert_no_exception('set_view_properties', 'name')

    def test_set_view_properties_invalid_dto(self):
        """Test case for set_view_properties with invalid dto
        """
        param_name = self.get_test_value('set_view_properties', 'name', 'str')
        param_dto = self.get_test_value('set_view_properties', 'dto', 'ViewProperties')
        param_password = self.get_test_value('set_view_properties', 'password', 'str')
        param_folder = self.get_test_value('set_view_properties', 'folder', 'str')
        param_storage = self.get_test_value('set_view_properties', 'storage', 'str')
        param_dto = self.get_invalid_test_value('set_view_properties', 'dto', param_dto, 'ViewProperties')
        self.initialize('set_view_properties', 'dto', param_dto)
        ok = False
        try:
            self.api.set_view_properties(param_name, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_view_properties', 'dto', param_dto)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_view_properties', 'dto', param_dto)
        if ok:
            self.assert_no_exception('set_view_properties', 'dto')

    def test_set_view_properties_invalid_password(self):
        """Test case for set_view_properties with invalid password
        """
        param_name = self.get_test_value('set_view_properties', 'name', 'str')
        param_dto = self.get_test_value('set_view_properties', 'dto', 'ViewProperties')
        param_password = self.get_test_value('set_view_properties', 'password', 'str')
        param_folder = self.get_test_value('set_view_properties', 'folder', 'str')
        param_storage = self.get_test_value('set_view_properties', 'storage', 'str')
        param_password = self.get_invalid_test_value('set_view_properties', 'password', param_password, 'str')
        self.initialize('set_view_properties', 'password', param_password)
        ok = False
        try:
            self.api.set_view_properties(param_name, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_view_properties', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_view_properties', 'password', param_password)
        if ok:
            self.assert_no_exception('set_view_properties', 'password')

    def test_set_view_properties_invalid_folder(self):
        """Test case for set_view_properties with invalid folder
        """
        param_name = self.get_test_value('set_view_properties', 'name', 'str')
        param_dto = self.get_test_value('set_view_properties', 'dto', 'ViewProperties')
        param_password = self.get_test_value('set_view_properties', 'password', 'str')
        param_folder = self.get_test_value('set_view_properties', 'folder', 'str')
        param_storage = self.get_test_value('set_view_properties', 'storage', 'str')
        param_folder = self.get_invalid_test_value('set_view_properties', 'folder', param_folder, 'str')
        self.initialize('set_view_properties', 'folder', param_folder)
        ok = False
        try:
            self.api.set_view_properties(param_name, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_view_properties', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_view_properties', 'folder', param_folder)
        if ok:
            self.assert_no_exception('set_view_properties', 'folder')

    def test_set_view_properties_invalid_storage(self):
        """Test case for set_view_properties with invalid storage
        """
        param_name = self.get_test_value('set_view_properties', 'name', 'str')
        param_dto = self.get_test_value('set_view_properties', 'dto', 'ViewProperties')
        param_password = self.get_test_value('set_view_properties', 'password', 'str')
        param_folder = self.get_test_value('set_view_properties', 'folder', 'str')
        param_storage = self.get_test_value('set_view_properties', 'storage', 'str')
        param_storage = self.get_invalid_test_value('set_view_properties', 'storage', param_storage, 'str')
        self.initialize('set_view_properties', 'storage', param_storage)
        ok = False
        try:
            self.api.set_view_properties(param_name, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'set_view_properties', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'set_view_properties', 'storage', param_storage)
        if ok:
            self.assert_no_exception('set_view_properties', 'storage')

    def test_split(self):
        """Test case for split
        """
        param_name = self.get_test_value('split', 'name', 'str')
        param_options = self.get_test_value('split', 'options', 'ExportOptions')
        param_format = self.get_test_value('split', 'format', 'str')
        param_width = self.get_test_value('split', 'width', 'int')
        param_height = self.get_test_value('split', 'height', 'int')
        param__from = self.get_test_value('split', '_from', 'int')
        param_to = self.get_test_value('split', 'to', 'int')
        param_dest_folder = self.get_test_value('split', 'dest_folder', 'str')
        param_password = self.get_test_value('split', 'password', 'str')
        param_folder = self.get_test_value('split', 'folder', 'str')
        param_storage = self.get_test_value('split', 'storage', 'str')
        param_fonts_folder = self.get_test_value('split', 'fonts_folder', 'str')
        self.initialize('split', None, None)
        response = self.api.split(param_name, param_options, param_format, param_width, param_height, param__from, param_to, param_dest_folder, param_password, param_folder, param_storage, param_fonts_folder)
        self.assertIsNotNone(response)

    def test_split_invalid_name(self):
        """Test case for split with invalid name
        """
        param_name = self.get_test_value('split', 'name', 'str')
        param_options = self.get_test_value('split', 'options', 'ExportOptions')
        param_format = self.get_test_value('split', 'format', 'str')
        param_width = self.get_test_value('split', 'width', 'int')
        param_height = self.get_test_value('split', 'height', 'int')
        param__from = self.get_test_value('split', '_from', 'int')
        param_to = self.get_test_value('split', 'to', 'int')
        param_dest_folder = self.get_test_value('split', 'dest_folder', 'str')
        param_password = self.get_test_value('split', 'password', 'str')
        param_folder = self.get_test_value('split', 'folder', 'str')
        param_storage = self.get_test_value('split', 'storage', 'str')
        param_fonts_folder = self.get_test_value('split', 'fonts_folder', 'str')
        param_name = self.get_invalid_test_value('split', 'name', param_name, 'str')
        self.initialize('split', 'name', param_name)
        ok = False
        try:
            self.api.split(param_name, param_options, param_format, param_width, param_height, param__from, param_to, param_dest_folder, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'split', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'split', 'name', param_name)
        if ok:
            self.assert_no_exception('split', 'name')

    def test_split_invalid_options(self):
        """Test case for split with invalid options
        """
        param_name = self.get_test_value('split', 'name', 'str')
        param_options = self.get_test_value('split', 'options', 'ExportOptions')
        param_format = self.get_test_value('split', 'format', 'str')
        param_width = self.get_test_value('split', 'width', 'int')
        param_height = self.get_test_value('split', 'height', 'int')
        param__from = self.get_test_value('split', '_from', 'int')
        param_to = self.get_test_value('split', 'to', 'int')
        param_dest_folder = self.get_test_value('split', 'dest_folder', 'str')
        param_password = self.get_test_value('split', 'password', 'str')
        param_folder = self.get_test_value('split', 'folder', 'str')
        param_storage = self.get_test_value('split', 'storage', 'str')
        param_fonts_folder = self.get_test_value('split', 'fonts_folder', 'str')
        param_options = self.get_invalid_test_value('split', 'options', param_options, 'ExportOptions')
        self.initialize('split', 'options', param_options)
        ok = False
        try:
            self.api.split(param_name, param_options, param_format, param_width, param_height, param__from, param_to, param_dest_folder, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'split', 'options', param_options)
        except ValueError as ex:
            self.assert_value_error(ex, 'split', 'options', param_options)
        if ok:
            self.assert_no_exception('split', 'options')

    def test_split_invalid_format(self):
        """Test case for split with invalid format
        """
        param_name = self.get_test_value('split', 'name', 'str')
        param_options = self.get_test_value('split', 'options', 'ExportOptions')
        param_format = self.get_test_value('split', 'format', 'str')
        param_width = self.get_test_value('split', 'width', 'int')
        param_height = self.get_test_value('split', 'height', 'int')
        param__from = self.get_test_value('split', '_from', 'int')
        param_to = self.get_test_value('split', 'to', 'int')
        param_dest_folder = self.get_test_value('split', 'dest_folder', 'str')
        param_password = self.get_test_value('split', 'password', 'str')
        param_folder = self.get_test_value('split', 'folder', 'str')
        param_storage = self.get_test_value('split', 'storage', 'str')
        param_fonts_folder = self.get_test_value('split', 'fonts_folder', 'str')
        param_format = self.get_invalid_test_value('split', 'format', param_format, 'str')
        self.initialize('split', 'format', param_format)
        ok = False
        try:
            self.api.split(param_name, param_options, param_format, param_width, param_height, param__from, param_to, param_dest_folder, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'split', 'format', param_format)
        except ValueError as ex:
            self.assert_value_error(ex, 'split', 'format', param_format)
        if ok:
            self.assert_no_exception('split', 'format')

    def test_split_invalid_width(self):
        """Test case for split with invalid width
        """
        param_name = self.get_test_value('split', 'name', 'str')
        param_options = self.get_test_value('split', 'options', 'ExportOptions')
        param_format = self.get_test_value('split', 'format', 'str')
        param_width = self.get_test_value('split', 'width', 'int')
        param_height = self.get_test_value('split', 'height', 'int')
        param__from = self.get_test_value('split', '_from', 'int')
        param_to = self.get_test_value('split', 'to', 'int')
        param_dest_folder = self.get_test_value('split', 'dest_folder', 'str')
        param_password = self.get_test_value('split', 'password', 'str')
        param_folder = self.get_test_value('split', 'folder', 'str')
        param_storage = self.get_test_value('split', 'storage', 'str')
        param_fonts_folder = self.get_test_value('split', 'fonts_folder', 'str')
        param_width = self.get_invalid_test_value('split', 'width', param_width, 'int')
        self.initialize('split', 'width', param_width)
        ok = False
        try:
            self.api.split(param_name, param_options, param_format, param_width, param_height, param__from, param_to, param_dest_folder, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'split', 'width', param_width)
        except ValueError as ex:
            self.assert_value_error(ex, 'split', 'width', param_width)
        if ok:
            self.assert_no_exception('split', 'width')

    def test_split_invalid_height(self):
        """Test case for split with invalid height
        """
        param_name = self.get_test_value('split', 'name', 'str')
        param_options = self.get_test_value('split', 'options', 'ExportOptions')
        param_format = self.get_test_value('split', 'format', 'str')
        param_width = self.get_test_value('split', 'width', 'int')
        param_height = self.get_test_value('split', 'height', 'int')
        param__from = self.get_test_value('split', '_from', 'int')
        param_to = self.get_test_value('split', 'to', 'int')
        param_dest_folder = self.get_test_value('split', 'dest_folder', 'str')
        param_password = self.get_test_value('split', 'password', 'str')
        param_folder = self.get_test_value('split', 'folder', 'str')
        param_storage = self.get_test_value('split', 'storage', 'str')
        param_fonts_folder = self.get_test_value('split', 'fonts_folder', 'str')
        param_height = self.get_invalid_test_value('split', 'height', param_height, 'int')
        self.initialize('split', 'height', param_height)
        ok = False
        try:
            self.api.split(param_name, param_options, param_format, param_width, param_height, param__from, param_to, param_dest_folder, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'split', 'height', param_height)
        except ValueError as ex:
            self.assert_value_error(ex, 'split', 'height', param_height)
        if ok:
            self.assert_no_exception('split', 'height')

    def test_split_invalid__from(self):
        """Test case for split with invalid _from
        """
        param_name = self.get_test_value('split', 'name', 'str')
        param_options = self.get_test_value('split', 'options', 'ExportOptions')
        param_format = self.get_test_value('split', 'format', 'str')
        param_width = self.get_test_value('split', 'width', 'int')
        param_height = self.get_test_value('split', 'height', 'int')
        param__from = self.get_test_value('split', '_from', 'int')
        param_to = self.get_test_value('split', 'to', 'int')
        param_dest_folder = self.get_test_value('split', 'dest_folder', 'str')
        param_password = self.get_test_value('split', 'password', 'str')
        param_folder = self.get_test_value('split', 'folder', 'str')
        param_storage = self.get_test_value('split', 'storage', 'str')
        param_fonts_folder = self.get_test_value('split', 'fonts_folder', 'str')
        param__from = self.get_invalid_test_value('split', '_from', param__from, 'int')
        self.initialize('split', '_from', param__from)
        ok = False
        try:
            self.api.split(param_name, param_options, param_format, param_width, param_height, param__from, param_to, param_dest_folder, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'split', '_from', param__from)
        except ValueError as ex:
            self.assert_value_error(ex, 'split', '_from', param__from)
        if ok:
            self.assert_no_exception('split', '_from')

    def test_split_invalid_to(self):
        """Test case for split with invalid to
        """
        param_name = self.get_test_value('split', 'name', 'str')
        param_options = self.get_test_value('split', 'options', 'ExportOptions')
        param_format = self.get_test_value('split', 'format', 'str')
        param_width = self.get_test_value('split', 'width', 'int')
        param_height = self.get_test_value('split', 'height', 'int')
        param__from = self.get_test_value('split', '_from', 'int')
        param_to = self.get_test_value('split', 'to', 'int')
        param_dest_folder = self.get_test_value('split', 'dest_folder', 'str')
        param_password = self.get_test_value('split', 'password', 'str')
        param_folder = self.get_test_value('split', 'folder', 'str')
        param_storage = self.get_test_value('split', 'storage', 'str')
        param_fonts_folder = self.get_test_value('split', 'fonts_folder', 'str')
        param_to = self.get_invalid_test_value('split', 'to', param_to, 'int')
        self.initialize('split', 'to', param_to)
        ok = False
        try:
            self.api.split(param_name, param_options, param_format, param_width, param_height, param__from, param_to, param_dest_folder, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'split', 'to', param_to)
        except ValueError as ex:
            self.assert_value_error(ex, 'split', 'to', param_to)
        if ok:
            self.assert_no_exception('split', 'to')

    def test_split_invalid_dest_folder(self):
        """Test case for split with invalid dest_folder
        """
        param_name = self.get_test_value('split', 'name', 'str')
        param_options = self.get_test_value('split', 'options', 'ExportOptions')
        param_format = self.get_test_value('split', 'format', 'str')
        param_width = self.get_test_value('split', 'width', 'int')
        param_height = self.get_test_value('split', 'height', 'int')
        param__from = self.get_test_value('split', '_from', 'int')
        param_to = self.get_test_value('split', 'to', 'int')
        param_dest_folder = self.get_test_value('split', 'dest_folder', 'str')
        param_password = self.get_test_value('split', 'password', 'str')
        param_folder = self.get_test_value('split', 'folder', 'str')
        param_storage = self.get_test_value('split', 'storage', 'str')
        param_fonts_folder = self.get_test_value('split', 'fonts_folder', 'str')
        param_dest_folder = self.get_invalid_test_value('split', 'dest_folder', param_dest_folder, 'str')
        self.initialize('split', 'dest_folder', param_dest_folder)
        ok = False
        try:
            self.api.split(param_name, param_options, param_format, param_width, param_height, param__from, param_to, param_dest_folder, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'split', 'dest_folder', param_dest_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'split', 'dest_folder', param_dest_folder)
        if ok:
            self.assert_no_exception('split', 'dest_folder')

    def test_split_invalid_password(self):
        """Test case for split with invalid password
        """
        param_name = self.get_test_value('split', 'name', 'str')
        param_options = self.get_test_value('split', 'options', 'ExportOptions')
        param_format = self.get_test_value('split', 'format', 'str')
        param_width = self.get_test_value('split', 'width', 'int')
        param_height = self.get_test_value('split', 'height', 'int')
        param__from = self.get_test_value('split', '_from', 'int')
        param_to = self.get_test_value('split', 'to', 'int')
        param_dest_folder = self.get_test_value('split', 'dest_folder', 'str')
        param_password = self.get_test_value('split', 'password', 'str')
        param_folder = self.get_test_value('split', 'folder', 'str')
        param_storage = self.get_test_value('split', 'storage', 'str')
        param_fonts_folder = self.get_test_value('split', 'fonts_folder', 'str')
        param_password = self.get_invalid_test_value('split', 'password', param_password, 'str')
        self.initialize('split', 'password', param_password)
        ok = False
        try:
            self.api.split(param_name, param_options, param_format, param_width, param_height, param__from, param_to, param_dest_folder, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'split', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'split', 'password', param_password)
        if ok:
            self.assert_no_exception('split', 'password')

    def test_split_invalid_folder(self):
        """Test case for split with invalid folder
        """
        param_name = self.get_test_value('split', 'name', 'str')
        param_options = self.get_test_value('split', 'options', 'ExportOptions')
        param_format = self.get_test_value('split', 'format', 'str')
        param_width = self.get_test_value('split', 'width', 'int')
        param_height = self.get_test_value('split', 'height', 'int')
        param__from = self.get_test_value('split', '_from', 'int')
        param_to = self.get_test_value('split', 'to', 'int')
        param_dest_folder = self.get_test_value('split', 'dest_folder', 'str')
        param_password = self.get_test_value('split', 'password', 'str')
        param_folder = self.get_test_value('split', 'folder', 'str')
        param_storage = self.get_test_value('split', 'storage', 'str')
        param_fonts_folder = self.get_test_value('split', 'fonts_folder', 'str')
        param_folder = self.get_invalid_test_value('split', 'folder', param_folder, 'str')
        self.initialize('split', 'folder', param_folder)
        ok = False
        try:
            self.api.split(param_name, param_options, param_format, param_width, param_height, param__from, param_to, param_dest_folder, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'split', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'split', 'folder', param_folder)
        if ok:
            self.assert_no_exception('split', 'folder')

    def test_split_invalid_storage(self):
        """Test case for split with invalid storage
        """
        param_name = self.get_test_value('split', 'name', 'str')
        param_options = self.get_test_value('split', 'options', 'ExportOptions')
        param_format = self.get_test_value('split', 'format', 'str')
        param_width = self.get_test_value('split', 'width', 'int')
        param_height = self.get_test_value('split', 'height', 'int')
        param__from = self.get_test_value('split', '_from', 'int')
        param_to = self.get_test_value('split', 'to', 'int')
        param_dest_folder = self.get_test_value('split', 'dest_folder', 'str')
        param_password = self.get_test_value('split', 'password', 'str')
        param_folder = self.get_test_value('split', 'folder', 'str')
        param_storage = self.get_test_value('split', 'storage', 'str')
        param_fonts_folder = self.get_test_value('split', 'fonts_folder', 'str')
        param_storage = self.get_invalid_test_value('split', 'storage', param_storage, 'str')
        self.initialize('split', 'storage', param_storage)
        ok = False
        try:
            self.api.split(param_name, param_options, param_format, param_width, param_height, param__from, param_to, param_dest_folder, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'split', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'split', 'storage', param_storage)
        if ok:
            self.assert_no_exception('split', 'storage')

    def test_split_invalid_fonts_folder(self):
        """Test case for split with invalid fonts_folder
        """
        param_name = self.get_test_value('split', 'name', 'str')
        param_options = self.get_test_value('split', 'options', 'ExportOptions')
        param_format = self.get_test_value('split', 'format', 'str')
        param_width = self.get_test_value('split', 'width', 'int')
        param_height = self.get_test_value('split', 'height', 'int')
        param__from = self.get_test_value('split', '_from', 'int')
        param_to = self.get_test_value('split', 'to', 'int')
        param_dest_folder = self.get_test_value('split', 'dest_folder', 'str')
        param_password = self.get_test_value('split', 'password', 'str')
        param_folder = self.get_test_value('split', 'folder', 'str')
        param_storage = self.get_test_value('split', 'storage', 'str')
        param_fonts_folder = self.get_test_value('split', 'fonts_folder', 'str')
        param_fonts_folder = self.get_invalid_test_value('split', 'fonts_folder', param_fonts_folder, 'str')
        self.initialize('split', 'fonts_folder', param_fonts_folder)
        ok = False
        try:
            self.api.split(param_name, param_options, param_format, param_width, param_height, param__from, param_to, param_dest_folder, param_password, param_folder, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'split', 'fonts_folder', param_fonts_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'split', 'fonts_folder', param_fonts_folder)
        if ok:
            self.assert_no_exception('split', 'fonts_folder')

    def test_split_and_save_online(self):
        """Test case for split_and_save_online
        """
        param_document = self.get_test_value('split_and_save_online', 'document', 'file')
        param_format = self.get_test_value('split_and_save_online', 'format', 'str')
        param_dest_folder = self.get_test_value('split_and_save_online', 'dest_folder', 'str')
        param_width = self.get_test_value('split_and_save_online', 'width', 'int')
        param_height = self.get_test_value('split_and_save_online', 'height', 'int')
        param__from = self.get_test_value('split_and_save_online', '_from', 'int')
        param_to = self.get_test_value('split_and_save_online', 'to', 'int')
        param_password = self.get_test_value('split_and_save_online', 'password', 'str')
        param_storage = self.get_test_value('split_and_save_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('split_and_save_online', 'fonts_folder', 'str')
        self.initialize('split_and_save_online', None, None)
        response = self.api.split_and_save_online(param_document, param_format, param_dest_folder, param_width, param_height, param__from, param_to, param_password, param_storage, param_fonts_folder)
        self.assertIsNotNone(response)

    def test_split_and_save_online_invalid_document(self):
        """Test case for split_and_save_online with invalid document
        """
        param_document = self.get_test_value('split_and_save_online', 'document', 'file')
        param_format = self.get_test_value('split_and_save_online', 'format', 'str')
        param_dest_folder = self.get_test_value('split_and_save_online', 'dest_folder', 'str')
        param_width = self.get_test_value('split_and_save_online', 'width', 'int')
        param_height = self.get_test_value('split_and_save_online', 'height', 'int')
        param__from = self.get_test_value('split_and_save_online', '_from', 'int')
        param_to = self.get_test_value('split_and_save_online', 'to', 'int')
        param_password = self.get_test_value('split_and_save_online', 'password', 'str')
        param_storage = self.get_test_value('split_and_save_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('split_and_save_online', 'fonts_folder', 'str')
        param_document = self.get_invalid_test_value('split_and_save_online', 'document', param_document, 'file')
        self.initialize('split_and_save_online', 'document', param_document)
        ok = False
        try:
            self.api.split_and_save_online(param_document, param_format, param_dest_folder, param_width, param_height, param__from, param_to, param_password, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'split_and_save_online', 'document', param_document)
        except ValueError as ex:
            self.assert_value_error(ex, 'split_and_save_online', 'document', param_document)
        if ok:
            self.assert_no_exception('split_and_save_online', 'document')

    def test_split_and_save_online_invalid_format(self):
        """Test case for split_and_save_online with invalid format
        """
        param_document = self.get_test_value('split_and_save_online', 'document', 'file')
        param_format = self.get_test_value('split_and_save_online', 'format', 'str')
        param_dest_folder = self.get_test_value('split_and_save_online', 'dest_folder', 'str')
        param_width = self.get_test_value('split_and_save_online', 'width', 'int')
        param_height = self.get_test_value('split_and_save_online', 'height', 'int')
        param__from = self.get_test_value('split_and_save_online', '_from', 'int')
        param_to = self.get_test_value('split_and_save_online', 'to', 'int')
        param_password = self.get_test_value('split_and_save_online', 'password', 'str')
        param_storage = self.get_test_value('split_and_save_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('split_and_save_online', 'fonts_folder', 'str')
        param_format = self.get_invalid_test_value('split_and_save_online', 'format', param_format, 'str')
        self.initialize('split_and_save_online', 'format', param_format)
        ok = False
        try:
            self.api.split_and_save_online(param_document, param_format, param_dest_folder, param_width, param_height, param__from, param_to, param_password, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'split_and_save_online', 'format', param_format)
        except ValueError as ex:
            self.assert_value_error(ex, 'split_and_save_online', 'format', param_format)
        if ok:
            self.assert_no_exception('split_and_save_online', 'format')

    def test_split_and_save_online_invalid_dest_folder(self):
        """Test case for split_and_save_online with invalid dest_folder
        """
        param_document = self.get_test_value('split_and_save_online', 'document', 'file')
        param_format = self.get_test_value('split_and_save_online', 'format', 'str')
        param_dest_folder = self.get_test_value('split_and_save_online', 'dest_folder', 'str')
        param_width = self.get_test_value('split_and_save_online', 'width', 'int')
        param_height = self.get_test_value('split_and_save_online', 'height', 'int')
        param__from = self.get_test_value('split_and_save_online', '_from', 'int')
        param_to = self.get_test_value('split_and_save_online', 'to', 'int')
        param_password = self.get_test_value('split_and_save_online', 'password', 'str')
        param_storage = self.get_test_value('split_and_save_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('split_and_save_online', 'fonts_folder', 'str')
        param_dest_folder = self.get_invalid_test_value('split_and_save_online', 'dest_folder', param_dest_folder, 'str')
        self.initialize('split_and_save_online', 'dest_folder', param_dest_folder)
        ok = False
        try:
            self.api.split_and_save_online(param_document, param_format, param_dest_folder, param_width, param_height, param__from, param_to, param_password, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'split_and_save_online', 'dest_folder', param_dest_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'split_and_save_online', 'dest_folder', param_dest_folder)
        if ok:
            self.assert_no_exception('split_and_save_online', 'dest_folder')

    def test_split_and_save_online_invalid_width(self):
        """Test case for split_and_save_online with invalid width
        """
        param_document = self.get_test_value('split_and_save_online', 'document', 'file')
        param_format = self.get_test_value('split_and_save_online', 'format', 'str')
        param_dest_folder = self.get_test_value('split_and_save_online', 'dest_folder', 'str')
        param_width = self.get_test_value('split_and_save_online', 'width', 'int')
        param_height = self.get_test_value('split_and_save_online', 'height', 'int')
        param__from = self.get_test_value('split_and_save_online', '_from', 'int')
        param_to = self.get_test_value('split_and_save_online', 'to', 'int')
        param_password = self.get_test_value('split_and_save_online', 'password', 'str')
        param_storage = self.get_test_value('split_and_save_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('split_and_save_online', 'fonts_folder', 'str')
        param_width = self.get_invalid_test_value('split_and_save_online', 'width', param_width, 'int')
        self.initialize('split_and_save_online', 'width', param_width)
        ok = False
        try:
            self.api.split_and_save_online(param_document, param_format, param_dest_folder, param_width, param_height, param__from, param_to, param_password, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'split_and_save_online', 'width', param_width)
        except ValueError as ex:
            self.assert_value_error(ex, 'split_and_save_online', 'width', param_width)
        if ok:
            self.assert_no_exception('split_and_save_online', 'width')

    def test_split_and_save_online_invalid_height(self):
        """Test case for split_and_save_online with invalid height
        """
        param_document = self.get_test_value('split_and_save_online', 'document', 'file')
        param_format = self.get_test_value('split_and_save_online', 'format', 'str')
        param_dest_folder = self.get_test_value('split_and_save_online', 'dest_folder', 'str')
        param_width = self.get_test_value('split_and_save_online', 'width', 'int')
        param_height = self.get_test_value('split_and_save_online', 'height', 'int')
        param__from = self.get_test_value('split_and_save_online', '_from', 'int')
        param_to = self.get_test_value('split_and_save_online', 'to', 'int')
        param_password = self.get_test_value('split_and_save_online', 'password', 'str')
        param_storage = self.get_test_value('split_and_save_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('split_and_save_online', 'fonts_folder', 'str')
        param_height = self.get_invalid_test_value('split_and_save_online', 'height', param_height, 'int')
        self.initialize('split_and_save_online', 'height', param_height)
        ok = False
        try:
            self.api.split_and_save_online(param_document, param_format, param_dest_folder, param_width, param_height, param__from, param_to, param_password, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'split_and_save_online', 'height', param_height)
        except ValueError as ex:
            self.assert_value_error(ex, 'split_and_save_online', 'height', param_height)
        if ok:
            self.assert_no_exception('split_and_save_online', 'height')

    def test_split_and_save_online_invalid__from(self):
        """Test case for split_and_save_online with invalid _from
        """
        param_document = self.get_test_value('split_and_save_online', 'document', 'file')
        param_format = self.get_test_value('split_and_save_online', 'format', 'str')
        param_dest_folder = self.get_test_value('split_and_save_online', 'dest_folder', 'str')
        param_width = self.get_test_value('split_and_save_online', 'width', 'int')
        param_height = self.get_test_value('split_and_save_online', 'height', 'int')
        param__from = self.get_test_value('split_and_save_online', '_from', 'int')
        param_to = self.get_test_value('split_and_save_online', 'to', 'int')
        param_password = self.get_test_value('split_and_save_online', 'password', 'str')
        param_storage = self.get_test_value('split_and_save_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('split_and_save_online', 'fonts_folder', 'str')
        param__from = self.get_invalid_test_value('split_and_save_online', '_from', param__from, 'int')
        self.initialize('split_and_save_online', '_from', param__from)
        ok = False
        try:
            self.api.split_and_save_online(param_document, param_format, param_dest_folder, param_width, param_height, param__from, param_to, param_password, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'split_and_save_online', '_from', param__from)
        except ValueError as ex:
            self.assert_value_error(ex, 'split_and_save_online', '_from', param__from)
        if ok:
            self.assert_no_exception('split_and_save_online', '_from')

    def test_split_and_save_online_invalid_to(self):
        """Test case for split_and_save_online with invalid to
        """
        param_document = self.get_test_value('split_and_save_online', 'document', 'file')
        param_format = self.get_test_value('split_and_save_online', 'format', 'str')
        param_dest_folder = self.get_test_value('split_and_save_online', 'dest_folder', 'str')
        param_width = self.get_test_value('split_and_save_online', 'width', 'int')
        param_height = self.get_test_value('split_and_save_online', 'height', 'int')
        param__from = self.get_test_value('split_and_save_online', '_from', 'int')
        param_to = self.get_test_value('split_and_save_online', 'to', 'int')
        param_password = self.get_test_value('split_and_save_online', 'password', 'str')
        param_storage = self.get_test_value('split_and_save_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('split_and_save_online', 'fonts_folder', 'str')
        param_to = self.get_invalid_test_value('split_and_save_online', 'to', param_to, 'int')
        self.initialize('split_and_save_online', 'to', param_to)
        ok = False
        try:
            self.api.split_and_save_online(param_document, param_format, param_dest_folder, param_width, param_height, param__from, param_to, param_password, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'split_and_save_online', 'to', param_to)
        except ValueError as ex:
            self.assert_value_error(ex, 'split_and_save_online', 'to', param_to)
        if ok:
            self.assert_no_exception('split_and_save_online', 'to')

    def test_split_and_save_online_invalid_password(self):
        """Test case for split_and_save_online with invalid password
        """
        param_document = self.get_test_value('split_and_save_online', 'document', 'file')
        param_format = self.get_test_value('split_and_save_online', 'format', 'str')
        param_dest_folder = self.get_test_value('split_and_save_online', 'dest_folder', 'str')
        param_width = self.get_test_value('split_and_save_online', 'width', 'int')
        param_height = self.get_test_value('split_and_save_online', 'height', 'int')
        param__from = self.get_test_value('split_and_save_online', '_from', 'int')
        param_to = self.get_test_value('split_and_save_online', 'to', 'int')
        param_password = self.get_test_value('split_and_save_online', 'password', 'str')
        param_storage = self.get_test_value('split_and_save_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('split_and_save_online', 'fonts_folder', 'str')
        param_password = self.get_invalid_test_value('split_and_save_online', 'password', param_password, 'str')
        self.initialize('split_and_save_online', 'password', param_password)
        ok = False
        try:
            self.api.split_and_save_online(param_document, param_format, param_dest_folder, param_width, param_height, param__from, param_to, param_password, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'split_and_save_online', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'split_and_save_online', 'password', param_password)
        if ok:
            self.assert_no_exception('split_and_save_online', 'password')

    def test_split_and_save_online_invalid_storage(self):
        """Test case for split_and_save_online with invalid storage
        """
        param_document = self.get_test_value('split_and_save_online', 'document', 'file')
        param_format = self.get_test_value('split_and_save_online', 'format', 'str')
        param_dest_folder = self.get_test_value('split_and_save_online', 'dest_folder', 'str')
        param_width = self.get_test_value('split_and_save_online', 'width', 'int')
        param_height = self.get_test_value('split_and_save_online', 'height', 'int')
        param__from = self.get_test_value('split_and_save_online', '_from', 'int')
        param_to = self.get_test_value('split_and_save_online', 'to', 'int')
        param_password = self.get_test_value('split_and_save_online', 'password', 'str')
        param_storage = self.get_test_value('split_and_save_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('split_and_save_online', 'fonts_folder', 'str')
        param_storage = self.get_invalid_test_value('split_and_save_online', 'storage', param_storage, 'str')
        self.initialize('split_and_save_online', 'storage', param_storage)
        ok = False
        try:
            self.api.split_and_save_online(param_document, param_format, param_dest_folder, param_width, param_height, param__from, param_to, param_password, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'split_and_save_online', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'split_and_save_online', 'storage', param_storage)
        if ok:
            self.assert_no_exception('split_and_save_online', 'storage')

    def test_split_and_save_online_invalid_fonts_folder(self):
        """Test case for split_and_save_online with invalid fonts_folder
        """
        param_document = self.get_test_value('split_and_save_online', 'document', 'file')
        param_format = self.get_test_value('split_and_save_online', 'format', 'str')
        param_dest_folder = self.get_test_value('split_and_save_online', 'dest_folder', 'str')
        param_width = self.get_test_value('split_and_save_online', 'width', 'int')
        param_height = self.get_test_value('split_and_save_online', 'height', 'int')
        param__from = self.get_test_value('split_and_save_online', '_from', 'int')
        param_to = self.get_test_value('split_and_save_online', 'to', 'int')
        param_password = self.get_test_value('split_and_save_online', 'password', 'str')
        param_storage = self.get_test_value('split_and_save_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('split_and_save_online', 'fonts_folder', 'str')
        param_fonts_folder = self.get_invalid_test_value('split_and_save_online', 'fonts_folder', param_fonts_folder, 'str')
        self.initialize('split_and_save_online', 'fonts_folder', param_fonts_folder)
        ok = False
        try:
            self.api.split_and_save_online(param_document, param_format, param_dest_folder, param_width, param_height, param__from, param_to, param_password, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'split_and_save_online', 'fonts_folder', param_fonts_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'split_and_save_online', 'fonts_folder', param_fonts_folder)
        if ok:
            self.assert_no_exception('split_and_save_online', 'fonts_folder')

    def test_split_online(self):
        """Test case for split_online
        """
        param_document = self.get_test_value('split_online', 'document', 'file')
        param_format = self.get_test_value('split_online', 'format', 'str')
        param_width = self.get_test_value('split_online', 'width', 'int')
        param_height = self.get_test_value('split_online', 'height', 'int')
        param__from = self.get_test_value('split_online', '_from', 'int')
        param_to = self.get_test_value('split_online', 'to', 'int')
        param_password = self.get_test_value('split_online', 'password', 'str')
        param_storage = self.get_test_value('split_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('split_online', 'fonts_folder', 'str')
        self.initialize('split_online', None, None)
        response = self.api.split_online(param_document, param_format, param_width, param_height, param__from, param_to, param_password, param_storage, param_fonts_folder)
        self.assertTrue(isinstance(response, str))
        self.assertTrue(len(response) > 0)

    def test_split_online_invalid_document(self):
        """Test case for split_online with invalid document
        """
        param_document = self.get_test_value('split_online', 'document', 'file')
        param_format = self.get_test_value('split_online', 'format', 'str')
        param_width = self.get_test_value('split_online', 'width', 'int')
        param_height = self.get_test_value('split_online', 'height', 'int')
        param__from = self.get_test_value('split_online', '_from', 'int')
        param_to = self.get_test_value('split_online', 'to', 'int')
        param_password = self.get_test_value('split_online', 'password', 'str')
        param_storage = self.get_test_value('split_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('split_online', 'fonts_folder', 'str')
        param_document = self.get_invalid_test_value('split_online', 'document', param_document, 'file')
        self.initialize('split_online', 'document', param_document)
        ok = False
        try:
            self.api.split_online(param_document, param_format, param_width, param_height, param__from, param_to, param_password, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'split_online', 'document', param_document)
        except ValueError as ex:
            self.assert_value_error(ex, 'split_online', 'document', param_document)
        if ok:
            self.assert_no_exception('split_online', 'document')

    def test_split_online_invalid_format(self):
        """Test case for split_online with invalid format
        """
        param_document = self.get_test_value('split_online', 'document', 'file')
        param_format = self.get_test_value('split_online', 'format', 'str')
        param_width = self.get_test_value('split_online', 'width', 'int')
        param_height = self.get_test_value('split_online', 'height', 'int')
        param__from = self.get_test_value('split_online', '_from', 'int')
        param_to = self.get_test_value('split_online', 'to', 'int')
        param_password = self.get_test_value('split_online', 'password', 'str')
        param_storage = self.get_test_value('split_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('split_online', 'fonts_folder', 'str')
        param_format = self.get_invalid_test_value('split_online', 'format', param_format, 'str')
        self.initialize('split_online', 'format', param_format)
        ok = False
        try:
            self.api.split_online(param_document, param_format, param_width, param_height, param__from, param_to, param_password, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'split_online', 'format', param_format)
        except ValueError as ex:
            self.assert_value_error(ex, 'split_online', 'format', param_format)
        if ok:
            self.assert_no_exception('split_online', 'format')

    def test_split_online_invalid_width(self):
        """Test case for split_online with invalid width
        """
        param_document = self.get_test_value('split_online', 'document', 'file')
        param_format = self.get_test_value('split_online', 'format', 'str')
        param_width = self.get_test_value('split_online', 'width', 'int')
        param_height = self.get_test_value('split_online', 'height', 'int')
        param__from = self.get_test_value('split_online', '_from', 'int')
        param_to = self.get_test_value('split_online', 'to', 'int')
        param_password = self.get_test_value('split_online', 'password', 'str')
        param_storage = self.get_test_value('split_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('split_online', 'fonts_folder', 'str')
        param_width = self.get_invalid_test_value('split_online', 'width', param_width, 'int')
        self.initialize('split_online', 'width', param_width)
        ok = False
        try:
            self.api.split_online(param_document, param_format, param_width, param_height, param__from, param_to, param_password, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'split_online', 'width', param_width)
        except ValueError as ex:
            self.assert_value_error(ex, 'split_online', 'width', param_width)
        if ok:
            self.assert_no_exception('split_online', 'width')

    def test_split_online_invalid_height(self):
        """Test case for split_online with invalid height
        """
        param_document = self.get_test_value('split_online', 'document', 'file')
        param_format = self.get_test_value('split_online', 'format', 'str')
        param_width = self.get_test_value('split_online', 'width', 'int')
        param_height = self.get_test_value('split_online', 'height', 'int')
        param__from = self.get_test_value('split_online', '_from', 'int')
        param_to = self.get_test_value('split_online', 'to', 'int')
        param_password = self.get_test_value('split_online', 'password', 'str')
        param_storage = self.get_test_value('split_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('split_online', 'fonts_folder', 'str')
        param_height = self.get_invalid_test_value('split_online', 'height', param_height, 'int')
        self.initialize('split_online', 'height', param_height)
        ok = False
        try:
            self.api.split_online(param_document, param_format, param_width, param_height, param__from, param_to, param_password, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'split_online', 'height', param_height)
        except ValueError as ex:
            self.assert_value_error(ex, 'split_online', 'height', param_height)
        if ok:
            self.assert_no_exception('split_online', 'height')

    def test_split_online_invalid__from(self):
        """Test case for split_online with invalid _from
        """
        param_document = self.get_test_value('split_online', 'document', 'file')
        param_format = self.get_test_value('split_online', 'format', 'str')
        param_width = self.get_test_value('split_online', 'width', 'int')
        param_height = self.get_test_value('split_online', 'height', 'int')
        param__from = self.get_test_value('split_online', '_from', 'int')
        param_to = self.get_test_value('split_online', 'to', 'int')
        param_password = self.get_test_value('split_online', 'password', 'str')
        param_storage = self.get_test_value('split_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('split_online', 'fonts_folder', 'str')
        param__from = self.get_invalid_test_value('split_online', '_from', param__from, 'int')
        self.initialize('split_online', '_from', param__from)
        ok = False
        try:
            self.api.split_online(param_document, param_format, param_width, param_height, param__from, param_to, param_password, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'split_online', '_from', param__from)
        except ValueError as ex:
            self.assert_value_error(ex, 'split_online', '_from', param__from)
        if ok:
            self.assert_no_exception('split_online', '_from')

    def test_split_online_invalid_to(self):
        """Test case for split_online with invalid to
        """
        param_document = self.get_test_value('split_online', 'document', 'file')
        param_format = self.get_test_value('split_online', 'format', 'str')
        param_width = self.get_test_value('split_online', 'width', 'int')
        param_height = self.get_test_value('split_online', 'height', 'int')
        param__from = self.get_test_value('split_online', '_from', 'int')
        param_to = self.get_test_value('split_online', 'to', 'int')
        param_password = self.get_test_value('split_online', 'password', 'str')
        param_storage = self.get_test_value('split_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('split_online', 'fonts_folder', 'str')
        param_to = self.get_invalid_test_value('split_online', 'to', param_to, 'int')
        self.initialize('split_online', 'to', param_to)
        ok = False
        try:
            self.api.split_online(param_document, param_format, param_width, param_height, param__from, param_to, param_password, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'split_online', 'to', param_to)
        except ValueError as ex:
            self.assert_value_error(ex, 'split_online', 'to', param_to)
        if ok:
            self.assert_no_exception('split_online', 'to')

    def test_split_online_invalid_password(self):
        """Test case for split_online with invalid password
        """
        param_document = self.get_test_value('split_online', 'document', 'file')
        param_format = self.get_test_value('split_online', 'format', 'str')
        param_width = self.get_test_value('split_online', 'width', 'int')
        param_height = self.get_test_value('split_online', 'height', 'int')
        param__from = self.get_test_value('split_online', '_from', 'int')
        param_to = self.get_test_value('split_online', 'to', 'int')
        param_password = self.get_test_value('split_online', 'password', 'str')
        param_storage = self.get_test_value('split_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('split_online', 'fonts_folder', 'str')
        param_password = self.get_invalid_test_value('split_online', 'password', param_password, 'str')
        self.initialize('split_online', 'password', param_password)
        ok = False
        try:
            self.api.split_online(param_document, param_format, param_width, param_height, param__from, param_to, param_password, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'split_online', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'split_online', 'password', param_password)
        if ok:
            self.assert_no_exception('split_online', 'password')

    def test_split_online_invalid_storage(self):
        """Test case for split_online with invalid storage
        """
        param_document = self.get_test_value('split_online', 'document', 'file')
        param_format = self.get_test_value('split_online', 'format', 'str')
        param_width = self.get_test_value('split_online', 'width', 'int')
        param_height = self.get_test_value('split_online', 'height', 'int')
        param__from = self.get_test_value('split_online', '_from', 'int')
        param_to = self.get_test_value('split_online', 'to', 'int')
        param_password = self.get_test_value('split_online', 'password', 'str')
        param_storage = self.get_test_value('split_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('split_online', 'fonts_folder', 'str')
        param_storage = self.get_invalid_test_value('split_online', 'storage', param_storage, 'str')
        self.initialize('split_online', 'storage', param_storage)
        ok = False
        try:
            self.api.split_online(param_document, param_format, param_width, param_height, param__from, param_to, param_password, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'split_online', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'split_online', 'storage', param_storage)
        if ok:
            self.assert_no_exception('split_online', 'storage')

    def test_split_online_invalid_fonts_folder(self):
        """Test case for split_online with invalid fonts_folder
        """
        param_document = self.get_test_value('split_online', 'document', 'file')
        param_format = self.get_test_value('split_online', 'format', 'str')
        param_width = self.get_test_value('split_online', 'width', 'int')
        param_height = self.get_test_value('split_online', 'height', 'int')
        param__from = self.get_test_value('split_online', '_from', 'int')
        param_to = self.get_test_value('split_online', 'to', 'int')
        param_password = self.get_test_value('split_online', 'password', 'str')
        param_storage = self.get_test_value('split_online', 'storage', 'str')
        param_fonts_folder = self.get_test_value('split_online', 'fonts_folder', 'str')
        param_fonts_folder = self.get_invalid_test_value('split_online', 'fonts_folder', param_fonts_folder, 'str')
        self.initialize('split_online', 'fonts_folder', param_fonts_folder)
        ok = False
        try:
            self.api.split_online(param_document, param_format, param_width, param_height, param__from, param_to, param_password, param_storage, param_fonts_folder)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'split_online', 'fonts_folder', param_fonts_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'split_online', 'fonts_folder', param_fonts_folder)
        if ok:
            self.assert_no_exception('split_online', 'fonts_folder')

    def test_storage_exists(self):
        """Test case for storage_exists
        """
        param_storage_name = self.get_test_value('storage_exists', 'storage_name', 'str')
        self.initialize('storage_exists', None, None)
        response = self.api.storage_exists(param_storage_name)
        self.assertIsNotNone(response)

    def test_storage_exists_invalid_storage_name(self):
        """Test case for storage_exists with invalid storage_name
        """
        param_storage_name = self.get_test_value('storage_exists', 'storage_name', 'str')
        param_storage_name = self.get_invalid_test_value('storage_exists', 'storage_name', param_storage_name, 'str')
        self.initialize('storage_exists', 'storage_name', param_storage_name)
        ok = False
        try:
            self.api.storage_exists(param_storage_name)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'storage_exists', 'storage_name', param_storage_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'storage_exists', 'storage_name', param_storage_name)
        if ok:
            self.assert_no_exception('storage_exists', 'storage_name')

    def test_update_animation_effect(self):
        """Test case for update_animation_effect
        """
        param_name = self.get_test_value('update_animation_effect', 'name', 'str')
        param_slide_index = self.get_test_value('update_animation_effect', 'slide_index', 'int')
        param_effect_index = self.get_test_value('update_animation_effect', 'effect_index', 'int')
        param_effect = self.get_test_value('update_animation_effect', 'effect', 'Effect')
        param_password = self.get_test_value('update_animation_effect', 'password', 'str')
        param_folder = self.get_test_value('update_animation_effect', 'folder', 'str')
        param_storage = self.get_test_value('update_animation_effect', 'storage', 'str')
        self.initialize('update_animation_effect', None, None)
        response = self.api.update_animation_effect(param_name, param_slide_index, param_effect_index, param_effect, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_update_animation_effect_invalid_name(self):
        """Test case for update_animation_effect with invalid name
        """
        param_name = self.get_test_value('update_animation_effect', 'name', 'str')
        param_slide_index = self.get_test_value('update_animation_effect', 'slide_index', 'int')
        param_effect_index = self.get_test_value('update_animation_effect', 'effect_index', 'int')
        param_effect = self.get_test_value('update_animation_effect', 'effect', 'Effect')
        param_password = self.get_test_value('update_animation_effect', 'password', 'str')
        param_folder = self.get_test_value('update_animation_effect', 'folder', 'str')
        param_storage = self.get_test_value('update_animation_effect', 'storage', 'str')
        param_name = self.get_invalid_test_value('update_animation_effect', 'name', param_name, 'str')
        self.initialize('update_animation_effect', 'name', param_name)
        ok = False
        try:
            self.api.update_animation_effect(param_name, param_slide_index, param_effect_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_animation_effect', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_animation_effect', 'name', param_name)
        if ok:
            self.assert_no_exception('update_animation_effect', 'name')

    def test_update_animation_effect_invalid_slide_index(self):
        """Test case for update_animation_effect with invalid slide_index
        """
        param_name = self.get_test_value('update_animation_effect', 'name', 'str')
        param_slide_index = self.get_test_value('update_animation_effect', 'slide_index', 'int')
        param_effect_index = self.get_test_value('update_animation_effect', 'effect_index', 'int')
        param_effect = self.get_test_value('update_animation_effect', 'effect', 'Effect')
        param_password = self.get_test_value('update_animation_effect', 'password', 'str')
        param_folder = self.get_test_value('update_animation_effect', 'folder', 'str')
        param_storage = self.get_test_value('update_animation_effect', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('update_animation_effect', 'slide_index', param_slide_index, 'int')
        self.initialize('update_animation_effect', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.update_animation_effect(param_name, param_slide_index, param_effect_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_animation_effect', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_animation_effect', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('update_animation_effect', 'slide_index')

    def test_update_animation_effect_invalid_effect_index(self):
        """Test case for update_animation_effect with invalid effect_index
        """
        param_name = self.get_test_value('update_animation_effect', 'name', 'str')
        param_slide_index = self.get_test_value('update_animation_effect', 'slide_index', 'int')
        param_effect_index = self.get_test_value('update_animation_effect', 'effect_index', 'int')
        param_effect = self.get_test_value('update_animation_effect', 'effect', 'Effect')
        param_password = self.get_test_value('update_animation_effect', 'password', 'str')
        param_folder = self.get_test_value('update_animation_effect', 'folder', 'str')
        param_storage = self.get_test_value('update_animation_effect', 'storage', 'str')
        param_effect_index = self.get_invalid_test_value('update_animation_effect', 'effect_index', param_effect_index, 'int')
        self.initialize('update_animation_effect', 'effect_index', param_effect_index)
        ok = False
        try:
            self.api.update_animation_effect(param_name, param_slide_index, param_effect_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_animation_effect', 'effect_index', param_effect_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_animation_effect', 'effect_index', param_effect_index)
        if ok:
            self.assert_no_exception('update_animation_effect', 'effect_index')

    def test_update_animation_effect_invalid_effect(self):
        """Test case for update_animation_effect with invalid effect
        """
        param_name = self.get_test_value('update_animation_effect', 'name', 'str')
        param_slide_index = self.get_test_value('update_animation_effect', 'slide_index', 'int')
        param_effect_index = self.get_test_value('update_animation_effect', 'effect_index', 'int')
        param_effect = self.get_test_value('update_animation_effect', 'effect', 'Effect')
        param_password = self.get_test_value('update_animation_effect', 'password', 'str')
        param_folder = self.get_test_value('update_animation_effect', 'folder', 'str')
        param_storage = self.get_test_value('update_animation_effect', 'storage', 'str')
        param_effect = self.get_invalid_test_value('update_animation_effect', 'effect', param_effect, 'Effect')
        self.initialize('update_animation_effect', 'effect', param_effect)
        ok = False
        try:
            self.api.update_animation_effect(param_name, param_slide_index, param_effect_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_animation_effect', 'effect', param_effect)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_animation_effect', 'effect', param_effect)
        if ok:
            self.assert_no_exception('update_animation_effect', 'effect')

    def test_update_animation_effect_invalid_password(self):
        """Test case for update_animation_effect with invalid password
        """
        param_name = self.get_test_value('update_animation_effect', 'name', 'str')
        param_slide_index = self.get_test_value('update_animation_effect', 'slide_index', 'int')
        param_effect_index = self.get_test_value('update_animation_effect', 'effect_index', 'int')
        param_effect = self.get_test_value('update_animation_effect', 'effect', 'Effect')
        param_password = self.get_test_value('update_animation_effect', 'password', 'str')
        param_folder = self.get_test_value('update_animation_effect', 'folder', 'str')
        param_storage = self.get_test_value('update_animation_effect', 'storage', 'str')
        param_password = self.get_invalid_test_value('update_animation_effect', 'password', param_password, 'str')
        self.initialize('update_animation_effect', 'password', param_password)
        ok = False
        try:
            self.api.update_animation_effect(param_name, param_slide_index, param_effect_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_animation_effect', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_animation_effect', 'password', param_password)
        if ok:
            self.assert_no_exception('update_animation_effect', 'password')

    def test_update_animation_effect_invalid_folder(self):
        """Test case for update_animation_effect with invalid folder
        """
        param_name = self.get_test_value('update_animation_effect', 'name', 'str')
        param_slide_index = self.get_test_value('update_animation_effect', 'slide_index', 'int')
        param_effect_index = self.get_test_value('update_animation_effect', 'effect_index', 'int')
        param_effect = self.get_test_value('update_animation_effect', 'effect', 'Effect')
        param_password = self.get_test_value('update_animation_effect', 'password', 'str')
        param_folder = self.get_test_value('update_animation_effect', 'folder', 'str')
        param_storage = self.get_test_value('update_animation_effect', 'storage', 'str')
        param_folder = self.get_invalid_test_value('update_animation_effect', 'folder', param_folder, 'str')
        self.initialize('update_animation_effect', 'folder', param_folder)
        ok = False
        try:
            self.api.update_animation_effect(param_name, param_slide_index, param_effect_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_animation_effect', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_animation_effect', 'folder', param_folder)
        if ok:
            self.assert_no_exception('update_animation_effect', 'folder')

    def test_update_animation_effect_invalid_storage(self):
        """Test case for update_animation_effect with invalid storage
        """
        param_name = self.get_test_value('update_animation_effect', 'name', 'str')
        param_slide_index = self.get_test_value('update_animation_effect', 'slide_index', 'int')
        param_effect_index = self.get_test_value('update_animation_effect', 'effect_index', 'int')
        param_effect = self.get_test_value('update_animation_effect', 'effect', 'Effect')
        param_password = self.get_test_value('update_animation_effect', 'password', 'str')
        param_folder = self.get_test_value('update_animation_effect', 'folder', 'str')
        param_storage = self.get_test_value('update_animation_effect', 'storage', 'str')
        param_storage = self.get_invalid_test_value('update_animation_effect', 'storage', param_storage, 'str')
        self.initialize('update_animation_effect', 'storage', param_storage)
        ok = False
        try:
            self.api.update_animation_effect(param_name, param_slide_index, param_effect_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_animation_effect', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_animation_effect', 'storage', param_storage)
        if ok:
            self.assert_no_exception('update_animation_effect', 'storage')

    def test_update_animation_interactive_sequence_effect(self):
        """Test case for update_animation_interactive_sequence_effect
        """
        param_name = self.get_test_value('update_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('update_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_sequence_index = self.get_test_value('update_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect_index = self.get_test_value('update_animation_interactive_sequence_effect', 'effect_index', 'int')
        param_effect = self.get_test_value('update_animation_interactive_sequence_effect', 'effect', 'Effect')
        param_password = self.get_test_value('update_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('update_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('update_animation_interactive_sequence_effect', 'storage', 'str')
        self.initialize('update_animation_interactive_sequence_effect', None, None)
        response = self.api.update_animation_interactive_sequence_effect(param_name, param_slide_index, param_sequence_index, param_effect_index, param_effect, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_update_animation_interactive_sequence_effect_invalid_name(self):
        """Test case for update_animation_interactive_sequence_effect with invalid name
        """
        param_name = self.get_test_value('update_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('update_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_sequence_index = self.get_test_value('update_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect_index = self.get_test_value('update_animation_interactive_sequence_effect', 'effect_index', 'int')
        param_effect = self.get_test_value('update_animation_interactive_sequence_effect', 'effect', 'Effect')
        param_password = self.get_test_value('update_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('update_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('update_animation_interactive_sequence_effect', 'storage', 'str')
        param_name = self.get_invalid_test_value('update_animation_interactive_sequence_effect', 'name', param_name, 'str')
        self.initialize('update_animation_interactive_sequence_effect', 'name', param_name)
        ok = False
        try:
            self.api.update_animation_interactive_sequence_effect(param_name, param_slide_index, param_sequence_index, param_effect_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_animation_interactive_sequence_effect', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_animation_interactive_sequence_effect', 'name', param_name)
        if ok:
            self.assert_no_exception('update_animation_interactive_sequence_effect', 'name')

    def test_update_animation_interactive_sequence_effect_invalid_slide_index(self):
        """Test case for update_animation_interactive_sequence_effect with invalid slide_index
        """
        param_name = self.get_test_value('update_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('update_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_sequence_index = self.get_test_value('update_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect_index = self.get_test_value('update_animation_interactive_sequence_effect', 'effect_index', 'int')
        param_effect = self.get_test_value('update_animation_interactive_sequence_effect', 'effect', 'Effect')
        param_password = self.get_test_value('update_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('update_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('update_animation_interactive_sequence_effect', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('update_animation_interactive_sequence_effect', 'slide_index', param_slide_index, 'int')
        self.initialize('update_animation_interactive_sequence_effect', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.update_animation_interactive_sequence_effect(param_name, param_slide_index, param_sequence_index, param_effect_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_animation_interactive_sequence_effect', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_animation_interactive_sequence_effect', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('update_animation_interactive_sequence_effect', 'slide_index')

    def test_update_animation_interactive_sequence_effect_invalid_sequence_index(self):
        """Test case for update_animation_interactive_sequence_effect with invalid sequence_index
        """
        param_name = self.get_test_value('update_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('update_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_sequence_index = self.get_test_value('update_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect_index = self.get_test_value('update_animation_interactive_sequence_effect', 'effect_index', 'int')
        param_effect = self.get_test_value('update_animation_interactive_sequence_effect', 'effect', 'Effect')
        param_password = self.get_test_value('update_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('update_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('update_animation_interactive_sequence_effect', 'storage', 'str')
        param_sequence_index = self.get_invalid_test_value('update_animation_interactive_sequence_effect', 'sequence_index', param_sequence_index, 'int')
        self.initialize('update_animation_interactive_sequence_effect', 'sequence_index', param_sequence_index)
        ok = False
        try:
            self.api.update_animation_interactive_sequence_effect(param_name, param_slide_index, param_sequence_index, param_effect_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_animation_interactive_sequence_effect', 'sequence_index', param_sequence_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_animation_interactive_sequence_effect', 'sequence_index', param_sequence_index)
        if ok:
            self.assert_no_exception('update_animation_interactive_sequence_effect', 'sequence_index')

    def test_update_animation_interactive_sequence_effect_invalid_effect_index(self):
        """Test case for update_animation_interactive_sequence_effect with invalid effect_index
        """
        param_name = self.get_test_value('update_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('update_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_sequence_index = self.get_test_value('update_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect_index = self.get_test_value('update_animation_interactive_sequence_effect', 'effect_index', 'int')
        param_effect = self.get_test_value('update_animation_interactive_sequence_effect', 'effect', 'Effect')
        param_password = self.get_test_value('update_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('update_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('update_animation_interactive_sequence_effect', 'storage', 'str')
        param_effect_index = self.get_invalid_test_value('update_animation_interactive_sequence_effect', 'effect_index', param_effect_index, 'int')
        self.initialize('update_animation_interactive_sequence_effect', 'effect_index', param_effect_index)
        ok = False
        try:
            self.api.update_animation_interactive_sequence_effect(param_name, param_slide_index, param_sequence_index, param_effect_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_animation_interactive_sequence_effect', 'effect_index', param_effect_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_animation_interactive_sequence_effect', 'effect_index', param_effect_index)
        if ok:
            self.assert_no_exception('update_animation_interactive_sequence_effect', 'effect_index')

    def test_update_animation_interactive_sequence_effect_invalid_effect(self):
        """Test case for update_animation_interactive_sequence_effect with invalid effect
        """
        param_name = self.get_test_value('update_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('update_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_sequence_index = self.get_test_value('update_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect_index = self.get_test_value('update_animation_interactive_sequence_effect', 'effect_index', 'int')
        param_effect = self.get_test_value('update_animation_interactive_sequence_effect', 'effect', 'Effect')
        param_password = self.get_test_value('update_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('update_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('update_animation_interactive_sequence_effect', 'storage', 'str')
        param_effect = self.get_invalid_test_value('update_animation_interactive_sequence_effect', 'effect', param_effect, 'Effect')
        self.initialize('update_animation_interactive_sequence_effect', 'effect', param_effect)
        ok = False
        try:
            self.api.update_animation_interactive_sequence_effect(param_name, param_slide_index, param_sequence_index, param_effect_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_animation_interactive_sequence_effect', 'effect', param_effect)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_animation_interactive_sequence_effect', 'effect', param_effect)
        if ok:
            self.assert_no_exception('update_animation_interactive_sequence_effect', 'effect')

    def test_update_animation_interactive_sequence_effect_invalid_password(self):
        """Test case for update_animation_interactive_sequence_effect with invalid password
        """
        param_name = self.get_test_value('update_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('update_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_sequence_index = self.get_test_value('update_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect_index = self.get_test_value('update_animation_interactive_sequence_effect', 'effect_index', 'int')
        param_effect = self.get_test_value('update_animation_interactive_sequence_effect', 'effect', 'Effect')
        param_password = self.get_test_value('update_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('update_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('update_animation_interactive_sequence_effect', 'storage', 'str')
        param_password = self.get_invalid_test_value('update_animation_interactive_sequence_effect', 'password', param_password, 'str')
        self.initialize('update_animation_interactive_sequence_effect', 'password', param_password)
        ok = False
        try:
            self.api.update_animation_interactive_sequence_effect(param_name, param_slide_index, param_sequence_index, param_effect_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_animation_interactive_sequence_effect', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_animation_interactive_sequence_effect', 'password', param_password)
        if ok:
            self.assert_no_exception('update_animation_interactive_sequence_effect', 'password')

    def test_update_animation_interactive_sequence_effect_invalid_folder(self):
        """Test case for update_animation_interactive_sequence_effect with invalid folder
        """
        param_name = self.get_test_value('update_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('update_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_sequence_index = self.get_test_value('update_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect_index = self.get_test_value('update_animation_interactive_sequence_effect', 'effect_index', 'int')
        param_effect = self.get_test_value('update_animation_interactive_sequence_effect', 'effect', 'Effect')
        param_password = self.get_test_value('update_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('update_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('update_animation_interactive_sequence_effect', 'storage', 'str')
        param_folder = self.get_invalid_test_value('update_animation_interactive_sequence_effect', 'folder', param_folder, 'str')
        self.initialize('update_animation_interactive_sequence_effect', 'folder', param_folder)
        ok = False
        try:
            self.api.update_animation_interactive_sequence_effect(param_name, param_slide_index, param_sequence_index, param_effect_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_animation_interactive_sequence_effect', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_animation_interactive_sequence_effect', 'folder', param_folder)
        if ok:
            self.assert_no_exception('update_animation_interactive_sequence_effect', 'folder')

    def test_update_animation_interactive_sequence_effect_invalid_storage(self):
        """Test case for update_animation_interactive_sequence_effect with invalid storage
        """
        param_name = self.get_test_value('update_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('update_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_sequence_index = self.get_test_value('update_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect_index = self.get_test_value('update_animation_interactive_sequence_effect', 'effect_index', 'int')
        param_effect = self.get_test_value('update_animation_interactive_sequence_effect', 'effect', 'Effect')
        param_password = self.get_test_value('update_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('update_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('update_animation_interactive_sequence_effect', 'storage', 'str')
        param_storage = self.get_invalid_test_value('update_animation_interactive_sequence_effect', 'storage', param_storage, 'str')
        self.initialize('update_animation_interactive_sequence_effect', 'storage', param_storage)
        ok = False
        try:
            self.api.update_animation_interactive_sequence_effect(param_name, param_slide_index, param_sequence_index, param_effect_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_animation_interactive_sequence_effect', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_animation_interactive_sequence_effect', 'storage', param_storage)
        if ok:
            self.assert_no_exception('update_animation_interactive_sequence_effect', 'storage')

    def test_update_chart_category(self):
        """Test case for update_chart_category
        """
        param_name = self.get_test_value('update_chart_category', 'name', 'str')
        param_slide_index = self.get_test_value('update_chart_category', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_chart_category', 'shape_index', 'int')
        param_category_index = self.get_test_value('update_chart_category', 'category_index', 'int')
        param_category = self.get_test_value('update_chart_category', 'category', 'ChartCategory')
        param_password = self.get_test_value('update_chart_category', 'password', 'str')
        param_folder = self.get_test_value('update_chart_category', 'folder', 'str')
        param_storage = self.get_test_value('update_chart_category', 'storage', 'str')
        self.initialize('update_chart_category', None, None)
        response = self.api.update_chart_category(param_name, param_slide_index, param_shape_index, param_category_index, param_category, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_update_chart_category_invalid_name(self):
        """Test case for update_chart_category with invalid name
        """
        param_name = self.get_test_value('update_chart_category', 'name', 'str')
        param_slide_index = self.get_test_value('update_chart_category', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_chart_category', 'shape_index', 'int')
        param_category_index = self.get_test_value('update_chart_category', 'category_index', 'int')
        param_category = self.get_test_value('update_chart_category', 'category', 'ChartCategory')
        param_password = self.get_test_value('update_chart_category', 'password', 'str')
        param_folder = self.get_test_value('update_chart_category', 'folder', 'str')
        param_storage = self.get_test_value('update_chart_category', 'storage', 'str')
        param_name = self.get_invalid_test_value('update_chart_category', 'name', param_name, 'str')
        self.initialize('update_chart_category', 'name', param_name)
        ok = False
        try:
            self.api.update_chart_category(param_name, param_slide_index, param_shape_index, param_category_index, param_category, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_chart_category', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_chart_category', 'name', param_name)
        if ok:
            self.assert_no_exception('update_chart_category', 'name')

    def test_update_chart_category_invalid_slide_index(self):
        """Test case for update_chart_category with invalid slide_index
        """
        param_name = self.get_test_value('update_chart_category', 'name', 'str')
        param_slide_index = self.get_test_value('update_chart_category', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_chart_category', 'shape_index', 'int')
        param_category_index = self.get_test_value('update_chart_category', 'category_index', 'int')
        param_category = self.get_test_value('update_chart_category', 'category', 'ChartCategory')
        param_password = self.get_test_value('update_chart_category', 'password', 'str')
        param_folder = self.get_test_value('update_chart_category', 'folder', 'str')
        param_storage = self.get_test_value('update_chart_category', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('update_chart_category', 'slide_index', param_slide_index, 'int')
        self.initialize('update_chart_category', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.update_chart_category(param_name, param_slide_index, param_shape_index, param_category_index, param_category, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_chart_category', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_chart_category', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('update_chart_category', 'slide_index')

    def test_update_chart_category_invalid_shape_index(self):
        """Test case for update_chart_category with invalid shape_index
        """
        param_name = self.get_test_value('update_chart_category', 'name', 'str')
        param_slide_index = self.get_test_value('update_chart_category', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_chart_category', 'shape_index', 'int')
        param_category_index = self.get_test_value('update_chart_category', 'category_index', 'int')
        param_category = self.get_test_value('update_chart_category', 'category', 'ChartCategory')
        param_password = self.get_test_value('update_chart_category', 'password', 'str')
        param_folder = self.get_test_value('update_chart_category', 'folder', 'str')
        param_storage = self.get_test_value('update_chart_category', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('update_chart_category', 'shape_index', param_shape_index, 'int')
        self.initialize('update_chart_category', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.update_chart_category(param_name, param_slide_index, param_shape_index, param_category_index, param_category, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_chart_category', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_chart_category', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('update_chart_category', 'shape_index')

    def test_update_chart_category_invalid_category_index(self):
        """Test case for update_chart_category with invalid category_index
        """
        param_name = self.get_test_value('update_chart_category', 'name', 'str')
        param_slide_index = self.get_test_value('update_chart_category', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_chart_category', 'shape_index', 'int')
        param_category_index = self.get_test_value('update_chart_category', 'category_index', 'int')
        param_category = self.get_test_value('update_chart_category', 'category', 'ChartCategory')
        param_password = self.get_test_value('update_chart_category', 'password', 'str')
        param_folder = self.get_test_value('update_chart_category', 'folder', 'str')
        param_storage = self.get_test_value('update_chart_category', 'storage', 'str')
        param_category_index = self.get_invalid_test_value('update_chart_category', 'category_index', param_category_index, 'int')
        self.initialize('update_chart_category', 'category_index', param_category_index)
        ok = False
        try:
            self.api.update_chart_category(param_name, param_slide_index, param_shape_index, param_category_index, param_category, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_chart_category', 'category_index', param_category_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_chart_category', 'category_index', param_category_index)
        if ok:
            self.assert_no_exception('update_chart_category', 'category_index')

    def test_update_chart_category_invalid_category(self):
        """Test case for update_chart_category with invalid category
        """
        param_name = self.get_test_value('update_chart_category', 'name', 'str')
        param_slide_index = self.get_test_value('update_chart_category', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_chart_category', 'shape_index', 'int')
        param_category_index = self.get_test_value('update_chart_category', 'category_index', 'int')
        param_category = self.get_test_value('update_chart_category', 'category', 'ChartCategory')
        param_password = self.get_test_value('update_chart_category', 'password', 'str')
        param_folder = self.get_test_value('update_chart_category', 'folder', 'str')
        param_storage = self.get_test_value('update_chart_category', 'storage', 'str')
        param_category = self.get_invalid_test_value('update_chart_category', 'category', param_category, 'ChartCategory')
        self.initialize('update_chart_category', 'category', param_category)
        ok = False
        try:
            self.api.update_chart_category(param_name, param_slide_index, param_shape_index, param_category_index, param_category, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_chart_category', 'category', param_category)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_chart_category', 'category', param_category)
        if ok:
            self.assert_no_exception('update_chart_category', 'category')

    def test_update_chart_category_invalid_password(self):
        """Test case for update_chart_category with invalid password
        """
        param_name = self.get_test_value('update_chart_category', 'name', 'str')
        param_slide_index = self.get_test_value('update_chart_category', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_chart_category', 'shape_index', 'int')
        param_category_index = self.get_test_value('update_chart_category', 'category_index', 'int')
        param_category = self.get_test_value('update_chart_category', 'category', 'ChartCategory')
        param_password = self.get_test_value('update_chart_category', 'password', 'str')
        param_folder = self.get_test_value('update_chart_category', 'folder', 'str')
        param_storage = self.get_test_value('update_chart_category', 'storage', 'str')
        param_password = self.get_invalid_test_value('update_chart_category', 'password', param_password, 'str')
        self.initialize('update_chart_category', 'password', param_password)
        ok = False
        try:
            self.api.update_chart_category(param_name, param_slide_index, param_shape_index, param_category_index, param_category, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_chart_category', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_chart_category', 'password', param_password)
        if ok:
            self.assert_no_exception('update_chart_category', 'password')

    def test_update_chart_category_invalid_folder(self):
        """Test case for update_chart_category with invalid folder
        """
        param_name = self.get_test_value('update_chart_category', 'name', 'str')
        param_slide_index = self.get_test_value('update_chart_category', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_chart_category', 'shape_index', 'int')
        param_category_index = self.get_test_value('update_chart_category', 'category_index', 'int')
        param_category = self.get_test_value('update_chart_category', 'category', 'ChartCategory')
        param_password = self.get_test_value('update_chart_category', 'password', 'str')
        param_folder = self.get_test_value('update_chart_category', 'folder', 'str')
        param_storage = self.get_test_value('update_chart_category', 'storage', 'str')
        param_folder = self.get_invalid_test_value('update_chart_category', 'folder', param_folder, 'str')
        self.initialize('update_chart_category', 'folder', param_folder)
        ok = False
        try:
            self.api.update_chart_category(param_name, param_slide_index, param_shape_index, param_category_index, param_category, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_chart_category', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_chart_category', 'folder', param_folder)
        if ok:
            self.assert_no_exception('update_chart_category', 'folder')

    def test_update_chart_category_invalid_storage(self):
        """Test case for update_chart_category with invalid storage
        """
        param_name = self.get_test_value('update_chart_category', 'name', 'str')
        param_slide_index = self.get_test_value('update_chart_category', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_chart_category', 'shape_index', 'int')
        param_category_index = self.get_test_value('update_chart_category', 'category_index', 'int')
        param_category = self.get_test_value('update_chart_category', 'category', 'ChartCategory')
        param_password = self.get_test_value('update_chart_category', 'password', 'str')
        param_folder = self.get_test_value('update_chart_category', 'folder', 'str')
        param_storage = self.get_test_value('update_chart_category', 'storage', 'str')
        param_storage = self.get_invalid_test_value('update_chart_category', 'storage', param_storage, 'str')
        self.initialize('update_chart_category', 'storage', param_storage)
        ok = False
        try:
            self.api.update_chart_category(param_name, param_slide_index, param_shape_index, param_category_index, param_category, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_chart_category', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_chart_category', 'storage', param_storage)
        if ok:
            self.assert_no_exception('update_chart_category', 'storage')

    def test_update_chart_data_point(self):
        """Test case for update_chart_data_point
        """
        param_name = self.get_test_value('update_chart_data_point', 'name', 'str')
        param_slide_index = self.get_test_value('update_chart_data_point', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_chart_data_point', 'shape_index', 'int')
        param_series_index = self.get_test_value('update_chart_data_point', 'series_index', 'int')
        param_point_index = self.get_test_value('update_chart_data_point', 'point_index', 'int')
        param_data_point = self.get_test_value('update_chart_data_point', 'data_point', 'DataPoint')
        param_password = self.get_test_value('update_chart_data_point', 'password', 'str')
        param_folder = self.get_test_value('update_chart_data_point', 'folder', 'str')
        param_storage = self.get_test_value('update_chart_data_point', 'storage', 'str')
        self.initialize('update_chart_data_point', None, None)
        response = self.api.update_chart_data_point(param_name, param_slide_index, param_shape_index, param_series_index, param_point_index, param_data_point, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_update_chart_data_point_invalid_name(self):
        """Test case for update_chart_data_point with invalid name
        """
        param_name = self.get_test_value('update_chart_data_point', 'name', 'str')
        param_slide_index = self.get_test_value('update_chart_data_point', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_chart_data_point', 'shape_index', 'int')
        param_series_index = self.get_test_value('update_chart_data_point', 'series_index', 'int')
        param_point_index = self.get_test_value('update_chart_data_point', 'point_index', 'int')
        param_data_point = self.get_test_value('update_chart_data_point', 'data_point', 'DataPoint')
        param_password = self.get_test_value('update_chart_data_point', 'password', 'str')
        param_folder = self.get_test_value('update_chart_data_point', 'folder', 'str')
        param_storage = self.get_test_value('update_chart_data_point', 'storage', 'str')
        param_name = self.get_invalid_test_value('update_chart_data_point', 'name', param_name, 'str')
        self.initialize('update_chart_data_point', 'name', param_name)
        ok = False
        try:
            self.api.update_chart_data_point(param_name, param_slide_index, param_shape_index, param_series_index, param_point_index, param_data_point, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_chart_data_point', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_chart_data_point', 'name', param_name)
        if ok:
            self.assert_no_exception('update_chart_data_point', 'name')

    def test_update_chart_data_point_invalid_slide_index(self):
        """Test case for update_chart_data_point with invalid slide_index
        """
        param_name = self.get_test_value('update_chart_data_point', 'name', 'str')
        param_slide_index = self.get_test_value('update_chart_data_point', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_chart_data_point', 'shape_index', 'int')
        param_series_index = self.get_test_value('update_chart_data_point', 'series_index', 'int')
        param_point_index = self.get_test_value('update_chart_data_point', 'point_index', 'int')
        param_data_point = self.get_test_value('update_chart_data_point', 'data_point', 'DataPoint')
        param_password = self.get_test_value('update_chart_data_point', 'password', 'str')
        param_folder = self.get_test_value('update_chart_data_point', 'folder', 'str')
        param_storage = self.get_test_value('update_chart_data_point', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('update_chart_data_point', 'slide_index', param_slide_index, 'int')
        self.initialize('update_chart_data_point', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.update_chart_data_point(param_name, param_slide_index, param_shape_index, param_series_index, param_point_index, param_data_point, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_chart_data_point', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_chart_data_point', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('update_chart_data_point', 'slide_index')

    def test_update_chart_data_point_invalid_shape_index(self):
        """Test case for update_chart_data_point with invalid shape_index
        """
        param_name = self.get_test_value('update_chart_data_point', 'name', 'str')
        param_slide_index = self.get_test_value('update_chart_data_point', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_chart_data_point', 'shape_index', 'int')
        param_series_index = self.get_test_value('update_chart_data_point', 'series_index', 'int')
        param_point_index = self.get_test_value('update_chart_data_point', 'point_index', 'int')
        param_data_point = self.get_test_value('update_chart_data_point', 'data_point', 'DataPoint')
        param_password = self.get_test_value('update_chart_data_point', 'password', 'str')
        param_folder = self.get_test_value('update_chart_data_point', 'folder', 'str')
        param_storage = self.get_test_value('update_chart_data_point', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('update_chart_data_point', 'shape_index', param_shape_index, 'int')
        self.initialize('update_chart_data_point', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.update_chart_data_point(param_name, param_slide_index, param_shape_index, param_series_index, param_point_index, param_data_point, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_chart_data_point', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_chart_data_point', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('update_chart_data_point', 'shape_index')

    def test_update_chart_data_point_invalid_series_index(self):
        """Test case for update_chart_data_point with invalid series_index
        """
        param_name = self.get_test_value('update_chart_data_point', 'name', 'str')
        param_slide_index = self.get_test_value('update_chart_data_point', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_chart_data_point', 'shape_index', 'int')
        param_series_index = self.get_test_value('update_chart_data_point', 'series_index', 'int')
        param_point_index = self.get_test_value('update_chart_data_point', 'point_index', 'int')
        param_data_point = self.get_test_value('update_chart_data_point', 'data_point', 'DataPoint')
        param_password = self.get_test_value('update_chart_data_point', 'password', 'str')
        param_folder = self.get_test_value('update_chart_data_point', 'folder', 'str')
        param_storage = self.get_test_value('update_chart_data_point', 'storage', 'str')
        param_series_index = self.get_invalid_test_value('update_chart_data_point', 'series_index', param_series_index, 'int')
        self.initialize('update_chart_data_point', 'series_index', param_series_index)
        ok = False
        try:
            self.api.update_chart_data_point(param_name, param_slide_index, param_shape_index, param_series_index, param_point_index, param_data_point, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_chart_data_point', 'series_index', param_series_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_chart_data_point', 'series_index', param_series_index)
        if ok:
            self.assert_no_exception('update_chart_data_point', 'series_index')

    def test_update_chart_data_point_invalid_point_index(self):
        """Test case for update_chart_data_point with invalid point_index
        """
        param_name = self.get_test_value('update_chart_data_point', 'name', 'str')
        param_slide_index = self.get_test_value('update_chart_data_point', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_chart_data_point', 'shape_index', 'int')
        param_series_index = self.get_test_value('update_chart_data_point', 'series_index', 'int')
        param_point_index = self.get_test_value('update_chart_data_point', 'point_index', 'int')
        param_data_point = self.get_test_value('update_chart_data_point', 'data_point', 'DataPoint')
        param_password = self.get_test_value('update_chart_data_point', 'password', 'str')
        param_folder = self.get_test_value('update_chart_data_point', 'folder', 'str')
        param_storage = self.get_test_value('update_chart_data_point', 'storage', 'str')
        param_point_index = self.get_invalid_test_value('update_chart_data_point', 'point_index', param_point_index, 'int')
        self.initialize('update_chart_data_point', 'point_index', param_point_index)
        ok = False
        try:
            self.api.update_chart_data_point(param_name, param_slide_index, param_shape_index, param_series_index, param_point_index, param_data_point, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_chart_data_point', 'point_index', param_point_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_chart_data_point', 'point_index', param_point_index)
        if ok:
            self.assert_no_exception('update_chart_data_point', 'point_index')

    def test_update_chart_data_point_invalid_data_point(self):
        """Test case for update_chart_data_point with invalid data_point
        """
        param_name = self.get_test_value('update_chart_data_point', 'name', 'str')
        param_slide_index = self.get_test_value('update_chart_data_point', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_chart_data_point', 'shape_index', 'int')
        param_series_index = self.get_test_value('update_chart_data_point', 'series_index', 'int')
        param_point_index = self.get_test_value('update_chart_data_point', 'point_index', 'int')
        param_data_point = self.get_test_value('update_chart_data_point', 'data_point', 'DataPoint')
        param_password = self.get_test_value('update_chart_data_point', 'password', 'str')
        param_folder = self.get_test_value('update_chart_data_point', 'folder', 'str')
        param_storage = self.get_test_value('update_chart_data_point', 'storage', 'str')
        param_data_point = self.get_invalid_test_value('update_chart_data_point', 'data_point', param_data_point, 'DataPoint')
        self.initialize('update_chart_data_point', 'data_point', param_data_point)
        ok = False
        try:
            self.api.update_chart_data_point(param_name, param_slide_index, param_shape_index, param_series_index, param_point_index, param_data_point, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_chart_data_point', 'data_point', param_data_point)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_chart_data_point', 'data_point', param_data_point)
        if ok:
            self.assert_no_exception('update_chart_data_point', 'data_point')

    def test_update_chart_data_point_invalid_password(self):
        """Test case for update_chart_data_point with invalid password
        """
        param_name = self.get_test_value('update_chart_data_point', 'name', 'str')
        param_slide_index = self.get_test_value('update_chart_data_point', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_chart_data_point', 'shape_index', 'int')
        param_series_index = self.get_test_value('update_chart_data_point', 'series_index', 'int')
        param_point_index = self.get_test_value('update_chart_data_point', 'point_index', 'int')
        param_data_point = self.get_test_value('update_chart_data_point', 'data_point', 'DataPoint')
        param_password = self.get_test_value('update_chart_data_point', 'password', 'str')
        param_folder = self.get_test_value('update_chart_data_point', 'folder', 'str')
        param_storage = self.get_test_value('update_chart_data_point', 'storage', 'str')
        param_password = self.get_invalid_test_value('update_chart_data_point', 'password', param_password, 'str')
        self.initialize('update_chart_data_point', 'password', param_password)
        ok = False
        try:
            self.api.update_chart_data_point(param_name, param_slide_index, param_shape_index, param_series_index, param_point_index, param_data_point, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_chart_data_point', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_chart_data_point', 'password', param_password)
        if ok:
            self.assert_no_exception('update_chart_data_point', 'password')

    def test_update_chart_data_point_invalid_folder(self):
        """Test case for update_chart_data_point with invalid folder
        """
        param_name = self.get_test_value('update_chart_data_point', 'name', 'str')
        param_slide_index = self.get_test_value('update_chart_data_point', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_chart_data_point', 'shape_index', 'int')
        param_series_index = self.get_test_value('update_chart_data_point', 'series_index', 'int')
        param_point_index = self.get_test_value('update_chart_data_point', 'point_index', 'int')
        param_data_point = self.get_test_value('update_chart_data_point', 'data_point', 'DataPoint')
        param_password = self.get_test_value('update_chart_data_point', 'password', 'str')
        param_folder = self.get_test_value('update_chart_data_point', 'folder', 'str')
        param_storage = self.get_test_value('update_chart_data_point', 'storage', 'str')
        param_folder = self.get_invalid_test_value('update_chart_data_point', 'folder', param_folder, 'str')
        self.initialize('update_chart_data_point', 'folder', param_folder)
        ok = False
        try:
            self.api.update_chart_data_point(param_name, param_slide_index, param_shape_index, param_series_index, param_point_index, param_data_point, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_chart_data_point', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_chart_data_point', 'folder', param_folder)
        if ok:
            self.assert_no_exception('update_chart_data_point', 'folder')

    def test_update_chart_data_point_invalid_storage(self):
        """Test case for update_chart_data_point with invalid storage
        """
        param_name = self.get_test_value('update_chart_data_point', 'name', 'str')
        param_slide_index = self.get_test_value('update_chart_data_point', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_chart_data_point', 'shape_index', 'int')
        param_series_index = self.get_test_value('update_chart_data_point', 'series_index', 'int')
        param_point_index = self.get_test_value('update_chart_data_point', 'point_index', 'int')
        param_data_point = self.get_test_value('update_chart_data_point', 'data_point', 'DataPoint')
        param_password = self.get_test_value('update_chart_data_point', 'password', 'str')
        param_folder = self.get_test_value('update_chart_data_point', 'folder', 'str')
        param_storage = self.get_test_value('update_chart_data_point', 'storage', 'str')
        param_storage = self.get_invalid_test_value('update_chart_data_point', 'storage', param_storage, 'str')
        self.initialize('update_chart_data_point', 'storage', param_storage)
        ok = False
        try:
            self.api.update_chart_data_point(param_name, param_slide_index, param_shape_index, param_series_index, param_point_index, param_data_point, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_chart_data_point', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_chart_data_point', 'storage', param_storage)
        if ok:
            self.assert_no_exception('update_chart_data_point', 'storage')

    def test_update_chart_series(self):
        """Test case for update_chart_series
        """
        param_name = self.get_test_value('update_chart_series', 'name', 'str')
        param_slide_index = self.get_test_value('update_chart_series', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_chart_series', 'shape_index', 'int')
        param_series_index = self.get_test_value('update_chart_series', 'series_index', 'int')
        param_series = self.get_test_value('update_chart_series', 'series', 'Series')
        param_password = self.get_test_value('update_chart_series', 'password', 'str')
        param_folder = self.get_test_value('update_chart_series', 'folder', 'str')
        param_storage = self.get_test_value('update_chart_series', 'storage', 'str')
        self.initialize('update_chart_series', None, None)
        response = self.api.update_chart_series(param_name, param_slide_index, param_shape_index, param_series_index, param_series, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_update_chart_series_invalid_name(self):
        """Test case for update_chart_series with invalid name
        """
        param_name = self.get_test_value('update_chart_series', 'name', 'str')
        param_slide_index = self.get_test_value('update_chart_series', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_chart_series', 'shape_index', 'int')
        param_series_index = self.get_test_value('update_chart_series', 'series_index', 'int')
        param_series = self.get_test_value('update_chart_series', 'series', 'Series')
        param_password = self.get_test_value('update_chart_series', 'password', 'str')
        param_folder = self.get_test_value('update_chart_series', 'folder', 'str')
        param_storage = self.get_test_value('update_chart_series', 'storage', 'str')
        param_name = self.get_invalid_test_value('update_chart_series', 'name', param_name, 'str')
        self.initialize('update_chart_series', 'name', param_name)
        ok = False
        try:
            self.api.update_chart_series(param_name, param_slide_index, param_shape_index, param_series_index, param_series, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_chart_series', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_chart_series', 'name', param_name)
        if ok:
            self.assert_no_exception('update_chart_series', 'name')

    def test_update_chart_series_invalid_slide_index(self):
        """Test case for update_chart_series with invalid slide_index
        """
        param_name = self.get_test_value('update_chart_series', 'name', 'str')
        param_slide_index = self.get_test_value('update_chart_series', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_chart_series', 'shape_index', 'int')
        param_series_index = self.get_test_value('update_chart_series', 'series_index', 'int')
        param_series = self.get_test_value('update_chart_series', 'series', 'Series')
        param_password = self.get_test_value('update_chart_series', 'password', 'str')
        param_folder = self.get_test_value('update_chart_series', 'folder', 'str')
        param_storage = self.get_test_value('update_chart_series', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('update_chart_series', 'slide_index', param_slide_index, 'int')
        self.initialize('update_chart_series', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.update_chart_series(param_name, param_slide_index, param_shape_index, param_series_index, param_series, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_chart_series', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_chart_series', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('update_chart_series', 'slide_index')

    def test_update_chart_series_invalid_shape_index(self):
        """Test case for update_chart_series with invalid shape_index
        """
        param_name = self.get_test_value('update_chart_series', 'name', 'str')
        param_slide_index = self.get_test_value('update_chart_series', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_chart_series', 'shape_index', 'int')
        param_series_index = self.get_test_value('update_chart_series', 'series_index', 'int')
        param_series = self.get_test_value('update_chart_series', 'series', 'Series')
        param_password = self.get_test_value('update_chart_series', 'password', 'str')
        param_folder = self.get_test_value('update_chart_series', 'folder', 'str')
        param_storage = self.get_test_value('update_chart_series', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('update_chart_series', 'shape_index', param_shape_index, 'int')
        self.initialize('update_chart_series', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.update_chart_series(param_name, param_slide_index, param_shape_index, param_series_index, param_series, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_chart_series', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_chart_series', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('update_chart_series', 'shape_index')

    def test_update_chart_series_invalid_series_index(self):
        """Test case for update_chart_series with invalid series_index
        """
        param_name = self.get_test_value('update_chart_series', 'name', 'str')
        param_slide_index = self.get_test_value('update_chart_series', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_chart_series', 'shape_index', 'int')
        param_series_index = self.get_test_value('update_chart_series', 'series_index', 'int')
        param_series = self.get_test_value('update_chart_series', 'series', 'Series')
        param_password = self.get_test_value('update_chart_series', 'password', 'str')
        param_folder = self.get_test_value('update_chart_series', 'folder', 'str')
        param_storage = self.get_test_value('update_chart_series', 'storage', 'str')
        param_series_index = self.get_invalid_test_value('update_chart_series', 'series_index', param_series_index, 'int')
        self.initialize('update_chart_series', 'series_index', param_series_index)
        ok = False
        try:
            self.api.update_chart_series(param_name, param_slide_index, param_shape_index, param_series_index, param_series, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_chart_series', 'series_index', param_series_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_chart_series', 'series_index', param_series_index)
        if ok:
            self.assert_no_exception('update_chart_series', 'series_index')

    def test_update_chart_series_invalid_series(self):
        """Test case for update_chart_series with invalid series
        """
        param_name = self.get_test_value('update_chart_series', 'name', 'str')
        param_slide_index = self.get_test_value('update_chart_series', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_chart_series', 'shape_index', 'int')
        param_series_index = self.get_test_value('update_chart_series', 'series_index', 'int')
        param_series = self.get_test_value('update_chart_series', 'series', 'Series')
        param_password = self.get_test_value('update_chart_series', 'password', 'str')
        param_folder = self.get_test_value('update_chart_series', 'folder', 'str')
        param_storage = self.get_test_value('update_chart_series', 'storage', 'str')
        param_series = self.get_invalid_test_value('update_chart_series', 'series', param_series, 'Series')
        self.initialize('update_chart_series', 'series', param_series)
        ok = False
        try:
            self.api.update_chart_series(param_name, param_slide_index, param_shape_index, param_series_index, param_series, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_chart_series', 'series', param_series)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_chart_series', 'series', param_series)
        if ok:
            self.assert_no_exception('update_chart_series', 'series')

    def test_update_chart_series_invalid_password(self):
        """Test case for update_chart_series with invalid password
        """
        param_name = self.get_test_value('update_chart_series', 'name', 'str')
        param_slide_index = self.get_test_value('update_chart_series', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_chart_series', 'shape_index', 'int')
        param_series_index = self.get_test_value('update_chart_series', 'series_index', 'int')
        param_series = self.get_test_value('update_chart_series', 'series', 'Series')
        param_password = self.get_test_value('update_chart_series', 'password', 'str')
        param_folder = self.get_test_value('update_chart_series', 'folder', 'str')
        param_storage = self.get_test_value('update_chart_series', 'storage', 'str')
        param_password = self.get_invalid_test_value('update_chart_series', 'password', param_password, 'str')
        self.initialize('update_chart_series', 'password', param_password)
        ok = False
        try:
            self.api.update_chart_series(param_name, param_slide_index, param_shape_index, param_series_index, param_series, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_chart_series', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_chart_series', 'password', param_password)
        if ok:
            self.assert_no_exception('update_chart_series', 'password')

    def test_update_chart_series_invalid_folder(self):
        """Test case for update_chart_series with invalid folder
        """
        param_name = self.get_test_value('update_chart_series', 'name', 'str')
        param_slide_index = self.get_test_value('update_chart_series', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_chart_series', 'shape_index', 'int')
        param_series_index = self.get_test_value('update_chart_series', 'series_index', 'int')
        param_series = self.get_test_value('update_chart_series', 'series', 'Series')
        param_password = self.get_test_value('update_chart_series', 'password', 'str')
        param_folder = self.get_test_value('update_chart_series', 'folder', 'str')
        param_storage = self.get_test_value('update_chart_series', 'storage', 'str')
        param_folder = self.get_invalid_test_value('update_chart_series', 'folder', param_folder, 'str')
        self.initialize('update_chart_series', 'folder', param_folder)
        ok = False
        try:
            self.api.update_chart_series(param_name, param_slide_index, param_shape_index, param_series_index, param_series, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_chart_series', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_chart_series', 'folder', param_folder)
        if ok:
            self.assert_no_exception('update_chart_series', 'folder')

    def test_update_chart_series_invalid_storage(self):
        """Test case for update_chart_series with invalid storage
        """
        param_name = self.get_test_value('update_chart_series', 'name', 'str')
        param_slide_index = self.get_test_value('update_chart_series', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_chart_series', 'shape_index', 'int')
        param_series_index = self.get_test_value('update_chart_series', 'series_index', 'int')
        param_series = self.get_test_value('update_chart_series', 'series', 'Series')
        param_password = self.get_test_value('update_chart_series', 'password', 'str')
        param_folder = self.get_test_value('update_chart_series', 'folder', 'str')
        param_storage = self.get_test_value('update_chart_series', 'storage', 'str')
        param_storage = self.get_invalid_test_value('update_chart_series', 'storage', param_storage, 'str')
        self.initialize('update_chart_series', 'storage', param_storage)
        ok = False
        try:
            self.api.update_chart_series(param_name, param_slide_index, param_shape_index, param_series_index, param_series, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_chart_series', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_chart_series', 'storage', param_storage)
        if ok:
            self.assert_no_exception('update_chart_series', 'storage')

    def test_update_layout_slide(self):
        """Test case for update_layout_slide
        """
        param_name = self.get_test_value('update_layout_slide', 'name', 'str')
        param_slide_index = self.get_test_value('update_layout_slide', 'slide_index', 'int')
        param_slide_dto = self.get_test_value('update_layout_slide', 'slide_dto', 'LayoutSlide')
        param_password = self.get_test_value('update_layout_slide', 'password', 'str')
        param_folder = self.get_test_value('update_layout_slide', 'folder', 'str')
        param_storage = self.get_test_value('update_layout_slide', 'storage', 'str')
        self.initialize('update_layout_slide', None, None)
        response = self.api.update_layout_slide(param_name, param_slide_index, param_slide_dto, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_update_layout_slide_invalid_name(self):
        """Test case for update_layout_slide with invalid name
        """
        param_name = self.get_test_value('update_layout_slide', 'name', 'str')
        param_slide_index = self.get_test_value('update_layout_slide', 'slide_index', 'int')
        param_slide_dto = self.get_test_value('update_layout_slide', 'slide_dto', 'LayoutSlide')
        param_password = self.get_test_value('update_layout_slide', 'password', 'str')
        param_folder = self.get_test_value('update_layout_slide', 'folder', 'str')
        param_storage = self.get_test_value('update_layout_slide', 'storage', 'str')
        param_name = self.get_invalid_test_value('update_layout_slide', 'name', param_name, 'str')
        self.initialize('update_layout_slide', 'name', param_name)
        ok = False
        try:
            self.api.update_layout_slide(param_name, param_slide_index, param_slide_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_layout_slide', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_layout_slide', 'name', param_name)
        if ok:
            self.assert_no_exception('update_layout_slide', 'name')

    def test_update_layout_slide_invalid_slide_index(self):
        """Test case for update_layout_slide with invalid slide_index
        """
        param_name = self.get_test_value('update_layout_slide', 'name', 'str')
        param_slide_index = self.get_test_value('update_layout_slide', 'slide_index', 'int')
        param_slide_dto = self.get_test_value('update_layout_slide', 'slide_dto', 'LayoutSlide')
        param_password = self.get_test_value('update_layout_slide', 'password', 'str')
        param_folder = self.get_test_value('update_layout_slide', 'folder', 'str')
        param_storage = self.get_test_value('update_layout_slide', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('update_layout_slide', 'slide_index', param_slide_index, 'int')
        self.initialize('update_layout_slide', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.update_layout_slide(param_name, param_slide_index, param_slide_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_layout_slide', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_layout_slide', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('update_layout_slide', 'slide_index')

    def test_update_layout_slide_invalid_slide_dto(self):
        """Test case for update_layout_slide with invalid slide_dto
        """
        param_name = self.get_test_value('update_layout_slide', 'name', 'str')
        param_slide_index = self.get_test_value('update_layout_slide', 'slide_index', 'int')
        param_slide_dto = self.get_test_value('update_layout_slide', 'slide_dto', 'LayoutSlide')
        param_password = self.get_test_value('update_layout_slide', 'password', 'str')
        param_folder = self.get_test_value('update_layout_slide', 'folder', 'str')
        param_storage = self.get_test_value('update_layout_slide', 'storage', 'str')
        param_slide_dto = self.get_invalid_test_value('update_layout_slide', 'slide_dto', param_slide_dto, 'LayoutSlide')
        self.initialize('update_layout_slide', 'slide_dto', param_slide_dto)
        ok = False
        try:
            self.api.update_layout_slide(param_name, param_slide_index, param_slide_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_layout_slide', 'slide_dto', param_slide_dto)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_layout_slide', 'slide_dto', param_slide_dto)
        if ok:
            self.assert_no_exception('update_layout_slide', 'slide_dto')

    def test_update_layout_slide_invalid_password(self):
        """Test case for update_layout_slide with invalid password
        """
        param_name = self.get_test_value('update_layout_slide', 'name', 'str')
        param_slide_index = self.get_test_value('update_layout_slide', 'slide_index', 'int')
        param_slide_dto = self.get_test_value('update_layout_slide', 'slide_dto', 'LayoutSlide')
        param_password = self.get_test_value('update_layout_slide', 'password', 'str')
        param_folder = self.get_test_value('update_layout_slide', 'folder', 'str')
        param_storage = self.get_test_value('update_layout_slide', 'storage', 'str')
        param_password = self.get_invalid_test_value('update_layout_slide', 'password', param_password, 'str')
        self.initialize('update_layout_slide', 'password', param_password)
        ok = False
        try:
            self.api.update_layout_slide(param_name, param_slide_index, param_slide_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_layout_slide', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_layout_slide', 'password', param_password)
        if ok:
            self.assert_no_exception('update_layout_slide', 'password')

    def test_update_layout_slide_invalid_folder(self):
        """Test case for update_layout_slide with invalid folder
        """
        param_name = self.get_test_value('update_layout_slide', 'name', 'str')
        param_slide_index = self.get_test_value('update_layout_slide', 'slide_index', 'int')
        param_slide_dto = self.get_test_value('update_layout_slide', 'slide_dto', 'LayoutSlide')
        param_password = self.get_test_value('update_layout_slide', 'password', 'str')
        param_folder = self.get_test_value('update_layout_slide', 'folder', 'str')
        param_storage = self.get_test_value('update_layout_slide', 'storage', 'str')
        param_folder = self.get_invalid_test_value('update_layout_slide', 'folder', param_folder, 'str')
        self.initialize('update_layout_slide', 'folder', param_folder)
        ok = False
        try:
            self.api.update_layout_slide(param_name, param_slide_index, param_slide_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_layout_slide', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_layout_slide', 'folder', param_folder)
        if ok:
            self.assert_no_exception('update_layout_slide', 'folder')

    def test_update_layout_slide_invalid_storage(self):
        """Test case for update_layout_slide with invalid storage
        """
        param_name = self.get_test_value('update_layout_slide', 'name', 'str')
        param_slide_index = self.get_test_value('update_layout_slide', 'slide_index', 'int')
        param_slide_dto = self.get_test_value('update_layout_slide', 'slide_dto', 'LayoutSlide')
        param_password = self.get_test_value('update_layout_slide', 'password', 'str')
        param_folder = self.get_test_value('update_layout_slide', 'folder', 'str')
        param_storage = self.get_test_value('update_layout_slide', 'storage', 'str')
        param_storage = self.get_invalid_test_value('update_layout_slide', 'storage', param_storage, 'str')
        self.initialize('update_layout_slide', 'storage', param_storage)
        ok = False
        try:
            self.api.update_layout_slide(param_name, param_slide_index, param_slide_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_layout_slide', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_layout_slide', 'storage', param_storage)
        if ok:
            self.assert_no_exception('update_layout_slide', 'storage')

    def test_update_notes_slide(self):
        """Test case for update_notes_slide
        """
        param_name = self.get_test_value('update_notes_slide', 'name', 'str')
        param_slide_index = self.get_test_value('update_notes_slide', 'slide_index', 'int')
        param_dto = self.get_test_value('update_notes_slide', 'dto', 'NotesSlide')
        param_password = self.get_test_value('update_notes_slide', 'password', 'str')
        param_folder = self.get_test_value('update_notes_slide', 'folder', 'str')
        param_storage = self.get_test_value('update_notes_slide', 'storage', 'str')
        self.initialize('update_notes_slide', None, None)
        response = self.api.update_notes_slide(param_name, param_slide_index, param_dto, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_update_notes_slide_invalid_name(self):
        """Test case for update_notes_slide with invalid name
        """
        param_name = self.get_test_value('update_notes_slide', 'name', 'str')
        param_slide_index = self.get_test_value('update_notes_slide', 'slide_index', 'int')
        param_dto = self.get_test_value('update_notes_slide', 'dto', 'NotesSlide')
        param_password = self.get_test_value('update_notes_slide', 'password', 'str')
        param_folder = self.get_test_value('update_notes_slide', 'folder', 'str')
        param_storage = self.get_test_value('update_notes_slide', 'storage', 'str')
        param_name = self.get_invalid_test_value('update_notes_slide', 'name', param_name, 'str')
        self.initialize('update_notes_slide', 'name', param_name)
        ok = False
        try:
            self.api.update_notes_slide(param_name, param_slide_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_notes_slide', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_notes_slide', 'name', param_name)
        if ok:
            self.assert_no_exception('update_notes_slide', 'name')

    def test_update_notes_slide_invalid_slide_index(self):
        """Test case for update_notes_slide with invalid slide_index
        """
        param_name = self.get_test_value('update_notes_slide', 'name', 'str')
        param_slide_index = self.get_test_value('update_notes_slide', 'slide_index', 'int')
        param_dto = self.get_test_value('update_notes_slide', 'dto', 'NotesSlide')
        param_password = self.get_test_value('update_notes_slide', 'password', 'str')
        param_folder = self.get_test_value('update_notes_slide', 'folder', 'str')
        param_storage = self.get_test_value('update_notes_slide', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('update_notes_slide', 'slide_index', param_slide_index, 'int')
        self.initialize('update_notes_slide', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.update_notes_slide(param_name, param_slide_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_notes_slide', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_notes_slide', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('update_notes_slide', 'slide_index')

    def test_update_notes_slide_invalid_dto(self):
        """Test case for update_notes_slide with invalid dto
        """
        param_name = self.get_test_value('update_notes_slide', 'name', 'str')
        param_slide_index = self.get_test_value('update_notes_slide', 'slide_index', 'int')
        param_dto = self.get_test_value('update_notes_slide', 'dto', 'NotesSlide')
        param_password = self.get_test_value('update_notes_slide', 'password', 'str')
        param_folder = self.get_test_value('update_notes_slide', 'folder', 'str')
        param_storage = self.get_test_value('update_notes_slide', 'storage', 'str')
        param_dto = self.get_invalid_test_value('update_notes_slide', 'dto', param_dto, 'NotesSlide')
        self.initialize('update_notes_slide', 'dto', param_dto)
        ok = False
        try:
            self.api.update_notes_slide(param_name, param_slide_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_notes_slide', 'dto', param_dto)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_notes_slide', 'dto', param_dto)
        if ok:
            self.assert_no_exception('update_notes_slide', 'dto')

    def test_update_notes_slide_invalid_password(self):
        """Test case for update_notes_slide with invalid password
        """
        param_name = self.get_test_value('update_notes_slide', 'name', 'str')
        param_slide_index = self.get_test_value('update_notes_slide', 'slide_index', 'int')
        param_dto = self.get_test_value('update_notes_slide', 'dto', 'NotesSlide')
        param_password = self.get_test_value('update_notes_slide', 'password', 'str')
        param_folder = self.get_test_value('update_notes_slide', 'folder', 'str')
        param_storage = self.get_test_value('update_notes_slide', 'storage', 'str')
        param_password = self.get_invalid_test_value('update_notes_slide', 'password', param_password, 'str')
        self.initialize('update_notes_slide', 'password', param_password)
        ok = False
        try:
            self.api.update_notes_slide(param_name, param_slide_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_notes_slide', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_notes_slide', 'password', param_password)
        if ok:
            self.assert_no_exception('update_notes_slide', 'password')

    def test_update_notes_slide_invalid_folder(self):
        """Test case for update_notes_slide with invalid folder
        """
        param_name = self.get_test_value('update_notes_slide', 'name', 'str')
        param_slide_index = self.get_test_value('update_notes_slide', 'slide_index', 'int')
        param_dto = self.get_test_value('update_notes_slide', 'dto', 'NotesSlide')
        param_password = self.get_test_value('update_notes_slide', 'password', 'str')
        param_folder = self.get_test_value('update_notes_slide', 'folder', 'str')
        param_storage = self.get_test_value('update_notes_slide', 'storage', 'str')
        param_folder = self.get_invalid_test_value('update_notes_slide', 'folder', param_folder, 'str')
        self.initialize('update_notes_slide', 'folder', param_folder)
        ok = False
        try:
            self.api.update_notes_slide(param_name, param_slide_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_notes_slide', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_notes_slide', 'folder', param_folder)
        if ok:
            self.assert_no_exception('update_notes_slide', 'folder')

    def test_update_notes_slide_invalid_storage(self):
        """Test case for update_notes_slide with invalid storage
        """
        param_name = self.get_test_value('update_notes_slide', 'name', 'str')
        param_slide_index = self.get_test_value('update_notes_slide', 'slide_index', 'int')
        param_dto = self.get_test_value('update_notes_slide', 'dto', 'NotesSlide')
        param_password = self.get_test_value('update_notes_slide', 'password', 'str')
        param_folder = self.get_test_value('update_notes_slide', 'folder', 'str')
        param_storage = self.get_test_value('update_notes_slide', 'storage', 'str')
        param_storage = self.get_invalid_test_value('update_notes_slide', 'storage', param_storage, 'str')
        self.initialize('update_notes_slide', 'storage', param_storage)
        ok = False
        try:
            self.api.update_notes_slide(param_name, param_slide_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_notes_slide', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_notes_slide', 'storage', param_storage)
        if ok:
            self.assert_no_exception('update_notes_slide', 'storage')

    def test_update_paragraph(self):
        """Test case for update_paragraph
        """
        param_name = self.get_test_value('update_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('update_paragraph', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_paragraph', 'paragraph_index', 'int')
        param_dto = self.get_test_value('update_paragraph', 'dto', 'Paragraph')
        param_password = self.get_test_value('update_paragraph', 'password', 'str')
        param_folder = self.get_test_value('update_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('update_paragraph', 'storage', 'str')
        self.initialize('update_paragraph', None, None)
        response = self.api.update_paragraph(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_dto, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_update_paragraph_invalid_name(self):
        """Test case for update_paragraph with invalid name
        """
        param_name = self.get_test_value('update_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('update_paragraph', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_paragraph', 'paragraph_index', 'int')
        param_dto = self.get_test_value('update_paragraph', 'dto', 'Paragraph')
        param_password = self.get_test_value('update_paragraph', 'password', 'str')
        param_folder = self.get_test_value('update_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('update_paragraph', 'storage', 'str')
        param_name = self.get_invalid_test_value('update_paragraph', 'name', param_name, 'str')
        self.initialize('update_paragraph', 'name', param_name)
        ok = False
        try:
            self.api.update_paragraph(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_paragraph', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_paragraph', 'name', param_name)
        if ok:
            self.assert_no_exception('update_paragraph', 'name')

    def test_update_paragraph_invalid_slide_index(self):
        """Test case for update_paragraph with invalid slide_index
        """
        param_name = self.get_test_value('update_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('update_paragraph', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_paragraph', 'paragraph_index', 'int')
        param_dto = self.get_test_value('update_paragraph', 'dto', 'Paragraph')
        param_password = self.get_test_value('update_paragraph', 'password', 'str')
        param_folder = self.get_test_value('update_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('update_paragraph', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('update_paragraph', 'slide_index', param_slide_index, 'int')
        self.initialize('update_paragraph', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.update_paragraph(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_paragraph', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_paragraph', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('update_paragraph', 'slide_index')

    def test_update_paragraph_invalid_shape_index(self):
        """Test case for update_paragraph with invalid shape_index
        """
        param_name = self.get_test_value('update_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('update_paragraph', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_paragraph', 'paragraph_index', 'int')
        param_dto = self.get_test_value('update_paragraph', 'dto', 'Paragraph')
        param_password = self.get_test_value('update_paragraph', 'password', 'str')
        param_folder = self.get_test_value('update_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('update_paragraph', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('update_paragraph', 'shape_index', param_shape_index, 'int')
        self.initialize('update_paragraph', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.update_paragraph(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_paragraph', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_paragraph', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('update_paragraph', 'shape_index')

    def test_update_paragraph_invalid_paragraph_index(self):
        """Test case for update_paragraph with invalid paragraph_index
        """
        param_name = self.get_test_value('update_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('update_paragraph', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_paragraph', 'paragraph_index', 'int')
        param_dto = self.get_test_value('update_paragraph', 'dto', 'Paragraph')
        param_password = self.get_test_value('update_paragraph', 'password', 'str')
        param_folder = self.get_test_value('update_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('update_paragraph', 'storage', 'str')
        param_paragraph_index = self.get_invalid_test_value('update_paragraph', 'paragraph_index', param_paragraph_index, 'int')
        self.initialize('update_paragraph', 'paragraph_index', param_paragraph_index)
        ok = False
        try:
            self.api.update_paragraph(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_paragraph', 'paragraph_index', param_paragraph_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_paragraph', 'paragraph_index', param_paragraph_index)
        if ok:
            self.assert_no_exception('update_paragraph', 'paragraph_index')

    def test_update_paragraph_invalid_dto(self):
        """Test case for update_paragraph with invalid dto
        """
        param_name = self.get_test_value('update_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('update_paragraph', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_paragraph', 'paragraph_index', 'int')
        param_dto = self.get_test_value('update_paragraph', 'dto', 'Paragraph')
        param_password = self.get_test_value('update_paragraph', 'password', 'str')
        param_folder = self.get_test_value('update_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('update_paragraph', 'storage', 'str')
        param_dto = self.get_invalid_test_value('update_paragraph', 'dto', param_dto, 'Paragraph')
        self.initialize('update_paragraph', 'dto', param_dto)
        ok = False
        try:
            self.api.update_paragraph(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_paragraph', 'dto', param_dto)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_paragraph', 'dto', param_dto)
        if ok:
            self.assert_no_exception('update_paragraph', 'dto')

    def test_update_paragraph_invalid_password(self):
        """Test case for update_paragraph with invalid password
        """
        param_name = self.get_test_value('update_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('update_paragraph', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_paragraph', 'paragraph_index', 'int')
        param_dto = self.get_test_value('update_paragraph', 'dto', 'Paragraph')
        param_password = self.get_test_value('update_paragraph', 'password', 'str')
        param_folder = self.get_test_value('update_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('update_paragraph', 'storage', 'str')
        param_password = self.get_invalid_test_value('update_paragraph', 'password', param_password, 'str')
        self.initialize('update_paragraph', 'password', param_password)
        ok = False
        try:
            self.api.update_paragraph(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_paragraph', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_paragraph', 'password', param_password)
        if ok:
            self.assert_no_exception('update_paragraph', 'password')

    def test_update_paragraph_invalid_folder(self):
        """Test case for update_paragraph with invalid folder
        """
        param_name = self.get_test_value('update_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('update_paragraph', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_paragraph', 'paragraph_index', 'int')
        param_dto = self.get_test_value('update_paragraph', 'dto', 'Paragraph')
        param_password = self.get_test_value('update_paragraph', 'password', 'str')
        param_folder = self.get_test_value('update_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('update_paragraph', 'storage', 'str')
        param_folder = self.get_invalid_test_value('update_paragraph', 'folder', param_folder, 'str')
        self.initialize('update_paragraph', 'folder', param_folder)
        ok = False
        try:
            self.api.update_paragraph(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_paragraph', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_paragraph', 'folder', param_folder)
        if ok:
            self.assert_no_exception('update_paragraph', 'folder')

    def test_update_paragraph_invalid_storage(self):
        """Test case for update_paragraph with invalid storage
        """
        param_name = self.get_test_value('update_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('update_paragraph', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_paragraph', 'paragraph_index', 'int')
        param_dto = self.get_test_value('update_paragraph', 'dto', 'Paragraph')
        param_password = self.get_test_value('update_paragraph', 'password', 'str')
        param_folder = self.get_test_value('update_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('update_paragraph', 'storage', 'str')
        param_storage = self.get_invalid_test_value('update_paragraph', 'storage', param_storage, 'str')
        self.initialize('update_paragraph', 'storage', param_storage)
        ok = False
        try:
            self.api.update_paragraph(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_paragraph', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_paragraph', 'storage', param_storage)
        if ok:
            self.assert_no_exception('update_paragraph', 'storage')

    def test_update_portion(self):
        """Test case for update_portion
        """
        param_name = self.get_test_value('update_portion', 'name', 'str')
        param_slide_index = self.get_test_value('update_portion', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('update_portion', 'portion_index', 'int')
        param_dto = self.get_test_value('update_portion', 'dto', 'Portion')
        param_password = self.get_test_value('update_portion', 'password', 'str')
        param_folder = self.get_test_value('update_portion', 'folder', 'str')
        param_storage = self.get_test_value('update_portion', 'storage', 'str')
        self.initialize('update_portion', None, None)
        response = self.api.update_portion(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portion_index, param_dto, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_update_portion_invalid_name(self):
        """Test case for update_portion with invalid name
        """
        param_name = self.get_test_value('update_portion', 'name', 'str')
        param_slide_index = self.get_test_value('update_portion', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('update_portion', 'portion_index', 'int')
        param_dto = self.get_test_value('update_portion', 'dto', 'Portion')
        param_password = self.get_test_value('update_portion', 'password', 'str')
        param_folder = self.get_test_value('update_portion', 'folder', 'str')
        param_storage = self.get_test_value('update_portion', 'storage', 'str')
        param_name = self.get_invalid_test_value('update_portion', 'name', param_name, 'str')
        self.initialize('update_portion', 'name', param_name)
        ok = False
        try:
            self.api.update_portion(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portion_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_portion', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_portion', 'name', param_name)
        if ok:
            self.assert_no_exception('update_portion', 'name')

    def test_update_portion_invalid_slide_index(self):
        """Test case for update_portion with invalid slide_index
        """
        param_name = self.get_test_value('update_portion', 'name', 'str')
        param_slide_index = self.get_test_value('update_portion', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('update_portion', 'portion_index', 'int')
        param_dto = self.get_test_value('update_portion', 'dto', 'Portion')
        param_password = self.get_test_value('update_portion', 'password', 'str')
        param_folder = self.get_test_value('update_portion', 'folder', 'str')
        param_storage = self.get_test_value('update_portion', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('update_portion', 'slide_index', param_slide_index, 'int')
        self.initialize('update_portion', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.update_portion(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portion_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_portion', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_portion', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('update_portion', 'slide_index')

    def test_update_portion_invalid_shape_index(self):
        """Test case for update_portion with invalid shape_index
        """
        param_name = self.get_test_value('update_portion', 'name', 'str')
        param_slide_index = self.get_test_value('update_portion', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('update_portion', 'portion_index', 'int')
        param_dto = self.get_test_value('update_portion', 'dto', 'Portion')
        param_password = self.get_test_value('update_portion', 'password', 'str')
        param_folder = self.get_test_value('update_portion', 'folder', 'str')
        param_storage = self.get_test_value('update_portion', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('update_portion', 'shape_index', param_shape_index, 'int')
        self.initialize('update_portion', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.update_portion(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portion_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_portion', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_portion', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('update_portion', 'shape_index')

    def test_update_portion_invalid_paragraph_index(self):
        """Test case for update_portion with invalid paragraph_index
        """
        param_name = self.get_test_value('update_portion', 'name', 'str')
        param_slide_index = self.get_test_value('update_portion', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('update_portion', 'portion_index', 'int')
        param_dto = self.get_test_value('update_portion', 'dto', 'Portion')
        param_password = self.get_test_value('update_portion', 'password', 'str')
        param_folder = self.get_test_value('update_portion', 'folder', 'str')
        param_storage = self.get_test_value('update_portion', 'storage', 'str')
        param_paragraph_index = self.get_invalid_test_value('update_portion', 'paragraph_index', param_paragraph_index, 'int')
        self.initialize('update_portion', 'paragraph_index', param_paragraph_index)
        ok = False
        try:
            self.api.update_portion(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portion_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_portion', 'paragraph_index', param_paragraph_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_portion', 'paragraph_index', param_paragraph_index)
        if ok:
            self.assert_no_exception('update_portion', 'paragraph_index')

    def test_update_portion_invalid_portion_index(self):
        """Test case for update_portion with invalid portion_index
        """
        param_name = self.get_test_value('update_portion', 'name', 'str')
        param_slide_index = self.get_test_value('update_portion', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('update_portion', 'portion_index', 'int')
        param_dto = self.get_test_value('update_portion', 'dto', 'Portion')
        param_password = self.get_test_value('update_portion', 'password', 'str')
        param_folder = self.get_test_value('update_portion', 'folder', 'str')
        param_storage = self.get_test_value('update_portion', 'storage', 'str')
        param_portion_index = self.get_invalid_test_value('update_portion', 'portion_index', param_portion_index, 'int')
        self.initialize('update_portion', 'portion_index', param_portion_index)
        ok = False
        try:
            self.api.update_portion(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portion_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_portion', 'portion_index', param_portion_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_portion', 'portion_index', param_portion_index)
        if ok:
            self.assert_no_exception('update_portion', 'portion_index')

    def test_update_portion_invalid_dto(self):
        """Test case for update_portion with invalid dto
        """
        param_name = self.get_test_value('update_portion', 'name', 'str')
        param_slide_index = self.get_test_value('update_portion', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('update_portion', 'portion_index', 'int')
        param_dto = self.get_test_value('update_portion', 'dto', 'Portion')
        param_password = self.get_test_value('update_portion', 'password', 'str')
        param_folder = self.get_test_value('update_portion', 'folder', 'str')
        param_storage = self.get_test_value('update_portion', 'storage', 'str')
        param_dto = self.get_invalid_test_value('update_portion', 'dto', param_dto, 'Portion')
        self.initialize('update_portion', 'dto', param_dto)
        ok = False
        try:
            self.api.update_portion(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portion_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_portion', 'dto', param_dto)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_portion', 'dto', param_dto)
        if ok:
            self.assert_no_exception('update_portion', 'dto')

    def test_update_portion_invalid_password(self):
        """Test case for update_portion with invalid password
        """
        param_name = self.get_test_value('update_portion', 'name', 'str')
        param_slide_index = self.get_test_value('update_portion', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('update_portion', 'portion_index', 'int')
        param_dto = self.get_test_value('update_portion', 'dto', 'Portion')
        param_password = self.get_test_value('update_portion', 'password', 'str')
        param_folder = self.get_test_value('update_portion', 'folder', 'str')
        param_storage = self.get_test_value('update_portion', 'storage', 'str')
        param_password = self.get_invalid_test_value('update_portion', 'password', param_password, 'str')
        self.initialize('update_portion', 'password', param_password)
        ok = False
        try:
            self.api.update_portion(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portion_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_portion', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_portion', 'password', param_password)
        if ok:
            self.assert_no_exception('update_portion', 'password')

    def test_update_portion_invalid_folder(self):
        """Test case for update_portion with invalid folder
        """
        param_name = self.get_test_value('update_portion', 'name', 'str')
        param_slide_index = self.get_test_value('update_portion', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('update_portion', 'portion_index', 'int')
        param_dto = self.get_test_value('update_portion', 'dto', 'Portion')
        param_password = self.get_test_value('update_portion', 'password', 'str')
        param_folder = self.get_test_value('update_portion', 'folder', 'str')
        param_storage = self.get_test_value('update_portion', 'storage', 'str')
        param_folder = self.get_invalid_test_value('update_portion', 'folder', param_folder, 'str')
        self.initialize('update_portion', 'folder', param_folder)
        ok = False
        try:
            self.api.update_portion(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portion_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_portion', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_portion', 'folder', param_folder)
        if ok:
            self.assert_no_exception('update_portion', 'folder')

    def test_update_portion_invalid_storage(self):
        """Test case for update_portion with invalid storage
        """
        param_name = self.get_test_value('update_portion', 'name', 'str')
        param_slide_index = self.get_test_value('update_portion', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('update_portion', 'portion_index', 'int')
        param_dto = self.get_test_value('update_portion', 'dto', 'Portion')
        param_password = self.get_test_value('update_portion', 'password', 'str')
        param_folder = self.get_test_value('update_portion', 'folder', 'str')
        param_storage = self.get_test_value('update_portion', 'storage', 'str')
        param_storage = self.get_invalid_test_value('update_portion', 'storage', param_storage, 'str')
        self.initialize('update_portion', 'storage', param_storage)
        ok = False
        try:
            self.api.update_portion(param_name, param_slide_index, param_shape_index, param_paragraph_index, param_portion_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_portion', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_portion', 'storage', param_storage)
        if ok:
            self.assert_no_exception('update_portion', 'storage')

    def test_update_section(self):
        """Test case for update_section
        """
        param_name = self.get_test_value('update_section', 'name', 'str')
        param_section_index = self.get_test_value('update_section', 'section_index', 'int')
        param_section_name = self.get_test_value('update_section', 'section_name', 'str')
        param_password = self.get_test_value('update_section', 'password', 'str')
        param_folder = self.get_test_value('update_section', 'folder', 'str')
        param_storage = self.get_test_value('update_section', 'storage', 'str')
        self.initialize('update_section', None, None)
        response = self.api.update_section(param_name, param_section_index, param_section_name, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_update_section_invalid_name(self):
        """Test case for update_section with invalid name
        """
        param_name = self.get_test_value('update_section', 'name', 'str')
        param_section_index = self.get_test_value('update_section', 'section_index', 'int')
        param_section_name = self.get_test_value('update_section', 'section_name', 'str')
        param_password = self.get_test_value('update_section', 'password', 'str')
        param_folder = self.get_test_value('update_section', 'folder', 'str')
        param_storage = self.get_test_value('update_section', 'storage', 'str')
        param_name = self.get_invalid_test_value('update_section', 'name', param_name, 'str')
        self.initialize('update_section', 'name', param_name)
        ok = False
        try:
            self.api.update_section(param_name, param_section_index, param_section_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_section', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_section', 'name', param_name)
        if ok:
            self.assert_no_exception('update_section', 'name')

    def test_update_section_invalid_section_index(self):
        """Test case for update_section with invalid section_index
        """
        param_name = self.get_test_value('update_section', 'name', 'str')
        param_section_index = self.get_test_value('update_section', 'section_index', 'int')
        param_section_name = self.get_test_value('update_section', 'section_name', 'str')
        param_password = self.get_test_value('update_section', 'password', 'str')
        param_folder = self.get_test_value('update_section', 'folder', 'str')
        param_storage = self.get_test_value('update_section', 'storage', 'str')
        param_section_index = self.get_invalid_test_value('update_section', 'section_index', param_section_index, 'int')
        self.initialize('update_section', 'section_index', param_section_index)
        ok = False
        try:
            self.api.update_section(param_name, param_section_index, param_section_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_section', 'section_index', param_section_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_section', 'section_index', param_section_index)
        if ok:
            self.assert_no_exception('update_section', 'section_index')

    def test_update_section_invalid_section_name(self):
        """Test case for update_section with invalid section_name
        """
        param_name = self.get_test_value('update_section', 'name', 'str')
        param_section_index = self.get_test_value('update_section', 'section_index', 'int')
        param_section_name = self.get_test_value('update_section', 'section_name', 'str')
        param_password = self.get_test_value('update_section', 'password', 'str')
        param_folder = self.get_test_value('update_section', 'folder', 'str')
        param_storage = self.get_test_value('update_section', 'storage', 'str')
        param_section_name = self.get_invalid_test_value('update_section', 'section_name', param_section_name, 'str')
        self.initialize('update_section', 'section_name', param_section_name)
        ok = False
        try:
            self.api.update_section(param_name, param_section_index, param_section_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_section', 'section_name', param_section_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_section', 'section_name', param_section_name)
        if ok:
            self.assert_no_exception('update_section', 'section_name')

    def test_update_section_invalid_password(self):
        """Test case for update_section with invalid password
        """
        param_name = self.get_test_value('update_section', 'name', 'str')
        param_section_index = self.get_test_value('update_section', 'section_index', 'int')
        param_section_name = self.get_test_value('update_section', 'section_name', 'str')
        param_password = self.get_test_value('update_section', 'password', 'str')
        param_folder = self.get_test_value('update_section', 'folder', 'str')
        param_storage = self.get_test_value('update_section', 'storage', 'str')
        param_password = self.get_invalid_test_value('update_section', 'password', param_password, 'str')
        self.initialize('update_section', 'password', param_password)
        ok = False
        try:
            self.api.update_section(param_name, param_section_index, param_section_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_section', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_section', 'password', param_password)
        if ok:
            self.assert_no_exception('update_section', 'password')

    def test_update_section_invalid_folder(self):
        """Test case for update_section with invalid folder
        """
        param_name = self.get_test_value('update_section', 'name', 'str')
        param_section_index = self.get_test_value('update_section', 'section_index', 'int')
        param_section_name = self.get_test_value('update_section', 'section_name', 'str')
        param_password = self.get_test_value('update_section', 'password', 'str')
        param_folder = self.get_test_value('update_section', 'folder', 'str')
        param_storage = self.get_test_value('update_section', 'storage', 'str')
        param_folder = self.get_invalid_test_value('update_section', 'folder', param_folder, 'str')
        self.initialize('update_section', 'folder', param_folder)
        ok = False
        try:
            self.api.update_section(param_name, param_section_index, param_section_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_section', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_section', 'folder', param_folder)
        if ok:
            self.assert_no_exception('update_section', 'folder')

    def test_update_section_invalid_storage(self):
        """Test case for update_section with invalid storage
        """
        param_name = self.get_test_value('update_section', 'name', 'str')
        param_section_index = self.get_test_value('update_section', 'section_index', 'int')
        param_section_name = self.get_test_value('update_section', 'section_name', 'str')
        param_password = self.get_test_value('update_section', 'password', 'str')
        param_folder = self.get_test_value('update_section', 'folder', 'str')
        param_storage = self.get_test_value('update_section', 'storage', 'str')
        param_storage = self.get_invalid_test_value('update_section', 'storage', param_storage, 'str')
        self.initialize('update_section', 'storage', param_storage)
        ok = False
        try:
            self.api.update_section(param_name, param_section_index, param_section_name, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_section', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_section', 'storage', param_storage)
        if ok:
            self.assert_no_exception('update_section', 'storage')

    def test_update_shape(self):
        """Test case for update_shape
        """
        param_name = self.get_test_value('update_shape', 'name', 'str')
        param_slide_index = self.get_test_value('update_shape', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_shape', 'shape_index', 'int')
        param_dto = self.get_test_value('update_shape', 'dto', 'ShapeBase')
        param_password = self.get_test_value('update_shape', 'password', 'str')
        param_folder = self.get_test_value('update_shape', 'folder', 'str')
        param_storage = self.get_test_value('update_shape', 'storage', 'str')
        self.initialize('update_shape', None, None)
        response = self.api.update_shape(param_name, param_slide_index, param_shape_index, param_dto, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_update_shape_invalid_name(self):
        """Test case for update_shape with invalid name
        """
        param_name = self.get_test_value('update_shape', 'name', 'str')
        param_slide_index = self.get_test_value('update_shape', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_shape', 'shape_index', 'int')
        param_dto = self.get_test_value('update_shape', 'dto', 'ShapeBase')
        param_password = self.get_test_value('update_shape', 'password', 'str')
        param_folder = self.get_test_value('update_shape', 'folder', 'str')
        param_storage = self.get_test_value('update_shape', 'storage', 'str')
        param_name = self.get_invalid_test_value('update_shape', 'name', param_name, 'str')
        self.initialize('update_shape', 'name', param_name)
        ok = False
        try:
            self.api.update_shape(param_name, param_slide_index, param_shape_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_shape', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_shape', 'name', param_name)
        if ok:
            self.assert_no_exception('update_shape', 'name')

    def test_update_shape_invalid_slide_index(self):
        """Test case for update_shape with invalid slide_index
        """
        param_name = self.get_test_value('update_shape', 'name', 'str')
        param_slide_index = self.get_test_value('update_shape', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_shape', 'shape_index', 'int')
        param_dto = self.get_test_value('update_shape', 'dto', 'ShapeBase')
        param_password = self.get_test_value('update_shape', 'password', 'str')
        param_folder = self.get_test_value('update_shape', 'folder', 'str')
        param_storage = self.get_test_value('update_shape', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('update_shape', 'slide_index', param_slide_index, 'int')
        self.initialize('update_shape', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.update_shape(param_name, param_slide_index, param_shape_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_shape', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_shape', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('update_shape', 'slide_index')

    def test_update_shape_invalid_shape_index(self):
        """Test case for update_shape with invalid shape_index
        """
        param_name = self.get_test_value('update_shape', 'name', 'str')
        param_slide_index = self.get_test_value('update_shape', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_shape', 'shape_index', 'int')
        param_dto = self.get_test_value('update_shape', 'dto', 'ShapeBase')
        param_password = self.get_test_value('update_shape', 'password', 'str')
        param_folder = self.get_test_value('update_shape', 'folder', 'str')
        param_storage = self.get_test_value('update_shape', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('update_shape', 'shape_index', param_shape_index, 'int')
        self.initialize('update_shape', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.update_shape(param_name, param_slide_index, param_shape_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_shape', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_shape', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('update_shape', 'shape_index')

    def test_update_shape_invalid_dto(self):
        """Test case for update_shape with invalid dto
        """
        param_name = self.get_test_value('update_shape', 'name', 'str')
        param_slide_index = self.get_test_value('update_shape', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_shape', 'shape_index', 'int')
        param_dto = self.get_test_value('update_shape', 'dto', 'ShapeBase')
        param_password = self.get_test_value('update_shape', 'password', 'str')
        param_folder = self.get_test_value('update_shape', 'folder', 'str')
        param_storage = self.get_test_value('update_shape', 'storage', 'str')
        param_dto = self.get_invalid_test_value('update_shape', 'dto', param_dto, 'ShapeBase')
        self.initialize('update_shape', 'dto', param_dto)
        ok = False
        try:
            self.api.update_shape(param_name, param_slide_index, param_shape_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_shape', 'dto', param_dto)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_shape', 'dto', param_dto)
        if ok:
            self.assert_no_exception('update_shape', 'dto')

    def test_update_shape_invalid_password(self):
        """Test case for update_shape with invalid password
        """
        param_name = self.get_test_value('update_shape', 'name', 'str')
        param_slide_index = self.get_test_value('update_shape', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_shape', 'shape_index', 'int')
        param_dto = self.get_test_value('update_shape', 'dto', 'ShapeBase')
        param_password = self.get_test_value('update_shape', 'password', 'str')
        param_folder = self.get_test_value('update_shape', 'folder', 'str')
        param_storage = self.get_test_value('update_shape', 'storage', 'str')
        param_password = self.get_invalid_test_value('update_shape', 'password', param_password, 'str')
        self.initialize('update_shape', 'password', param_password)
        ok = False
        try:
            self.api.update_shape(param_name, param_slide_index, param_shape_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_shape', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_shape', 'password', param_password)
        if ok:
            self.assert_no_exception('update_shape', 'password')

    def test_update_shape_invalid_folder(self):
        """Test case for update_shape with invalid folder
        """
        param_name = self.get_test_value('update_shape', 'name', 'str')
        param_slide_index = self.get_test_value('update_shape', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_shape', 'shape_index', 'int')
        param_dto = self.get_test_value('update_shape', 'dto', 'ShapeBase')
        param_password = self.get_test_value('update_shape', 'password', 'str')
        param_folder = self.get_test_value('update_shape', 'folder', 'str')
        param_storage = self.get_test_value('update_shape', 'storage', 'str')
        param_folder = self.get_invalid_test_value('update_shape', 'folder', param_folder, 'str')
        self.initialize('update_shape', 'folder', param_folder)
        ok = False
        try:
            self.api.update_shape(param_name, param_slide_index, param_shape_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_shape', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_shape', 'folder', param_folder)
        if ok:
            self.assert_no_exception('update_shape', 'folder')

    def test_update_shape_invalid_storage(self):
        """Test case for update_shape with invalid storage
        """
        param_name = self.get_test_value('update_shape', 'name', 'str')
        param_slide_index = self.get_test_value('update_shape', 'slide_index', 'int')
        param_shape_index = self.get_test_value('update_shape', 'shape_index', 'int')
        param_dto = self.get_test_value('update_shape', 'dto', 'ShapeBase')
        param_password = self.get_test_value('update_shape', 'password', 'str')
        param_folder = self.get_test_value('update_shape', 'folder', 'str')
        param_storage = self.get_test_value('update_shape', 'storage', 'str')
        param_storage = self.get_invalid_test_value('update_shape', 'storage', param_storage, 'str')
        self.initialize('update_shape', 'storage', param_storage)
        ok = False
        try:
            self.api.update_shape(param_name, param_slide_index, param_shape_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_shape', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_shape', 'storage', param_storage)
        if ok:
            self.assert_no_exception('update_shape', 'storage')

    def test_update_slide(self):
        """Test case for update_slide
        """
        param_name = self.get_test_value('update_slide', 'name', 'str')
        param_slide_index = self.get_test_value('update_slide', 'slide_index', 'int')
        param_slide_dto = self.get_test_value('update_slide', 'slide_dto', 'Slide')
        param_password = self.get_test_value('update_slide', 'password', 'str')
        param_folder = self.get_test_value('update_slide', 'folder', 'str')
        param_storage = self.get_test_value('update_slide', 'storage', 'str')
        self.initialize('update_slide', None, None)
        response = self.api.update_slide(param_name, param_slide_index, param_slide_dto, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_update_slide_invalid_name(self):
        """Test case for update_slide with invalid name
        """
        param_name = self.get_test_value('update_slide', 'name', 'str')
        param_slide_index = self.get_test_value('update_slide', 'slide_index', 'int')
        param_slide_dto = self.get_test_value('update_slide', 'slide_dto', 'Slide')
        param_password = self.get_test_value('update_slide', 'password', 'str')
        param_folder = self.get_test_value('update_slide', 'folder', 'str')
        param_storage = self.get_test_value('update_slide', 'storage', 'str')
        param_name = self.get_invalid_test_value('update_slide', 'name', param_name, 'str')
        self.initialize('update_slide', 'name', param_name)
        ok = False
        try:
            self.api.update_slide(param_name, param_slide_index, param_slide_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_slide', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_slide', 'name', param_name)
        if ok:
            self.assert_no_exception('update_slide', 'name')

    def test_update_slide_invalid_slide_index(self):
        """Test case for update_slide with invalid slide_index
        """
        param_name = self.get_test_value('update_slide', 'name', 'str')
        param_slide_index = self.get_test_value('update_slide', 'slide_index', 'int')
        param_slide_dto = self.get_test_value('update_slide', 'slide_dto', 'Slide')
        param_password = self.get_test_value('update_slide', 'password', 'str')
        param_folder = self.get_test_value('update_slide', 'folder', 'str')
        param_storage = self.get_test_value('update_slide', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('update_slide', 'slide_index', param_slide_index, 'int')
        self.initialize('update_slide', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.update_slide(param_name, param_slide_index, param_slide_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_slide', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_slide', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('update_slide', 'slide_index')

    def test_update_slide_invalid_slide_dto(self):
        """Test case for update_slide with invalid slide_dto
        """
        param_name = self.get_test_value('update_slide', 'name', 'str')
        param_slide_index = self.get_test_value('update_slide', 'slide_index', 'int')
        param_slide_dto = self.get_test_value('update_slide', 'slide_dto', 'Slide')
        param_password = self.get_test_value('update_slide', 'password', 'str')
        param_folder = self.get_test_value('update_slide', 'folder', 'str')
        param_storage = self.get_test_value('update_slide', 'storage', 'str')
        param_slide_dto = self.get_invalid_test_value('update_slide', 'slide_dto', param_slide_dto, 'Slide')
        self.initialize('update_slide', 'slide_dto', param_slide_dto)
        ok = False
        try:
            self.api.update_slide(param_name, param_slide_index, param_slide_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_slide', 'slide_dto', param_slide_dto)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_slide', 'slide_dto', param_slide_dto)
        if ok:
            self.assert_no_exception('update_slide', 'slide_dto')

    def test_update_slide_invalid_password(self):
        """Test case for update_slide with invalid password
        """
        param_name = self.get_test_value('update_slide', 'name', 'str')
        param_slide_index = self.get_test_value('update_slide', 'slide_index', 'int')
        param_slide_dto = self.get_test_value('update_slide', 'slide_dto', 'Slide')
        param_password = self.get_test_value('update_slide', 'password', 'str')
        param_folder = self.get_test_value('update_slide', 'folder', 'str')
        param_storage = self.get_test_value('update_slide', 'storage', 'str')
        param_password = self.get_invalid_test_value('update_slide', 'password', param_password, 'str')
        self.initialize('update_slide', 'password', param_password)
        ok = False
        try:
            self.api.update_slide(param_name, param_slide_index, param_slide_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_slide', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_slide', 'password', param_password)
        if ok:
            self.assert_no_exception('update_slide', 'password')

    def test_update_slide_invalid_folder(self):
        """Test case for update_slide with invalid folder
        """
        param_name = self.get_test_value('update_slide', 'name', 'str')
        param_slide_index = self.get_test_value('update_slide', 'slide_index', 'int')
        param_slide_dto = self.get_test_value('update_slide', 'slide_dto', 'Slide')
        param_password = self.get_test_value('update_slide', 'password', 'str')
        param_folder = self.get_test_value('update_slide', 'folder', 'str')
        param_storage = self.get_test_value('update_slide', 'storage', 'str')
        param_folder = self.get_invalid_test_value('update_slide', 'folder', param_folder, 'str')
        self.initialize('update_slide', 'folder', param_folder)
        ok = False
        try:
            self.api.update_slide(param_name, param_slide_index, param_slide_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_slide', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_slide', 'folder', param_folder)
        if ok:
            self.assert_no_exception('update_slide', 'folder')

    def test_update_slide_invalid_storage(self):
        """Test case for update_slide with invalid storage
        """
        param_name = self.get_test_value('update_slide', 'name', 'str')
        param_slide_index = self.get_test_value('update_slide', 'slide_index', 'int')
        param_slide_dto = self.get_test_value('update_slide', 'slide_dto', 'Slide')
        param_password = self.get_test_value('update_slide', 'password', 'str')
        param_folder = self.get_test_value('update_slide', 'folder', 'str')
        param_storage = self.get_test_value('update_slide', 'storage', 'str')
        param_storage = self.get_invalid_test_value('update_slide', 'storage', param_storage, 'str')
        self.initialize('update_slide', 'storage', param_storage)
        ok = False
        try:
            self.api.update_slide(param_name, param_slide_index, param_slide_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_slide', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_slide', 'storage', param_storage)
        if ok:
            self.assert_no_exception('update_slide', 'storage')

    def test_update_special_slide_animation_effect(self):
        """Test case for update_special_slide_animation_effect
        """
        param_name = self.get_test_value('update_special_slide_animation_effect', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_animation_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_animation_effect', 'slide_type', 'str')
        param_effect_index = self.get_test_value('update_special_slide_animation_effect', 'effect_index', 'int')
        param_effect = self.get_test_value('update_special_slide_animation_effect', 'effect', 'Effect')
        param_password = self.get_test_value('update_special_slide_animation_effect', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_animation_effect', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_animation_effect', 'storage', 'str')
        self.initialize('update_special_slide_animation_effect', None, None)
        response = self.api.update_special_slide_animation_effect(param_name, param_slide_index, param_slide_type, param_effect_index, param_effect, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_update_special_slide_animation_effect_invalid_name(self):
        """Test case for update_special_slide_animation_effect with invalid name
        """
        param_name = self.get_test_value('update_special_slide_animation_effect', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_animation_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_animation_effect', 'slide_type', 'str')
        param_effect_index = self.get_test_value('update_special_slide_animation_effect', 'effect_index', 'int')
        param_effect = self.get_test_value('update_special_slide_animation_effect', 'effect', 'Effect')
        param_password = self.get_test_value('update_special_slide_animation_effect', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_animation_effect', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_animation_effect', 'storage', 'str')
        param_name = self.get_invalid_test_value('update_special_slide_animation_effect', 'name', param_name, 'str')
        self.initialize('update_special_slide_animation_effect', 'name', param_name)
        ok = False
        try:
            self.api.update_special_slide_animation_effect(param_name, param_slide_index, param_slide_type, param_effect_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_animation_effect', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_animation_effect', 'name', param_name)
        if ok:
            self.assert_no_exception('update_special_slide_animation_effect', 'name')

    def test_update_special_slide_animation_effect_invalid_slide_index(self):
        """Test case for update_special_slide_animation_effect with invalid slide_index
        """
        param_name = self.get_test_value('update_special_slide_animation_effect', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_animation_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_animation_effect', 'slide_type', 'str')
        param_effect_index = self.get_test_value('update_special_slide_animation_effect', 'effect_index', 'int')
        param_effect = self.get_test_value('update_special_slide_animation_effect', 'effect', 'Effect')
        param_password = self.get_test_value('update_special_slide_animation_effect', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_animation_effect', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_animation_effect', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('update_special_slide_animation_effect', 'slide_index', param_slide_index, 'int')
        self.initialize('update_special_slide_animation_effect', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.update_special_slide_animation_effect(param_name, param_slide_index, param_slide_type, param_effect_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_animation_effect', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_animation_effect', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('update_special_slide_animation_effect', 'slide_index')

    def test_update_special_slide_animation_effect_invalid_slide_type(self):
        """Test case for update_special_slide_animation_effect with invalid slide_type
        """
        param_name = self.get_test_value('update_special_slide_animation_effect', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_animation_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_animation_effect', 'slide_type', 'str')
        param_effect_index = self.get_test_value('update_special_slide_animation_effect', 'effect_index', 'int')
        param_effect = self.get_test_value('update_special_slide_animation_effect', 'effect', 'Effect')
        param_password = self.get_test_value('update_special_slide_animation_effect', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_animation_effect', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_animation_effect', 'storage', 'str')
        param_slide_type = self.get_invalid_test_value('update_special_slide_animation_effect', 'slide_type', param_slide_type, 'str')
        self.initialize('update_special_slide_animation_effect', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.update_special_slide_animation_effect(param_name, param_slide_index, param_slide_type, param_effect_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_animation_effect', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_animation_effect', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('update_special_slide_animation_effect', 'slide_type')

    def test_update_special_slide_animation_effect_invalid_effect_index(self):
        """Test case for update_special_slide_animation_effect with invalid effect_index
        """
        param_name = self.get_test_value('update_special_slide_animation_effect', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_animation_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_animation_effect', 'slide_type', 'str')
        param_effect_index = self.get_test_value('update_special_slide_animation_effect', 'effect_index', 'int')
        param_effect = self.get_test_value('update_special_slide_animation_effect', 'effect', 'Effect')
        param_password = self.get_test_value('update_special_slide_animation_effect', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_animation_effect', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_animation_effect', 'storage', 'str')
        param_effect_index = self.get_invalid_test_value('update_special_slide_animation_effect', 'effect_index', param_effect_index, 'int')
        self.initialize('update_special_slide_animation_effect', 'effect_index', param_effect_index)
        ok = False
        try:
            self.api.update_special_slide_animation_effect(param_name, param_slide_index, param_slide_type, param_effect_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_animation_effect', 'effect_index', param_effect_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_animation_effect', 'effect_index', param_effect_index)
        if ok:
            self.assert_no_exception('update_special_slide_animation_effect', 'effect_index')

    def test_update_special_slide_animation_effect_invalid_effect(self):
        """Test case for update_special_slide_animation_effect with invalid effect
        """
        param_name = self.get_test_value('update_special_slide_animation_effect', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_animation_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_animation_effect', 'slide_type', 'str')
        param_effect_index = self.get_test_value('update_special_slide_animation_effect', 'effect_index', 'int')
        param_effect = self.get_test_value('update_special_slide_animation_effect', 'effect', 'Effect')
        param_password = self.get_test_value('update_special_slide_animation_effect', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_animation_effect', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_animation_effect', 'storage', 'str')
        param_effect = self.get_invalid_test_value('update_special_slide_animation_effect', 'effect', param_effect, 'Effect')
        self.initialize('update_special_slide_animation_effect', 'effect', param_effect)
        ok = False
        try:
            self.api.update_special_slide_animation_effect(param_name, param_slide_index, param_slide_type, param_effect_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_animation_effect', 'effect', param_effect)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_animation_effect', 'effect', param_effect)
        if ok:
            self.assert_no_exception('update_special_slide_animation_effect', 'effect')

    def test_update_special_slide_animation_effect_invalid_password(self):
        """Test case for update_special_slide_animation_effect with invalid password
        """
        param_name = self.get_test_value('update_special_slide_animation_effect', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_animation_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_animation_effect', 'slide_type', 'str')
        param_effect_index = self.get_test_value('update_special_slide_animation_effect', 'effect_index', 'int')
        param_effect = self.get_test_value('update_special_slide_animation_effect', 'effect', 'Effect')
        param_password = self.get_test_value('update_special_slide_animation_effect', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_animation_effect', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_animation_effect', 'storage', 'str')
        param_password = self.get_invalid_test_value('update_special_slide_animation_effect', 'password', param_password, 'str')
        self.initialize('update_special_slide_animation_effect', 'password', param_password)
        ok = False
        try:
            self.api.update_special_slide_animation_effect(param_name, param_slide_index, param_slide_type, param_effect_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_animation_effect', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_animation_effect', 'password', param_password)
        if ok:
            self.assert_no_exception('update_special_slide_animation_effect', 'password')

    def test_update_special_slide_animation_effect_invalid_folder(self):
        """Test case for update_special_slide_animation_effect with invalid folder
        """
        param_name = self.get_test_value('update_special_slide_animation_effect', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_animation_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_animation_effect', 'slide_type', 'str')
        param_effect_index = self.get_test_value('update_special_slide_animation_effect', 'effect_index', 'int')
        param_effect = self.get_test_value('update_special_slide_animation_effect', 'effect', 'Effect')
        param_password = self.get_test_value('update_special_slide_animation_effect', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_animation_effect', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_animation_effect', 'storage', 'str')
        param_folder = self.get_invalid_test_value('update_special_slide_animation_effect', 'folder', param_folder, 'str')
        self.initialize('update_special_slide_animation_effect', 'folder', param_folder)
        ok = False
        try:
            self.api.update_special_slide_animation_effect(param_name, param_slide_index, param_slide_type, param_effect_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_animation_effect', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_animation_effect', 'folder', param_folder)
        if ok:
            self.assert_no_exception('update_special_slide_animation_effect', 'folder')

    def test_update_special_slide_animation_effect_invalid_storage(self):
        """Test case for update_special_slide_animation_effect with invalid storage
        """
        param_name = self.get_test_value('update_special_slide_animation_effect', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_animation_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_animation_effect', 'slide_type', 'str')
        param_effect_index = self.get_test_value('update_special_slide_animation_effect', 'effect_index', 'int')
        param_effect = self.get_test_value('update_special_slide_animation_effect', 'effect', 'Effect')
        param_password = self.get_test_value('update_special_slide_animation_effect', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_animation_effect', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_animation_effect', 'storage', 'str')
        param_storage = self.get_invalid_test_value('update_special_slide_animation_effect', 'storage', param_storage, 'str')
        self.initialize('update_special_slide_animation_effect', 'storage', param_storage)
        ok = False
        try:
            self.api.update_special_slide_animation_effect(param_name, param_slide_index, param_slide_type, param_effect_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_animation_effect', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_animation_effect', 'storage', param_storage)
        if ok:
            self.assert_no_exception('update_special_slide_animation_effect', 'storage')

    def test_update_special_slide_animation_interactive_sequence_effect(self):
        """Test case for update_special_slide_animation_interactive_sequence_effect
        """
        param_name = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'slide_type', 'str')
        param_sequence_index = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect_index = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int')
        param_effect = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect')
        param_password = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'storage', 'str')
        self.initialize('update_special_slide_animation_interactive_sequence_effect', None, None)
        response = self.api.update_special_slide_animation_interactive_sequence_effect(param_name, param_slide_index, param_slide_type, param_sequence_index, param_effect_index, param_effect, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_update_special_slide_animation_interactive_sequence_effect_invalid_name(self):
        """Test case for update_special_slide_animation_interactive_sequence_effect with invalid name
        """
        param_name = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'slide_type', 'str')
        param_sequence_index = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect_index = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int')
        param_effect = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect')
        param_password = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'storage', 'str')
        param_name = self.get_invalid_test_value('update_special_slide_animation_interactive_sequence_effect', 'name', param_name, 'str')
        self.initialize('update_special_slide_animation_interactive_sequence_effect', 'name', param_name)
        ok = False
        try:
            self.api.update_special_slide_animation_interactive_sequence_effect(param_name, param_slide_index, param_slide_type, param_sequence_index, param_effect_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_animation_interactive_sequence_effect', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_animation_interactive_sequence_effect', 'name', param_name)
        if ok:
            self.assert_no_exception('update_special_slide_animation_interactive_sequence_effect', 'name')

    def test_update_special_slide_animation_interactive_sequence_effect_invalid_slide_index(self):
        """Test case for update_special_slide_animation_interactive_sequence_effect with invalid slide_index
        """
        param_name = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'slide_type', 'str')
        param_sequence_index = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect_index = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int')
        param_effect = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect')
        param_password = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('update_special_slide_animation_interactive_sequence_effect', 'slide_index', param_slide_index, 'int')
        self.initialize('update_special_slide_animation_interactive_sequence_effect', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.update_special_slide_animation_interactive_sequence_effect(param_name, param_slide_index, param_slide_type, param_sequence_index, param_effect_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_animation_interactive_sequence_effect', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_animation_interactive_sequence_effect', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('update_special_slide_animation_interactive_sequence_effect', 'slide_index')

    def test_update_special_slide_animation_interactive_sequence_effect_invalid_slide_type(self):
        """Test case for update_special_slide_animation_interactive_sequence_effect with invalid slide_type
        """
        param_name = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'slide_type', 'str')
        param_sequence_index = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect_index = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int')
        param_effect = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect')
        param_password = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'storage', 'str')
        param_slide_type = self.get_invalid_test_value('update_special_slide_animation_interactive_sequence_effect', 'slide_type', param_slide_type, 'str')
        self.initialize('update_special_slide_animation_interactive_sequence_effect', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.update_special_slide_animation_interactive_sequence_effect(param_name, param_slide_index, param_slide_type, param_sequence_index, param_effect_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_animation_interactive_sequence_effect', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_animation_interactive_sequence_effect', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('update_special_slide_animation_interactive_sequence_effect', 'slide_type')

    def test_update_special_slide_animation_interactive_sequence_effect_invalid_sequence_index(self):
        """Test case for update_special_slide_animation_interactive_sequence_effect with invalid sequence_index
        """
        param_name = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'slide_type', 'str')
        param_sequence_index = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect_index = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int')
        param_effect = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect')
        param_password = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'storage', 'str')
        param_sequence_index = self.get_invalid_test_value('update_special_slide_animation_interactive_sequence_effect', 'sequence_index', param_sequence_index, 'int')
        self.initialize('update_special_slide_animation_interactive_sequence_effect', 'sequence_index', param_sequence_index)
        ok = False
        try:
            self.api.update_special_slide_animation_interactive_sequence_effect(param_name, param_slide_index, param_slide_type, param_sequence_index, param_effect_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_animation_interactive_sequence_effect', 'sequence_index', param_sequence_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_animation_interactive_sequence_effect', 'sequence_index', param_sequence_index)
        if ok:
            self.assert_no_exception('update_special_slide_animation_interactive_sequence_effect', 'sequence_index')

    def test_update_special_slide_animation_interactive_sequence_effect_invalid_effect_index(self):
        """Test case for update_special_slide_animation_interactive_sequence_effect with invalid effect_index
        """
        param_name = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'slide_type', 'str')
        param_sequence_index = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect_index = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int')
        param_effect = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect')
        param_password = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'storage', 'str')
        param_effect_index = self.get_invalid_test_value('update_special_slide_animation_interactive_sequence_effect', 'effect_index', param_effect_index, 'int')
        self.initialize('update_special_slide_animation_interactive_sequence_effect', 'effect_index', param_effect_index)
        ok = False
        try:
            self.api.update_special_slide_animation_interactive_sequence_effect(param_name, param_slide_index, param_slide_type, param_sequence_index, param_effect_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_animation_interactive_sequence_effect', 'effect_index', param_effect_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_animation_interactive_sequence_effect', 'effect_index', param_effect_index)
        if ok:
            self.assert_no_exception('update_special_slide_animation_interactive_sequence_effect', 'effect_index')

    def test_update_special_slide_animation_interactive_sequence_effect_invalid_effect(self):
        """Test case for update_special_slide_animation_interactive_sequence_effect with invalid effect
        """
        param_name = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'slide_type', 'str')
        param_sequence_index = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect_index = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int')
        param_effect = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect')
        param_password = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'storage', 'str')
        param_effect = self.get_invalid_test_value('update_special_slide_animation_interactive_sequence_effect', 'effect', param_effect, 'Effect')
        self.initialize('update_special_slide_animation_interactive_sequence_effect', 'effect', param_effect)
        ok = False
        try:
            self.api.update_special_slide_animation_interactive_sequence_effect(param_name, param_slide_index, param_slide_type, param_sequence_index, param_effect_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_animation_interactive_sequence_effect', 'effect', param_effect)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_animation_interactive_sequence_effect', 'effect', param_effect)
        if ok:
            self.assert_no_exception('update_special_slide_animation_interactive_sequence_effect', 'effect')

    def test_update_special_slide_animation_interactive_sequence_effect_invalid_password(self):
        """Test case for update_special_slide_animation_interactive_sequence_effect with invalid password
        """
        param_name = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'slide_type', 'str')
        param_sequence_index = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect_index = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int')
        param_effect = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect')
        param_password = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'storage', 'str')
        param_password = self.get_invalid_test_value('update_special_slide_animation_interactive_sequence_effect', 'password', param_password, 'str')
        self.initialize('update_special_slide_animation_interactive_sequence_effect', 'password', param_password)
        ok = False
        try:
            self.api.update_special_slide_animation_interactive_sequence_effect(param_name, param_slide_index, param_slide_type, param_sequence_index, param_effect_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_animation_interactive_sequence_effect', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_animation_interactive_sequence_effect', 'password', param_password)
        if ok:
            self.assert_no_exception('update_special_slide_animation_interactive_sequence_effect', 'password')

    def test_update_special_slide_animation_interactive_sequence_effect_invalid_folder(self):
        """Test case for update_special_slide_animation_interactive_sequence_effect with invalid folder
        """
        param_name = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'slide_type', 'str')
        param_sequence_index = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect_index = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int')
        param_effect = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect')
        param_password = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'storage', 'str')
        param_folder = self.get_invalid_test_value('update_special_slide_animation_interactive_sequence_effect', 'folder', param_folder, 'str')
        self.initialize('update_special_slide_animation_interactive_sequence_effect', 'folder', param_folder)
        ok = False
        try:
            self.api.update_special_slide_animation_interactive_sequence_effect(param_name, param_slide_index, param_slide_type, param_sequence_index, param_effect_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_animation_interactive_sequence_effect', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_animation_interactive_sequence_effect', 'folder', param_folder)
        if ok:
            self.assert_no_exception('update_special_slide_animation_interactive_sequence_effect', 'folder')

    def test_update_special_slide_animation_interactive_sequence_effect_invalid_storage(self):
        """Test case for update_special_slide_animation_interactive_sequence_effect with invalid storage
        """
        param_name = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'slide_type', 'str')
        param_sequence_index = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'sequence_index', 'int')
        param_effect_index = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'effect_index', 'int')
        param_effect = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'effect', 'Effect')
        param_password = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_animation_interactive_sequence_effect', 'storage', 'str')
        param_storage = self.get_invalid_test_value('update_special_slide_animation_interactive_sequence_effect', 'storage', param_storage, 'str')
        self.initialize('update_special_slide_animation_interactive_sequence_effect', 'storage', param_storage)
        ok = False
        try:
            self.api.update_special_slide_animation_interactive_sequence_effect(param_name, param_slide_index, param_slide_type, param_sequence_index, param_effect_index, param_effect, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_animation_interactive_sequence_effect', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_animation_interactive_sequence_effect', 'storage', param_storage)
        if ok:
            self.assert_no_exception('update_special_slide_animation_interactive_sequence_effect', 'storage')

    def test_update_special_slide_paragraph(self):
        """Test case for update_special_slide_paragraph
        """
        param_name = self.get_test_value('update_special_slide_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_paragraph', 'slide_type', 'str')
        param_shape_index = self.get_test_value('update_special_slide_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_special_slide_paragraph', 'paragraph_index', 'int')
        param_dto = self.get_test_value('update_special_slide_paragraph', 'dto', 'Paragraph')
        param_password = self.get_test_value('update_special_slide_paragraph', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_paragraph', 'storage', 'str')
        self.initialize('update_special_slide_paragraph', None, None)
        response = self.api.update_special_slide_paragraph(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_dto, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_update_special_slide_paragraph_invalid_name(self):
        """Test case for update_special_slide_paragraph with invalid name
        """
        param_name = self.get_test_value('update_special_slide_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_paragraph', 'slide_type', 'str')
        param_shape_index = self.get_test_value('update_special_slide_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_special_slide_paragraph', 'paragraph_index', 'int')
        param_dto = self.get_test_value('update_special_slide_paragraph', 'dto', 'Paragraph')
        param_password = self.get_test_value('update_special_slide_paragraph', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_paragraph', 'storage', 'str')
        param_name = self.get_invalid_test_value('update_special_slide_paragraph', 'name', param_name, 'str')
        self.initialize('update_special_slide_paragraph', 'name', param_name)
        ok = False
        try:
            self.api.update_special_slide_paragraph(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_paragraph', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_paragraph', 'name', param_name)
        if ok:
            self.assert_no_exception('update_special_slide_paragraph', 'name')

    def test_update_special_slide_paragraph_invalid_slide_index(self):
        """Test case for update_special_slide_paragraph with invalid slide_index
        """
        param_name = self.get_test_value('update_special_slide_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_paragraph', 'slide_type', 'str')
        param_shape_index = self.get_test_value('update_special_slide_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_special_slide_paragraph', 'paragraph_index', 'int')
        param_dto = self.get_test_value('update_special_slide_paragraph', 'dto', 'Paragraph')
        param_password = self.get_test_value('update_special_slide_paragraph', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_paragraph', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('update_special_slide_paragraph', 'slide_index', param_slide_index, 'int')
        self.initialize('update_special_slide_paragraph', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.update_special_slide_paragraph(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_paragraph', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_paragraph', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('update_special_slide_paragraph', 'slide_index')

    def test_update_special_slide_paragraph_invalid_slide_type(self):
        """Test case for update_special_slide_paragraph with invalid slide_type
        """
        param_name = self.get_test_value('update_special_slide_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_paragraph', 'slide_type', 'str')
        param_shape_index = self.get_test_value('update_special_slide_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_special_slide_paragraph', 'paragraph_index', 'int')
        param_dto = self.get_test_value('update_special_slide_paragraph', 'dto', 'Paragraph')
        param_password = self.get_test_value('update_special_slide_paragraph', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_paragraph', 'storage', 'str')
        param_slide_type = self.get_invalid_test_value('update_special_slide_paragraph', 'slide_type', param_slide_type, 'str')
        self.initialize('update_special_slide_paragraph', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.update_special_slide_paragraph(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_paragraph', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_paragraph', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('update_special_slide_paragraph', 'slide_type')

    def test_update_special_slide_paragraph_invalid_shape_index(self):
        """Test case for update_special_slide_paragraph with invalid shape_index
        """
        param_name = self.get_test_value('update_special_slide_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_paragraph', 'slide_type', 'str')
        param_shape_index = self.get_test_value('update_special_slide_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_special_slide_paragraph', 'paragraph_index', 'int')
        param_dto = self.get_test_value('update_special_slide_paragraph', 'dto', 'Paragraph')
        param_password = self.get_test_value('update_special_slide_paragraph', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_paragraph', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('update_special_slide_paragraph', 'shape_index', param_shape_index, 'int')
        self.initialize('update_special_slide_paragraph', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.update_special_slide_paragraph(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_paragraph', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_paragraph', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('update_special_slide_paragraph', 'shape_index')

    def test_update_special_slide_paragraph_invalid_paragraph_index(self):
        """Test case for update_special_slide_paragraph with invalid paragraph_index
        """
        param_name = self.get_test_value('update_special_slide_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_paragraph', 'slide_type', 'str')
        param_shape_index = self.get_test_value('update_special_slide_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_special_slide_paragraph', 'paragraph_index', 'int')
        param_dto = self.get_test_value('update_special_slide_paragraph', 'dto', 'Paragraph')
        param_password = self.get_test_value('update_special_slide_paragraph', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_paragraph', 'storage', 'str')
        param_paragraph_index = self.get_invalid_test_value('update_special_slide_paragraph', 'paragraph_index', param_paragraph_index, 'int')
        self.initialize('update_special_slide_paragraph', 'paragraph_index', param_paragraph_index)
        ok = False
        try:
            self.api.update_special_slide_paragraph(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_paragraph', 'paragraph_index', param_paragraph_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_paragraph', 'paragraph_index', param_paragraph_index)
        if ok:
            self.assert_no_exception('update_special_slide_paragraph', 'paragraph_index')

    def test_update_special_slide_paragraph_invalid_dto(self):
        """Test case for update_special_slide_paragraph with invalid dto
        """
        param_name = self.get_test_value('update_special_slide_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_paragraph', 'slide_type', 'str')
        param_shape_index = self.get_test_value('update_special_slide_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_special_slide_paragraph', 'paragraph_index', 'int')
        param_dto = self.get_test_value('update_special_slide_paragraph', 'dto', 'Paragraph')
        param_password = self.get_test_value('update_special_slide_paragraph', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_paragraph', 'storage', 'str')
        param_dto = self.get_invalid_test_value('update_special_slide_paragraph', 'dto', param_dto, 'Paragraph')
        self.initialize('update_special_slide_paragraph', 'dto', param_dto)
        ok = False
        try:
            self.api.update_special_slide_paragraph(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_paragraph', 'dto', param_dto)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_paragraph', 'dto', param_dto)
        if ok:
            self.assert_no_exception('update_special_slide_paragraph', 'dto')

    def test_update_special_slide_paragraph_invalid_password(self):
        """Test case for update_special_slide_paragraph with invalid password
        """
        param_name = self.get_test_value('update_special_slide_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_paragraph', 'slide_type', 'str')
        param_shape_index = self.get_test_value('update_special_slide_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_special_slide_paragraph', 'paragraph_index', 'int')
        param_dto = self.get_test_value('update_special_slide_paragraph', 'dto', 'Paragraph')
        param_password = self.get_test_value('update_special_slide_paragraph', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_paragraph', 'storage', 'str')
        param_password = self.get_invalid_test_value('update_special_slide_paragraph', 'password', param_password, 'str')
        self.initialize('update_special_slide_paragraph', 'password', param_password)
        ok = False
        try:
            self.api.update_special_slide_paragraph(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_paragraph', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_paragraph', 'password', param_password)
        if ok:
            self.assert_no_exception('update_special_slide_paragraph', 'password')

    def test_update_special_slide_paragraph_invalid_folder(self):
        """Test case for update_special_slide_paragraph with invalid folder
        """
        param_name = self.get_test_value('update_special_slide_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_paragraph', 'slide_type', 'str')
        param_shape_index = self.get_test_value('update_special_slide_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_special_slide_paragraph', 'paragraph_index', 'int')
        param_dto = self.get_test_value('update_special_slide_paragraph', 'dto', 'Paragraph')
        param_password = self.get_test_value('update_special_slide_paragraph', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_paragraph', 'storage', 'str')
        param_folder = self.get_invalid_test_value('update_special_slide_paragraph', 'folder', param_folder, 'str')
        self.initialize('update_special_slide_paragraph', 'folder', param_folder)
        ok = False
        try:
            self.api.update_special_slide_paragraph(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_paragraph', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_paragraph', 'folder', param_folder)
        if ok:
            self.assert_no_exception('update_special_slide_paragraph', 'folder')

    def test_update_special_slide_paragraph_invalid_storage(self):
        """Test case for update_special_slide_paragraph with invalid storage
        """
        param_name = self.get_test_value('update_special_slide_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_paragraph', 'slide_type', 'str')
        param_shape_index = self.get_test_value('update_special_slide_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_special_slide_paragraph', 'paragraph_index', 'int')
        param_dto = self.get_test_value('update_special_slide_paragraph', 'dto', 'Paragraph')
        param_password = self.get_test_value('update_special_slide_paragraph', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_paragraph', 'storage', 'str')
        param_storage = self.get_invalid_test_value('update_special_slide_paragraph', 'storage', param_storage, 'str')
        self.initialize('update_special_slide_paragraph', 'storage', param_storage)
        ok = False
        try:
            self.api.update_special_slide_paragraph(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_paragraph', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_paragraph', 'storage', param_storage)
        if ok:
            self.assert_no_exception('update_special_slide_paragraph', 'storage')

    def test_update_special_slide_portion(self):
        """Test case for update_special_slide_portion
        """
        param_name = self.get_test_value('update_special_slide_portion', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_portion', 'slide_type', 'str')
        param_shape_index = self.get_test_value('update_special_slide_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_special_slide_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('update_special_slide_portion', 'portion_index', 'int')
        param_dto = self.get_test_value('update_special_slide_portion', 'dto', 'Portion')
        param_password = self.get_test_value('update_special_slide_portion', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_portion', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_portion', 'storage', 'str')
        self.initialize('update_special_slide_portion', None, None)
        response = self.api.update_special_slide_portion(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_portion_index, param_dto, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_update_special_slide_portion_invalid_name(self):
        """Test case for update_special_slide_portion with invalid name
        """
        param_name = self.get_test_value('update_special_slide_portion', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_portion', 'slide_type', 'str')
        param_shape_index = self.get_test_value('update_special_slide_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_special_slide_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('update_special_slide_portion', 'portion_index', 'int')
        param_dto = self.get_test_value('update_special_slide_portion', 'dto', 'Portion')
        param_password = self.get_test_value('update_special_slide_portion', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_portion', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_portion', 'storage', 'str')
        param_name = self.get_invalid_test_value('update_special_slide_portion', 'name', param_name, 'str')
        self.initialize('update_special_slide_portion', 'name', param_name)
        ok = False
        try:
            self.api.update_special_slide_portion(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_portion_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_portion', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_portion', 'name', param_name)
        if ok:
            self.assert_no_exception('update_special_slide_portion', 'name')

    def test_update_special_slide_portion_invalid_slide_index(self):
        """Test case for update_special_slide_portion with invalid slide_index
        """
        param_name = self.get_test_value('update_special_slide_portion', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_portion', 'slide_type', 'str')
        param_shape_index = self.get_test_value('update_special_slide_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_special_slide_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('update_special_slide_portion', 'portion_index', 'int')
        param_dto = self.get_test_value('update_special_slide_portion', 'dto', 'Portion')
        param_password = self.get_test_value('update_special_slide_portion', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_portion', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_portion', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('update_special_slide_portion', 'slide_index', param_slide_index, 'int')
        self.initialize('update_special_slide_portion', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.update_special_slide_portion(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_portion_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_portion', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_portion', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('update_special_slide_portion', 'slide_index')

    def test_update_special_slide_portion_invalid_slide_type(self):
        """Test case for update_special_slide_portion with invalid slide_type
        """
        param_name = self.get_test_value('update_special_slide_portion', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_portion', 'slide_type', 'str')
        param_shape_index = self.get_test_value('update_special_slide_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_special_slide_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('update_special_slide_portion', 'portion_index', 'int')
        param_dto = self.get_test_value('update_special_slide_portion', 'dto', 'Portion')
        param_password = self.get_test_value('update_special_slide_portion', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_portion', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_portion', 'storage', 'str')
        param_slide_type = self.get_invalid_test_value('update_special_slide_portion', 'slide_type', param_slide_type, 'str')
        self.initialize('update_special_slide_portion', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.update_special_slide_portion(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_portion_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_portion', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_portion', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('update_special_slide_portion', 'slide_type')

    def test_update_special_slide_portion_invalid_shape_index(self):
        """Test case for update_special_slide_portion with invalid shape_index
        """
        param_name = self.get_test_value('update_special_slide_portion', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_portion', 'slide_type', 'str')
        param_shape_index = self.get_test_value('update_special_slide_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_special_slide_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('update_special_slide_portion', 'portion_index', 'int')
        param_dto = self.get_test_value('update_special_slide_portion', 'dto', 'Portion')
        param_password = self.get_test_value('update_special_slide_portion', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_portion', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_portion', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('update_special_slide_portion', 'shape_index', param_shape_index, 'int')
        self.initialize('update_special_slide_portion', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.update_special_slide_portion(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_portion_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_portion', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_portion', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('update_special_slide_portion', 'shape_index')

    def test_update_special_slide_portion_invalid_paragraph_index(self):
        """Test case for update_special_slide_portion with invalid paragraph_index
        """
        param_name = self.get_test_value('update_special_slide_portion', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_portion', 'slide_type', 'str')
        param_shape_index = self.get_test_value('update_special_slide_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_special_slide_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('update_special_slide_portion', 'portion_index', 'int')
        param_dto = self.get_test_value('update_special_slide_portion', 'dto', 'Portion')
        param_password = self.get_test_value('update_special_slide_portion', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_portion', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_portion', 'storage', 'str')
        param_paragraph_index = self.get_invalid_test_value('update_special_slide_portion', 'paragraph_index', param_paragraph_index, 'int')
        self.initialize('update_special_slide_portion', 'paragraph_index', param_paragraph_index)
        ok = False
        try:
            self.api.update_special_slide_portion(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_portion_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_portion', 'paragraph_index', param_paragraph_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_portion', 'paragraph_index', param_paragraph_index)
        if ok:
            self.assert_no_exception('update_special_slide_portion', 'paragraph_index')

    def test_update_special_slide_portion_invalid_portion_index(self):
        """Test case for update_special_slide_portion with invalid portion_index
        """
        param_name = self.get_test_value('update_special_slide_portion', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_portion', 'slide_type', 'str')
        param_shape_index = self.get_test_value('update_special_slide_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_special_slide_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('update_special_slide_portion', 'portion_index', 'int')
        param_dto = self.get_test_value('update_special_slide_portion', 'dto', 'Portion')
        param_password = self.get_test_value('update_special_slide_portion', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_portion', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_portion', 'storage', 'str')
        param_portion_index = self.get_invalid_test_value('update_special_slide_portion', 'portion_index', param_portion_index, 'int')
        self.initialize('update_special_slide_portion', 'portion_index', param_portion_index)
        ok = False
        try:
            self.api.update_special_slide_portion(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_portion_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_portion', 'portion_index', param_portion_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_portion', 'portion_index', param_portion_index)
        if ok:
            self.assert_no_exception('update_special_slide_portion', 'portion_index')

    def test_update_special_slide_portion_invalid_dto(self):
        """Test case for update_special_slide_portion with invalid dto
        """
        param_name = self.get_test_value('update_special_slide_portion', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_portion', 'slide_type', 'str')
        param_shape_index = self.get_test_value('update_special_slide_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_special_slide_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('update_special_slide_portion', 'portion_index', 'int')
        param_dto = self.get_test_value('update_special_slide_portion', 'dto', 'Portion')
        param_password = self.get_test_value('update_special_slide_portion', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_portion', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_portion', 'storage', 'str')
        param_dto = self.get_invalid_test_value('update_special_slide_portion', 'dto', param_dto, 'Portion')
        self.initialize('update_special_slide_portion', 'dto', param_dto)
        ok = False
        try:
            self.api.update_special_slide_portion(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_portion_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_portion', 'dto', param_dto)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_portion', 'dto', param_dto)
        if ok:
            self.assert_no_exception('update_special_slide_portion', 'dto')

    def test_update_special_slide_portion_invalid_password(self):
        """Test case for update_special_slide_portion with invalid password
        """
        param_name = self.get_test_value('update_special_slide_portion', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_portion', 'slide_type', 'str')
        param_shape_index = self.get_test_value('update_special_slide_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_special_slide_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('update_special_slide_portion', 'portion_index', 'int')
        param_dto = self.get_test_value('update_special_slide_portion', 'dto', 'Portion')
        param_password = self.get_test_value('update_special_slide_portion', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_portion', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_portion', 'storage', 'str')
        param_password = self.get_invalid_test_value('update_special_slide_portion', 'password', param_password, 'str')
        self.initialize('update_special_slide_portion', 'password', param_password)
        ok = False
        try:
            self.api.update_special_slide_portion(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_portion_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_portion', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_portion', 'password', param_password)
        if ok:
            self.assert_no_exception('update_special_slide_portion', 'password')

    def test_update_special_slide_portion_invalid_folder(self):
        """Test case for update_special_slide_portion with invalid folder
        """
        param_name = self.get_test_value('update_special_slide_portion', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_portion', 'slide_type', 'str')
        param_shape_index = self.get_test_value('update_special_slide_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_special_slide_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('update_special_slide_portion', 'portion_index', 'int')
        param_dto = self.get_test_value('update_special_slide_portion', 'dto', 'Portion')
        param_password = self.get_test_value('update_special_slide_portion', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_portion', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_portion', 'storage', 'str')
        param_folder = self.get_invalid_test_value('update_special_slide_portion', 'folder', param_folder, 'str')
        self.initialize('update_special_slide_portion', 'folder', param_folder)
        ok = False
        try:
            self.api.update_special_slide_portion(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_portion_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_portion', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_portion', 'folder', param_folder)
        if ok:
            self.assert_no_exception('update_special_slide_portion', 'folder')

    def test_update_special_slide_portion_invalid_storage(self):
        """Test case for update_special_slide_portion with invalid storage
        """
        param_name = self.get_test_value('update_special_slide_portion', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_portion', 'slide_type', 'str')
        param_shape_index = self.get_test_value('update_special_slide_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_special_slide_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('update_special_slide_portion', 'portion_index', 'int')
        param_dto = self.get_test_value('update_special_slide_portion', 'dto', 'Portion')
        param_password = self.get_test_value('update_special_slide_portion', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_portion', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_portion', 'storage', 'str')
        param_storage = self.get_invalid_test_value('update_special_slide_portion', 'storage', param_storage, 'str')
        self.initialize('update_special_slide_portion', 'storage', param_storage)
        ok = False
        try:
            self.api.update_special_slide_portion(param_name, param_slide_index, param_slide_type, param_shape_index, param_paragraph_index, param_portion_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_portion', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_portion', 'storage', param_storage)
        if ok:
            self.assert_no_exception('update_special_slide_portion', 'storage')

    def test_update_special_slide_shape(self):
        """Test case for update_special_slide_shape
        """
        param_name = self.get_test_value('update_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('update_special_slide_shape', 'shape_index', 'int')
        param_dto = self.get_test_value('update_special_slide_shape', 'dto', 'ShapeBase')
        param_password = self.get_test_value('update_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_shape', 'storage', 'str')
        self.initialize('update_special_slide_shape', None, None)
        response = self.api.update_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_dto, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_update_special_slide_shape_invalid_name(self):
        """Test case for update_special_slide_shape with invalid name
        """
        param_name = self.get_test_value('update_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('update_special_slide_shape', 'shape_index', 'int')
        param_dto = self.get_test_value('update_special_slide_shape', 'dto', 'ShapeBase')
        param_password = self.get_test_value('update_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_shape', 'storage', 'str')
        param_name = self.get_invalid_test_value('update_special_slide_shape', 'name', param_name, 'str')
        self.initialize('update_special_slide_shape', 'name', param_name)
        ok = False
        try:
            self.api.update_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_shape', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_shape', 'name', param_name)
        if ok:
            self.assert_no_exception('update_special_slide_shape', 'name')

    def test_update_special_slide_shape_invalid_slide_index(self):
        """Test case for update_special_slide_shape with invalid slide_index
        """
        param_name = self.get_test_value('update_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('update_special_slide_shape', 'shape_index', 'int')
        param_dto = self.get_test_value('update_special_slide_shape', 'dto', 'ShapeBase')
        param_password = self.get_test_value('update_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_shape', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('update_special_slide_shape', 'slide_index', param_slide_index, 'int')
        self.initialize('update_special_slide_shape', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.update_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_shape', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_shape', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('update_special_slide_shape', 'slide_index')

    def test_update_special_slide_shape_invalid_slide_type(self):
        """Test case for update_special_slide_shape with invalid slide_type
        """
        param_name = self.get_test_value('update_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('update_special_slide_shape', 'shape_index', 'int')
        param_dto = self.get_test_value('update_special_slide_shape', 'dto', 'ShapeBase')
        param_password = self.get_test_value('update_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_shape', 'storage', 'str')
        param_slide_type = self.get_invalid_test_value('update_special_slide_shape', 'slide_type', param_slide_type, 'str')
        self.initialize('update_special_slide_shape', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.update_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_shape', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_shape', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('update_special_slide_shape', 'slide_type')

    def test_update_special_slide_shape_invalid_shape_index(self):
        """Test case for update_special_slide_shape with invalid shape_index
        """
        param_name = self.get_test_value('update_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('update_special_slide_shape', 'shape_index', 'int')
        param_dto = self.get_test_value('update_special_slide_shape', 'dto', 'ShapeBase')
        param_password = self.get_test_value('update_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_shape', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('update_special_slide_shape', 'shape_index', param_shape_index, 'int')
        self.initialize('update_special_slide_shape', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.update_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_shape', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_shape', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('update_special_slide_shape', 'shape_index')

    def test_update_special_slide_shape_invalid_dto(self):
        """Test case for update_special_slide_shape with invalid dto
        """
        param_name = self.get_test_value('update_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('update_special_slide_shape', 'shape_index', 'int')
        param_dto = self.get_test_value('update_special_slide_shape', 'dto', 'ShapeBase')
        param_password = self.get_test_value('update_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_shape', 'storage', 'str')
        param_dto = self.get_invalid_test_value('update_special_slide_shape', 'dto', param_dto, 'ShapeBase')
        self.initialize('update_special_slide_shape', 'dto', param_dto)
        ok = False
        try:
            self.api.update_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_shape', 'dto', param_dto)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_shape', 'dto', param_dto)
        if ok:
            self.assert_no_exception('update_special_slide_shape', 'dto')

    def test_update_special_slide_shape_invalid_password(self):
        """Test case for update_special_slide_shape with invalid password
        """
        param_name = self.get_test_value('update_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('update_special_slide_shape', 'shape_index', 'int')
        param_dto = self.get_test_value('update_special_slide_shape', 'dto', 'ShapeBase')
        param_password = self.get_test_value('update_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_shape', 'storage', 'str')
        param_password = self.get_invalid_test_value('update_special_slide_shape', 'password', param_password, 'str')
        self.initialize('update_special_slide_shape', 'password', param_password)
        ok = False
        try:
            self.api.update_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_shape', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_shape', 'password', param_password)
        if ok:
            self.assert_no_exception('update_special_slide_shape', 'password')

    def test_update_special_slide_shape_invalid_folder(self):
        """Test case for update_special_slide_shape with invalid folder
        """
        param_name = self.get_test_value('update_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('update_special_slide_shape', 'shape_index', 'int')
        param_dto = self.get_test_value('update_special_slide_shape', 'dto', 'ShapeBase')
        param_password = self.get_test_value('update_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_shape', 'storage', 'str')
        param_folder = self.get_invalid_test_value('update_special_slide_shape', 'folder', param_folder, 'str')
        self.initialize('update_special_slide_shape', 'folder', param_folder)
        ok = False
        try:
            self.api.update_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_shape', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_shape', 'folder', param_folder)
        if ok:
            self.assert_no_exception('update_special_slide_shape', 'folder')

    def test_update_special_slide_shape_invalid_storage(self):
        """Test case for update_special_slide_shape with invalid storage
        """
        param_name = self.get_test_value('update_special_slide_shape', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_shape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_shape', 'slide_type', 'str')
        param_shape_index = self.get_test_value('update_special_slide_shape', 'shape_index', 'int')
        param_dto = self.get_test_value('update_special_slide_shape', 'dto', 'ShapeBase')
        param_password = self.get_test_value('update_special_slide_shape', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_shape', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_shape', 'storage', 'str')
        param_storage = self.get_invalid_test_value('update_special_slide_shape', 'storage', param_storage, 'str')
        self.initialize('update_special_slide_shape', 'storage', param_storage)
        ok = False
        try:
            self.api.update_special_slide_shape(param_name, param_slide_index, param_slide_type, param_shape_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_shape', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_shape', 'storage', param_storage)
        if ok:
            self.assert_no_exception('update_special_slide_shape', 'storage')

    def test_update_special_slide_subshape(self):
        """Test case for update_special_slide_subshape
        """
        param_name = self.get_test_value('update_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('update_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('update_special_slide_subshape', 'shape_index', 'int')
        param_dto = self.get_test_value('update_special_slide_subshape', 'dto', 'ShapeBase')
        param_password = self.get_test_value('update_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_subshape', 'storage', 'str')
        self.initialize('update_special_slide_subshape', None, None)
        response = self.api.update_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_dto, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_update_special_slide_subshape_invalid_name(self):
        """Test case for update_special_slide_subshape with invalid name
        """
        param_name = self.get_test_value('update_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('update_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('update_special_slide_subshape', 'shape_index', 'int')
        param_dto = self.get_test_value('update_special_slide_subshape', 'dto', 'ShapeBase')
        param_password = self.get_test_value('update_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_subshape', 'storage', 'str')
        param_name = self.get_invalid_test_value('update_special_slide_subshape', 'name', param_name, 'str')
        self.initialize('update_special_slide_subshape', 'name', param_name)
        ok = False
        try:
            self.api.update_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_subshape', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_subshape', 'name', param_name)
        if ok:
            self.assert_no_exception('update_special_slide_subshape', 'name')

    def test_update_special_slide_subshape_invalid_slide_index(self):
        """Test case for update_special_slide_subshape with invalid slide_index
        """
        param_name = self.get_test_value('update_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('update_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('update_special_slide_subshape', 'shape_index', 'int')
        param_dto = self.get_test_value('update_special_slide_subshape', 'dto', 'ShapeBase')
        param_password = self.get_test_value('update_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_subshape', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('update_special_slide_subshape', 'slide_index', param_slide_index, 'int')
        self.initialize('update_special_slide_subshape', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.update_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_subshape', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_subshape', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('update_special_slide_subshape', 'slide_index')

    def test_update_special_slide_subshape_invalid_slide_type(self):
        """Test case for update_special_slide_subshape with invalid slide_type
        """
        param_name = self.get_test_value('update_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('update_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('update_special_slide_subshape', 'shape_index', 'int')
        param_dto = self.get_test_value('update_special_slide_subshape', 'dto', 'ShapeBase')
        param_password = self.get_test_value('update_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_subshape', 'storage', 'str')
        param_slide_type = self.get_invalid_test_value('update_special_slide_subshape', 'slide_type', param_slide_type, 'str')
        self.initialize('update_special_slide_subshape', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.update_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_subshape', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_subshape', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('update_special_slide_subshape', 'slide_type')

    def test_update_special_slide_subshape_invalid_path(self):
        """Test case for update_special_slide_subshape with invalid path
        """
        param_name = self.get_test_value('update_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('update_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('update_special_slide_subshape', 'shape_index', 'int')
        param_dto = self.get_test_value('update_special_slide_subshape', 'dto', 'ShapeBase')
        param_password = self.get_test_value('update_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_subshape', 'storage', 'str')
        param_path = self.get_invalid_test_value('update_special_slide_subshape', 'path', param_path, 'str')
        self.initialize('update_special_slide_subshape', 'path', param_path)
        ok = False
        try:
            self.api.update_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_subshape', 'path', param_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_subshape', 'path', param_path)
        if ok:
            self.assert_no_exception('update_special_slide_subshape', 'path')

    def test_update_special_slide_subshape_invalid_shape_index(self):
        """Test case for update_special_slide_subshape with invalid shape_index
        """
        param_name = self.get_test_value('update_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('update_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('update_special_slide_subshape', 'shape_index', 'int')
        param_dto = self.get_test_value('update_special_slide_subshape', 'dto', 'ShapeBase')
        param_password = self.get_test_value('update_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_subshape', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('update_special_slide_subshape', 'shape_index', param_shape_index, 'int')
        self.initialize('update_special_slide_subshape', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.update_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_subshape', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_subshape', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('update_special_slide_subshape', 'shape_index')

    def test_update_special_slide_subshape_invalid_dto(self):
        """Test case for update_special_slide_subshape with invalid dto
        """
        param_name = self.get_test_value('update_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('update_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('update_special_slide_subshape', 'shape_index', 'int')
        param_dto = self.get_test_value('update_special_slide_subshape', 'dto', 'ShapeBase')
        param_password = self.get_test_value('update_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_subshape', 'storage', 'str')
        param_dto = self.get_invalid_test_value('update_special_slide_subshape', 'dto', param_dto, 'ShapeBase')
        self.initialize('update_special_slide_subshape', 'dto', param_dto)
        ok = False
        try:
            self.api.update_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_subshape', 'dto', param_dto)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_subshape', 'dto', param_dto)
        if ok:
            self.assert_no_exception('update_special_slide_subshape', 'dto')

    def test_update_special_slide_subshape_invalid_password(self):
        """Test case for update_special_slide_subshape with invalid password
        """
        param_name = self.get_test_value('update_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('update_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('update_special_slide_subshape', 'shape_index', 'int')
        param_dto = self.get_test_value('update_special_slide_subshape', 'dto', 'ShapeBase')
        param_password = self.get_test_value('update_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_subshape', 'storage', 'str')
        param_password = self.get_invalid_test_value('update_special_slide_subshape', 'password', param_password, 'str')
        self.initialize('update_special_slide_subshape', 'password', param_password)
        ok = False
        try:
            self.api.update_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_subshape', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_subshape', 'password', param_password)
        if ok:
            self.assert_no_exception('update_special_slide_subshape', 'password')

    def test_update_special_slide_subshape_invalid_folder(self):
        """Test case for update_special_slide_subshape with invalid folder
        """
        param_name = self.get_test_value('update_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('update_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('update_special_slide_subshape', 'shape_index', 'int')
        param_dto = self.get_test_value('update_special_slide_subshape', 'dto', 'ShapeBase')
        param_password = self.get_test_value('update_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_subshape', 'storage', 'str')
        param_folder = self.get_invalid_test_value('update_special_slide_subshape', 'folder', param_folder, 'str')
        self.initialize('update_special_slide_subshape', 'folder', param_folder)
        ok = False
        try:
            self.api.update_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_subshape', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_subshape', 'folder', param_folder)
        if ok:
            self.assert_no_exception('update_special_slide_subshape', 'folder')

    def test_update_special_slide_subshape_invalid_storage(self):
        """Test case for update_special_slide_subshape with invalid storage
        """
        param_name = self.get_test_value('update_special_slide_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_subshape', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_subshape', 'slide_type', 'str')
        param_path = self.get_test_value('update_special_slide_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('update_special_slide_subshape', 'shape_index', 'int')
        param_dto = self.get_test_value('update_special_slide_subshape', 'dto', 'ShapeBase')
        param_password = self.get_test_value('update_special_slide_subshape', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_subshape', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_subshape', 'storage', 'str')
        param_storage = self.get_invalid_test_value('update_special_slide_subshape', 'storage', param_storage, 'str')
        self.initialize('update_special_slide_subshape', 'storage', param_storage)
        ok = False
        try:
            self.api.update_special_slide_subshape(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_subshape', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_subshape', 'storage', param_storage)
        if ok:
            self.assert_no_exception('update_special_slide_subshape', 'storage')

    def test_update_special_slide_subshape_paragraph(self):
        """Test case for update_special_slide_subshape_paragraph
        """
        param_name = self.get_test_value('update_special_slide_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_subshape_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_subshape_paragraph', 'slide_type', 'str')
        param_path = self.get_test_value('update_special_slide_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('update_special_slide_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_special_slide_subshape_paragraph', 'paragraph_index', 'int')
        param_dto = self.get_test_value('update_special_slide_subshape_paragraph', 'dto', 'Paragraph')
        param_password = self.get_test_value('update_special_slide_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_subshape_paragraph', 'storage', 'str')
        self.initialize('update_special_slide_subshape_paragraph', None, None)
        response = self.api.update_special_slide_subshape_paragraph(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_dto, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_update_special_slide_subshape_paragraph_invalid_name(self):
        """Test case for update_special_slide_subshape_paragraph with invalid name
        """
        param_name = self.get_test_value('update_special_slide_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_subshape_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_subshape_paragraph', 'slide_type', 'str')
        param_path = self.get_test_value('update_special_slide_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('update_special_slide_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_special_slide_subshape_paragraph', 'paragraph_index', 'int')
        param_dto = self.get_test_value('update_special_slide_subshape_paragraph', 'dto', 'Paragraph')
        param_password = self.get_test_value('update_special_slide_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_subshape_paragraph', 'storage', 'str')
        param_name = self.get_invalid_test_value('update_special_slide_subshape_paragraph', 'name', param_name, 'str')
        self.initialize('update_special_slide_subshape_paragraph', 'name', param_name)
        ok = False
        try:
            self.api.update_special_slide_subshape_paragraph(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_subshape_paragraph', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_subshape_paragraph', 'name', param_name)
        if ok:
            self.assert_no_exception('update_special_slide_subshape_paragraph', 'name')

    def test_update_special_slide_subshape_paragraph_invalid_slide_index(self):
        """Test case for update_special_slide_subshape_paragraph with invalid slide_index
        """
        param_name = self.get_test_value('update_special_slide_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_subshape_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_subshape_paragraph', 'slide_type', 'str')
        param_path = self.get_test_value('update_special_slide_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('update_special_slide_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_special_slide_subshape_paragraph', 'paragraph_index', 'int')
        param_dto = self.get_test_value('update_special_slide_subshape_paragraph', 'dto', 'Paragraph')
        param_password = self.get_test_value('update_special_slide_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_subshape_paragraph', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('update_special_slide_subshape_paragraph', 'slide_index', param_slide_index, 'int')
        self.initialize('update_special_slide_subshape_paragraph', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.update_special_slide_subshape_paragraph(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_subshape_paragraph', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_subshape_paragraph', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('update_special_slide_subshape_paragraph', 'slide_index')

    def test_update_special_slide_subshape_paragraph_invalid_slide_type(self):
        """Test case for update_special_slide_subshape_paragraph with invalid slide_type
        """
        param_name = self.get_test_value('update_special_slide_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_subshape_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_subshape_paragraph', 'slide_type', 'str')
        param_path = self.get_test_value('update_special_slide_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('update_special_slide_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_special_slide_subshape_paragraph', 'paragraph_index', 'int')
        param_dto = self.get_test_value('update_special_slide_subshape_paragraph', 'dto', 'Paragraph')
        param_password = self.get_test_value('update_special_slide_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_subshape_paragraph', 'storage', 'str')
        param_slide_type = self.get_invalid_test_value('update_special_slide_subshape_paragraph', 'slide_type', param_slide_type, 'str')
        self.initialize('update_special_slide_subshape_paragraph', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.update_special_slide_subshape_paragraph(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_subshape_paragraph', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_subshape_paragraph', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('update_special_slide_subshape_paragraph', 'slide_type')

    def test_update_special_slide_subshape_paragraph_invalid_path(self):
        """Test case for update_special_slide_subshape_paragraph with invalid path
        """
        param_name = self.get_test_value('update_special_slide_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_subshape_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_subshape_paragraph', 'slide_type', 'str')
        param_path = self.get_test_value('update_special_slide_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('update_special_slide_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_special_slide_subshape_paragraph', 'paragraph_index', 'int')
        param_dto = self.get_test_value('update_special_slide_subshape_paragraph', 'dto', 'Paragraph')
        param_password = self.get_test_value('update_special_slide_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_subshape_paragraph', 'storage', 'str')
        param_path = self.get_invalid_test_value('update_special_slide_subshape_paragraph', 'path', param_path, 'str')
        self.initialize('update_special_slide_subshape_paragraph', 'path', param_path)
        ok = False
        try:
            self.api.update_special_slide_subshape_paragraph(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_subshape_paragraph', 'path', param_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_subshape_paragraph', 'path', param_path)
        if ok:
            self.assert_no_exception('update_special_slide_subshape_paragraph', 'path')

    def test_update_special_slide_subshape_paragraph_invalid_shape_index(self):
        """Test case for update_special_slide_subshape_paragraph with invalid shape_index
        """
        param_name = self.get_test_value('update_special_slide_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_subshape_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_subshape_paragraph', 'slide_type', 'str')
        param_path = self.get_test_value('update_special_slide_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('update_special_slide_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_special_slide_subshape_paragraph', 'paragraph_index', 'int')
        param_dto = self.get_test_value('update_special_slide_subshape_paragraph', 'dto', 'Paragraph')
        param_password = self.get_test_value('update_special_slide_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_subshape_paragraph', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('update_special_slide_subshape_paragraph', 'shape_index', param_shape_index, 'int')
        self.initialize('update_special_slide_subshape_paragraph', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.update_special_slide_subshape_paragraph(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_subshape_paragraph', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_subshape_paragraph', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('update_special_slide_subshape_paragraph', 'shape_index')

    def test_update_special_slide_subshape_paragraph_invalid_paragraph_index(self):
        """Test case for update_special_slide_subshape_paragraph with invalid paragraph_index
        """
        param_name = self.get_test_value('update_special_slide_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_subshape_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_subshape_paragraph', 'slide_type', 'str')
        param_path = self.get_test_value('update_special_slide_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('update_special_slide_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_special_slide_subshape_paragraph', 'paragraph_index', 'int')
        param_dto = self.get_test_value('update_special_slide_subshape_paragraph', 'dto', 'Paragraph')
        param_password = self.get_test_value('update_special_slide_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_subshape_paragraph', 'storage', 'str')
        param_paragraph_index = self.get_invalid_test_value('update_special_slide_subshape_paragraph', 'paragraph_index', param_paragraph_index, 'int')
        self.initialize('update_special_slide_subshape_paragraph', 'paragraph_index', param_paragraph_index)
        ok = False
        try:
            self.api.update_special_slide_subshape_paragraph(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_subshape_paragraph', 'paragraph_index', param_paragraph_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_subshape_paragraph', 'paragraph_index', param_paragraph_index)
        if ok:
            self.assert_no_exception('update_special_slide_subshape_paragraph', 'paragraph_index')

    def test_update_special_slide_subshape_paragraph_invalid_dto(self):
        """Test case for update_special_slide_subshape_paragraph with invalid dto
        """
        param_name = self.get_test_value('update_special_slide_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_subshape_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_subshape_paragraph', 'slide_type', 'str')
        param_path = self.get_test_value('update_special_slide_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('update_special_slide_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_special_slide_subshape_paragraph', 'paragraph_index', 'int')
        param_dto = self.get_test_value('update_special_slide_subshape_paragraph', 'dto', 'Paragraph')
        param_password = self.get_test_value('update_special_slide_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_subshape_paragraph', 'storage', 'str')
        param_dto = self.get_invalid_test_value('update_special_slide_subshape_paragraph', 'dto', param_dto, 'Paragraph')
        self.initialize('update_special_slide_subshape_paragraph', 'dto', param_dto)
        ok = False
        try:
            self.api.update_special_slide_subshape_paragraph(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_subshape_paragraph', 'dto', param_dto)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_subshape_paragraph', 'dto', param_dto)
        if ok:
            self.assert_no_exception('update_special_slide_subshape_paragraph', 'dto')

    def test_update_special_slide_subshape_paragraph_invalid_password(self):
        """Test case for update_special_slide_subshape_paragraph with invalid password
        """
        param_name = self.get_test_value('update_special_slide_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_subshape_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_subshape_paragraph', 'slide_type', 'str')
        param_path = self.get_test_value('update_special_slide_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('update_special_slide_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_special_slide_subshape_paragraph', 'paragraph_index', 'int')
        param_dto = self.get_test_value('update_special_slide_subshape_paragraph', 'dto', 'Paragraph')
        param_password = self.get_test_value('update_special_slide_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_subshape_paragraph', 'storage', 'str')
        param_password = self.get_invalid_test_value('update_special_slide_subshape_paragraph', 'password', param_password, 'str')
        self.initialize('update_special_slide_subshape_paragraph', 'password', param_password)
        ok = False
        try:
            self.api.update_special_slide_subshape_paragraph(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_subshape_paragraph', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_subshape_paragraph', 'password', param_password)
        if ok:
            self.assert_no_exception('update_special_slide_subshape_paragraph', 'password')

    def test_update_special_slide_subshape_paragraph_invalid_folder(self):
        """Test case for update_special_slide_subshape_paragraph with invalid folder
        """
        param_name = self.get_test_value('update_special_slide_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_subshape_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_subshape_paragraph', 'slide_type', 'str')
        param_path = self.get_test_value('update_special_slide_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('update_special_slide_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_special_slide_subshape_paragraph', 'paragraph_index', 'int')
        param_dto = self.get_test_value('update_special_slide_subshape_paragraph', 'dto', 'Paragraph')
        param_password = self.get_test_value('update_special_slide_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_subshape_paragraph', 'storage', 'str')
        param_folder = self.get_invalid_test_value('update_special_slide_subshape_paragraph', 'folder', param_folder, 'str')
        self.initialize('update_special_slide_subshape_paragraph', 'folder', param_folder)
        ok = False
        try:
            self.api.update_special_slide_subshape_paragraph(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_subshape_paragraph', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_subshape_paragraph', 'folder', param_folder)
        if ok:
            self.assert_no_exception('update_special_slide_subshape_paragraph', 'folder')

    def test_update_special_slide_subshape_paragraph_invalid_storage(self):
        """Test case for update_special_slide_subshape_paragraph with invalid storage
        """
        param_name = self.get_test_value('update_special_slide_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_subshape_paragraph', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_subshape_paragraph', 'slide_type', 'str')
        param_path = self.get_test_value('update_special_slide_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('update_special_slide_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_special_slide_subshape_paragraph', 'paragraph_index', 'int')
        param_dto = self.get_test_value('update_special_slide_subshape_paragraph', 'dto', 'Paragraph')
        param_password = self.get_test_value('update_special_slide_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_subshape_paragraph', 'storage', 'str')
        param_storage = self.get_invalid_test_value('update_special_slide_subshape_paragraph', 'storage', param_storage, 'str')
        self.initialize('update_special_slide_subshape_paragraph', 'storage', param_storage)
        ok = False
        try:
            self.api.update_special_slide_subshape_paragraph(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_subshape_paragraph', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_subshape_paragraph', 'storage', param_storage)
        if ok:
            self.assert_no_exception('update_special_slide_subshape_paragraph', 'storage')

    def test_update_special_slide_subshape_portion(self):
        """Test case for update_special_slide_subshape_portion
        """
        param_name = self.get_test_value('update_special_slide_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_subshape_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_subshape_portion', 'slide_type', 'str')
        param_path = self.get_test_value('update_special_slide_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('update_special_slide_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_special_slide_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('update_special_slide_subshape_portion', 'portion_index', 'int')
        param_dto = self.get_test_value('update_special_slide_subshape_portion', 'dto', 'Portion')
        param_password = self.get_test_value('update_special_slide_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_subshape_portion', 'storage', 'str')
        self.initialize('update_special_slide_subshape_portion', None, None)
        response = self.api.update_special_slide_subshape_portion(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_dto, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_update_special_slide_subshape_portion_invalid_name(self):
        """Test case for update_special_slide_subshape_portion with invalid name
        """
        param_name = self.get_test_value('update_special_slide_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_subshape_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_subshape_portion', 'slide_type', 'str')
        param_path = self.get_test_value('update_special_slide_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('update_special_slide_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_special_slide_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('update_special_slide_subshape_portion', 'portion_index', 'int')
        param_dto = self.get_test_value('update_special_slide_subshape_portion', 'dto', 'Portion')
        param_password = self.get_test_value('update_special_slide_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_subshape_portion', 'storage', 'str')
        param_name = self.get_invalid_test_value('update_special_slide_subshape_portion', 'name', param_name, 'str')
        self.initialize('update_special_slide_subshape_portion', 'name', param_name)
        ok = False
        try:
            self.api.update_special_slide_subshape_portion(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_subshape_portion', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_subshape_portion', 'name', param_name)
        if ok:
            self.assert_no_exception('update_special_slide_subshape_portion', 'name')

    def test_update_special_slide_subshape_portion_invalid_slide_index(self):
        """Test case for update_special_slide_subshape_portion with invalid slide_index
        """
        param_name = self.get_test_value('update_special_slide_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_subshape_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_subshape_portion', 'slide_type', 'str')
        param_path = self.get_test_value('update_special_slide_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('update_special_slide_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_special_slide_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('update_special_slide_subshape_portion', 'portion_index', 'int')
        param_dto = self.get_test_value('update_special_slide_subshape_portion', 'dto', 'Portion')
        param_password = self.get_test_value('update_special_slide_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_subshape_portion', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('update_special_slide_subshape_portion', 'slide_index', param_slide_index, 'int')
        self.initialize('update_special_slide_subshape_portion', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.update_special_slide_subshape_portion(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_subshape_portion', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_subshape_portion', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('update_special_slide_subshape_portion', 'slide_index')

    def test_update_special_slide_subshape_portion_invalid_slide_type(self):
        """Test case for update_special_slide_subshape_portion with invalid slide_type
        """
        param_name = self.get_test_value('update_special_slide_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_subshape_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_subshape_portion', 'slide_type', 'str')
        param_path = self.get_test_value('update_special_slide_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('update_special_slide_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_special_slide_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('update_special_slide_subshape_portion', 'portion_index', 'int')
        param_dto = self.get_test_value('update_special_slide_subshape_portion', 'dto', 'Portion')
        param_password = self.get_test_value('update_special_slide_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_subshape_portion', 'storage', 'str')
        param_slide_type = self.get_invalid_test_value('update_special_slide_subshape_portion', 'slide_type', param_slide_type, 'str')
        self.initialize('update_special_slide_subshape_portion', 'slide_type', param_slide_type)
        ok = False
        try:
            self.api.update_special_slide_subshape_portion(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_subshape_portion', 'slide_type', param_slide_type)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_subshape_portion', 'slide_type', param_slide_type)
        if ok:
            self.assert_no_exception('update_special_slide_subshape_portion', 'slide_type')

    def test_update_special_slide_subshape_portion_invalid_path(self):
        """Test case for update_special_slide_subshape_portion with invalid path
        """
        param_name = self.get_test_value('update_special_slide_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_subshape_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_subshape_portion', 'slide_type', 'str')
        param_path = self.get_test_value('update_special_slide_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('update_special_slide_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_special_slide_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('update_special_slide_subshape_portion', 'portion_index', 'int')
        param_dto = self.get_test_value('update_special_slide_subshape_portion', 'dto', 'Portion')
        param_password = self.get_test_value('update_special_slide_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_subshape_portion', 'storage', 'str')
        param_path = self.get_invalid_test_value('update_special_slide_subshape_portion', 'path', param_path, 'str')
        self.initialize('update_special_slide_subshape_portion', 'path', param_path)
        ok = False
        try:
            self.api.update_special_slide_subshape_portion(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_subshape_portion', 'path', param_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_subshape_portion', 'path', param_path)
        if ok:
            self.assert_no_exception('update_special_slide_subshape_portion', 'path')

    def test_update_special_slide_subshape_portion_invalid_shape_index(self):
        """Test case for update_special_slide_subshape_portion with invalid shape_index
        """
        param_name = self.get_test_value('update_special_slide_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_subshape_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_subshape_portion', 'slide_type', 'str')
        param_path = self.get_test_value('update_special_slide_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('update_special_slide_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_special_slide_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('update_special_slide_subshape_portion', 'portion_index', 'int')
        param_dto = self.get_test_value('update_special_slide_subshape_portion', 'dto', 'Portion')
        param_password = self.get_test_value('update_special_slide_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_subshape_portion', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('update_special_slide_subshape_portion', 'shape_index', param_shape_index, 'int')
        self.initialize('update_special_slide_subshape_portion', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.update_special_slide_subshape_portion(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_subshape_portion', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_subshape_portion', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('update_special_slide_subshape_portion', 'shape_index')

    def test_update_special_slide_subshape_portion_invalid_paragraph_index(self):
        """Test case for update_special_slide_subshape_portion with invalid paragraph_index
        """
        param_name = self.get_test_value('update_special_slide_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_subshape_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_subshape_portion', 'slide_type', 'str')
        param_path = self.get_test_value('update_special_slide_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('update_special_slide_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_special_slide_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('update_special_slide_subshape_portion', 'portion_index', 'int')
        param_dto = self.get_test_value('update_special_slide_subshape_portion', 'dto', 'Portion')
        param_password = self.get_test_value('update_special_slide_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_subshape_portion', 'storage', 'str')
        param_paragraph_index = self.get_invalid_test_value('update_special_slide_subshape_portion', 'paragraph_index', param_paragraph_index, 'int')
        self.initialize('update_special_slide_subshape_portion', 'paragraph_index', param_paragraph_index)
        ok = False
        try:
            self.api.update_special_slide_subshape_portion(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_subshape_portion', 'paragraph_index', param_paragraph_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_subshape_portion', 'paragraph_index', param_paragraph_index)
        if ok:
            self.assert_no_exception('update_special_slide_subshape_portion', 'paragraph_index')

    def test_update_special_slide_subshape_portion_invalid_portion_index(self):
        """Test case for update_special_slide_subshape_portion with invalid portion_index
        """
        param_name = self.get_test_value('update_special_slide_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_subshape_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_subshape_portion', 'slide_type', 'str')
        param_path = self.get_test_value('update_special_slide_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('update_special_slide_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_special_slide_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('update_special_slide_subshape_portion', 'portion_index', 'int')
        param_dto = self.get_test_value('update_special_slide_subshape_portion', 'dto', 'Portion')
        param_password = self.get_test_value('update_special_slide_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_subshape_portion', 'storage', 'str')
        param_portion_index = self.get_invalid_test_value('update_special_slide_subshape_portion', 'portion_index', param_portion_index, 'int')
        self.initialize('update_special_slide_subshape_portion', 'portion_index', param_portion_index)
        ok = False
        try:
            self.api.update_special_slide_subshape_portion(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_subshape_portion', 'portion_index', param_portion_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_subshape_portion', 'portion_index', param_portion_index)
        if ok:
            self.assert_no_exception('update_special_slide_subshape_portion', 'portion_index')

    def test_update_special_slide_subshape_portion_invalid_dto(self):
        """Test case for update_special_slide_subshape_portion with invalid dto
        """
        param_name = self.get_test_value('update_special_slide_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_subshape_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_subshape_portion', 'slide_type', 'str')
        param_path = self.get_test_value('update_special_slide_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('update_special_slide_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_special_slide_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('update_special_slide_subshape_portion', 'portion_index', 'int')
        param_dto = self.get_test_value('update_special_slide_subshape_portion', 'dto', 'Portion')
        param_password = self.get_test_value('update_special_slide_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_subshape_portion', 'storage', 'str')
        param_dto = self.get_invalid_test_value('update_special_slide_subshape_portion', 'dto', param_dto, 'Portion')
        self.initialize('update_special_slide_subshape_portion', 'dto', param_dto)
        ok = False
        try:
            self.api.update_special_slide_subshape_portion(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_subshape_portion', 'dto', param_dto)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_subshape_portion', 'dto', param_dto)
        if ok:
            self.assert_no_exception('update_special_slide_subshape_portion', 'dto')

    def test_update_special_slide_subshape_portion_invalid_password(self):
        """Test case for update_special_slide_subshape_portion with invalid password
        """
        param_name = self.get_test_value('update_special_slide_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_subshape_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_subshape_portion', 'slide_type', 'str')
        param_path = self.get_test_value('update_special_slide_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('update_special_slide_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_special_slide_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('update_special_slide_subshape_portion', 'portion_index', 'int')
        param_dto = self.get_test_value('update_special_slide_subshape_portion', 'dto', 'Portion')
        param_password = self.get_test_value('update_special_slide_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_subshape_portion', 'storage', 'str')
        param_password = self.get_invalid_test_value('update_special_slide_subshape_portion', 'password', param_password, 'str')
        self.initialize('update_special_slide_subshape_portion', 'password', param_password)
        ok = False
        try:
            self.api.update_special_slide_subshape_portion(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_subshape_portion', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_subshape_portion', 'password', param_password)
        if ok:
            self.assert_no_exception('update_special_slide_subshape_portion', 'password')

    def test_update_special_slide_subshape_portion_invalid_folder(self):
        """Test case for update_special_slide_subshape_portion with invalid folder
        """
        param_name = self.get_test_value('update_special_slide_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_subshape_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_subshape_portion', 'slide_type', 'str')
        param_path = self.get_test_value('update_special_slide_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('update_special_slide_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_special_slide_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('update_special_slide_subshape_portion', 'portion_index', 'int')
        param_dto = self.get_test_value('update_special_slide_subshape_portion', 'dto', 'Portion')
        param_password = self.get_test_value('update_special_slide_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_subshape_portion', 'storage', 'str')
        param_folder = self.get_invalid_test_value('update_special_slide_subshape_portion', 'folder', param_folder, 'str')
        self.initialize('update_special_slide_subshape_portion', 'folder', param_folder)
        ok = False
        try:
            self.api.update_special_slide_subshape_portion(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_subshape_portion', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_subshape_portion', 'folder', param_folder)
        if ok:
            self.assert_no_exception('update_special_slide_subshape_portion', 'folder')

    def test_update_special_slide_subshape_portion_invalid_storage(self):
        """Test case for update_special_slide_subshape_portion with invalid storage
        """
        param_name = self.get_test_value('update_special_slide_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('update_special_slide_subshape_portion', 'slide_index', 'int')
        param_slide_type = self.get_test_value('update_special_slide_subshape_portion', 'slide_type', 'str')
        param_path = self.get_test_value('update_special_slide_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('update_special_slide_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_special_slide_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('update_special_slide_subshape_portion', 'portion_index', 'int')
        param_dto = self.get_test_value('update_special_slide_subshape_portion', 'dto', 'Portion')
        param_password = self.get_test_value('update_special_slide_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('update_special_slide_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('update_special_slide_subshape_portion', 'storage', 'str')
        param_storage = self.get_invalid_test_value('update_special_slide_subshape_portion', 'storage', param_storage, 'str')
        self.initialize('update_special_slide_subshape_portion', 'storage', param_storage)
        ok = False
        try:
            self.api.update_special_slide_subshape_portion(param_name, param_slide_index, param_slide_type, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_special_slide_subshape_portion', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_special_slide_subshape_portion', 'storage', param_storage)
        if ok:
            self.assert_no_exception('update_special_slide_subshape_portion', 'storage')

    def test_update_subshape(self):
        """Test case for update_subshape
        """
        param_name = self.get_test_value('update_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('update_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('update_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('update_subshape', 'shape_index', 'int')
        param_dto = self.get_test_value('update_subshape', 'dto', 'ShapeBase')
        param_password = self.get_test_value('update_subshape', 'password', 'str')
        param_folder = self.get_test_value('update_subshape', 'folder', 'str')
        param_storage = self.get_test_value('update_subshape', 'storage', 'str')
        self.initialize('update_subshape', None, None)
        response = self.api.update_subshape(param_name, param_slide_index, param_path, param_shape_index, param_dto, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_update_subshape_invalid_name(self):
        """Test case for update_subshape with invalid name
        """
        param_name = self.get_test_value('update_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('update_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('update_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('update_subshape', 'shape_index', 'int')
        param_dto = self.get_test_value('update_subshape', 'dto', 'ShapeBase')
        param_password = self.get_test_value('update_subshape', 'password', 'str')
        param_folder = self.get_test_value('update_subshape', 'folder', 'str')
        param_storage = self.get_test_value('update_subshape', 'storage', 'str')
        param_name = self.get_invalid_test_value('update_subshape', 'name', param_name, 'str')
        self.initialize('update_subshape', 'name', param_name)
        ok = False
        try:
            self.api.update_subshape(param_name, param_slide_index, param_path, param_shape_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_subshape', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_subshape', 'name', param_name)
        if ok:
            self.assert_no_exception('update_subshape', 'name')

    def test_update_subshape_invalid_slide_index(self):
        """Test case for update_subshape with invalid slide_index
        """
        param_name = self.get_test_value('update_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('update_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('update_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('update_subshape', 'shape_index', 'int')
        param_dto = self.get_test_value('update_subshape', 'dto', 'ShapeBase')
        param_password = self.get_test_value('update_subshape', 'password', 'str')
        param_folder = self.get_test_value('update_subshape', 'folder', 'str')
        param_storage = self.get_test_value('update_subshape', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('update_subshape', 'slide_index', param_slide_index, 'int')
        self.initialize('update_subshape', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.update_subshape(param_name, param_slide_index, param_path, param_shape_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_subshape', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_subshape', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('update_subshape', 'slide_index')

    def test_update_subshape_invalid_path(self):
        """Test case for update_subshape with invalid path
        """
        param_name = self.get_test_value('update_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('update_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('update_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('update_subshape', 'shape_index', 'int')
        param_dto = self.get_test_value('update_subshape', 'dto', 'ShapeBase')
        param_password = self.get_test_value('update_subshape', 'password', 'str')
        param_folder = self.get_test_value('update_subshape', 'folder', 'str')
        param_storage = self.get_test_value('update_subshape', 'storage', 'str')
        param_path = self.get_invalid_test_value('update_subshape', 'path', param_path, 'str')
        self.initialize('update_subshape', 'path', param_path)
        ok = False
        try:
            self.api.update_subshape(param_name, param_slide_index, param_path, param_shape_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_subshape', 'path', param_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_subshape', 'path', param_path)
        if ok:
            self.assert_no_exception('update_subshape', 'path')

    def test_update_subshape_invalid_shape_index(self):
        """Test case for update_subshape with invalid shape_index
        """
        param_name = self.get_test_value('update_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('update_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('update_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('update_subshape', 'shape_index', 'int')
        param_dto = self.get_test_value('update_subshape', 'dto', 'ShapeBase')
        param_password = self.get_test_value('update_subshape', 'password', 'str')
        param_folder = self.get_test_value('update_subshape', 'folder', 'str')
        param_storage = self.get_test_value('update_subshape', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('update_subshape', 'shape_index', param_shape_index, 'int')
        self.initialize('update_subshape', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.update_subshape(param_name, param_slide_index, param_path, param_shape_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_subshape', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_subshape', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('update_subshape', 'shape_index')

    def test_update_subshape_invalid_dto(self):
        """Test case for update_subshape with invalid dto
        """
        param_name = self.get_test_value('update_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('update_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('update_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('update_subshape', 'shape_index', 'int')
        param_dto = self.get_test_value('update_subshape', 'dto', 'ShapeBase')
        param_password = self.get_test_value('update_subshape', 'password', 'str')
        param_folder = self.get_test_value('update_subshape', 'folder', 'str')
        param_storage = self.get_test_value('update_subshape', 'storage', 'str')
        param_dto = self.get_invalid_test_value('update_subshape', 'dto', param_dto, 'ShapeBase')
        self.initialize('update_subshape', 'dto', param_dto)
        ok = False
        try:
            self.api.update_subshape(param_name, param_slide_index, param_path, param_shape_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_subshape', 'dto', param_dto)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_subshape', 'dto', param_dto)
        if ok:
            self.assert_no_exception('update_subshape', 'dto')

    def test_update_subshape_invalid_password(self):
        """Test case for update_subshape with invalid password
        """
        param_name = self.get_test_value('update_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('update_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('update_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('update_subshape', 'shape_index', 'int')
        param_dto = self.get_test_value('update_subshape', 'dto', 'ShapeBase')
        param_password = self.get_test_value('update_subshape', 'password', 'str')
        param_folder = self.get_test_value('update_subshape', 'folder', 'str')
        param_storage = self.get_test_value('update_subshape', 'storage', 'str')
        param_password = self.get_invalid_test_value('update_subshape', 'password', param_password, 'str')
        self.initialize('update_subshape', 'password', param_password)
        ok = False
        try:
            self.api.update_subshape(param_name, param_slide_index, param_path, param_shape_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_subshape', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_subshape', 'password', param_password)
        if ok:
            self.assert_no_exception('update_subshape', 'password')

    def test_update_subshape_invalid_folder(self):
        """Test case for update_subshape with invalid folder
        """
        param_name = self.get_test_value('update_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('update_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('update_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('update_subshape', 'shape_index', 'int')
        param_dto = self.get_test_value('update_subshape', 'dto', 'ShapeBase')
        param_password = self.get_test_value('update_subshape', 'password', 'str')
        param_folder = self.get_test_value('update_subshape', 'folder', 'str')
        param_storage = self.get_test_value('update_subshape', 'storage', 'str')
        param_folder = self.get_invalid_test_value('update_subshape', 'folder', param_folder, 'str')
        self.initialize('update_subshape', 'folder', param_folder)
        ok = False
        try:
            self.api.update_subshape(param_name, param_slide_index, param_path, param_shape_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_subshape', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_subshape', 'folder', param_folder)
        if ok:
            self.assert_no_exception('update_subshape', 'folder')

    def test_update_subshape_invalid_storage(self):
        """Test case for update_subshape with invalid storage
        """
        param_name = self.get_test_value('update_subshape', 'name', 'str')
        param_slide_index = self.get_test_value('update_subshape', 'slide_index', 'int')
        param_path = self.get_test_value('update_subshape', 'path', 'str')
        param_shape_index = self.get_test_value('update_subshape', 'shape_index', 'int')
        param_dto = self.get_test_value('update_subshape', 'dto', 'ShapeBase')
        param_password = self.get_test_value('update_subshape', 'password', 'str')
        param_folder = self.get_test_value('update_subshape', 'folder', 'str')
        param_storage = self.get_test_value('update_subshape', 'storage', 'str')
        param_storage = self.get_invalid_test_value('update_subshape', 'storage', param_storage, 'str')
        self.initialize('update_subshape', 'storage', param_storage)
        ok = False
        try:
            self.api.update_subshape(param_name, param_slide_index, param_path, param_shape_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_subshape', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_subshape', 'storage', param_storage)
        if ok:
            self.assert_no_exception('update_subshape', 'storage')

    def test_update_subshape_paragraph(self):
        """Test case for update_subshape_paragraph
        """
        param_name = self.get_test_value('update_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('update_subshape_paragraph', 'slide_index', 'int')
        param_path = self.get_test_value('update_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('update_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_subshape_paragraph', 'paragraph_index', 'int')
        param_dto = self.get_test_value('update_subshape_paragraph', 'dto', 'Paragraph')
        param_password = self.get_test_value('update_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('update_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('update_subshape_paragraph', 'storage', 'str')
        self.initialize('update_subshape_paragraph', None, None)
        response = self.api.update_subshape_paragraph(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_dto, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_update_subshape_paragraph_invalid_name(self):
        """Test case for update_subshape_paragraph with invalid name
        """
        param_name = self.get_test_value('update_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('update_subshape_paragraph', 'slide_index', 'int')
        param_path = self.get_test_value('update_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('update_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_subshape_paragraph', 'paragraph_index', 'int')
        param_dto = self.get_test_value('update_subshape_paragraph', 'dto', 'Paragraph')
        param_password = self.get_test_value('update_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('update_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('update_subshape_paragraph', 'storage', 'str')
        param_name = self.get_invalid_test_value('update_subshape_paragraph', 'name', param_name, 'str')
        self.initialize('update_subshape_paragraph', 'name', param_name)
        ok = False
        try:
            self.api.update_subshape_paragraph(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_subshape_paragraph', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_subshape_paragraph', 'name', param_name)
        if ok:
            self.assert_no_exception('update_subshape_paragraph', 'name')

    def test_update_subshape_paragraph_invalid_slide_index(self):
        """Test case for update_subshape_paragraph with invalid slide_index
        """
        param_name = self.get_test_value('update_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('update_subshape_paragraph', 'slide_index', 'int')
        param_path = self.get_test_value('update_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('update_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_subshape_paragraph', 'paragraph_index', 'int')
        param_dto = self.get_test_value('update_subshape_paragraph', 'dto', 'Paragraph')
        param_password = self.get_test_value('update_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('update_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('update_subshape_paragraph', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('update_subshape_paragraph', 'slide_index', param_slide_index, 'int')
        self.initialize('update_subshape_paragraph', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.update_subshape_paragraph(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_subshape_paragraph', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_subshape_paragraph', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('update_subshape_paragraph', 'slide_index')

    def test_update_subshape_paragraph_invalid_path(self):
        """Test case for update_subshape_paragraph with invalid path
        """
        param_name = self.get_test_value('update_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('update_subshape_paragraph', 'slide_index', 'int')
        param_path = self.get_test_value('update_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('update_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_subshape_paragraph', 'paragraph_index', 'int')
        param_dto = self.get_test_value('update_subshape_paragraph', 'dto', 'Paragraph')
        param_password = self.get_test_value('update_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('update_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('update_subshape_paragraph', 'storage', 'str')
        param_path = self.get_invalid_test_value('update_subshape_paragraph', 'path', param_path, 'str')
        self.initialize('update_subshape_paragraph', 'path', param_path)
        ok = False
        try:
            self.api.update_subshape_paragraph(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_subshape_paragraph', 'path', param_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_subshape_paragraph', 'path', param_path)
        if ok:
            self.assert_no_exception('update_subshape_paragraph', 'path')

    def test_update_subshape_paragraph_invalid_shape_index(self):
        """Test case for update_subshape_paragraph with invalid shape_index
        """
        param_name = self.get_test_value('update_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('update_subshape_paragraph', 'slide_index', 'int')
        param_path = self.get_test_value('update_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('update_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_subshape_paragraph', 'paragraph_index', 'int')
        param_dto = self.get_test_value('update_subshape_paragraph', 'dto', 'Paragraph')
        param_password = self.get_test_value('update_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('update_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('update_subshape_paragraph', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('update_subshape_paragraph', 'shape_index', param_shape_index, 'int')
        self.initialize('update_subshape_paragraph', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.update_subshape_paragraph(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_subshape_paragraph', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_subshape_paragraph', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('update_subshape_paragraph', 'shape_index')

    def test_update_subshape_paragraph_invalid_paragraph_index(self):
        """Test case for update_subshape_paragraph with invalid paragraph_index
        """
        param_name = self.get_test_value('update_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('update_subshape_paragraph', 'slide_index', 'int')
        param_path = self.get_test_value('update_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('update_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_subshape_paragraph', 'paragraph_index', 'int')
        param_dto = self.get_test_value('update_subshape_paragraph', 'dto', 'Paragraph')
        param_password = self.get_test_value('update_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('update_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('update_subshape_paragraph', 'storage', 'str')
        param_paragraph_index = self.get_invalid_test_value('update_subshape_paragraph', 'paragraph_index', param_paragraph_index, 'int')
        self.initialize('update_subshape_paragraph', 'paragraph_index', param_paragraph_index)
        ok = False
        try:
            self.api.update_subshape_paragraph(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_subshape_paragraph', 'paragraph_index', param_paragraph_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_subshape_paragraph', 'paragraph_index', param_paragraph_index)
        if ok:
            self.assert_no_exception('update_subshape_paragraph', 'paragraph_index')

    def test_update_subshape_paragraph_invalid_dto(self):
        """Test case for update_subshape_paragraph with invalid dto
        """
        param_name = self.get_test_value('update_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('update_subshape_paragraph', 'slide_index', 'int')
        param_path = self.get_test_value('update_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('update_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_subshape_paragraph', 'paragraph_index', 'int')
        param_dto = self.get_test_value('update_subshape_paragraph', 'dto', 'Paragraph')
        param_password = self.get_test_value('update_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('update_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('update_subshape_paragraph', 'storage', 'str')
        param_dto = self.get_invalid_test_value('update_subshape_paragraph', 'dto', param_dto, 'Paragraph')
        self.initialize('update_subshape_paragraph', 'dto', param_dto)
        ok = False
        try:
            self.api.update_subshape_paragraph(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_subshape_paragraph', 'dto', param_dto)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_subshape_paragraph', 'dto', param_dto)
        if ok:
            self.assert_no_exception('update_subshape_paragraph', 'dto')

    def test_update_subshape_paragraph_invalid_password(self):
        """Test case for update_subshape_paragraph with invalid password
        """
        param_name = self.get_test_value('update_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('update_subshape_paragraph', 'slide_index', 'int')
        param_path = self.get_test_value('update_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('update_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_subshape_paragraph', 'paragraph_index', 'int')
        param_dto = self.get_test_value('update_subshape_paragraph', 'dto', 'Paragraph')
        param_password = self.get_test_value('update_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('update_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('update_subshape_paragraph', 'storage', 'str')
        param_password = self.get_invalid_test_value('update_subshape_paragraph', 'password', param_password, 'str')
        self.initialize('update_subshape_paragraph', 'password', param_password)
        ok = False
        try:
            self.api.update_subshape_paragraph(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_subshape_paragraph', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_subshape_paragraph', 'password', param_password)
        if ok:
            self.assert_no_exception('update_subshape_paragraph', 'password')

    def test_update_subshape_paragraph_invalid_folder(self):
        """Test case for update_subshape_paragraph with invalid folder
        """
        param_name = self.get_test_value('update_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('update_subshape_paragraph', 'slide_index', 'int')
        param_path = self.get_test_value('update_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('update_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_subshape_paragraph', 'paragraph_index', 'int')
        param_dto = self.get_test_value('update_subshape_paragraph', 'dto', 'Paragraph')
        param_password = self.get_test_value('update_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('update_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('update_subshape_paragraph', 'storage', 'str')
        param_folder = self.get_invalid_test_value('update_subshape_paragraph', 'folder', param_folder, 'str')
        self.initialize('update_subshape_paragraph', 'folder', param_folder)
        ok = False
        try:
            self.api.update_subshape_paragraph(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_subshape_paragraph', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_subshape_paragraph', 'folder', param_folder)
        if ok:
            self.assert_no_exception('update_subshape_paragraph', 'folder')

    def test_update_subshape_paragraph_invalid_storage(self):
        """Test case for update_subshape_paragraph with invalid storage
        """
        param_name = self.get_test_value('update_subshape_paragraph', 'name', 'str')
        param_slide_index = self.get_test_value('update_subshape_paragraph', 'slide_index', 'int')
        param_path = self.get_test_value('update_subshape_paragraph', 'path', 'str')
        param_shape_index = self.get_test_value('update_subshape_paragraph', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_subshape_paragraph', 'paragraph_index', 'int')
        param_dto = self.get_test_value('update_subshape_paragraph', 'dto', 'Paragraph')
        param_password = self.get_test_value('update_subshape_paragraph', 'password', 'str')
        param_folder = self.get_test_value('update_subshape_paragraph', 'folder', 'str')
        param_storage = self.get_test_value('update_subshape_paragraph', 'storage', 'str')
        param_storage = self.get_invalid_test_value('update_subshape_paragraph', 'storage', param_storage, 'str')
        self.initialize('update_subshape_paragraph', 'storage', param_storage)
        ok = False
        try:
            self.api.update_subshape_paragraph(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_subshape_paragraph', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_subshape_paragraph', 'storage', param_storage)
        if ok:
            self.assert_no_exception('update_subshape_paragraph', 'storage')

    def test_update_subshape_portion(self):
        """Test case for update_subshape_portion
        """
        param_name = self.get_test_value('update_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('update_subshape_portion', 'slide_index', 'int')
        param_path = self.get_test_value('update_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('update_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('update_subshape_portion', 'portion_index', 'int')
        param_dto = self.get_test_value('update_subshape_portion', 'dto', 'Portion')
        param_password = self.get_test_value('update_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('update_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('update_subshape_portion', 'storage', 'str')
        self.initialize('update_subshape_portion', None, None)
        response = self.api.update_subshape_portion(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_dto, param_password, param_folder, param_storage)
        self.assertIsNotNone(response)

    def test_update_subshape_portion_invalid_name(self):
        """Test case for update_subshape_portion with invalid name
        """
        param_name = self.get_test_value('update_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('update_subshape_portion', 'slide_index', 'int')
        param_path = self.get_test_value('update_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('update_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('update_subshape_portion', 'portion_index', 'int')
        param_dto = self.get_test_value('update_subshape_portion', 'dto', 'Portion')
        param_password = self.get_test_value('update_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('update_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('update_subshape_portion', 'storage', 'str')
        param_name = self.get_invalid_test_value('update_subshape_portion', 'name', param_name, 'str')
        self.initialize('update_subshape_portion', 'name', param_name)
        ok = False
        try:
            self.api.update_subshape_portion(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_subshape_portion', 'name', param_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_subshape_portion', 'name', param_name)
        if ok:
            self.assert_no_exception('update_subshape_portion', 'name')

    def test_update_subshape_portion_invalid_slide_index(self):
        """Test case for update_subshape_portion with invalid slide_index
        """
        param_name = self.get_test_value('update_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('update_subshape_portion', 'slide_index', 'int')
        param_path = self.get_test_value('update_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('update_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('update_subshape_portion', 'portion_index', 'int')
        param_dto = self.get_test_value('update_subshape_portion', 'dto', 'Portion')
        param_password = self.get_test_value('update_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('update_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('update_subshape_portion', 'storage', 'str')
        param_slide_index = self.get_invalid_test_value('update_subshape_portion', 'slide_index', param_slide_index, 'int')
        self.initialize('update_subshape_portion', 'slide_index', param_slide_index)
        ok = False
        try:
            self.api.update_subshape_portion(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_subshape_portion', 'slide_index', param_slide_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_subshape_portion', 'slide_index', param_slide_index)
        if ok:
            self.assert_no_exception('update_subshape_portion', 'slide_index')

    def test_update_subshape_portion_invalid_path(self):
        """Test case for update_subshape_portion with invalid path
        """
        param_name = self.get_test_value('update_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('update_subshape_portion', 'slide_index', 'int')
        param_path = self.get_test_value('update_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('update_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('update_subshape_portion', 'portion_index', 'int')
        param_dto = self.get_test_value('update_subshape_portion', 'dto', 'Portion')
        param_password = self.get_test_value('update_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('update_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('update_subshape_portion', 'storage', 'str')
        param_path = self.get_invalid_test_value('update_subshape_portion', 'path', param_path, 'str')
        self.initialize('update_subshape_portion', 'path', param_path)
        ok = False
        try:
            self.api.update_subshape_portion(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_subshape_portion', 'path', param_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_subshape_portion', 'path', param_path)
        if ok:
            self.assert_no_exception('update_subshape_portion', 'path')

    def test_update_subshape_portion_invalid_shape_index(self):
        """Test case for update_subshape_portion with invalid shape_index
        """
        param_name = self.get_test_value('update_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('update_subshape_portion', 'slide_index', 'int')
        param_path = self.get_test_value('update_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('update_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('update_subshape_portion', 'portion_index', 'int')
        param_dto = self.get_test_value('update_subshape_portion', 'dto', 'Portion')
        param_password = self.get_test_value('update_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('update_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('update_subshape_portion', 'storage', 'str')
        param_shape_index = self.get_invalid_test_value('update_subshape_portion', 'shape_index', param_shape_index, 'int')
        self.initialize('update_subshape_portion', 'shape_index', param_shape_index)
        ok = False
        try:
            self.api.update_subshape_portion(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_subshape_portion', 'shape_index', param_shape_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_subshape_portion', 'shape_index', param_shape_index)
        if ok:
            self.assert_no_exception('update_subshape_portion', 'shape_index')

    def test_update_subshape_portion_invalid_paragraph_index(self):
        """Test case for update_subshape_portion with invalid paragraph_index
        """
        param_name = self.get_test_value('update_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('update_subshape_portion', 'slide_index', 'int')
        param_path = self.get_test_value('update_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('update_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('update_subshape_portion', 'portion_index', 'int')
        param_dto = self.get_test_value('update_subshape_portion', 'dto', 'Portion')
        param_password = self.get_test_value('update_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('update_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('update_subshape_portion', 'storage', 'str')
        param_paragraph_index = self.get_invalid_test_value('update_subshape_portion', 'paragraph_index', param_paragraph_index, 'int')
        self.initialize('update_subshape_portion', 'paragraph_index', param_paragraph_index)
        ok = False
        try:
            self.api.update_subshape_portion(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_subshape_portion', 'paragraph_index', param_paragraph_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_subshape_portion', 'paragraph_index', param_paragraph_index)
        if ok:
            self.assert_no_exception('update_subshape_portion', 'paragraph_index')

    def test_update_subshape_portion_invalid_portion_index(self):
        """Test case for update_subshape_portion with invalid portion_index
        """
        param_name = self.get_test_value('update_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('update_subshape_portion', 'slide_index', 'int')
        param_path = self.get_test_value('update_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('update_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('update_subshape_portion', 'portion_index', 'int')
        param_dto = self.get_test_value('update_subshape_portion', 'dto', 'Portion')
        param_password = self.get_test_value('update_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('update_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('update_subshape_portion', 'storage', 'str')
        param_portion_index = self.get_invalid_test_value('update_subshape_portion', 'portion_index', param_portion_index, 'int')
        self.initialize('update_subshape_portion', 'portion_index', param_portion_index)
        ok = False
        try:
            self.api.update_subshape_portion(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_subshape_portion', 'portion_index', param_portion_index)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_subshape_portion', 'portion_index', param_portion_index)
        if ok:
            self.assert_no_exception('update_subshape_portion', 'portion_index')

    def test_update_subshape_portion_invalid_dto(self):
        """Test case for update_subshape_portion with invalid dto
        """
        param_name = self.get_test_value('update_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('update_subshape_portion', 'slide_index', 'int')
        param_path = self.get_test_value('update_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('update_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('update_subshape_portion', 'portion_index', 'int')
        param_dto = self.get_test_value('update_subshape_portion', 'dto', 'Portion')
        param_password = self.get_test_value('update_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('update_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('update_subshape_portion', 'storage', 'str')
        param_dto = self.get_invalid_test_value('update_subshape_portion', 'dto', param_dto, 'Portion')
        self.initialize('update_subshape_portion', 'dto', param_dto)
        ok = False
        try:
            self.api.update_subshape_portion(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_subshape_portion', 'dto', param_dto)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_subshape_portion', 'dto', param_dto)
        if ok:
            self.assert_no_exception('update_subshape_portion', 'dto')

    def test_update_subshape_portion_invalid_password(self):
        """Test case for update_subshape_portion with invalid password
        """
        param_name = self.get_test_value('update_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('update_subshape_portion', 'slide_index', 'int')
        param_path = self.get_test_value('update_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('update_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('update_subshape_portion', 'portion_index', 'int')
        param_dto = self.get_test_value('update_subshape_portion', 'dto', 'Portion')
        param_password = self.get_test_value('update_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('update_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('update_subshape_portion', 'storage', 'str')
        param_password = self.get_invalid_test_value('update_subshape_portion', 'password', param_password, 'str')
        self.initialize('update_subshape_portion', 'password', param_password)
        ok = False
        try:
            self.api.update_subshape_portion(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_subshape_portion', 'password', param_password)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_subshape_portion', 'password', param_password)
        if ok:
            self.assert_no_exception('update_subshape_portion', 'password')

    def test_update_subshape_portion_invalid_folder(self):
        """Test case for update_subshape_portion with invalid folder
        """
        param_name = self.get_test_value('update_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('update_subshape_portion', 'slide_index', 'int')
        param_path = self.get_test_value('update_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('update_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('update_subshape_portion', 'portion_index', 'int')
        param_dto = self.get_test_value('update_subshape_portion', 'dto', 'Portion')
        param_password = self.get_test_value('update_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('update_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('update_subshape_portion', 'storage', 'str')
        param_folder = self.get_invalid_test_value('update_subshape_portion', 'folder', param_folder, 'str')
        self.initialize('update_subshape_portion', 'folder', param_folder)
        ok = False
        try:
            self.api.update_subshape_portion(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_subshape_portion', 'folder', param_folder)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_subshape_portion', 'folder', param_folder)
        if ok:
            self.assert_no_exception('update_subshape_portion', 'folder')

    def test_update_subshape_portion_invalid_storage(self):
        """Test case for update_subshape_portion with invalid storage
        """
        param_name = self.get_test_value('update_subshape_portion', 'name', 'str')
        param_slide_index = self.get_test_value('update_subshape_portion', 'slide_index', 'int')
        param_path = self.get_test_value('update_subshape_portion', 'path', 'str')
        param_shape_index = self.get_test_value('update_subshape_portion', 'shape_index', 'int')
        param_paragraph_index = self.get_test_value('update_subshape_portion', 'paragraph_index', 'int')
        param_portion_index = self.get_test_value('update_subshape_portion', 'portion_index', 'int')
        param_dto = self.get_test_value('update_subshape_portion', 'dto', 'Portion')
        param_password = self.get_test_value('update_subshape_portion', 'password', 'str')
        param_folder = self.get_test_value('update_subshape_portion', 'folder', 'str')
        param_storage = self.get_test_value('update_subshape_portion', 'storage', 'str')
        param_storage = self.get_invalid_test_value('update_subshape_portion', 'storage', param_storage, 'str')
        self.initialize('update_subshape_portion', 'storage', param_storage)
        ok = False
        try:
            self.api.update_subshape_portion(param_name, param_slide_index, param_path, param_shape_index, param_paragraph_index, param_portion_index, param_dto, param_password, param_folder, param_storage)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'update_subshape_portion', 'storage', param_storage)
        except ValueError as ex:
            self.assert_value_error(ex, 'update_subshape_portion', 'storage', param_storage)
        if ok:
            self.assert_no_exception('update_subshape_portion', 'storage')

    def test_upload_file(self):
        """Test case for upload_file
        """
        param_path = self.get_test_value('upload_file', 'path', 'str')
        param_file = self.get_test_value('upload_file', 'file', 'file')
        param_storage_name = self.get_test_value('upload_file', 'storage_name', 'str')
        self.initialize('upload_file', None, None)
        response = self.api.upload_file(param_path, param_file, param_storage_name)
        self.assertIsNotNone(response)

    def test_upload_file_invalid_path(self):
        """Test case for upload_file with invalid path
        """
        param_path = self.get_test_value('upload_file', 'path', 'str')
        param_file = self.get_test_value('upload_file', 'file', 'file')
        param_storage_name = self.get_test_value('upload_file', 'storage_name', 'str')
        param_path = self.get_invalid_test_value('upload_file', 'path', param_path, 'str')
        self.initialize('upload_file', 'path', param_path)
        ok = False
        try:
            self.api.upload_file(param_path, param_file, param_storage_name)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'upload_file', 'path', param_path)
        except ValueError as ex:
            self.assert_value_error(ex, 'upload_file', 'path', param_path)
        if ok:
            self.assert_no_exception('upload_file', 'path')

    def test_upload_file_invalid_file(self):
        """Test case for upload_file with invalid file
        """
        param_path = self.get_test_value('upload_file', 'path', 'str')
        param_file = self.get_test_value('upload_file', 'file', 'file')
        param_storage_name = self.get_test_value('upload_file', 'storage_name', 'str')
        param_file = self.get_invalid_test_value('upload_file', 'file', param_file, 'file')
        self.initialize('upload_file', 'file', param_file)
        ok = False
        try:
            self.api.upload_file(param_path, param_file, param_storage_name)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'upload_file', 'file', param_file)
        except ValueError as ex:
            self.assert_value_error(ex, 'upload_file', 'file', param_file)
        if ok:
            self.assert_no_exception('upload_file', 'file')

    def test_upload_file_invalid_storage_name(self):
        """Test case for upload_file with invalid storage_name
        """
        param_path = self.get_test_value('upload_file', 'path', 'str')
        param_file = self.get_test_value('upload_file', 'file', 'file')
        param_storage_name = self.get_test_value('upload_file', 'storage_name', 'str')
        param_storage_name = self.get_invalid_test_value('upload_file', 'storage_name', param_storage_name, 'str')
        self.initialize('upload_file', 'storage_name', param_storage_name)
        ok = False
        try:
            self.api.upload_file(param_path, param_file, param_storage_name)
            ok = True
        except ApiException as ex:
            self.assert_exception(ex, 'upload_file', 'storage_name', param_storage_name)
        except ValueError as ex:
            self.assert_value_error(ex, 'upload_file', 'storage_name', param_storage_name)
        if ok:
            self.assert_no_exception('upload_file', 'storage_name')


if __name__ == '__main__':
    unittest.main()
